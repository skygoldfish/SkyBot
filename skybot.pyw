# -*- coding: utf-8 -*-

프로그램정보 = [
    ['프로그램명','SkyBot'],
    ['Version','1.0'],
    ['2018-08-07','프로그램 개발시작'],
    ['2020-12-05','SkyBot v1.0 배포'],
    ['2021-01-04','멀티프로세스 적용'],
    ['2022-01-02','python 3.8.6 적용']
]

# 기본 모듈
import sys, os
import types
from functools import wraps
import traceback
import atexit
from datetime import *
import time
import ntplib
import timeit
from pyqtgraph.functions import mkPen
import win32com.client
import pythoncom
from numpy import nan, NaN
from pandas import DataFrame, Series

import ctypes
import webbrowser
import numpy as np
import pandas as pd
import logging

import math
import copy
import locale
import collections
import operator
import platform

from enum import Enum
from bisect import bisect
from mss import mss
from collections import Counter
from PIL import Image
from configparser import ConfigParser
import pyautogui
#from playsound import playsound
import winsound
import socket
import talib
from talib import MA_Type
#import ta
#from tapy import Indicators
import functools
import shutil

#import pyttsx3
#from gtts import gTTS
#import sqlite3
#import pythoncom
#import inspect
#import pickle
#import uuid
#import base64
#import subprocess
#import pandas.io.sql as pdsql
#import win32gui
#import logging.handlers
#from subprocess import Popen
#from PIL import ImageGrab

# GUI 모듈
from PyQt5 import QtCore, QtGui, QtWidgets, QAxContainer, uic
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtTest import *
import pyqtgraph as pg
import qdarkstyle
#from darktheme.widget_template import DarkPalette

#import qtmodern.styles
#import qtmodern.windows

# 이베스트 모듈
from XASessions import *
from XAQueries import *
from Utils import *
#from FileWatcher import *       
#from xing_tick_writer import * 

print('*************************************************************************************************************************')
print('전역변수 로딩시작...')
print('*************************************************************************************************************************')
print('\r')

sys.setrecursionlimit(10 ** 6)

# 4k 해상도 대응
QtWidgets.QApplication.setAttribute(QtCore.Qt.AA_EnableHighDpiScaling, True) #enable highdpi scaling
QtWidgets.QApplication.setAttribute(QtCore.Qt.AA_UseHighDpiPixmaps, True) #use highdpi icons

pd.set_option('display.max_columns', None)
pd.set_option('display.expand_frame_repr', False)
#pd.set_option('max_colwidth', None)
pd.set_option('max_colwidth', 100)

DATABASE = 'Database\\skybot.sqlite'
log_filename = 'Log\\SkyBot.log'

locale.setlocale(locale.LC_ALL, '') 
np.warnings.filterwarnings('ignore')

pyqt_version = QtCore.PYQT_VERSION_STR
print('pyqt_version =', pyqt_version)

os_type = platform.platform()
print('\r')
print('OS 유형 :', os_type)

# 업종코드
KOSPI = '001'
KOSPI200 = '101'
KOSDAQ = '301'
OPT_CALL = '700'
OPT_PUT = '800'
FUTURES = '900'
CME = '950'

SAMSUNG = '005930'
HYUNDAI = '005380'
Celltrion = '068270'
MOBIS = '012330'
NAVER = '035420'

SAMOFUND = "0000"
STOCK = "0001"
BOHEOM = "0002"
TOOSIN = "0003"
BANK = "0004"
JONGGEUM = "0005"
GIGEUM = "0006"
GITA = "0007"
RETAIL = "0008"
FOREIGN1 = "0009"
FOREIGN2 = "0010"
NATION = "0011"
FOREIGNER = "0017"
INSTITUTIONAL = "0018"
NONAME = "9999"

flag_internet_connection_broken = False
flag_service_provider_broken = False
flag_broken_capture = False

flag_t8433_response_ok = False

all_screens = None

스크린번호 = 0
screen_info = None

콜_등가_등락율 = 0
풋_등가_등락율 = 0
콜_등가_시가등락율 = 0
풋_등가_시가등락율 = 0

drate_scale_factor = 1
flag_cm_drate_scale_factor_set = False
flag_nm_drate_scale_factor_set = False

flag_nm_oloh_direction_call_set = False
flag_nm_oloh_direction_put_set = False

call_scroll_depth = 19
put_scroll_depth = 30

근월물_선물_전저 = 0
근월물_선물_전고 = 0
근월물_선물_종가 = 0
근월물_선물_피봇 = 0
근월물_선물_시가 = 0

근월물_선물_저가 = 0

근월물_선물_현재가 = 0
근월물_선물_과거가 = 0
근월물_선물_시가대비 = 0
근월물_선물_종가대비 = 0
근월물_선물_종가대비_등락율 = 0
근월물_선물_시가등락율 = 0
근월물_선물_시가대비_등락율 = 0

kp200_시가등락율 = 0

근월물_선물_고가 = 0
근월물_선물_진폭 = 0

차월물_선물_전저 = 0
차월물_선물_전고 = 0
차월물_선물_종가 = 0
차월물_선물_피봇 = 0
차월물_선물_시가 = 0

차월물_선물_저가 = 0
차월물_선물_현재가 = 0
차월물_선물_고가 = 0
차월물_선물_진폭 = 0

차월물_선물_시가대비 = 0
차월물_선물_종가대비 = 0
차월물_선물_종가대비_등락율 = 0
차월물_선물_시가등락율 = 0
차월물_선물_시가대비_등락율 = 0

DOW_기준_예상시가 = 0
SP500_기준_예상시가 = 0

SP500_전저 = 0
SP500_전고 = 0
SP500_종가 = 0
SP500_피봇 = 0
SP500_시가 = 0

SP500_저가 = 0

SP500_현재가 = 0
SP500_과거가 = 0
SP500_대비 = 0
SP500_전일대비 = 0
SP500_종가대비 = 0
SP500_시가대비 = 0
SP500_시가_등락율 = 0
SP500_시가대비_등락율 = 0
SP500_등락율 = 0

SP500_고가 = 0
SP500_진폭 = 0
SP500_진폭_틱 = 0

DOW_전저 = 0
DOW_전고 = 0
DOW_종가 = 0
DOW_피봇 = 0
DOW_시가 = 0

DOW_저가 = 0

DOW_현재가 = 0
DOW_과거가 = 0
DOW_대비 = 0
DOW_전일대비 = 0
DOW_종가대비 = 0
DOW_시가대비 = 0
DOW_등락율 = 0

DOW_고가 = 0
DOW_진폭 = 0
DOW_진폭_틱 = 0

NASDAQ_전저 = 0
NASDAQ_전고 = 0
NASDAQ_종가 = 0
NASDAQ_피봇 = 0
NASDAQ_시가 = 0

NASDAQ_저가 = 0

NASDAQ_현재가 = 0
NASDAQ_과거가 = 0
NASDAQ_대비 = 0
NASDAQ_전일대비 = 0
NASDAQ_종가대비 = 0
NASDAQ_시가대비 = 0
NASDAQ_등락율 = 0

NASDAQ_고가 = 0
NASDAQ_진폭 = 0
NASDAQ_진폭_틱 = 0

HANGSENG_전저 = 0
HANGSENG_전고 = 0
HANGSENG_종가 = 0
HANGSENG_피봇 = 0
HANGSENG_시가 = 0

HANGSENG_저가 = 0

HANGSENG_현재가 = 0
HANGSENG_과거가 = 0
HANGSENG_대비 = 0
HANGSENG_전일대비 = 0
HANGSENG_종가대비 = 0
HANGSENG_시가대비 = 0
HANGSENG_등락율 = 0

HANGSENG_고가 = 0
HANGSENG_진폭 = 0
HANGSENG_진폭_틱 = 0

WTI_전저 = 0
WTI_전고 = 0
WTI_종가 = 0
WTI_피봇 = 0
WTI_시가 = 0

WTI_저가 = 0

WTI_현재가 = 0
WTI_과거가 = 0
WTI_대비 = 0
WTI_전일대비 = 0
WTI_종가대비 = 0
WTI_시가대비 = 0
WTI_등락율 = 0

WTI_고가 = 0
WTI_진폭 = 0
WTI_진폭_틱 = 0

GOLD_전저 = 0
GOLD_전고 = 0
GOLD_종가 = 0
GOLD_피봇 = 0
GOLD_시가 = 0

GOLD_저가 = 0

GOLD_현재가 = 0
GOLD_과거가 = 0
GOLD_대비 = 0
GOLD_전일대비 = 0
GOLD_종가대비 = 0
GOLD_시가대비 = 0
GOLD_등락율 = 0

GOLD_고가 = 0
GOLD_진폭 = 0
GOLD_진폭_틱 = 0

EURO_전저 = 0
EURO_전고 = 0
EURO_종가 = 0
EURO_피봇 = 0
EURO_시가 = 0

EURO_저가 = 0

EURO_현재가 = 0
EURO_과거가 = 0
EURO_대비 = 0
EURO_전일대비 = 0
EURO_종가대비 = 0
EURO_시가대비 = 0
EURO_등락율 = 0

EURO_고가 = 0
EURO_진폭 = 0
EURO_진폭_틱 = 0

YEN_전저 = 0
YEN_전고 = 0
YEN_종가 = 0
YEN_피봇 = 0
YEN_시가 = 0

YEN_저가 = 0

YEN_현재가 = 0
YEN_과거가 = 0
YEN_대비 = 0
YEN_전일대비 = 0
YEN_종가대비 = 0
YEN_시가대비 = 0
YEN_등락율 = 0

YEN_고가 = 0
YEN_진폭 = 0
YEN_진폭_틱 = 0

ADI_전저 = 0
ADI_전고 = 0
ADI_종가 = 0
ADI_피봇 = 0
ADI_시가 = 0

ADI_저가 = 0

ADI_현재가 = 0
ADI_과거가 = 0
ADI_대비 = 0
ADI_전일대비 = 0
ADI_종가대비 = 0
ADI_시가대비 = 0
ADI_등락율 = 0

ADI_고가 = 0
ADI_진폭 = 0
ADI_진폭_틱 = 0

FUT_당일종가 = 0

SP500_당일종가 = 0
DOW_당일종가 = 0
NASDAQ_당일종가 = 0
HANGSENG_당일종가 = 0
WTI_당일종가 = 0
GOLD_당일종가 = 0
EURO_당일종가 = 0
YEN_당일종가 = 0
ADI_당일종가 = 0

FILE_HIGH_LOW_LIST = []

SCORE_BOARD_UPDATE_INTERVAL = 2

#####################################################################################################################################################################
# Configuration Parser
parser = ConfigParser()
parser.read('skybot.ini', encoding='UTF-8')

# [0]. << Logging Level >>
Logging_Level = parser.getint('Logging Level', 'Log Level')

# [1]. << Server Type >>
REAL_SERVER = parser.getboolean('Server Type', 'Real Server')
NTP_Server = parser.get('Server Type', 'NTP Server')

# [2]. << Month Info >>
KSE_START_HOUR = parser.getint('Month Info', 'KSE Start Hour')
SUMMER_TIME = parser.getboolean('Month Info', 'Summer Time')
CURRENT_MONTH = parser.get('Month Info', 'Current Month')
MONTH_FIRSTDAY = parser.get('Month Info', 'First Day of the Current Month')

# [3]. << Target Month Select : current month = 1, next month = 2 >>
TARGET_MONTH = parser.get('Target Month Select', 'Target Month Select')

# [4]. << Window Style >>
DARK_STYLESHEET = parser.getboolean('Window Style', 'Dark Style')

# [5]. << User Switch = 'ON or OFF' >>
MULTIPROCESS = parser.getboolean('User Switch', 'Multiprocess')
CALL_ATM_DRATE_REFERENCE = parser.getboolean('User Switch', 'Call ATM Reference of Plot Drate')
OPTION_PERIODIC_UPDATE = parser.getboolean('User Switch', 'Option Table Periodic Update')
TELEGRAM_SERVICE = parser.getboolean('User Switch', 'Telegram service')
MANGI_YAGAN = parser.getboolean('User Switch', 'Mangi Yagan')
AUTO_START = parser.getboolean('User Switch', 'Auto Start')
ResizeRowsToContents = parser.getboolean('User Switch', 'Resize Rows To Contents')
CROSS_HAIR_LINE = parser.getboolean('User Switch', 'Cross Hair Line')
PLOT_SYNC_MODE = parser.getboolean('User Switch', 'Plot Sync Mode')
CSV_FILE = parser.getboolean('User Switch', 'CSV Data File')
TTS = parser.getboolean('User Switch', 'Text To Speach')
SEARCH_MOVING_NODE = parser.getboolean('User Switch', 'Search Moving Node')
UI_HIDE = parser.getboolean('User Switch', 'UI Hide')
OPTION_SIZE = parser.getboolean('User Switch', 'Option Total Size')
MP_FUT_HIGH_SPEED_MODE = parser.getboolean('User Switch', 'MP Fut High Speed Mode')
MP_OPTION_HIGH_SPEED_MODE = parser.getboolean('User Switch', 'MP Option High Speed Mode')
MP_CME_HIGH_SPEED_MODE = parser.getboolean('User Switch', 'MP CME High Speed Mode')

# [6]. << Real Time Request Item Switch = 'ON or OFF' >>
FUTURES_REQUEST = parser.getboolean('RealTime Request Item Switch', 'Domestic Futures Request')
OPTION_TICK_REQUEST = parser.getboolean('RealTime Request Item Switch', 'Option Tick Request')
OPTION_QUOTE_REQUEST = parser.getboolean('RealTime Request Item Switch', 'Option Quote Request')
OVC_REQUEST = parser.getboolean('RealTime Request Item Switch', 'Foreign Futures Request')
CM_FUT_PRICE = parser.getboolean('RealTime Request Item Switch', 'Current Month Futures Price')
CM_FUT_QUOTE = parser.getboolean('RealTime Request Item Switch', 'Current Month Futures Quote')
CM_OPT_PRICE = parser.getboolean('RealTime Request Item Switch', 'Current Month Option Price')
CM_OPT_PRICE1 = parser.getboolean('RealTime Request Item Switch', 'Current Month Option Price1')
CM_OPT_QUOTE = parser.getboolean('RealTime Request Item Switch', 'Current Month Option Quote')
CM_OPT_QUOTE1 = parser.getboolean('RealTime Request Item Switch', 'Current Month Option Quote1')
NM_FUT_PRICE = parser.getboolean('RealTime Request Item Switch', 'Next Month Futures Price')
NM_FUT_QUOTE = parser.getboolean('RealTime Request Item Switch', 'Next Month Futures Quote')
NM_OPT_PRICE = parser.getboolean('RealTime Request Item Switch', 'Next Month Option Price')
NM_OPT_PRICE1 = parser.getboolean('RealTime Request Item Switch', 'Next Month Option Price1')
NM_OPT_QUOTE = parser.getboolean('RealTime Request Item Switch', 'Next Month Option Quote')
NM_OPT_QUOTE1 = parser.getboolean('RealTime Request Item Switch', 'Next Month Option Quote1')
KOSPI_KOSDAQ = parser.getboolean('RealTime Request Item Switch', 'KOSPI & KOSDAQ')
SUPPLY_DEMAND = parser.getboolean('RealTime Request Item Switch', 'Supply & Demand')

SP500_CHK = parser.getboolean('RealTime Request Item Switch', 'S&P 500')
DOW_CHK = parser.getboolean('RealTime Request Item Switch', 'DOW')
NASDAQ_CHK = parser.getboolean('RealTime Request Item Switch', 'NASDAQ')
HANGSENG_CHK = parser.getboolean('RealTime Request Item Switch', 'HANGSENG')
WTI_CHK = parser.getboolean('RealTime Request Item Switch', 'WTI OIL')
GOLD_CHK = parser.getboolean('RealTime Request Item Switch', 'GOLD')
EURO_CHK = parser.getboolean('RealTime Request Item Switch', 'EUROFX')
YEN_CHK = parser.getboolean('RealTime Request Item Switch', 'YEN')
ADI_CHK = parser.getboolean('RealTime Request Item Switch', 'ADI')
NEWS_CHK = parser.getboolean('RealTime Request Item Switch', 'NEWS')

# [7]. << Moving Average Type >>
MA_TYPE = parser.getint('Moving Average Type', 'MA Type')

# [8]. << Initial Value >>
TIME_TOLERANCE = parser.getint('Initial Value', 'RealTime Tolerance(sec)')
MP_SEND_INTERVAL = parser.getint('Initial Value', 'MP Send Interval')
CALL_ITM_REQUEST_NUMBER = parser.getint('Initial Value', 'Number of Call ITM Request')
CALL_OTM_REQUEST_NUMBER = parser.getint('Initial Value', 'Number of Call OTM Request')
PUT_ITM_REQUEST_NUMBER = parser.getint('Initial Value', 'Number of Put ITM Request')
PUT_OTM_REQUEST_NUMBER = parser.getint('Initial Value', 'Number of Put OTM Request')
OPTION_PAIRS_QUOTE_REQUEST_NUMBER = parser.getint('Initial Value', 'Number of Option Pairs Quote Request')
HL_Depth = parser.getint('Initial Value', 'HL List Depth')
NightTime_PreStart_Hour = parser.getint('Initial Value', 'NightTime Pre-Start Hour')
ActvalCount = parser.getint('Initial Value', 'Actval Count of the Option Pairs')
OTM_SEARCH_START_VAL = parser.getfloat('Initial Value', 'OTM Search Start Value')
MY_COREVAL = parser.getfloat('Initial Value', 'My Coreval')
ASYM_RATIO = parser.getfloat('Initial Value', 'Asymmetric Market Ratio')
ONEWAY_RATIO = parser.getfloat('Initial Value', 'OneWay Market Ratio')
GOLDEN_RATIO = parser.getfloat('Initial Value', 'Golden Ratio')
SEARCH_MOVING_NODE_START_VALUE = parser.getfloat('Initial Value', 'Search Moving Node Start Value')
SEARCH_MOVING_NODE_END_VALUE = parser.getfloat('Initial Value', 'Search Moving Node End Value')
CROSS_COLOR_INTERVAL = parser.getint('Initial Value', 'Cross Coloring Interval(minute)')
MAIN_UPDATE_INTERVAL = parser.getint('Initial Value', 'Main Update Interval(msec)')
CHART_UPDATE_INTERVAL = parser.getint('Initial Value', 'Chart Update Interval(msec)')
SCORE_BOARD_UPDATE_INTERVAL = parser.getint('Initial Value', 'Score Board Update Interval(sec)')
SECOND_DISPLAY_X_POSITION = parser.getint('Initial Value', 'X Position of the Second Display')
SECOND_DISPLAY_Y_POSITION = parser.getint('Initial Value', 'Y Position of the Second Display')
UNDER_CALL_LIMIT_VAL = parser.getfloat('Initial Value', 'Under Call Limit Value')
OVER_CALL_LIMIT_VAL = parser.getfloat('Initial Value', 'Over Call Limit Value')

# [9]. << Code of the Foreign Futures (H/M/U/Z) >>
SP500 = parser.get('Code of the Foreign Futures', 'S&P 500')
DOW = parser.get('Code of the Foreign Futures', 'DOW')
NASDAQ = parser.get('Code of the Foreign Futures', 'NASDAQ')
HANGSENG = parser.get('Code of the Foreign Futures', 'HANGSENG')
WTI = parser.get('Code of the Foreign Futures', 'WTI')
GOLD = parser.get('Code of the Foreign Futures', 'GOLD')
EURO = parser.get('Code of the Foreign Futures', 'EUROFX')
YEN = parser.get('Code of the Foreign Futures', 'YEN')
ADI = parser.get('Code of the Foreign Futures', 'ADI')

# [10]. << Telegram >>
TELEGRAM_START_TIME = parser.getint('Telegram', 'Telegram polling start time(minute) after service')
TELEGRAM_POLLING_INTERVAL = parser.getint('Telegram', 'Telegram polling interval(second)')
TELEGRAM_SEND_INTERVAL = parser.getint('Telegram', 'Telegram send interval(second)')

# [11]. << Rules >>
ONEWAY_THRESHOLD = parser.getint('Rules', 'Threshold of the institutional party supply & demand')
#####################################################################################################################################################################

if int(CURRENT_MONTH[4:6]) == 11:
    NEXT_MONTH = CURRENT_MONTH[0:4] + '12'
    MONTH_AFTER_NEXT = repr(int(CURRENT_MONTH[0:4]) + 1) + '01'
elif int(CURRENT_MONTH[4:6]) == 12:
    NEXT_MONTH = repr(int(CURRENT_MONTH[0:4]) + 1) + '01'
    MONTH_AFTER_NEXT = repr(int(CURRENT_MONTH[0:4]) + 1) + '02'
else:
    NEXT_MONTH = repr(int(CURRENT_MONTH) + 1)
    MONTH_AFTER_NEXT = repr(int(CURRENT_MONTH) + 2)

dt = datetime.datetime.now()        
nowDate = dt.strftime('%Y-%m-%d')
current_txt = dt.strftime('%H:%M:%S')

today = date.today()
print('<<today>> =', today)
now_Month = today.strftime('%Y%m')
today_txt = today.strftime('%Y%m%d')
today_title = today.strftime('%Y-%m-%d')

yesterday = today - timedelta(1)
yesterday_txt = yesterday.strftime('%Y%m%d')

current_month = int(CURRENT_MONTH[4:6])
next_month = int(NEXT_MONTH[4:6])
month_after_next = int(MONTH_AFTER_NEXT[4:6])

if TTS:
    flag_tts = True
else:
    flag_tts = False

flag_one_eye_lagging_span = False

FIXED_COREVAL = [1.20, 2.50, 3.50, 4.85, 5.50, 6.85]
고정_진성맥점 = [1.20, 2.50, 3.50, 4.85, 5.50, 6.85]

고정_진성맥점.append(MY_COREVAL)
고정_진성맥점 = list(set(고정_진성맥점))
고정_진성맥점.sort()

DEFAULT_NODE_LIST = 고정_진성맥점[:]

bms_node_val1 = 0
bms_node_val2 = 0
bms_node_val3 = 0
bms_node_val4 = 0
bms_node_val5 = 0
bms_node_val6 = 0

pre_high_low_list = []
bms_node_list = []
bms_node_frequency_list = []

flag_call_open_in_fixed_coreval = False
flag_put_open_in_fixed_coreval = False

flag_call_low_in_fixed_coreval = False
flag_call_high_in_fixed_coreval = False
flag_put_low_in_fixed_coreval = False
flag_put_high_in_fixed_coreval = False

call_low_val_in_fixed_coreval = []
call_high_val_in_fixed_coreval = []
put_low_val_in_fixed_coreval = []
put_high_val_in_fixed_coreval = []

if os.path.exists('HL-List.txt'):

    # 저가, 고가 리스트에서 맥점 추출
    with open('HL-List.txt', mode='r') as hlfile:
        
        # 한줄씩 읽어서 리스트에 저장
        file_list = []
        hlfile_line_number = 0

        while True:

            line = hlfile.readline().strip()
            hlfile_line_number += 1
            temp = line.split()
            for i in range(len(temp)):
                file_list.append(float(temp[i]))
            if not line: break
        
        hlfile_line_number = hlfile_line_number - 1
        
        FILE_HIGH_LOW_LIST = file_list[:]
        FILE_HIGH_LOW_LIST.sort()

        index1 = bisect(FILE_HIGH_LOW_LIST, SEARCH_MOVING_NODE_START_VALUE)
        index2 = bisect(FILE_HIGH_LOW_LIST, SEARCH_MOVING_NODE_END_VALUE)
        pre_high_low_list = FILE_HIGH_LOW_LIST[index1:index2]
        FILE_HIGH_LOW_LIST = pre_high_low_list[:]

        pre_high_low_list.reverse()

        # 첫번재 최대빈도 맥점탐색
        result = list(Counter(pre_high_low_list).values())
        동적맥점1_빈도수 = max(result)

        if 동적맥점1_빈도수 > 2:

            # 중복횟수 최대값 인덱스 구함
            max_index = result.index(max(result))            
            #print('중복횟수 최대빈도수 인덱스 =', max_index)

            # 최대 중복값 산출
            result = list(Counter(pre_high_low_list).keys())
            bms_node_val1 = result[max_index]
            print('1st 동적맥점 값 = {0}, 빈도수 = {1}'.format(bms_node_val1, 동적맥점1_빈도수))

            bms_node_list.append(bms_node_val1)
            bms_node_frequency_list.append(동적맥점1_빈도수)
            고정_진성맥점.append(bms_node_val1)
            
            # 두번재 최대빈도 맥점탐색
            second_list = list(filter((bms_node_val1).__ne__, pre_high_low_list))
            #print('2nd 최대빈도 제거된 리스트 =', second_list)

            result = list(Counter(second_list).values())
            동적맥점2_빈도수 = max(result)

            if 동적맥점2_빈도수 > 2:

                max_index = result.index(max(result))

                # 최대 중복값 산출
                result = list(Counter(second_list).keys())
                bms_node_val2 = result[max_index]
                print('2nd 동적맥점 값 = {0}, 빈도수 = {1}'.format(bms_node_val2, 동적맥점2_빈도수))
                
                bms_node_list.append(bms_node_val2)
                bms_node_frequency_list.append(동적맥점2_빈도수)
                고정_진성맥점.append(bms_node_val2)

                # 세번재 최대빈도 맥점탐색
                third_list = list(filter((bms_node_val2).__ne__, second_list))
                #print('3rd 최대빈도 제거된 리스트 =', third_list)

                result = list(Counter(third_list).values())
                동적맥점3_빈도수 = max(result)

                if 동적맥점3_빈도수 > 2:

                    max_index = result.index(max(result))

                    # 최대 중복값 산출
                    result = list(Counter(third_list).keys())
                    bms_node_val3 = result[max_index]
                    print('3rd 동적맥점 값 = {0}, 빈도수 = {1}'.format(bms_node_val3, 동적맥점3_빈도수))

                    bms_node_list.append(bms_node_val3)
                    bms_node_frequency_list.append(동적맥점3_빈도수)
                    고정_진성맥점.append(bms_node_val3)

                    # 네번재 최대빈도 맥점탐색
                    fourth_list = list(filter((bms_node_val3).__ne__, third_list))

                    result = list(Counter(fourth_list).values())
                    동적맥점4_빈도수 = max(result)

                    if 동적맥점4_빈도수 > 2:

                        max_index = result.index(max(result))
                        result = list(Counter(fourth_list).keys())

                        bms_node_val4 = result[max_index]
                        print('4th 동적맥점 값 = {0}, 빈도수 = {1}'.format(bms_node_val4, 동적맥점4_빈도수))

                        bms_node_list.append(bms_node_val4)
                        bms_node_frequency_list.append(동적맥점4_빈도수)
                        고정_진성맥점.append(bms_node_val4)

                        # 다섯번재 최대빈도 맥점탐색
                        fifth_list = list(filter((bms_node_val4).__ne__, fourth_list))
                        result = list(Counter(fifth_list).values())
                        동적맥점5_빈도수 = max(result)

                        if 동적맥점5_빈도수 > 2:

                            max_index = result.index(max(result))
                            result = list(Counter(fifth_list).keys())

                            bms_node_val5 = result[max_index]
                            print('5th 동적맥점 값 = {0}, 빈도수 = {1}'.format(bms_node_val5, 동적맥점5_빈도수))

                            bms_node_list.append(bms_node_val5)
                            bms_node_frequency_list.append(동적맥점5_빈도수)
                            고정_진성맥점.append(bms_node_val5)

                            # 여섯번재 최대빈도 맥점탐색
                            sixth_list = list(filter((bms_node_val5).__ne__, fifth_list))
                            result = list(Counter(sixth_list).values())
                            동적맥점6_빈도수 = max(result)

                            if 동적맥점6_빈도수 > 2:

                                max_index = result.index(max(result))
                                result = list(Counter(sixth_list).keys())

                                bms_node_val6 = result[max_index]
                                print('6th 동적맥점 값 = {0}, 빈도수 = {1}'.format(bms_node_val6, 동적맥점6_빈도수))

                                bms_node_list.append(bms_node_val6)
                                bms_node_frequency_list.append(동적맥점6_빈도수)

                                고정_진성맥점.append(bms_node_val6)
                                고정_진성맥점 = list(set(고정_진성맥점))
                                고정_진성맥점.sort()                                    
                                
                                print('DEFAULT_NODE_LIST =', DEFAULT_NODE_LIST)
                                print('bms_node_list =', bms_node_list)
                                print('pre 진성맥점 리스트 =', 고정_진성맥점)
                            else:
                                pass
                        else:
                            pass
                    else:
                        pass
                else:
                    pass
            else:
                pass                
        else:
            print('빈도수 3이상인 맥점이 없습니다.')
else:
    pass

if os.path.isfile('nighttime.txt'):

    # 야간장의 데이타를 가져옴
    with open('nighttime.txt', mode='r') as nighttime_file:

        tmp = nighttime_file.readline().strip()
        tmp = nighttime_file.readline().strip()
        tmp = nighttime_file.readline().strip()
        
        tmp = nighttime_file.readline().strip()
        temp = tmp.split()
        FUT_전일종가 = float(temp[5])
        print('FUT 종가 =', FUT_전일종가)

        tmp = nighttime_file.readline().strip()

        tmp = nighttime_file.readline().strip()
        temp = tmp.split()
        SP500_전저 = float(temp[5])
        print('SP500 전저 =', SP500_전저)

        tmp = nighttime_file.readline().strip()
        temp = tmp.split()
        SP500_전고 = float(temp[5])
        print('SP500 전고 =', SP500_전고)
        
        tmp = nighttime_file.readline().strip()
        temp = tmp.split()
        SP500_전일종가 = float(temp[5])
        print('SP500 종가 =', SP500_전일종가)

        tmp = nighttime_file.readline().strip()
        temp = tmp.split()
        DOW_전저 = int(temp[4])
        print('DOW 전저 =', DOW_전저)

        tmp = nighttime_file.readline().strip()
        temp = tmp.split()
        DOW_전고 = int(temp[4])
        print('DOW 전고 =', DOW_전고)
        
        tmp = nighttime_file.readline().strip()
        temp = tmp.split()
        DOW_전일종가 = int(temp[4])
        print('DOW 종가 =', DOW_전일종가)

        tmp = nighttime_file.readline().strip()
        temp = tmp.split()
        NASDAQ_전저 = float(temp[4])
        print('NASDAQ 전저 =', NASDAQ_전저)

        tmp = nighttime_file.readline().strip()
        temp = tmp.split()
        NASDAQ_전고 = float(temp[4])
        print('NASDAQ 전고 =', NASDAQ_전고)
        
        tmp = nighttime_file.readline().strip()
        temp = tmp.split()
        NASDAQ_전일종가 = float(temp[4])
        print('NASDAQ 종가 =', NASDAQ_전일종가)

        tmp = nighttime_file.readline().strip()
        temp = tmp.split()
        HANGSENG_전저 = int(temp[4])
        print('HANGSENG 전저 =', HANGSENG_전저)

        tmp = nighttime_file.readline().strip()
        temp = tmp.split()
        HANGSENG_전고 = int(temp[4])
        print('HANGSENG 전고 =', HANGSENG_전고)
        
        tmp = nighttime_file.readline().strip()
        temp = tmp.split()
        HANGSENG_전일종가 = int(temp[4])
        print('HANGSENG 종가 =', HANGSENG_전일종가)

        tmp = nighttime_file.readline().strip()
        temp = tmp.split()
        WTI_전저 = float(temp[4])
        print('WTI 전저 =', WTI_전저)

        tmp = nighttime_file.readline().strip()
        temp = tmp.split()
        WTI_전고 = float(temp[4])
        print('WTI 전고 =', WTI_전고)
        
        tmp = nighttime_file.readline().strip()
        temp = tmp.split()
        WTI_전일종가 = float(temp[4])
        print('WTI 종가 =', WTI_전일종가)

        tmp = nighttime_file.readline().strip()
        temp = tmp.split()
        GOLD_전저 = float(temp[4])
        print('GOLD 전저 =', GOLD_전저)

        tmp = nighttime_file.readline().strip()
        temp = tmp.split()
        GOLD_전고 = float(temp[4])
        print('GOLD 전고 =', GOLD_전고)
        
        tmp = nighttime_file.readline().strip()
        temp = tmp.split()
        GOLD_전일종가 = float(temp[4])
        print('GOLD 종가 =', GOLD_전일종가)

        tmp = nighttime_file.readline().strip()
        temp = tmp.split()
        EURO_전저 = float(temp[4])
        print('EURO 전저 =', EURO_전저)

        tmp = nighttime_file.readline().strip()
        temp = tmp.split()
        EURO_전고 = float(temp[4])
        print('EURO 전고 =', EURO_전고)
        
        tmp = nighttime_file.readline().strip()
        temp = tmp.split()
        EURO_전일종가 = float(temp[4])
        print('EURO 종가 =', EURO_전일종가)

        tmp = nighttime_file.readline().strip()
        temp = tmp.split()
        YEN_전저 = float(temp[4])
        print('YEN 전저 =', YEN_전저)

        tmp = nighttime_file.readline().strip()
        temp = tmp.split()
        YEN_전고 = float(temp[4])
        print('YEN 전고 =', YEN_전고)
        
        tmp = nighttime_file.readline().strip()
        temp = tmp.split()
        YEN_전일종가 = float(temp[4])
        print('YEN 종가 =', YEN_전일종가)        

        tmp = nighttime_file.readline().strip()
        temp = tmp.split()
        ADI_전저 = float(temp[4])
        print('ADI 전저 =', ADI_전저)

        tmp = nighttime_file.readline().strip()
        temp = tmp.split()
        ADI_전고 = float(temp[4])
        print('ADI 전고 =', ADI_전고)
        
        tmp = nighttime_file.readline().strip()
        temp = tmp.split()
        ADI_전일종가 = float(temp[4])
        print('ADI 종가 =', ADI_전일종가)       
else:
    FUT_전일종가 = 0
    SP500_전저 = 0
    SP500_전고 = 0
    SP500_전일종가 = 0
    DOW_전저 = 0
    DOW_전고 = 0
    DOW_전일종가 = 0
    NASDAQ_전저 = 0
    NASDAQ_전고 = 0
    NASDAQ_전일종가 = 0
    HANGSENG_전저 = 0
    HANGSENG_전고 = 0
    HANGSENG_전일종가 = 0
    WTI_전저 = 0
    WTI_전고 = 0
    WTI_전일종가 = 0
    GOLD_전저 = 0
    GOLD_전고 = 0
    GOLD_전일종가 = 0
    EURO_전저 = 0
    EURO_전고 = 0
    EURO_전일종가 = 0
    YEN_전저 = 0
    YEN_전고 = 0
    YEN_전일종가 = 0
    ADI_전저 = 0
    ADI_전고 = 0
    ADI_전일종가 = 0        

if os.path.isfile('daytime.txt'):

    with open('daytime.txt', mode='r') as daytime_file:

        tmp = daytime_file.readline().strip()

        tmp = daytime_file.readline().strip()
        temp = tmp.split()
        KOSPI_PRICE = float(temp[3])

        print('KOSPI_PRICE =', KOSPI_PRICE)

        tmp = daytime_file.readline().strip()

        tmp = daytime_file.readline().strip()
        temp = tmp.split()
        KOSDAQ_PRICE = float(temp[3])

        print('KOSDAQ_PRICE =', KOSDAQ_PRICE)

        tmp = daytime_file.readline().strip()

        tmp = daytime_file.readline().strip()
        temp = tmp.split()
        INIT_CENTER_VAL = float(temp[3])
        장시작_중심가 = INIT_CENTER_VAL

        tmp = daytime_file.readline().strip()
        temp = tmp.split()
        KP200_전일종가 = float(temp[4])

        tmp = daytime_file.readline().strip()
        temp = tmp.split()
        KP200_전일시가 = float(temp[3])
        
        tmp = daytime_file.readline().strip()
        temp = tmp.split()
        KP200_전고 = float(temp[3])        

        tmp = daytime_file.readline().strip()
        temp = tmp.split()
        KP200_전저 = float(temp[3])

        tmp = daytime_file.readline().strip()
        temp = tmp.split()
        KP200_Day_종가 = float(temp[3])

        tmp = daytime_file.readline().strip()

        tmp = daytime_file.readline().strip()
        temp = tmp.split()
        SP500_Day_종가 = float(temp[4])

        tmp = daytime_file.readline().strip()
        temp = tmp.split()
        DOW_Day_종가 = float(temp[4])

        tmp = daytime_file.readline().strip()
        temp = tmp.split()
        NASDAQ_Day_종가 = float(temp[4])

        tmp = daytime_file.readline().strip()
        temp = tmp.split()
        HANGSENG_Day_종가 = float(temp[4])

        tmp = daytime_file.readline().strip()
        temp = tmp.split()
        WTI_Day_종가 = float(temp[4])

        tmp = daytime_file.readline().strip()
        temp = tmp.split()
        GOLD_Day_종가 = float(temp[4])

        tmp = daytime_file.readline().strip()
        temp = tmp.split()
        EURO_Day_종가 = float(temp[4])

        tmp = daytime_file.readline().strip()
        temp = tmp.split()
        YEN_Day_종가 = float(temp[4])

        tmp = daytime_file.readline().strip()
        temp = tmp.split()
        ADI_Day_종가 = float(temp[4])                
else:
    장시작_중심가 = 0
    KP200_전일종가 = 0
    KP200_전일시가 = 0    
    KP200_전고 = 0
    KP200_전저 = 0    
    KP200_Day_종가 = 0
    SP500_Day_종가 = 0
    DOW_Day_종가 = 0
    NASDAQ_Day_종가 = 0
    HANGSENG_Day_종가 = 0
    WTI_Day_종가 = 0
    GOLD_Day_종가 = 0
    EURO_Day_종가 = 0
    YEN_Day_종가 = 0
    ADI_Day_종가 = 0    

if FUT_전일종가 > 0:
    plot_drate_scale_factor = int(SP500_전일종가 / FUT_전일종가)
else:
    plot_drate_scale_factor = 12

SP500_FUT_시가_등락율비 = plot_drate_scale_factor

print('plot_drate_scale_factor =', plot_drate_scale_factor)

# 전역변수
#####################################################################################################################################################################

# 해외선물장은 오전 7시 시작
DayTime_PreStart_Hour = KSE_START_HOUR - 2
GuardTime = 60 * 2

# 오전 6시 ~ 7시는 Break Time
if SUMMER_TIME:
    start_time = 6
else:
    start_time = 7

if start_time <= dt.hour < NightTime_PreStart_Hour:
    # 오전 7시 ~ 오후 3시 59분
    DayTime = True
    NightTime = False        
    day_timespan = 6 * 60 + 45 + 10
    jugan_timespan = GuardTime + day_timespan
else:
    # 오후 4시 ~ 익일 오전 6시 or 7시
    DayTime = False
    NightTime = True

    if SUMMER_TIME:
        nighttime_timespan = 12 * 60 + 10
    else:
        nighttime_timespan = 13 * 60 + 10

    yagan_timespan = GuardTime + nighttime_timespan 

if NightTime:
    FUT_REAL = 'FUT_REAL_NC0'
    FUT_HO = 'FUT_HO_NH0'
    OPT_REAL = 'OPT_REAL_EC0'
    OPT_HO = 'OPT_HO_EH0'
else:
    FUT_REAL = 'FUT_REAL_FC0'
    FUT_HO = 'FUT_HO_FH0'
    OPT_REAL = 'OPT_REAL_OC0'
    OPT_HO = 'OPT_HO_OH0'

if DayTime:
    KP200_전일종가 = KP200_Day_종가
else:
    KP200_당일시가 = KP200_전일시가

print('\r')
print('* KP200 전일시가 =', KP200_전일시가)
print('* KP200 전고 =', KP200_전고)
print('* KP200 전저 =', KP200_전저)
print('* KP200 전일종가 =', KP200_전일종가)
print('\r')

Option_column = Enum('Option_column', '행사가 OLOH 기준가 월저 월고 전저 전고 종가 피봇 시가 저가 현재가 고가 시가갭 대비 진폭 VP OI OID')
Futures_column = Enum('Futures_column', 'OLOH 매수건수 매도건수 매수잔량 매도잔량 건수비 잔량비 전저 전고 종가 피봇 시가 저가 현재가 고가 시가갭 대비 진폭 거래량 OI OID')
Supply_column = Enum('Supply_column', '외인선물 외인현물 기관선물 기관현물 개인선물 개인현물 프로그램 종합')
Quote_column = Enum('Quote_column', 'C-MSCC C-MDCC C-MSCR C-MDCR P-MSCC P-MDCC P-MSCR P-MDCR 콜건수비 콜잔량비 풋건수비 풋잔량비 호가종합 미결종합')

BB_PERIOD = 34
BB_1ST_STD = 0.5
BB_2ND_STD = 2

total_packet_size = 0

server_date = ''
server_time = ''
system_server_timegap = 0

telegram_toggle = True

시스템시간 = 0
시스템시간_분 = 0

서버시간 = 0
서버시간_분 = 0
system_server_time_gap = 0

flag_offline = False

flag_call_cross_coloring = False
flag_put_cross_coloring = False
flag_clear = False

진성맥점 = []

fut_code = ''
GMSHCODE = ''
CMSHCODE = ''
CCMSHCODE = ''

CM_CALL_CODE = []
CM_PUT_CODE = []
NM_CALL_CODE = []
NM_PUT_CODE = []

t2301_month_info = ''
t2835_month_info = ''

kp200_피봇 = 0
KP200_당일시가 = 0
kp200_저가 = 0
kp200_현재가 = 0
kp200_고가 = 0
kp200_진폭 = 0

kp200_yj_시가 = 0

옵션_중심가 = 0

CENTER_VAL_PLUS5 = 0
CENTER_VAL_PLUS4 = 0
CENTER_VAL_PLUS3 = 0
CENTER_VAL_PLUS2 = 0
CENTER_VAL_PLUS1 = 0
CENTER_VAL_MINUS1 = 0
CENTER_VAL_MINUS2 = 0
CENTER_VAL_MINUS3 = 0
CENTER_VAL_MINUS4 = 0
CENTER_VAL_MINUS5 = 0

dongsi_quote = False

flag_telegram_send_worker = False
flag_telegram_listen_worker = False

telegram_command = '/start'
telegram_send_worker_on_time = 0
flag_telegram_on = True

telegram_send_message = 'None'

FLAG_ATM = True

FLAG_ASYM = False
FLAG_NODE = False
FLAG_OLOH = False

FLAG_GUEST_CONTROL = True

flag_call_low_update = False
flag_call_high_update = False
flag_put_low_update = False
flag_put_high_update = False

oneway_first_touch = False
oneway_txt = ''

콜시가갭합 = 0
풋시가갭합 = 0
콜시가갭합_퍼센트평균 = 0
풋시가갭합_퍼센트평균 = 0

콜시가갭합_단위평균 = 0
풋시가갭합_단위평균 = 0

콜대비합 = 0
풋대비합 = 0
콜대비합_퍼센트 = 0
풋대비합_퍼센트 = 0

비대칭장 = ''

call_open_count = 0
put_open_count = 0

call_low_node_count = 0
call_high_node_count = 0
put_low_node_count = 0
put_high_node_count = 0

call_low_node_list = []
call_high_node_list = []
put_low_node_list = []
put_high_node_list = []

telegram_send_txt_call_low = ''
telegram_send_txt_call_high = ''
telegram_send_txt_put_low = ''
telegram_send_txt_put_high = ''

call_low_node_txt = ''
call_high_node_txt = ''
put_low_node_txt = ''
put_high_node_txt = ''

call_low_coreval_txt = ''
call_high_coreval_txt = ''
put_low_coreval_txt = ''
put_high_coreval_txt = ''

kp200_low_node_txt = ''
kp200_high_node_txt = ''

opt_search_start_value = 0.0
opt_coreval_search_start_value = 0.5
opt_search_end_value = 10

start_time_txt = ''
end_time_txt = ''

call_ol_count = 0
call_oh_count = 0
put_ol_count = 0
put_oh_count = 0

flag_call_low_node_coloring = False
flag_call_high_node_coloring = False
flag_put_low_node_coloring = False
flag_put_high_node_coloring = False

coloring_done_time = 0
coloring_interval = 1
node_coloring = False

flag_first_arrive = False
fut_first_arrive_time = 0

flag_kp200_low_node = False
flag_kp200_high_node = False
kp200_low_node_time = 0
kp200_high_node_time = 0

service_terminate = False
jugan_service_terminate = False
yagan_service_terminate = False

call_ms_oneway = False
put_ms_oneway = False

call_ms_asymmetric = False
put_ms_asymmetric = False
call_md_asymmetric = False
put_md_asymmetric = False

call_md_all_down = False
put_md_all_down = False
call_ms_all_up = False
put_ms_all_up = False

call_oneway_level1 = False
call_oneway_level2 = False
call_oneway_level3 = False
call_oneway_level4 = False
call_oneway_level5 = False

put_oneway_level1 = False
put_oneway_level2 = False
put_oneway_level3 = False
put_oneway_level4 = False
put_oneway_level5 = False

flag_kp200_low = False
flag_kp200_high = False

옵션잔존일 = 0

CME_체결시간 = '000000'
cme_plot_hour = 0
cme_plot_minute = 0
cme_plot_sec = 0
cme_close_hour = 6

fut_plot_sec = 0

night_time = 0

fut_cm_volume_power = 0
fut_nm_volume_power = 0

oloh_cutoff = 0.10
nodelist_low_cutoff = 0.09
nodelist_high_cutoff = 10.0

update_start = OTM_SEARCH_START_VAL
update_end = 10.0

콜매수 = ''
콜매도 = ''
풋매수 = ''
풋매도 = ''
손절 = ''
익절 = '' 

basis = 0
option_pairs_count = 0
t8416_option_pairs_count = 0
real_option_pairs_count = 0

call_tickdata = dict()
put_tickdata = dict()

call_oi_init_percent = 0
put_oi_init_percent = 0

call_volume_power = 0
put_volume_power = 0
option_volume_power = 0

# 모든 시간은 해외선물 기준으로 처리
plot_time_index = 0
old_plot_time_index = 0

server_x_idx = 0

call_itm_count = 0
put_itm_count = 0

every_5sec = [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55]

pre_start = False

receive_quote = False
flag_market_service = False

widget_title = ''

외인선물_순매수 = 0
외인현물_순매수 = 0
기관선물_순매수 = 0
기관현물_순매수 = 0
개인선물_순매수 = 0
개인현물_순매수 = 0
수급방향 = 'None'
과거_수급방향 = 'None'

FUT_INSTITUTIONAL_거래대금순매수 = 0
FUT_STOCK_거래대금순매수 = 0
FUT_BOHEOM_거래대금순매수 = 0
FUT_TOOSIN_거래대금순매수 = 0
FUT_BANK_거래대금순매수 = 0
FUT_JONGGEUM_거래대금순매수 = 0
FUT_GIGEUM_거래대금순매수 = 0
FUT_GITA_거래대금순매수 = 0

FUT_FOREIGNER_거래대금순매수_직전대비 = 0
FUT_RETAIL_거래대금순매수_직전대비 = 0
FUT_INSTITUTIONAL_거래대금순매수_직전대비 = 0
FUT_STOCK_거래대금순매수_직전대비 = 0
FUT_BOHEOM_거래대금순매수_직전대비 = 0
FUT_TOOSIN_거래대금순매수_직전대비 = 0
FUT_BANK_거래대금순매수_직전대비 = 0
FUT_JONGGEUM_거래대금순매수_직전대비 = 0
FUT_GIGEUM_거래대금순매수_직전대비 = 0
FUT_GITA_거래대금순매수_직전대비 = 0

KOSPI_INSTITUTIONAL_거래대금순매수 = 0
KOSPI_STOCK_거래대금순매수 = 0
KOSPI_BOHEOM_거래대금순매수 = 0
KOSPI_TOOSIN_거래대금순매수 = 0
KOSPI_BANK_거래대금순매수 = 0
KOSPI_JONGGEUM_거래대금순매수 = 0
KOSPI_GIGEUM_거래대금순매수 = 0
KOSPI_GITA_거래대금순매수 = 0

프로그램_순매수 = 0
프로그램_순매수직전대비 = 0

KOSPI_FOREIGNER_거래대금순매수_직전대비 = 0
KOSPI_RETAIL_거래대금순매수_직전대비 = 0
KOSPI_INSTITUTIONAL_거래대금순매수_직전대비 = 0
KOSPI_STOCK_거래대금순매수_직전대비 = 0
KOSPI_BOHEOM_거래대금순매수_직전대비 = 0
KOSPI_TOOSIN_거래대금순매수_직전대비 = 0
KOSPI_BANK_거래대금순매수_직전대비 = 0
KOSPI_JONGGEUM_거래대금순매수_직전대비 = 0
KOSPI_GIGEUM_거래대금순매수_직전대비 = 0
KOSPI_GITA_거래대금순매수_직전대비 = 0

선물_총순매수 = 0
현물_총순매수 = 0

FUT_FOREIGNER_직전대비 = collections.deque([0, 0, 0], 3)
FUT_RETAIL_직전대비 = collections.deque([0, 0, 0], 3)
FUT_INSTITUTIONAL_직전대비 = collections.deque([0, 0, 0], 3)
KOSPI_FOREIGNER_직전대비 = collections.deque([0, 0, 0], 3)
PROGRAM_직전대비 = collections.deque([0, 0, 0], 3)
콜순매수_직전대비 = collections.deque([0, 0, 0], 3)
풋순매수_직전대비 = collections.deque([0, 0, 0], 3)

actval_increased = False

flag_call_low_coreval = False
flag_call_high_coreval = False
flag_put_low_coreval = False
flag_put_high_coreval = False

call_atm_value = 0
put_atm_value = 0

atm_zero_sum = 0
atm_zero_cha = 0

CM_OPT_LENGTH = 0
NM_OPT_LENGTH = 0

CM_OPTCODE = ''
NM_OPTCODE = ''

opt_actval = []

view_actval = []

t8415_call_count = 0
t8415_put_count = 0
t8416_call_count = 0
t8416_put_count = 0

df_fut_t8416 = pd.DataFrame()

df_fut = pd.DataFrame()
df_call = pd.DataFrame()
df_put = pd.DataFrame()
df_call_quote = pd.DataFrame()
df_put_quote = pd.DataFrame()
df_call_volume = pd.DataFrame()
df_put_volume = pd.DataFrame()

df_cm_call = pd.DataFrame()
df_cm_put = pd.DataFrame()
df_nm_call = pd.DataFrame()
df_nm_put = pd.DataFrame()

# 그래프를 위한 데이타프레임
df_call_graph = [pd.DataFrame()] * ActvalCount
df_call_information_graph = pd.DataFrame()

df_put_graph = [pd.DataFrame()] * ActvalCount
df_put_information_graph = pd.DataFrame()

df_kp200_graph = pd.DataFrame()
df_demand_supply_graph = pd.DataFrame()

df_futures_cm_graph = pd.DataFrame()
df_futures_nm_graph = pd.DataFrame()
df_sp500_graph = pd.DataFrame()
df_dow_graph = pd.DataFrame()
df_nasdaq_graph = pd.DataFrame()
df_hsi_graph = pd.DataFrame()
df_wti_graph = pd.DataFrame()
df_gold_graph = pd.DataFrame()
df_euro_graph = pd.DataFrame()
df_yen_graph = pd.DataFrame()
df_adi_graph = pd.DataFrame()

df_futures_cm_ta_graph = pd.DataFrame()
df_futures_nm_ta_graph = pd.DataFrame()
df_sp500_ta_graph = pd.DataFrame()
df_dow_ta_graph = pd.DataFrame()
df_nasdaq_ta_graph = pd.DataFrame()
df_hsi_ta_graph = pd.DataFrame()
df_wti_ta_graph = pd.DataFrame()
df_gold_ta_graph = pd.DataFrame()
df_euro_ta_graph = pd.DataFrame()
df_yen_ta_graph = pd.DataFrame()
df_adi_ta_graph = pd.DataFrame()

df_futures_cm_alligator_graph = pd.DataFrame()
df_futures_nm_alligator_graph = pd.DataFrame()
df_sp500_alligator_graph = pd.DataFrame()
df_dow_alligator_graph = pd.DataFrame()
df_nasdaq_alligator_graph = pd.DataFrame()
df_hsi_alligator_graph = pd.DataFrame()
df_wti_alligator_graph = pd.DataFrame()
df_gold_alligator_graph = pd.DataFrame()
df_euro_alligator_graph = pd.DataFrame()
df_yen_alligator_graph = pd.DataFrame()
df_adi_alligator_graph = pd.DataFrame()

call_quote = pd.Series()
put_quote = pd.Series()

call_volume = pd.Series()
put_volume = pd.Series()

call_ckbox = []
put_ckbox = []
call_cell_widget = []
put_cell_widget = []

atm_txt = ''
atm_val = 0
ATM_INDEX = 0
old_atm_index = 0
jgubun = ''

start_time = 0

COREVAL = []
KP200_COREVAL = []

CM_행사가 = []
NM_행사가 = []

call_행사가 = []
call_기준가 = []
call_월저 = []
call_월고 = []
call_전저 = []
call_전고 = []
call_종가 = []
call_피봇 = []
call_시가 = []
call_저가 = []
call_고가 = []
call_진폭 = []

콜_순미결합 = 0
콜_수정미결합 = 0
콜_순미결퍼센트 = 0
콜_수정미결퍼센트 = 0

call_기준가_node_list = []
call_월저_node_list = []
call_월고_node_list = []
call_전저_node_list = []
call_전고_node_list = []
call_종가_node_list = []
call_피봇_node_list = []
call_시가_node_list = []
call_저가_node_list = []
call_고가_node_list = []

put_행사가 = []
put_기준가 = []
put_월저 = []
put_월고 = []
put_전저 = []
put_전고 = []
put_종가 = []
put_피봇 = []
put_시가 = []
put_저가 = []
put_고가 = []
put_진폭 = []

풋_순미결합 = 0
풋_순미결퍼센트 = 0
풋_수정미결합 = 0
풋_수정미결퍼센트 = 0

put_기준가_node_list = []
put_월저_node_list = []
put_월고_node_list = []
put_전저_node_list = []
put_전고_node_list = []
put_종가_node_list = []
put_피봇_node_list = []
put_시가_node_list = []
put_저가_node_list = []
put_고가_node_list = []

call_scroll_begin_position = 0
call_scroll_end_position = 0
put_scroll_begin_position = 0
put_scroll_end_position = 0

new_actval_up_count = 0
new_actval_down_count = 0

selected_call = []
selected_put = []

call_node_state = dict()
put_node_state = dict()

yoc_call_gap_percent = [0] * ActvalCount
yoc_put_gap_percent = [0] * ActvalCount

call_open = [False] * ActvalCount
call_ol = [False] * ActvalCount
call_oh = [False] * ActvalCount
call_gap_percent = [0] * ActvalCount
call_db_percent = [0] * ActvalCount

call_otm_jdb = [0] * ActvalCount
call_otm_jdb_percent = [0] * ActvalCount
call_otm_cdb = [0] * ActvalCount
call_otm_cdb_percent = [0] * ActvalCount

put_open = [False] * ActvalCount
put_ol = [False] * ActvalCount
put_oh = [False] * ActvalCount
put_gap_percent = [0] * ActvalCount
put_db_percent = [0] * ActvalCount

nm_put_ol = [False] * ActvalCount
nm_put_oh = [False] * ActvalCount

put_otm_jdb = [0] * ActvalCount
put_otm_jdb_percent = [0] * ActvalCount
put_otm_cdb = [0] * ActvalCount
put_otm_cdb_percent = [0] * ActvalCount

call_otm_cdb_mean = 0
call_otm_jdb_mean = 0
call_otm_cdb_percent_mean = 0
call_otm_jdb_percent_mean = 0

put_otm_cdb_mean = 0
put_otm_jdb_mean = 0
put_otm_cdb_percent_mean = 0
put_otm_jdb_percent_mean = 0

opt_callreal_update_counter = 0
opt_putreal_update_counter = 0
opt_call_ho_update_counter = 0
opt_put_ho_update_counter = 0

comboindex1 = 0
comboindex2 = 0
comboindex3 = 0
comboindex4 = 0
comboindex5 = 0
comboindex6 = 0

FC0_선물현재가 = 0
OC0_콜현재가 = ''
OC0_풋현재가 = ''

콜시가리스트 = None
콜저가리스트 = None
콜고가리스트 = None

풋시가리스트 = None
풋저가리스트 = None
풋고가리스트 = None

콜_순매수_체결량 = 0
풋_순매수_체결량 = 0

콜매수잔량 = 0
콜매도잔량 = 0
풋매수잔량 = 0
풋매도잔량 = 0

콜건수비 = 0
콜잔량비 = 1
옵션_잔량비차 = 0

풋건수비 = 0
풋잔량비 = 1

콜_잔량비_최소 = 1
콜_잔량비_최대 = 0

풋_잔량비_최소 = 1
풋_잔량비_최대 = 0

옵션_잔량비_최소 = 1
옵션_잔량비_최대 = 0

# 컬러정의
blueviolet = QColor(138, 43, 226)
darkviolet = QColor(0x94, 0x00, 0xD3)
lightyellow = QColor(255, 255, 153)
aqua = QColor(0x00, 0xFF, 0xFF)
deepskyblue = QColor(0, 191, 255)
orange = QColor(0xFF, 0xA5, 0x00)
orangered = QColor(255, 69, 0)
magenta = QColor(255, 0, 255)
cyan = QColor(0, 255, 255)
lime = QColor(0, 255, 0)
lavender = QColor(230, 230, 250)
mistyrose = QColor(255, 228, 225)
chocolate = QColor(0xD2, 0x69, 0x1E)
indianred = QColor(0xCD, 0x5C, 0x5C)

greenyellow = QColor(0xAD, 0xFF, 0x2F)
lawngreen = QColor(0x7C, 0xFC, 0x00)
lightgreen = QColor(0x99, 0xFF, 0x33)
springgreen = QColor(0x0, 0xFF, 0x7F)
darkgreen = QColor(0x03, 0x35, 0x00)
gold = QColor(0xFF, 0xD7, 0x00)
goldenrod = QColor(0xDA, 0xA5, 0x20)
skyblue = QColor(0x87, 0xCE, 0xEB)
steelblue = QColor(0x46, 0x82, 0xB4)

darkorange = QColor(0xFF, 0x8C, 0x00)
brown = QColor(0xA5, 0x2A, 0x2A)
crimson = QColor(0xDC, 0x14, 0x3C)
indigo = QColor(0x4B, 0x00, 0x82)
royalblue = QColor(0x41, 0x69, 0xE1)
dodgerblue = QColor(0x1E, 0x90, 0xFF)
darkturquoise = QColor(0x00, 0xCE, 0xD1)
darkslateblue = QColor(0x48, 0x3D, 0x8B)
purple = QColor(0x80, 0x00, 0x80)
gainsboro = QColor(0xDC, 0xDC, 0xDC)
slategray = QColor(0x70, 0x80, 0x90)
gray = QColor(0x80, 0x80, 0x80) 
pink = QColor(0xFF, 0xC0, 0xCB)
lightskyblue = QColor(0x87, 0xCE, 0xFA)
silver = QColor(0xC0, 0xC0, 0xC0)

흰색 = Qt.white
검정색 = Qt.black
옅은회색 = gainsboro
회색 = gray
적색 = Qt.red
청색 = Qt.blue
녹색 = Qt.green
노란색 = Qt.yellow
라임 = lime

#red = Qt.red
#blue = Qt.blue

콜기준가색 = orange
콜월저색 = indianred
콜월고색 = darkorange
콜전저색 = goldenrod
콜전고색 = gold
콜종가색 = chocolate
콜피봇색 = magenta
콜시가색 = 적색

콜저가색 = skyblue
콜고가색 = orange

풋기준가색 = royalblue
풋월저색 = darkslateblue
풋월고색 = dodgerblue
풋전저색 = steelblue
풋전고색 = skyblue
풋종가색 = deepskyblue
풋피봇색 = cyan
풋시가색 = 청색

대맥점색 = lawngreen

rpen = pg.mkPen('r', width=2, style=QtCore.Qt.SolidLine)
bpen = pg.mkPen('b', width=2, style=QtCore.Qt.SolidLine)
gpen = pg.mkPen('g', width=2, style=QtCore.Qt.SolidLine)
wpen = pg.mkPen('w', width=2, style=QtCore.Qt.SolidLine)
gpen1 = pg.mkPen('g', width=2, style=QtCore.Qt.DotLine)
ypen = pg.mkPen('y', width=2, style=QtCore.Qt.SolidLine)
ypen1 = pg.mkPen('y', width=2, style=QtCore.Qt.DotLine)
mvpen = pg.mkPen('g', width=1, style=QtCore.Qt.DotLine)
kp200_pen = pg.mkPen('w', width=2, style=QtCore.Qt.DotLine)
jugan_x_start_pen = pg.mkPen('g', width=1, style=QtCore.Qt.DotLine)
moving_x_pen = pg.mkPen('y', width=1, style=QtCore.Qt.DotLine)
yagan_x_start_pen = pg.mkPen('g', width=1, style=QtCore.Qt.DotLine)

fut_jl_pen = pg.mkPen(aqua, width=2, style=QtCore.Qt.DotLine)
fut_jh_pen = pg.mkPen(orangered, width=2, style=QtCore.Qt.DotLine)
fut_pvt_pen = pg.mkPen(magenta, width=2, style=QtCore.Qt.DotLine)
fut_hc_pen = pg.mkPen(lawngreen, width=1, style=QtCore.Qt.DashLine)
opt_hc_pen = pg.mkPen(lawngreen, width=1, style=QtCore.Qt.DashLine)

red_dot_pen = pg.mkPen('r', width=2, style=QtCore.Qt.DotLine)
aqua_pen = pg.mkPen(aqua, width=2, style=QtCore.Qt.DotLine)
aqua_pen1 = pg.mkPen(aqua, width=2, style=QtCore.Qt.SolidLine)
magenta_pen = pg.mkPen(magenta, width=2, style=QtCore.Qt.DotLine)
magenta_pen1 = pg.mkPen(magenta, width=2, style=QtCore.Qt.SolidLine)
magenta_pen3 = pg.mkPen(magenta, width=2, style=QtCore.Qt.DotLine)
green_pen = pg.mkPen('g', width=2, style=QtCore.Qt.DotLine)
lime_pen = pg.mkPen(lime, width=2, style=QtCore.Qt.DotLine)
yellow_pen = pg.mkPen('y', width=2, style=QtCore.Qt.DotLine)
yellow_pen3 = pg.mkPen('y', width=2, style=QtCore.Qt.DotLine)
white_pen = pg.mkPen('w', width=2, style=QtCore.Qt.DotLine)
orange_pen = pg.mkPen(orange, width=1, style=QtCore.Qt.DashLine)
pink_pen = pg.mkPen(pink, width=2, style=QtCore.Qt.DashLine)
skyblue_pen = pg.mkPen(skyblue, width=2, style=QtCore.Qt.DashLine)
goldenrod_pen = pg.mkPen(goldenrod, width=2, style=QtCore.Qt.DotLine)
gold_pen = pg.mkPen(gold, width=2, style=QtCore.Qt.DotLine)

bb_1st_pen = pg.mkPen(aqua, width=2, style=QtCore.Qt.DotLine)
bb_2nd_pen = pg.mkPen(magenta, width=2, style=QtCore.Qt.DotLine)
bb_middle_pen = pg.mkPen('y', width=2, style=QtCore.Qt.DotLine)

psar_pen = pg.mkPen('w', width=2, style=QtCore.Qt.DotLine)
rsi_pen = pg.mkPen(magenta, width=2, style=QtCore.Qt.DotLine)
cci1_pen = pg.mkPen('y', width=2, style=QtCore.Qt.DotLine)
cci2_pen = pg.mkPen('g', width=2, style=QtCore.Qt.DotLine)

mama_pen = pg.mkPen(brown, width=2, style=QtCore.Qt.DotLine)
fama_pen = pg.mkPen(skyblue, width=2, style=QtCore.Qt.DotLine)

sslup_pen = pg.mkPen(magenta, width=2, style=QtCore.Qt.DotLine)
ssldown_pen = pg.mkPen(aqua, width=2, style=QtCore.Qt.DotLine)

conv_pen = pg.mkPen('g', width=2, style=QtCore.Qt.DashLine)
base_pen = pg.mkPen('y', width=2, style=QtCore.Qt.DashLine)
span_a_pen = pg.mkPen(magenta, width=2, style=QtCore.Qt.DotLine)
span_b_pen = pg.mkPen(aqua, width=2, style=QtCore.Qt.DotLine)
lagging_span_pen = pg.mkPen(orange, width=2, style=QtCore.Qt.DotLine)

# Sky Chart Plot1
plot1_x = 0
plot1_y = 0

# Sky Chart Plot2
plot2_x = 0
plot2_y = 0

# Sky Chart Plot3
plot3_x = 0
plot3_y = 0

# Sky Chart Plot4
plot4_x = 0
plot4_y = 0

# Sky Chart Plot5
plot5_x = 0
plot5_y = 0

# Sky Chart Plot6
plot6_x = 0
plot6_y = 0

kospi_price = 0.0
kosdaq_price = 0.0
samsung_price = 0.0

call_max_actval = False
put_max_actval = False

flag_fut_cm_ol = False
flag_fut_cm_oh = False
fut_cm_oloh_txt = ''

flag_fut_nm_ol = False
flag_fut_nm_oh = False
fut_nm_oloh_txt = ''

콜_인덱스 = 0
콜_시가 = ''
콜_현재가 = ''
콜_저가 = ''
콜_고가 = ''

풋_인덱스 = 0
풋_시가 = ''
풋_현재가 = ''
풋_저가 = ''
풋_고가 = ''

call_plot_data = [0] * ActvalCount
put_plot_data = [0] * ActvalCount

call_scroll = False
put_scroll = False
refresh_coloring = False

call_low_list = []
call_high_list = []
put_low_list = []
put_high_list = []

high_low_list = []
moving_list = []

동적맥점_리스트 = []
동적맥점_빈도수_리스트 = []

선물_진폭비 = 0

SP500_진폭비 = 0
DOW_진폭비 = 0
NASDAQ_진폭비 = 0
HANGSENG_진폭비 = 0
WTI_진폭비 = 0
GOLD_진폭비 = 0
EURO_진폭비 = 0
YEN_진폭비 = 0
ADI_진폭비 = 0

flag_first_search = False

SP500_주간_시작가 = 0
DOW_주간_시작가 = 0
NASDAQ_주간_시작가 = 0
WTI_주간_시작가 = 0
ADI_주간_시작가 = 0

SP500_야간_시작가 = 0
DOW_야간_시작가 = 0
NASDAQ_야간_시작가 = 0
WTI_야간_시작가 = 0
ADI_야간_시작가 = 0

장시작_양합 = 0

선물_호가순매수 = 0

SP500_체결순매수 = 0
SP500_체결잔량비 = 0

DOW_체결순매수 = 0
DOW_체결잔량비 = 0

NASDAQ_체결순매수 = 0
NASDAQ_체결잔량비 = 0

HANGSENG_체결순매수 = 0
HANGSENG_체결잔량비 = 0

WTI_체결순매수 = 0
WTI_체결잔량비 = 0

GOLD_체결순매수 = 0
GOLD_체결잔량비 = 0

EURO_체결순매수 = 0
EURO_체결잔량비 = 0

YEN_체결순매수 = 0
YEN_체결잔량비 = 0

# Tick Data Dataframe
df_cm_fut_tick = pd.DataFrame()
df_nm_fut_tick = pd.DataFrame()
df_call_tick = pd.DataFrame()
df_put_tick = pd.DataFrame()

df_sp500_tick = pd.DataFrame()
df_dow_tick = pd.DataFrame()
df_nasdaq_tick = pd.DataFrame()
df_hsi_tick = pd.DataFrame()
df_wti_tick = pd.DataFrame()
df_gold_tick = pd.DataFrame()
df_euro_tick = pd.DataFrame()
df_yen_tick = pd.DataFrame()
df_adi_tick = pd.DataFrame()

df_cm_fut_tick_ohlc = pd.DataFrame()
df_nm_fut_tick_ohlc = pd.DataFrame()
df_call_tick_ohlc = pd.DataFrame()
df_put_tick_ohlc = pd.DataFrame()

df_sp500_tick_ohlc = pd.DataFrame()
df_dow_tick_ohlc = pd.DataFrame()
df_nasdaq_tick_ohlc = pd.DataFrame()
df_hsi_tick_ohlc = pd.DataFrame()
df_wti_tick_ohlc = pd.DataFrame()
df_gold_tick_ohlc = pd.DataFrame()
df_euro_tick_ohlc = pd.DataFrame()
df_yen_tick_ohlc = pd.DataFrame()
df_adi_tick_ohlc = pd.DataFrame()

# 선물 OHLC 연산
fut_tick_list = []
fut_value_list = []
df_fut_ohlc = pd.DataFrame()
df_fut_ohlc_1min = pd.DataFrame()
df_fut_ohlc_5min = pd.DataFrame()
df_fut_ohlc_15min = pd.DataFrame()

# SP500 OHLC 연산
sp500_tick_list = []
sp500_value_list = []
df_sp500_ohlc = pd.DataFrame()
df_sp500_ohlc_1min = pd.DataFrame()
df_sp500_ohlc_5min = pd.DataFrame()
df_sp500_ohlc_15min = pd.DataFrame()

# DOW OHLC 연산
dow_tick_list = []
dow_value_list = []
df_dow_ohlc = pd.DataFrame()
df_dow_ohlc_1min = pd.DataFrame()
df_dow_ohlc_5min = pd.DataFrame()
df_dow_ohlc_15min = pd.DataFrame()

# NASDAQ OHLC 연산
nasdaq_tick_list = []
nasdaq_value_list = []
df_nasdaq_ohlc = pd.DataFrame()
df_nasdaq_ohlc_1min = pd.DataFrame()
df_nasdaq_ohlc_5min = pd.DataFrame()
df_nasdaq_ohlc_15min = pd.DataFrame()

# HANGSENG OHLC 연산
hsi_tick_list = []
hsi_value_list = []
df_hsi_ohlc = pd.DataFrame()
df_hsi_ohlc_1min = pd.DataFrame()
df_hsi_ohlc_5min = pd.DataFrame()
df_hsi_ohlc_15min = pd.DataFrame()

# WTI OHLC 연산
wti_tick_list = []
wti_value_list = []
df_wti_ohlc = pd.DataFrame()
df_wti_ohlc_1min = pd.DataFrame()
df_wti_ohlc_5min = pd.DataFrame()
df_wti_ohlc_15min = pd.DataFrame()

# GOLD OHLC 연산
gold_tick_list = []
gold_value_list = []
df_gold_ohlc = pd.DataFrame()
df_gold_ohlc_1min = pd.DataFrame()
df_gold_ohlc_5min = pd.DataFrame()
df_gold_ohlc_15min = pd.DataFrame()

# EURO OHLC 연산
euro_tick_list = []
euro_value_list = []
df_euro_ohlc = pd.DataFrame()
df_euro_ohlc_1min = pd.DataFrame()
df_euro_ohlc_5min = pd.DataFrame()
df_euro_ohlc_15min = pd.DataFrame()

# YEN OHLC 연산
yen_tick_list = []
yen_value_list = []
df_yen_ohlc = pd.DataFrame()
df_yen_ohlc_1min = pd.DataFrame()
df_yen_ohlc_5min = pd.DataFrame()
df_yen_ohlc_15min = pd.DataFrame()

# ADI OHLC 연산
adi_tick_list = []
adi_value_list = []
df_adi_ohlc = pd.DataFrame()
df_adi_ohlc_1min = pd.DataFrame()
df_adi_ohlc_5min = pd.DataFrame()
df_adi_ohlc_15min = pd.DataFrame()

선물_체결시간 = ''

근월물_선물_현재가_버퍼 = []
차월물_선물_현재가_버퍼 = []

SP500_현재가_버퍼 = []
DOW_현재가_버퍼 = []
NASDAQ_현재가_버퍼 = []
HANGSENG_현재가_버퍼 = []
WTI_현재가_버퍼 = []
GOLD_현재가_버퍼 = []
EURO_현재가_버퍼 = []
YEN_현재가_버퍼 = []
ADI_현재가_버퍼 = []

flag_futures_cm_ohlc_open = False
flag_futures_nm_ohlc_open = False

flag_sp500_ohlc_open = False
flag_dow_ohlc_open = False
flag_nasdaq_ohlc_open = False
flag_hsi_ohlc_open = False
flag_wti_ohlc_open = False
flag_gold_ohlc_open = False
flag_euro_ohlc_open = False
flag_yen_ohlc_open = False
flag_adi_ohlc_open = False

flag_checkBox_plot1_bband = False
flag_checkBox_plot2_bband = False
flag_checkBox_plot3_bband = False
flag_checkBox_plot4_bband = False
flag_checkBox_plot5_bband = False
flag_checkBox_plot6_bband = False

flag_checkBox_plot1_one_eye = False
flag_checkBox_plot2_one_eye = False
flag_checkBox_plot3_one_eye = False
flag_checkBox_plot4_one_eye = False
flag_checkBox_plot5_one_eye = False
flag_checkBox_plot6_one_eye = False

flag_checkBox_plot1_psar = False
flag_checkBox_plot2_psar = False
flag_checkBox_plot3_psar = False
flag_checkBox_plot4_psar = False
flag_checkBox_plot5_psar = False
flag_checkBox_plot6_psar = False

fut_bollinger_symbol = ''
fut_psar_symbol = ''
fut_oe_symbol = ''
fut_mama_symbol = ''

Fibonacci_Ratio = [0.382, 0.5, 0.618, 0.707, 0.786, 0.886]

fut_quote_count_ratio = 0
선물_근월물_호가_잔량비 = 0
fut_cms_quote_count_ratio = 0
선물_차월물_호가_잔량비 = 0
fut_ccms_quote_count_ratio = 0
fut_ccms_quote_remainder_ratio = 0

nm_call_oloh_txt = ''
nm_put_oloh_txt = ''

flag_heartbeat = True

t0167_hour = 0
t0167_minute = 0
t0167_second = 0

flag_server_touch = False
flag_option_start = False

flag_t2301_eventloop = False
flag_t2835_eventloop = False
flag_t8416_eventloop = False

flag_logfile = False

flag_t8416_call_done = False
flag_t8416_put_done = False

flag_futures_update_is_running = False
flag_option_tick_update_is_running = False
flag_option_quote_update_is_running = False
flag_ovc_update_is_running = False

flag_screen_update_is_running = False
flag_plot_update_is_running = False

flag_plot1_update_is_running = False
flag_plot2_update_is_running = False
flag_plot3_update_is_running = False
flag_plot4_update_is_running = False
flag_plot5_update_is_running = False
flag_plot6_update_is_running = False

ui_start_time = 0

flag_option_pair_full = False

fut_avg_noise_ratio = 1
k_value = 0

flag_fut_vs_sp500_drate_direction = False
fut_quote_energy_direction = ''
fut_volume_power_energy_direction = ''

flag_1st_process_queue_empty = True
flag_2nd_process_queue_empty = True
flag_3rd_process_queue_empty = True
flag_4th_process_queue_empty = True

flag_call_dominant = False
flag_put_dominant = False

flag_call_strong = False
flag_call_weak = False
flag_put_strong = False
flag_put_weak = False

flag_calltable_checkstate_changed = False
flag_puttable_checkstate_changed = False

scoreboard_update_interval = MAIN_UPDATE_INTERVAL
chart_update_interval = CHART_UPDATE_INTERVAL

volatility_breakout_downward_point = 0
volatility_breakout_upward_point = 0
vb_txt = ''

flag_plot_update_interval_changed = False

main_loop_processing_time = 0
args_processing_time = 0

plot1_processing_time = 0
plot2_processing_time = 0
plot3_processing_time = 0
plot4_processing_time = 0
plot5_processing_time = 0
plot6_processing_time = 0

cm_fut_quote_min = 0
cm_fut_quote_mean = 0
cm_fut_quote_max = 0

nm_fut_quote_min = 0
nm_fut_quote_mean = 0
nm_fut_quote_max = 0

차월물_선물_호가잔량비_최소 = 1
차월물_선물_호가잔량비_최대 = 0

call_itm_number = CALL_ITM_REQUEST_NUMBER
call_otm_number = CALL_OTM_REQUEST_NUMBER

put_itm_number = PUT_ITM_REQUEST_NUMBER
put_otm_number = PUT_OTM_REQUEST_NUMBER

flag_call_itm_number_changed = False
flag_call_otm_number_changed = False
flag_put_itm_number_changed = False
flag_put_otm_number_changed = False

drop_txt = ''
drop_percent = 0
time_gap = 0
option_tick_total_size = 0
ovc_tick_total_size = 0

main_opt_totalsize = 0
main_totalsize = 0

flag_t8416_rerequest = False
flag_t8416_re_request_start = False

t8416_option_pairs_count = 0
t8416_loop_finish_time = 0

schedule_hour = 0
schedule_min = 0
schedule_sec = 0

flag_option_periodic_update_mode = OPTION_PERIODIC_UPDATE
flag_plot_sync_mode = PLOT_SYNC_MODE
flag_telegram_service = TELEGRAM_SERVICE
flag_search_moving_node = SEARCH_MOVING_NODE

flag_drop_reset1 = False
flag_drop_reset2 = False
flag_drop_reset3 = False
flag_drop_reset4 = False

view_time_tolerance = TIME_TOLERANCE

fh0_drop_percent = 0

t0167_server_hour = 0
t0167_server_minute = 0
t0167_server_second = 0

flag_t8416_data_receive_done = False

flag_score_board_start = False
flag_telegram_send_start = False
flag_telegram_listen_start = False

remove_set = {0, nan, NaN}

flag_under_call = False
flag_over_call = False

근월물_매수호가_총수량 = 0
근월물_매도호가_총수량 = 0
차월물_매수호가_총수량 = 0
차월물_매도호가_총수량 = 0

drate_gap = 0

sp500_tick_value = 0.25
dow_tick_value = 1
nasdaq_tick_value = 0.25
hsi_tick_value = 1
wti_tick_value = 0.01
gold_tick_value = 0.1
euro_tick_value = 0.00005
yen_tick_value = 0.5
adi_tick_value = 0.00005

main_close_event = None

#Fibonacci Retracements
Fibonacci_Retracements_Ratios = [0, 0.236, 0.382, 0.5, 0.618, 0.786, 1]

futures_fibonacci_levels = []
sp500_fibonacci_levels = []
dow_fibonacci_levels = []
nasdaq_fibonacci_levels = []
hsi_fibonacci_levels = []
wti_fibonacci_levels = []
gold_fibonacci_levels = []
euro_fibonacci_levels = []
yen_fibonacci_levels = []
adi_fibonacci_levels = []

RSI_PERIOD = 5
RSI_OFFSET = 50
RSI_SCALE_FACTOR = 2

CCI1_PERIOD = 25
CCI2_PERIOD = 50
CCI_CLIP = 400

CONVERSION_LINE_PERIOD = 9
BASE_LINE_PERIOD = 25
SPAN_B_PERIOD = 50

SSL_PERIOD = 10

flag_fut_one_eye_call = False
flag_fut_one_eye_put = False

flag_sp500_one_eye_call = False
flag_sp500_one_eye_put = False
flag_nasdaq_one_eye_call = False
flag_nasdaq_one_eye_put = False
flag_adi_one_eye_call = False
flag_adi_one_eye_put = False

flag_one_eye_call = False
flag_one_eye_put = False

DRATE_OFFSET = 0

분봉주기 = '1min'

flag_fut_zero_sec = False
flag_ovc_zero_sec = False

flag_ohlc = False

#####################################################################################################################################################################
# UI 파일정의
#####################################################################################################################################################################
#print('UI HIDE 기능 =', UI_HIDE)

if not UI_HIDE:
    UI_DIR = 'UI\\'

    if TARGET_MONTH == 'CM':
        main_ui_type = 'skybot_cm.ui'
    elif TARGET_MONTH == 'NM':    
        main_ui_type = 'skybot_nm.ui'
    else:
        pass

    scoreboard_ui_type = 'scoreboard.ui'
    chart_ui_type = 'skychart.ui'
    realtimeitem_ui_type = 'realtimeitem.ui'
    version_ui_type = 'version.ui'
else:
    pass

print('\r')
print('*************************************************************************************************************************')
print('전역변수 로딩완료...')
print('*************************************************************************************************************************')
print('\r')

#####################################################################################################################################################################
# 전역함수 --> 클래스로 처리?
#####################################################################################################################################################################
'''
def sqliteconn():
    conn = sqlite3.connect(DATABASE)
    return conn
'''

def calc_pivot(jl, jh, jc, do, float_index):
    if jl > 0 and jh > 0 and jc > 0 and do > 0:
        tmp = (jl + jh + jc)/3 + (do - jc)
        pivot = round(tmp, float_index)
        return pivot
    else:
        return 0

# 시간측정 함수
def logging_time_main_loop(original_fn):

    def wrapper_fn(*args, **kwargs):

        global main_loop_processing_time
        
        dt = datetime.now()

        start_time = timeit.default_timer()
        result = original_fn(*args, **kwargs)
        end_time = timeit.default_timer()

        main_loop_processing_time = (end_time - start_time) * 1000

        return result

    return wrapper_fn

# update realdata 시간측정 함수
def logging_time_with_args(original_fn):

    def wrapper_fn(*args, **kwargs):

        global args_processing_time
        
        dt = datetime.now()

        start_time = timeit.default_timer()
        result = original_fn(*args, **kwargs)
        end_time = timeit.default_timer()

        args_processing_time = (end_time - start_time) * 1000
        '''
        if args[-1]['szTrCode'] == 'OC0' or args[-1]['szTrCode'] == 'EC0':
            print("************* {0} Processing Time [{1:02d}:{2:02d}:{3:02d}]: {4:.2f} msec".format(args[-1]['szTrCode'], dt.hour, dt.minute, dt.second, args_processing_time))
        else:
            pass
        '''
        return result

    return wrapper_fn

def logging_time_plot1(original_fn):

    def wrapper_fn(*args, **kwargs):

        global plot1_processing_time
        
        dt = datetime.now()

        start_time = timeit.default_timer()
        result = original_fn(*args, **kwargs)
        end_time = timeit.default_timer()

        plot1_processing_time = (end_time - start_time) * 1000

        return result

    return wrapper_fn

def logging_time_plot2(original_fn):

    def wrapper_fn(*args, **kwargs):

        global plot2_processing_time
        
        dt = datetime.now()

        start_time = timeit.default_timer()
        result = original_fn(*args, **kwargs)
        end_time = timeit.default_timer()

        plot2_processing_time = (end_time - start_time) * 1000

        return result

    return wrapper_fn

def logging_time_plot3(original_fn):

    def wrapper_fn(*args, **kwargs):

        global plot3_processing_time
        
        dt = datetime.now()

        start_time = timeit.default_timer()
        result = original_fn(*args, **kwargs)
        end_time = timeit.default_timer()

        plot3_processing_time = (end_time - start_time) * 1000

        return result

    return wrapper_fn

def logging_time_plot4(original_fn):

    def wrapper_fn(*args, **kwargs):

        global plot4_processing_time
        
        dt = datetime.now()

        start_time = timeit.default_timer()
        result = original_fn(*args, **kwargs)
        end_time = timeit.default_timer()

        plot4_processing_time = (end_time - start_time) * 1000

        return result

    return wrapper_fn

def logging_time_plot5(original_fn):

    def wrapper_fn(*args, **kwargs):

        global plot5_processing_time
        
        dt = datetime.now()

        start_time = timeit.default_timer()
        result = original_fn(*args, **kwargs)
        end_time = timeit.default_timer()

        plot5_processing_time = (end_time - start_time) * 1000

        return result

    return wrapper_fn

def logging_time_plot6(original_fn):

    def wrapper_fn(*args, **kwargs):

        global plot6_processing_time
        
        dt = datetime.now()

        start_time = timeit.default_timer()
        result = original_fn(*args, **kwargs)
        end_time = timeit.default_timer()

        plot6_processing_time = (end_time - start_time) * 1000

        return result

    return wrapper_fn

class PandasModel(QtCore.QAbstractTableModel):
    def __init__(self, data=None, parent=None):
        QtCore.QAbstractTableModel.__init__(self, parent)
        self._data = data
        if data is None:
            self._data = DataFrame()

    def rowCount(self, parent=None):
        return len(self._data.index)

    def columnCount(self, parent=None):
        return self._data.columns.size

    def data(self, index, role=Qt.DisplayRole):
        if index.isValid():
            if role == Qt.DisplayRole:
                return str(self._data.values[index.row()][index.column()])
        return None

    def headerData(self, column, orientation, role=Qt.DisplayRole):
        if role != Qt.DisplayRole:
            return None
        if orientation == Qt.Horizontal:
            return self._data.columns[column]
        return int(column + 1)

    def update(self, data):
        self._data = data
        self.reset()

    def reset(self):
        self.beginResetModel()
        self.endResetModel()

    def flags(self, index):
        return QtCore.Qt.ItemIsEnabled

class RealDataTableModel(QAbstractTableModel):
    def __init__(self, parent=None):
        QtCore.QAbstractTableModel.__init__(self, parent)
        self.realdata = {}
        self.headers = ['종목코드', '현재가' , '전일대비', '등락률' , '매도호가', '매수호가', '누적거래량', '시가' , '고가' , '저가' , '거래회전율', '시가총액']

    def rowCount(self, index=QModelIndex()):
        return len(self.realdata)

    def columnCount(self, index=QModelIndex()):
        return len(self.headers)

    def data(self, index, role=Qt.DisplayRole):
        if (not index.isValid() or not (0 <= index.row() < len(self.realdata))):
            return None

        if role == Qt.DisplayRole:
            rows = []
            for k in self.realdata.keys():
                rows.append(k)
            one_row = rows[index.row()]
            selected_row = self.realdata[one_row]

            return selected_row[index.column()]

        return None

    def headerData(self, column, orientation, role=Qt.DisplayRole):
        if role != Qt.DisplayRole:
            return None
        if orientation == Qt.Horizontal:
            return self.headers[column]
        return int(column + 1)

    def flags(self, index):
        return QtCore.Qt.ItemIsEnabled

    def reset(self):
        self.beginResetModel()
        self.endResetModel()

# SKY WORK !!!
#####################################################################################################################################################################
# 스크린 갱신 쓰레드
#####################################################################################################################################################################
class ScreenUpdateWorker(QThread):

    trigger = pyqtSignal()

    def __init__(self):
        super().__init__()

        self.daemon = True      

    def run(self):

        while True:            

            if not flag_futures_update_is_running:
                self.trigger.emit()                                  
            else:
                pass
            
            QTest.qWait(scoreboard_update_interval)
#####################################################################################################################################################################
# 텔레그램 송신 쓰레드
#####################################################################################################################################################################
# 텔레그램 송수신시 약 1.2초 정도 전달지연 시간 발생함
class TelegramSendWorker(QThread):

    trigger = pyqtSignal()

    def __init__(self):
        super().__init__()

        self.daemon = True

    def run(self):

        while True:            

            if not flag_futures_update_is_running:
                self.trigger.emit()
            else:
                pass

            #QApplication.processEvents()
            QTest.qWait(1000 * TELEGRAM_SEND_INTERVAL)
#####################################################################################################################################################################
# 텔레그램 수신 쓰레드
#####################################################################################################################################################################
class TelegramListenWorker(QThread):

    trigger = pyqtSignal()

    def __init__(self):
        super().__init__()

        self.daemon = True

    def run(self):

        while True:

            if not flag_futures_update_is_running:
                self.trigger.emit()
            else:
                pass

            #QApplication.processEvents()
            QTest.qWait(1000 * TELEGRAM_POLLING_INTERVAL)
#####################################################################################################################################################################
# 실시간 데이타수신을 위한 쓰레드 클래스
#####################################################################################################################################################################
class RealTime_Thread_DataWorker(QThread):

    trigger = pyqtSignal(dict)
    trigger_exception = pyqtSignal(str, str)

    def __init__(self, dataQ):
        super().__init__()

        self.daemon = True
        self.dataQ = dataQ

        # 큐로 들어온 총 패킷수
        self.total_count = 0
        # 누락된 패킷수
        self.drop_count = 0
        # 수신된 총 패킷크기
        self.total_packet_size = 0
        # 수신된 총 옵션 패킷크기
        self.total_option_packet_size = 0

        self.sys_drop_count = 0
        
        self.JIF = JIF(parent=self)

        self.YJ = YJ_(parent=self)
        self.YFC = YFC(parent=self)
        self.YS3 = YS3(parent=self)
        self.YOC = YOC(parent=self)

        self.FUT_REAL_FC0 = FC0(parent=self)
        self.FUT_HO_FH0 = FH0(parent=self)
        self.OPT_REAL_OC0 = OC0(parent=self)
        self.OPT_HO_OH0 = OH0(parent=self)

        self.FUT_REAL_NC0 = NC0(parent=self)
        self.FUT_HO_NH0 = NH0(parent=self)
        self.OPT_REAL_EC0 = EC0(parent=self)
        self.OPT_HO_EH0 = EH0(parent=self)

        self.IJ = IJ_(parent=self)
        self.S3 = S3_(parent=self)
        self.BM = BM_(parent=self)
        self.PM = PM_(parent=self)

        self.OVC = OVC(parent=self)
        self.OVH = OVH(parent=self)
        self.WOC = WOC(parent=self)
        self.MK2 = MK2(parent=self)

        self.NWS = NWS(parent=self)
        
    def get_packet_info(self):

        return self.drop_count, self.sys_drop_count, self.dataQ.qsize(), self.total_count, self.total_packet_size, self.total_option_packet_size

    def RequestRealData(self, type, code='0'):

        if type == 'JIF':
            # 장운영 정보 요청
            self.JIF.AdviseRealData(code)

        elif type == 'YJ':
            # KOSPI 예상체결 요청
            self.YJ.AdviseRealData(code)

        elif type == 'YFC':
            # 지수선물 예상체결 요청
            self.YFC.AdviseRealData(code)

        elif type == 'YS3':
            # KOSPI 주요업체 예상체결 요청
            self.YS3.AdviseRealData(code)

        elif type == 'YOC':
            # 지수옵션 예상체결 요청
            self.YOC.AdviseRealData(code)

        elif type == 'FUT_REAL_FC0':
            # 선물 실시간 주간 가격 요청
            self.FUT_REAL_FC0.AdviseRealData(code)

        elif type == 'FUT_HO_FH0':
            # 선물 실시간 주간 호가 요청
            self.FUT_HO_FH0.AdviseRealData(code)

        elif type == 'OPT_REAL_OC0':
            # 옵션 실시간 주간 가격 요청
            self.OPT_REAL_OC0.AdviseRealData(code)

        elif type == 'OPT_HO_OH0':
            # 옵션 실시간 주간 호가 요청
            self.OPT_HO_OH0.AdviseRealData(code)

        elif type == 'FUT_REAL_NC0':
            # 선물 실시간 야간 가격 요청
            self.FUT_REAL_NC0.AdviseRealData(code)

        elif type == 'FUT_HO_NH0':
            # 선물 실시간 야간 호가 요청
            self.FUT_HO_NH0.AdviseRealData(code)

        elif type == 'OPT_REAL_EC0':
            # 옵션 실시간 야간 가격 요청
            self.OPT_REAL_EC0.AdviseRealData(code)

        elif type == 'OPT_HO_EH0':
            # 옵션 실시간 야간 호가 요청
            self.OPT_HO_EH0.AdviseRealData(code)

        elif type == 'IJ':
            # KOSPI/KOSPI200/KOSDAQ 지수요청
            self.IJ.AdviseRealData(code)

        elif type == 'S3':
            # KOSPI 주요업체(SAMSUNG) 체결 요청
            self.S3.AdviseRealData(code)

        elif type == 'BM':
            # 업종별 투자자별 매매현황 요청
            self.BM.AdviseRealData(code)

        elif type == 'PM':
            # 프로그램 매매현황 요청
            self.PM.AdviseRealData()

        elif type == 'OVC':
            # 해외선물 체결가격 실시간 요청
            self.OVC.AdviseRealData(code)

        elif type == 'NWS':
            # 실시간 뉴스요청
            self.NWS.AdviseRealData()
        else:
            pass

    def CancelRealData(self, type, code='0'):

        if type == 'JIF':
            # 장운영 정보 요청취소
            self.JIF.UnadviseRealData()

        elif type == 'YJ':
            # KOSPI 예상체결 요청취소
            self.YJ.UnadviseRealData()

        elif type == 'YFC':
            # 지수선물 예상체결 요청취소
            self.YFC.UnadviseRealData()

        elif type == 'YS3':
            # KOSPI 주요업체 예상체결 요청취소
            self.YS3.UnadviseRealData()

        elif type == 'YOC':
            # 지수옵션 예상체결 요청취소
            self.YOC.UnadviseRealData()

        elif type == 'FUT_REAL_FC0':
            # 선물 실시간 가격 요청취소
            self.FUT_REAL_FC0.UnadviseRealDataWithKey(code)

        elif type == 'FUT_HO_FH0':
            # 선물 실시간 호가 요청취소
            #self.FUT_HO_FH0.UnadviseRealData()
            self.FUT_HO_FH0.UnadviseRealDataWithKey(code)

        elif type == 'OPT_REAL_OC0':
            # 옵션 실시간 가격 요청취소
            self.OPT_REAL_OC0.UnadviseRealData()

        elif type == 'OPT_HO_OH0':
            # 옵션 실시간 호가 요청취소
            self.OPT_HO_OH0.UnadviseRealData()

        elif type == 'FUT_REAL_NC0':
            # 선물 실시간 가격 요청취소
            self.FUT_REAL_NC0.UnadviseRealDataWithKey(code)

        elif type == 'FUT_HO_NH0':
            # 선물 실시간 호가 요청취소
            #self.FUT_HO_NH0.UnadviseRealData()
            self.FUT_HO_NH0.UnadviseRealDataWithKey(code)

        elif type == 'OPT_REAL_EC0':
            # 옵션 실시간 가격 요청취소
            self.OPT_REAL_EC0.UnadviseRealData()

        elif type == 'OPT_HO_EH0':
            # 옵션 실시간 호가 요청취소
            self.OPT_HO_EH0.UnadviseRealData()

        elif type == 'IJ':
            # KOSPI/KOSPI200/KOSDAQ 지수 요청취소
            self.IJ.UnadviseRealDataWithKey(code)

        elif type == 'S3':
            # KOSPI 주요업체(SAMSUNG) 체결 요청취소
            self.S3.UnadviseRealDataWithKey(code)

        elif type == 'BM':
            # 업종별 투자자별 매매현황 요청취소
            self.BM.UnadviseRealData()

        elif type == 'PM':
            # 프로그램 매매현황 요청취소
            self.PM.UnadviseRealData()

        elif type == 'OVC':
            # 해외선물 체결가격 실시간 요청취소
            # 개별항목 취소가 안됨!!! --> 좌측정열로 8자리 맞추어야함(ljust함수 사용)
            self.OVC.UnadviseRealDataWithKey(code)

        elif type == 'NWS':
            # 실시간 뉴스 요청취소
            self.NWS.UnadviseRealData()
        else:
            pass

    def CancelAllRealData(self):

        self.JIF.UnadviseRealData()

        self.YJ.UnadviseRealData()
        self.YFC.UnadviseRealData()
        self.YS3.UnadviseRealData()
        self.YOC.UnadviseRealData()

        self.FUT_REAL_FC0.UnadviseRealData()
        self.FUT_HO_FH0.UnadviseRealData()
        self.OPT_REAL_OC0.UnadviseRealData()
        self.OPT_HO_OH0.UnadviseRealData()

        self.FUT_REAL_NC0.UnadviseRealData()
        self.FUT_HO_NH0.UnadviseRealData()
        self.OPT_REAL_EC0.UnadviseRealData()
        self.OPT_HO_EH0.UnadviseRealData()

        self.IJ.UnadviseRealData()

        self.S3.UnadviseRealData()
        self.BM.UnadviseRealData()
        self.PM.UnadviseRealData()

        self.OVC.UnadviseRealData()
        self.NWS.UnadviseRealData()

    # 실시간 수신 콜백함수
    def OnReceiveRealData(self, result):

        self.dataQ.put(result, False)

    def run(self):

        global flag_1st_process_queue_empty, flag_drop_reset1

        while True:

            try:
                if not self.dataQ.empty():
                
                    flag_1st_process_queue_empty = False

                    dt = datetime.now()
                    systime = dt.hour * 3600 + dt.minute * 60 + dt.second 

                    data = self.dataQ.get(False)

                    self.total_count += 1
                    self.total_packet_size += sys.getsizeof(data)

                    if flag_drop_reset1:
                        self.drop_count = 0
                        self.sys_drop_count = 0
                        self.total_count = 0
                        flag_drop_reset1 = False
                    else:
                        pass
                    
                    if not flag_futures_update_is_running:

                        szTrCode = data['tr_code']                          

                        if szTrCode == 'JIF':

                            self.trigger.emit(data)

                        elif szTrCode == 'BM_':

                            self.trigger.emit(data)

                        elif szTrCode == 'PM_':

                            self.trigger.emit(data)                        

                        elif szTrCode == 'YJ_':

                            realtime_hour = int(data['수신시간'][0:2])
                            realtime_min = int(data['수신시간'][2:4])
                            realtime_sec = int(data['수신시간'][4:6])

                            realtime = realtime_hour * 3600 + realtime_min * 60 + realtime_sec

                            if abs((systime - system_server_time_gap) - realtime) < view_time_tolerance:
                                self.trigger.emit(data)
                            else:
                                self.drop_count += 1

                        elif szTrCode == 'YFC':

                            realtime_hour = int(data['수신시간'][0:2])
                            realtime_min = int(data['수신시간'][2:4])
                            realtime_sec = int(data['수신시간'][4:6])

                            realtime = realtime_hour * 3600 + realtime_min * 60 + realtime_sec

                            if abs((systime - system_server_time_gap) - realtime) < view_time_tolerance:
                                self.trigger.emit(data)
                            else:
                                self.drop_count += 1       

                        elif szTrCode == 'YOC':

                            realtime_hour = int(data['수신시간'][0:2])
                            realtime_min = int(data['수신시간'][2:4])
                            realtime_sec = int(data['수신시간'][4:6])

                            realtime = realtime_hour * 3600 + realtime_min * 60 + realtime_sec

                            if abs((systime - system_server_time_gap) - realtime) < view_time_tolerance:
                                self.trigger.emit(data)
                            else:
                                self.drop_count += 1

                        elif szTrCode == 'YS3':

                            realtime_hour = int(data['수신시간'][0:2])
                            realtime_min = int(data['수신시간'][2:4])
                            realtime_sec = int(data['수신시간'][4:6])

                            realtime = realtime_hour * 3600 + realtime_min * 60 + realtime_sec

                            if abs((systime - system_server_time_gap) - realtime) < view_time_tolerance:
                                self.trigger.emit(data)
                            else:
                                self.drop_count += 1             

                        elif szTrCode == 'OVC':

                            realtime_hour = int(data['수신시간'][0:2])
                            realtime_min = int(data['수신시간'][2:4])
                            realtime_sec = int(data['수신시간'][4:6])

                            realtime = realtime_hour * 3600 + realtime_min * 60 + realtime_sec

                            if abs((systime - system_server_time_gap) - realtime) < view_time_tolerance:
                                self.trigger.emit(data)
                            else:
                                self.drop_count += 1

                        elif szTrCode == 'FH0':

                            realtime_hour = int(data['수신시간'][0:2])
                            realtime_min = int(data['수신시간'][2:4])
                            realtime_sec = int(data['수신시간'][4:6])

                            realtime = realtime_hour * 3600 + realtime_min * 60 + realtime_sec

                            if abs((systime - system_server_time_gap) - realtime) < view_time_tolerance:
                                self.trigger.emit(data)
                            else:
                                self.drop_count += 1

                        elif szTrCode == 'NH0':

                            realtime_hour = int(data['수신시간'][0:2])
                            realtime_min = int(data['수신시간'][2:4])
                            realtime_sec = int(data['수신시간'][4:6])

                            realtime = realtime_hour * 3600 + realtime_min * 60 + realtime_sec

                            if abs((systime - system_server_time_gap) - realtime) < view_time_tolerance:
                                self.trigger.emit(data)
                            else:
                                self.drop_count += 1

                        elif szTrCode == 'FC0':

                            realtime_hour = int(data['수신시간'][0:2])
                            realtime_min = int(data['수신시간'][2:4])
                            realtime_sec = int(data['수신시간'][4:6])

                            realtime = realtime_hour * 3600 + realtime_min * 60 + realtime_sec

                            if abs((systime - system_server_time_gap) - realtime) < view_time_tolerance:
                                self.trigger.emit(data)
                            else:
                                self.drop_count += 1

                        elif szTrCode == 'NC0':

                            realtime_hour = int(data['수신시간'][0:2])
                            realtime_min = int(data['수신시간'][2:4])
                            realtime_sec = int(data['수신시간'][4:6])

                            realtime = realtime_hour * 3600 + realtime_min * 60 + realtime_sec

                            if abs((systime - system_server_time_gap) - realtime) < view_time_tolerance:
                                self.trigger.emit(data)
                            else:
                                self.drop_count += 1

                        elif szTrCode == 'IJ_':

                            realtime_hour = int(data['수신시간'][0:2])
                            realtime_min = int(data['수신시간'][2:4])
                            realtime_sec = int(data['수신시간'][4:6])

                            realtime = realtime_hour * 3600 + realtime_min * 60 + realtime_sec

                            if abs((systime - system_server_time_gap) - realtime) < view_time_tolerance:
                                self.trigger.emit(data)
                            else:
                                self.drop_count += 1

                        elif szTrCode == 'OC0':

                            realtime_hour = int(data['수신시간'][0:2])
                            realtime_min = int(data['수신시간'][2:4])
                            realtime_sec = int(data['수신시간'][4:6])

                            realtime = realtime_hour * 3600 + realtime_min * 60 + realtime_sec

                            self.total_option_packet_size += sys.getsizeof(data)

                            if abs((systime - system_server_time_gap) - realtime) < view_time_tolerance:
                                self.trigger.emit(data)
                            else:
                                self.drop_count += 1

                        elif szTrCode == 'OH0':

                            realtime_hour = int(data['수신시간'][0:2])
                            realtime_min = int(data['수신시간'][2:4])
                            realtime_sec = int(data['수신시간'][4:6])

                            realtime = realtime_hour * 3600 + realtime_min * 60 + realtime_sec

                            self.total_option_packet_size += sys.getsizeof(data)

                            if abs((systime - system_server_time_gap) - realtime) < view_time_tolerance:
                                self.trigger.emit(data)
                            else:
                                self.drop_count += 1

                        elif szTrCode == 'EC0':

                            realtime_hour = int(data['수신시간'][0:2])
                            realtime_min = int(data['수신시간'][2:4])
                            realtime_sec = int(data['수신시간'][4:6])

                            realtime = realtime_hour * 3600 + realtime_min * 60 + realtime_sec

                            if abs((systime - system_server_time_gap) - realtime) < view_time_tolerance:
                                self.trigger.emit(data)
                            else:
                                self.drop_count += 1

                        elif szTrCode == 'EH0':

                            if int(data['수신시간'][0:2]) >= 24:
                                realtime_hour = int(data['수신시간'][0:2]) - 24
                            else:                            
                                realtime_hour = int(data['수신시간'][0:2])

                            realtime_min = int(data['수신시간'][2:4])
                            realtime_sec = int(data['수신시간'][4:6])

                            realtime = realtime_hour * 3600 + realtime_min * 60 + realtime_sec

                            if abs((systime - system_server_time_gap) - realtime) < view_time_tolerance:
                                self.trigger.emit(data)
                            else:
                                self.drop_count += 1 

                        elif szTrCode == 'S3_':

                            realtime_hour = int(data['수신시간'][0:2])
                            realtime_min = int(data['수신시간'][2:4])
                            realtime_sec = int(data['수신시간'][4:6])

                            realtime = realtime_hour * 3600 + realtime_min * 60 + realtime_sec

                            if abs((systime - system_server_time_gap) - realtime) < view_time_tolerance:
                                self.trigger.emit(data)
                            else:
                                self.drop_count += 1                       
                        else:
                            pass                    
                    else:
                        self.sys_drop_count += 1                
                else:
                    flag_1st_process_queue_empty = True

            except Exception as e:
                
                # e 클래스의 이름은 type(e).__name__, 예외항목 내용은 str(e)
                txt = '{0} 큐 쓰레드에서 {1}타입의 {2}예외가 발생했습니다.'.format(szTrCode, type(e).__name__, str(e))
                print(txt)

                self.trigger_exception.emit(szTrCode, str(e))

#####################################################################################################################################################################
# 실시간 데이타수신을 위한 멀티프로세스 쓰레드 클래스
#####################################################################################################################################################################
class RealTime_Futures_MP_DataWorker(QThread):

    # 수신데이타 타입이 list이면 TR데이타, tuple이면 실시간데이타. 
    trigger_list = pyqtSignal(list)
    trigger_dict = pyqtSignal(dict)
    trigger_exception = pyqtSignal(str, str)

    def __init__(self, dataQ):
        super().__init__()

        self.daemon = True
        self.dataQ = dataQ
        self.realdata = None

        # 큐로 들어온 총 패킷수
        self.total_count = 0
        # 누락된 패킷수
        self.drop_count = 0
        # 수신된 총 패킷크기
        self.total_packet_size = 0

        self.fh0_total_count = 0
        self.fh0_drop_count = 0

        self.sys_drop_count = 0
        self.waiting_tasks = 0

    def get_packet_info(self):

        return (self.drop_count + self.sys_drop_count), self.sys_drop_count, self.waiting_tasks, self.total_count, self.total_packet_size

    def get_fh0_packet_info(self):

        return self.fh0_drop_count, self.fh0_total_count

    # 큐로부터 주기적으로 데이타를 가져오기 위함
    def get_realdata(self):

        return self.realdata

    def run(self):

        global flag_1st_process_queue_empty, flag_drop_reset1                  

        while True:

            try:
                if not self.dataQ.empty():

                    flag_1st_process_queue_empty = False                    

                    self.realdata = self.dataQ.get()
                    self.waiting_tasks = self.dataQ.qsize()

                    self.total_count += 1
                    self.total_packet_size += sys.getsizeof(self.realdata)                    

                    if flag_drop_reset1:
                        self.drop_count = 0
                        self.sys_drop_count = 0
                        self.total_count = 0
                        flag_drop_reset1 = False
                    else:
                        pass

                    if type(self.realdata) == list:

                        self.trigger_list.emit(self.realdata)

                    elif type(self.realdata) == tuple:                       

                        tick_type, tickdata = self.realdata

                        szTrCode = tickdata['tr_code']

                        if szTrCode == 'JIF' or szTrCode == 'BM_':
                            print(f"\r[{datetime.now()}] 선물체결 TR Type : {tickdata['tr_code']}, System time : {tickdata['system_time']}, waiting tasks : {self.waiting_tasks}", end='')                            
                        else:
                            print(f"\r[{datetime.now()}] 선물체결 TR Type : {tickdata['tr_code']}, System time : {tickdata['system_time']}, 체결시간 : {tickdata['수신시간']}, waiting tasks : {self.waiting_tasks}", end='')                         

                        if CSV_FILE:
                            tickdata_lst = list(tickdata.values())
                            handle_tick_data(tickdata_lst, tick_type)
                        else:
                            pass                        

                        if len(tickdata['system_time']) == 5:
                            systime = int(tickdata['system_time'][0:1]) * 3600 + int(tickdata['system_time'][1:3]) * 60 + int(tickdata['system_time'][3:5])
                        else:
                            systime = int(tickdata['system_time'][0:2]) * 3600 + int(tickdata['system_time'][2:4]) * 60 + int(tickdata['system_time'][4:6])                       

                        if szTrCode != 'JIF' and szTrCode != 'BM_':

                            if tickdata['수신시간'] == '888888' or tickdata['수신시간'] == '999999' or tickdata['수신시간'] == 'EXTJJJ':
                                pass
                            else:
                                if len(tickdata['수신시간']) == 5:
                                    realtime_hour = int(tickdata['수신시간'][0:1])
                                    realtime_min = int(tickdata['수신시간'][1:3])
                                    realtime_sec = int(tickdata['수신시간'][3:5])
                                else:
                                    realtime_hour = int(tickdata['수신시간'][0:2])
                                    realtime_min = int(tickdata['수신시간'][2:4])
                                    realtime_sec = int(tickdata['수신시간'][4:6])

                                realtime = realtime_hour * 3600 + realtime_min * 60 + realtime_sec
                        else:
                            pass

                        # 옵션은 초당 50회 이상 입력됨
                        if szTrCode == 'IJ_' and DayTime:

                            if abs((systime - system_server_time_gap) - realtime) >= view_time_tolerance:
                                self.drop_count += 1
                            else:
                                pass

                        if szTrCode == 'PM_' and DayTime:

                            if abs((systime - system_server_time_gap) - realtime) >= view_time_tolerance:
                                self.drop_count += 1
                            else:
                                pass                           

                        elif szTrCode == 'S3_' and DayTime:

                            if abs((systime - system_server_time_gap) - realtime) >= view_time_tolerance:
                                self.drop_count += 1
                            else:
                                pass                        
                        
                        elif szTrCode == 'FC0' and DayTime:

                            if abs((systime - system_server_time_gap) - realtime) >= view_time_tolerance:
                                self.drop_count += 1
                            else:
                                pass

                        elif szTrCode == 'FH0' and DayTime:

                            self.fh0_total_count += 1

                            if abs((systime - system_server_time_gap) - realtime) >= view_time_tolerance:
                                self.drop_count += 1
                                self.fh0_drop_count += 1
                            else:
                                pass

                        elif szTrCode == 'NC0':

                            if abs((systime - system_server_time_gap) - realtime) >= view_time_tolerance:
                                self.drop_count += 1
                            else:
                                pass                        

                        elif szTrCode == 'NH0':

                            if abs((systime - system_server_time_gap) - realtime) >= view_time_tolerance:
                                self.drop_count += 1
                            else:
                                pass       
                        else:
                            pass

                        self.trigger_dict.emit(tickdata)       
                    else:
                        pass                    
                else:
                    flag_1st_process_queue_empty = True

            except Exception as e:
                
                txt = '{0} RealTime_Futures_MP_DataWorker 쓰레드에서 {1}타입의 {2}예외가 발생했습니다.\r'.format(tickdata['tr_code'], type(e).__name__, str(e))
                print(txt)

                self.trigger_exception.emit(tickdata['tr_code'], str(e))

#####################################################################################################################################################################
# 실시간 데이타수신을 위한 멀티프로세스 2nd 쓰레드 클래스(옵션 가격만 처리)
#####################################################################################################################################################################
class RealTime_Option_Tick_MP_DataWorker(QThread):

    # 수신데이타 타입이 list이면 TR데이타, tuple이면 실시간데이타.        
    trigger_list = pyqtSignal(list)
    trigger_dict = pyqtSignal(dict)

    def __init__(self, dataQ):
        super().__init__()

        self.daemon = True
        self.dataQ = dataQ
        self.realdata = None

        # 큐로 들어온 총 패킷수
        self.total_count = 0
        # 누락된 패킷수
        self.drop_count = 0
        # 수신된 총 패킷크기
        self.total_packet_size = 0
        # 수신된 총 옵션 패킷크기
        self.total_option_packet_size = 0        

        self.sys_drop_count = 0
        self.waiting_tasks = 0

    def get_packet_info(self):

        return (self.drop_count + self.sys_drop_count), self.sys_drop_count, self.waiting_tasks, self.total_count, self.total_packet_size

    def run(self):

        global flag_2nd_process_queue_empty, flag_drop_reset2

        while True:
            
            try:
                if not self.dataQ.empty():

                    flag_2nd_process_queue_empty = False

                    self.realdata = self.dataQ.get()
                    self.waiting_tasks = self.dataQ.qsize()

                    self.total_count += 1                    
                    self.total_packet_size += sys.getsizeof(self.realdata)

                    if flag_drop_reset2:
                        self.drop_count = 0
                        self.sys_drop_count = 0
                        self.total_count = 0
                        flag_drop_reset2 = False
                    else:
                        pass

                    if type(self.realdata) == list:

                        self.trigger_list.emit(self.realdata)

                    elif type(self.realdata) == tuple:

                        tick_type, tickdata = self.realdata
                        print(f"\r[{datetime.now()}] 옵션체결 System time : {tickdata['system_time']}, 체결시간 : {tickdata['수신시간']}, waiting tasks : {self.waiting_tasks}", end='')

                        if CSV_FILE:
                            tickdata_lst = list(tickdata.values())
                            handle_tick_data(tickdata_lst, tick_type)
                        else:
                            pass

                        if len(tickdata['system_time']) == 1:
                            systime = int(tickdata['system_time'][0:1])
                        elif len(tickdata['system_time']) == 2:
                            systime = int(tickdata['system_time'][0:2])
                        elif len(tickdata['system_time']) == 3:
                            systime = int(tickdata['system_time'][0:1]) * 60 + int(tickdata['system_time'][1:3])
                        elif len(tickdata['system_time']) == 4:
                            systime = int(tickdata['system_time'][0:2]) * 60 + int(tickdata['system_time'][2:4])
                        elif len(tickdata['system_time']) == 5:
                            systime = int(tickdata['system_time'][0:1]) * 3600 + int(tickdata['system_time'][1:3]) * 60 + int(tickdata['system_time'][3:5])
                        elif len(tickdata['system_time']) == 6:
                            systime = int(tickdata['system_time'][0:2]) * 3600 + int(tickdata['system_time'][2:4]) * 60 + int(tickdata['system_time'][4:6])
                        else:
                            pass

                        if len(tickdata['수신시간']) == 1:
                            realtime_hour = 0
                            realtime_min = 0
                            realtime_sec = int(tickdata['수신시간'][0:1])
                        elif len(tickdata['수신시간']) == 2:
                            realtime_hour = 0
                            realtime_min = 0
                            realtime_sec = int(tickdata['수신시간'][0:2])
                        elif len(tickdata['수신시간']) == 3:
                            realtime_hour = 0
                            realtime_min = int(tickdata['수신시간'][0:1])
                            realtime_sec = int(tickdata['수신시간'][1:3])
                        elif len(tickdata['수신시간']) == 4:
                            realtime_hour = 0
                            realtime_min = int(tickdata['수신시간'][0:2])
                            realtime_sec = int(tickdata['수신시간'][2:4])
                        elif len(tickdata['수신시간']) == 5:
                            realtime_hour = int(tickdata['수신시간'][0:1])
                            realtime_min = int(tickdata['수신시간'][1:3])
                            realtime_sec = int(tickdata['수신시간'][3:5])
                        elif len(tickdata['수신시간']) == 6:
                            realtime_hour = int(tickdata['수신시간'][0:2])
                            realtime_min = int(tickdata['수신시간'][2:4])
                            realtime_sec = int(tickdata['수신시간'][4:6])
                        else:
                            pass

                        realtime = realtime_hour * 3600 + realtime_min * 60 + realtime_sec

                        self.total_option_packet_size += sys.getsizeof(tickdata)                        

                        if abs((systime - system_server_time_gap) - realtime) >= view_time_tolerance:
                            self.drop_count += 1
                        else:
                            pass

                        self.trigger_dict.emit(tickdata)
                    else:
                        pass
                else:
                    flag_2nd_process_queue_empty = True

            except Exception as e:
                
                txt = '{0} RealTime_Option_Tick_MP_DataWorker 쓰레드에서 {1}타입의 {2}예외가 발생했습니다.\r'.format(tickdata['tr_code'], type(e).__name__, str(e))
                print(txt)
            
#####################################################################################################################################################################
# 실시간 데이타수신을 위한 멀티프로세스 3rd 쓰레드 클래스(옵션 호가만 처리)
#####################################################################################################################################################################
class RealTime_Option_Quote_MP_DataWorker(QThread):

    # 수신데이타 타입이 list이면 TR데이타, tuple이면 실시간데이타.        
    trigger_list = pyqtSignal(list)
    trigger_dict = pyqtSignal(dict)

    def __init__(self, dataQ):
        super().__init__()

        self.daemon = True
        self.dataQ = dataQ
        self.realdata = None

        # 큐로 들어온 총 패킷수
        self.total_count = 0
        # 누락된 패킷수
        self.drop_count = 0
        # 수신된 총 패킷크기
        self.total_packet_size = 0
        # 수신된 총 옵션 패킷크기
        self.total_option_packet_size = 0        

        self.sys_drop_count = 0
        self.waiting_tasks = 0

    def get_packet_info(self):

        return (self.drop_count + self.sys_drop_count), self.sys_drop_count, self.waiting_tasks, self.total_count, self.total_packet_size

    def run(self):

        global flag_3rd_process_queue_empty, flag_drop_reset3

        while True:

            try:
                if not self.dataQ.empty():

                    flag_3rd_process_queue_empty = False

                    self.realdata = self.dataQ.get()
                    self.waiting_tasks = self.dataQ.qsize()

                    self.total_count += 1                    
                    self.total_packet_size += sys.getsizeof(self.realdata)

                    if flag_drop_reset3:
                        self.drop_count = 0
                        self.sys_drop_count = 0
                        self.total_count = 0
                        flag_drop_reset3 = False
                    else:
                        pass

                    if type(self.realdata) == list:

                        self.trigger_list.emit(self.realdata)

                    elif type(self.realdata) == tuple:

                        tick_type, tickdata = self.realdata
                        print(f"\r[{datetime.now()}] 옵션호가 System time : {tickdata['system_time']}, 체결시간 : {tickdata['수신시간']}, waiting tasks : {self.waiting_tasks}", end='')                        

                        if len(tickdata['system_time']) == 5:
                            systime = int(tickdata['system_time'][0:1]) * 3600 + int(tickdata['system_time'][1:3]) * 60 + int(tickdata['system_time'][3:5])
                        else:
                            systime = int(tickdata['system_time'][0:2]) * 3600 + int(tickdata['system_time'][2:4]) * 60 + int(tickdata['system_time'][4:6])

                        szTrCode = tickdata['tr_code']

                        if szTrCode == 'OH0':

                            if CSV_FILE:
                                tickdata_lst = list(tickdata.values())
                                handle_tick_data(tickdata_lst, tick_type)
                            else:
                                pass

                            self.total_option_packet_size += sys.getsizeof(tickdata)

                            if len(tickdata['수신시간']) == 5:
                                realtime_hour = int(tickdata['수신시간'][0:1])
                                realtime_min = int(tickdata['수신시간'][1:3])
                                realtime_sec = int(tickdata['수신시간'][3:5])
                            else:
                                realtime_hour = int(tickdata['수신시간'][0:2])
                                realtime_min = int(tickdata['수신시간'][2:4])
                                realtime_sec = int(tickdata['수신시간'][4:6])                            

                        elif szTrCode == 'EH0':

                            #print('EH0 수신시간 = {0}\r'.format(tickdata['수신시간']))

                            if int(tickdata['수신시간'][0:2]) >= 24:
                                realtime_hour = int(tickdata['수신시간'][0:2]) - 24
                            else:                            
                                realtime_hour = int(tickdata['수신시간'][0:2])

                            realtime_min = int(tickdata['수신시간'][2:4])
                            realtime_sec = int(tickdata['수신시간'][4:6])
                        else:
                            pass                        

                        realtime = realtime_hour * 3600 + realtime_min * 60 + realtime_sec

                        if abs((systime - system_server_time_gap) - realtime) >= view_time_tolerance:
                            self.drop_count += 1
                        else:
                            pass

                        self.trigger_dict.emit(tickdata)
                    else:
                        pass
                else:
                    flag_3rd_process_queue_empty = True

            except Exception as e:
                
                txt = '{0} RealTime_Option_Quote_MP_DataWorker 쓰레드에서 {1}타입의 {2}예외가 발생했습니다.\r'.format(tickdata['tr_code'], type(e).__name__, str(e))
                print(txt)
#####################################################################################################################################################################
# 실시간 데이타수신을 위한 멀티프로세스 4th 쓰레드 클래스(해외선물만 처리)
#####################################################################################################################################################################
class RealTime_OVC_MP_DataWorker(QThread):

    # 수신데이타 타입이 list이면 TR데이타, tuple이면 실시간데이타.        
    trigger_list = pyqtSignal(list)
    trigger_dict = pyqtSignal(dict)

    def __init__(self, dataQ):
        super().__init__()

        self.daemon = True
        self.dataQ = dataQ
        self.realdata = None

        # 큐로 들어온 총 패킷수
        self.total_count = 0
        # 누락된 패킷수
        self.drop_count = 0
        # 수신된 총 패킷크기
        self.total_packet_size = 0    

        self.sys_drop_count = 0
        self.waiting_tasks = 0

    def get_packet_info(self):

        return (self.drop_count + self.sys_drop_count), self.sys_drop_count, self.waiting_tasks, self.total_count, self.total_packet_size

    def run(self):

        global flag_4th_process_queue_empty, flag_drop_reset4

        while True:

            try:
                if not self.dataQ.empty():

                    flag_4th_process_queue_empty = False

                    self.realdata = self.dataQ.get()
                    self.waiting_tasks = self.dataQ.qsize()

                    self.total_count += 1                    
                    self.total_packet_size += sys.getsizeof(self.realdata)

                    if flag_drop_reset4:
                        self.drop_count = 0
                        self.sys_drop_count = 0
                        self.total_count = 0
                        flag_drop_reset4 = False
                    else:
                        pass

                    if type(self.realdata) == list:

                        self.trigger_list.emit(self.realdata)

                    elif type(self.realdata) == tuple:                    

                        tick_type, tickdata = self.realdata
                        print(f"\r[{datetime.now()}] 해외선물 System time : {tickdata['system_time']}, 체결시간 : {tickdata['수신시간']}, waiting tasks : {self.waiting_tasks}", end='')

                        if CSV_FILE:
                            tickdata_lst = list(tickdata.values())
                            handle_tick_data(tickdata_lst, tick_type)
                        else:
                            pass

                        systime = int(tickdata['system_time'][0:2]) * 3600 + int(tickdata['system_time'][2:4]) * 60 + int(tickdata['system_time'][4:6])

                        realtime_hour = int(tickdata['수신시간'][0:2])
                        realtime_min = int(tickdata['수신시간'][2:4])
                        realtime_sec = int(tickdata['수신시간'][4:6])

                        realtime = realtime_hour * 3600 + realtime_min * 60 + realtime_sec

                        if abs((systime - system_server_time_gap) - realtime) >= view_time_tolerance:
                            self.drop_count += 1
                        else:
                            pass

                        self.trigger_dict.emit(tickdata)
                    else:
                        pass
                else:
                    flag_4th_process_queue_empty = True

            except Exception as e:
                
                txt = '{0} RealTime_OVC_MP_DataWorker 쓰레드에서 {1}타입의 {2}예외가 발생했습니다.\r'.format(tickdata['tr_code'], type(e).__name__, str(e))
                print(txt)
#####################################################################################################################################################################
# Speaker Thread Class
#####################################################################################################################################################################
class SpeakerWorker(QThread):

    def __init__(self):
        super().__init__()

        self.daemon = True

        self.txt = ''
        self.flag_speak = False

    def setText(self, txt):

        self.txt = txt
        self.flag_speak = True
    
    def run(self):

        # 서브 스레드에서 COM 객체를 사용하려면 COM 라이브러리를 초기화 해야함
        pythoncom.CoInitialize()

        while True:            

            try:
                if self.flag_speak:
                    print('TTS Text =', self.txt)
                    Speak(self.txt)
                    self.flag_speak = False
                else:
                    pass

                #QApplication.processEvents()
                QTest.qWait(1)

            except Exception as e:
                
                txt = 'SpeakerWorker 쓰레드에서 {1}타입의 {2}예외가 발생했습니다.\r'.format(type(e).__name__, str(e))
                print(txt)

        # 사용 후 uninitialize
        pythoncom.CoUninitialize()

#####################################################################################################################################################################
# Sky Chart Update Thread
#####################################################################################################################################################################
class PlotUpdateWorker1(QThread):

    trigger = pyqtSignal()

    def __init__(self):
        super().__init__()

        self.daemon = True

    def run(self):

        global flag_plot_update_interval_changed

        while True:            

            try:
                if flag_plot_update_interval_changed:
                    print('chart_update_interval changed...')
                    flag_plot_update_interval_changed = False
                else:
                    pass

                if not flag_screen_update_is_running and not flag_plot1_update_is_running:
                    self.trigger.emit()

                QTest.qWait(chart_update_interval)

            except Exception as e:
                
                txt = 'PlotUpdateWorker1 쓰레드에서 {1}타입의 {2}예외가 발생했습니다.\r'.format(type(e).__name__, str(e))
                print(txt)            

class PlotUpdateWorker2(QThread):

    trigger = pyqtSignal()

    def __init__(self):
        super().__init__()

        self.daemon = True

    def run(self):

        while True:

            try:
                if not flag_screen_update_is_running and not flag_plot2_update_is_running:
                    self.trigger.emit()

                QTest.qWait(chart_update_interval)

            except Exception as e:
                
                txt = 'PlotUpdateWorker2 쓰레드에서 {1}타입의 {2}예외가 발생했습니다.\r'.format(type(e).__name__, str(e))
                print(txt)

class PlotUpdateWorker3(QThread):

    trigger = pyqtSignal()

    def __init__(self):
        super().__init__()

        self.daemon = True

    def run(self):

        while True:

            try:
                if not flag_screen_update_is_running and not flag_plot3_update_is_running:
                    self.trigger.emit()

                QTest.qWait(chart_update_interval)

            except Exception as e:
                
                txt = 'PlotUpdateWorker3 쓰레드에서 {1}타입의 {2}예외가 발생했습니다.\r'.format(type(e).__name__, str(e))
                print(txt)

class PlotUpdateWorker4(QThread):

    trigger = pyqtSignal()

    def __init__(self):
        super().__init__()

        self.daemon = True

    def run(self):

        while True:

            try:
                if not flag_screen_update_is_running and not flag_plot4_update_is_running:
                    self.trigger.emit()

                QTest.qWait(chart_update_interval)

            except Exception as e:
                
                txt = 'PlotUpdateWorker4 쓰레드에서 {1}타입의 {2}예외가 발생했습니다.\r'.format(type(e).__name__, str(e))
                print(txt)

class PlotUpdateWorker5(QThread):

    trigger = pyqtSignal()

    def __init__(self):
        super().__init__()

        self.daemon = True

    def run(self):

        while True:

            try:
                if not flag_screen_update_is_running and not flag_plot5_update_is_running:
                    self.trigger.emit()

                QTest.qWait(chart_update_interval)

            except Exception as e:
                
                txt = 'PlotUpdateWorker5 쓰레드에서 {1}타입의 {2}예외가 발생했습니다.\r'.format(type(e).__name__, str(e))
                print(txt)

class PlotUpdateWorker6(QThread):

    trigger = pyqtSignal()

    def __init__(self):
        super().__init__()

        self.daemon = True

    def run(self):

        while True:

            try:
                if not flag_screen_update_is_running and not flag_plot6_update_is_running:
                    self.trigger.emit()

                QTest.qWait(chart_update_interval)

            except Exception as e:
                
                txt = 'PlotUpdateWorker6 쓰레드에서 {1}타입의 {2}예외가 발생했습니다.\r'.format(type(e).__name__, str(e))
                print(txt)

#####################################################################################################################################################################
# Candle Chart Plot Class
## Create a subclass of GraphicsObject.
## The only required methods are paint() and boundingRect() 
## (see QGraphicsItem documentation)
#####################################################################################################################################################################
'''
class CandlestickItem(pg.GraphicsObject):
    def __init__(self, data):
        pg.GraphicsObject.__init__(self)
        self.data = data  ## data must have fields: time, open, close, min, max
        self.generatePicture()
    
    def generatePicture(self):
        ## pre-computing a QPicture object allows paint() to run much more quickly, 
        ## rather than re-drawing the shapes every time.
        self.picture = QtGui.QPicture()
        p = QtGui.QPainter(self.picture)
        p.setPen(pg.mkPen('w'))
        w = (self.data[1][0] - self.data[0][0]) / 3.
        for (t, open, close, min, max) in self.data:
            p.drawLine(QtCore.QPointF(t, min), QtCore.QPointF(t, max))
            if open > close:
                p.setBrush(pg.mkBrush('r'))
            else:
                p.setBrush(pg.mkBrush('g'))
            p.drawRect(QtCore.QRectF(t-w, open, w*2, close-open))
        p.end()
    
    def paint(self, p, *args):
        p.drawPicture(0, 0, self.picture)
    
    def boundingRect(self):
        ## boundingRect _must_ indicate the entire area that will be drawn on
        ## or else we will get artifacts and possibly crashing.
        ## (in this case, QPicture does all the work of computing the bouning rect for us)
        return QtCore.QRectF(self.picture.boundingRect())
'''
class CandlestickItem(pg.GraphicsObject):
    def __init__(self, data):
        pg.GraphicsObject.__init__(self)
        self.df = data 
        self.generatePicture()

    def generatePicture(self):
        self.picture = QPicture()
        p = QPainter(self.picture)

        for i in range(len(self.df)):
            index = self.df.index[i]
            unix_ts = index.timestamp()
            open = self.df.loc[index]['체결가격', 'open']
            high = self.df.loc[index]['체결가격', 'high']
            low = self.df.loc[index]['체결가격', 'low']
            close = self.df.loc[index]['체결가격', 'close']

            if close >= open:
                p.setPen(pg.mkPen(color='r'))
                p.setBrush(pg.mkBrush(color='r'))
            else:
                p.setPen(pg.mkPen(color='b'))
                p.setBrush(pg.mkBrush(color='b'))

            p.drawLine(QPointF(i, high), QPointF(i, low))
            p.drawRect(QRectF(i-0.25, open, 0.5, close-open))
        p.end()

    def paint(self, p, *args):
        p.drawPicture(0, 0, self.picture)

    def boundingRect(self):
        return QRectF(self.picture.boundingRect())

#####################################################################################################################################################################
# 버전 UI Class
#####################################################################################################################################################################
if UI_HIDE:
        import version_ui
        Ui_버전 = version_ui.Ui_Dialog
else:
    Ui_버전, QtBaseClass_버전 = uic.loadUiType(UI_DIR + version_ui_type)
#####################################################################################################################################################################
class 화면_버전(QDialog, Ui_버전):

    def __init__(self, parent=None):
        super(화면_버전, self).__init__(parent)
        self.setAttribute(Qt.WA_DeleteOnClose)
        self.setupUi(self)
        self.setWindowTitle('버전')
        self.parent = parent
        
        self.model = PandasModel()
        self.tableView.setModel(self.model)

        df = DataFrame(data=프로그램정보,columns=['제목','내용'])

        self.model.update(df)
        for i in range(len(df.columns)):
            self.tableView.resizeColumnToContents(i)

#####################################################################################################################################################################
# 옵션전광판 UI Class
#####################################################################################################################################################################
if UI_HIDE:
        import scoreboard_ui
        Ui_선물옵션전광판 = scoreboard_ui.Ui_Dialog
else:
    Ui_선물옵션전광판, QtBaseClass_선물옵션전광판 = uic.loadUiType(UI_DIR + scoreboard_ui_type)
#####################################################################################################################################################################
class 화면_선물옵션전광판(QDialog, Ui_선물옵션전광판):

    exceptionOccurred = pyqtSignal(Exception, str)

    def __init__(self, parent=None):

        super(화면_선물옵션전광판, self).__init__(parent, flags = Qt.WindowTitleHint | Qt.WindowMinMaxButtonsHint | Qt.WindowCloseButtonHint)
        #super(화면_선물옵션전광판, self).__init__()
        #self.setWindowFlags(Qt.WindowTitleHint | Qt.WindowMinMaxButtonsHint | Qt.WindowCloseButtonHint)
        self.setAttribute(Qt.WA_DeleteOnClose)
        #self.setAttribute(Qt.WA_DeleteOnClose, True)

        self.setupUi(self)
        self.parent = parent
        
        print('선물옵션전광판 다이얼로그를 초기화합니다...')  

        self.flag_score_board_open = True
        #self.main_ui_update_time = 0
        self.flag_refresh = False

        # 조회요청 TR 객체생성
        self.XQ_t0167 = t0167(parent=self) # 시간 조회
        self.XQ_t1514 = t1514(parent=self) # 코스피/코스닥 지수 조회
        self.XQ_t8432 = t8432(parent=self) # 지수선물 마스터조회 API용
        self.XQ_t8433 = t8433(parent=self) # 지수옵션 마스터조회 API용
        self.XQ_t2301 = t2301(parent=self) # 주간 옵션전광판 조회
        self.XQ_t2101 = t2101(parent=self) # 주간 선물전광판 조회
        #self.XQ_t2801 = t2801(parent=self) # 야간 선물전광판 조회
        self.XQ_t2835 = t2835(parent=self) # 야간 옵션전광판 조회
        self.XQ_t8415 = t8415(parent=self) # 선물/옵션 차트(N분) 조회
        self.XQ_t8416 = t8416(parent=self) # 선물/옵션 차트(일,주,월) 조회
        
        self.call_code = []
        self.put_code = []
        
        self.opt_total_actval_list = []
        self.call_open_list = []
        self.put_open_list = []

        self.realdata_request_number = 0

        # 종료 버튼으로 종료할 때 실행시킨다. __del__ 실행을 보장하기 위해서 사용
        atexit.register(self.__del__)     
        
        global TARGET_MONTH, MONTH_FIRSTDAY
        global widget_title, CURRENT_MONTH, NEXT_MONTH, MONTH_AFTER_NEXT, SP500, DOW, NASDAQ, fut_code
        global KSE_START_HOUR        
        global call_node_state, put_node_state, COREVAL
        
        # 이벤트루프 & 쓰레드 정의, 쓰레드 시작은 start(), 종료는 terminate()
        self.t8416_call_event_loop = QEventLoop()
        self.t8416_put_event_loop = QEventLoop()

        # t2301, t2835 이벤트루프(1초당 2건) --> 옵션 실시간수신 문제 보완목적
        self.t2301_event_loop = QEventLoop()
        #self.t2835_event_loop = QEventLoop()
                
        #self.screen_update_worker = ScreenUpdateWorker()
        #self.screen_update_worker.trigger.connect(self.update_screen)

        '''
        self.telegram_send_worker = TelegramSendWorker()
        self.telegram_send_worker.trigger.connect(self.send_telegram_message)

        self.telegram_listen_worker = TelegramListenWorker()
        self.telegram_listen_worker.trigger.connect(self.listen_telegram_message)
        '''
        self.상태그림 = ['▼', '▬', '▲']
        self.상태문자 = ['매도', '대기', '매수']
        self.특수문자 = \
        ['�', '☆', '★', '※', '○', '●', '◎', '☀', '☁', '√', '↗', '⬈', '↘', '⬊', '↑', '⬆', '↓', '⬇', '↕', '♣', '♠', '♥', '♦', 'Δ', '【', '】', '🕘', '✔', '⬍', '⌛', '⬀ ⬁ ⬂ ⬃']

        self.특수문자_숫자 = ['⑴ ⑵ ⑶ ⑷ ⑸ ⑹ ⑺ ⑻ ⑼ ⑽ ⓵ ⓶ ⓷ ⓸ ⓹ ⓺ ⓻ ⓼ ⓽ ⓾']

        if 스크린번호 == 0:
            print('주모니터 화면({0}X{1})입니다.'.format(screen_info.width(), screen_info.height()))
        else:
            print('{0}번 보조모니터 화면({1}X{2})입니다.'.format(스크린번호, screen_info.width(), screen_info.height()))
        
        # 윈도우 크기 및 표시위치 지정
        left = screen_info.left()
        right = screen_info.right()
        top = screen_info.top()

        if screen_info.width() > 1920:

            width = 1920
        else:
            width = screen_info.width()

        if screen_info.height() > 1080:

            height = 1080
        else:
            height = screen_info.height()

        self.setGeometry(right - 1920, top + 30, width, height - 60)

        if screen_info.width() > 1920 and screen_info.height() > 1080:

            self.showNormal()

            if pyqt_version == '5.9.2':
                self.parent.move(left - 10, top - 1)
            else:
                self.parent.move(left - 1, top - 1)
        else:
            self.showMaximized()        
        
        print('current month = %s, month firstday = %s, next month = %s, month after next = %s, next month select = %s, SP500 = %s, DOW = %s, NASDAQ = %s, WTI = %s' \
            % (CURRENT_MONTH, MONTH_FIRSTDAY, NEXT_MONTH, MONTH_AFTER_NEXT, TARGET_MONTH, SP500, DOW, NASDAQ, WTI))
        
        # 위젯 초기화
        self.textBrowser.setStyleSheet("background-color: black; color: springgreen; font-family: Consolas; font-size: 9pt; font: Normal")
        
        self.pushButton_start.setStyleSheet('QPushButton \
                                            {background-color: \
                                            qlineargradient(spread:reflect, x1:1, y1:0, x2:0.995, y2:1, stop:0 rgba(218, 218, 218, 255), stop:0.305419 rgba(0, 7, 11, 255), stop:0.935961 rgba(2, 11, 18, 255), stop:1 rgba(240, 240, 240, 255)); \
                                            color: yellow; font-family: Consolas; font-size: 10pt; font: Bold; border-style: solid; border-width: 1px; border-color: yellow; border-radius: 5px} \
                                            QPushButton:hover {background-color: black; color: white} \
                                            QPushButton:pressed {background-color: gold}')

        self.pushButton_scrshot.setStyleSheet('QPushButton \
                                            {background-color: \
                                            qlineargradient(spread:reflect, x1:1, y1:0, x2:0.995, y2:1, stop:0 rgba(218, 218, 218, 255), stop:0.305419 rgba(0, 7, 11, 255), stop:0.935961 rgba(2, 11, 18, 255), stop:1 rgba(240, 240, 240, 255)); \
                                            color: yellow; font-family: Consolas; font-size: 10pt; font: Bold; border-style: solid; border-width: 1px; border-color: yellow; border-radius: 5px} \
                                            QPushButton:hover {background-color: black; color: white} \
                                            QPushButton:pressed {background-color: gold}')               
        '''
        if not DARK_STYLESHEET:
            self.pushButton_start.setFont(QFont("Consolas", 10, QFont.Bold))
            self.pushButton_scrshot.setFont(QFont("Consolas", 10, QFont.Bold))
        else:
            pass
        '''        
        self.pushButton_start.setText(' Start ')          
        self.pushButton_scrshot.setText(' ScrShot ')
        
        #self.pushButton_scrshot.setCheckable(True)
        #self.pushButton_scrshot.toggle()

        self.exceptionOccurred.connect(self.on_exceptionOccurred)

        self.pushButton_start.clicked.connect(self.start_button_clicked)
        self.pushButton_scrshot.clicked.connect(self.telegram_button_clicked)

        #self.checkBox_NM.setText('PF')
        #self.checkBox_NM.setChecked(flag_option_periodic_update_mode)
        
        # label_main_time, label_atm 관련 setFont 추후 검토필요!!!
        self.label_main_time.setStyleSheet('background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:0.857143, y2:0.857955, stop:0 rgba(10, 242, 251, 255), stop:1 rgba(224, 6, 159, 255)); \
                                            color: black; font-family: Consolas; font-size: 9pt; font: Bold; border-style: solid; border-width: 1px; border-color: black; border-radius: 5px')
        self.label_main_time.setText("🕘")        
        
        self.label_atm.setStyleSheet('background-color: qlineargradient(spread:reflect, x1:0.5, y1:0.5, x2:1, y2:0.5, stop:0 rgba(255, 199, 0, 255), stop:1 rgba(192, 5, 67, 255)); \
                                    color: black; font-family: Consolas; font-size: 9pt; font: Bold; border-style: solid; border-width: 1px; border-color: black; border-radius: 5px')
        self.label_atm.setText("Basis(양합:양차)")        
        
        self.label_1st_index.setStyleSheet('background-color: qlineargradient(spread:reflect, x1:1, y1:0, x2:0.995, y2:1, stop:0 rgba(218, 218, 218, 255), stop:0.305419 \
            rgba(0, 7, 11, 255), stop:0.935961 rgba(2, 11, 18, 255), stop:1 rgba(240, 240, 240, 255)); \
            color: yellow; font-family: Consolas; font-size: 9pt; font: Bold; border-style: solid; border-width: 1px; border-color: yellow; border-radius: 5px')
        self.label_1st_index.setText("KOSPI: 가격 (전일대비, 등락율)")
        
        self.label_2nd_index.setStyleSheet('background-color: qlineargradient(spread:reflect, x1:1, y1:0, x2:0.995, y2:1, stop:0 rgba(218, 218, 218, 255), stop:0.305419 \
            rgba(0, 7, 11, 255), stop:0.935961 rgba(2, 11, 18, 255), stop:1 rgba(240, 240, 240, 255)); \
            color: yellow; font-family: Consolas; font-size: 9pt; font: Bold; border-style: solid; border-width: 1px; border-color: yellow; border-radius: 5px')
        self.label_2nd_index.setText("KOSDAQ: 가격 (전일대비, 등락율)")
        
        self.label_3rd_index.setStyleSheet('background-color: qlineargradient(spread:reflect, x1:1, y1:0, x2:0.995, y2:1, stop:0 rgba(218, 218, 218, 255), stop:0.305419 \
            rgba(0, 7, 11, 255), stop:0.935961 rgba(2, 11, 18, 255), stop:1 rgba(240, 240, 240, 255)); \
            color: yellow; font-family: Consolas; font-size: 9pt; font: Bold; border-style: solid; border-width: 1px; border-color: yellow; border-radius: 5px')
        self.label_3rd_index.setText("SAMSUNG: 가격 (전일대비, 등락율)")
        
        self.label_4th_index.setStyleSheet('background-color: qlineargradient(spread:reflect, x1:1, y1:0, x2:0.995, y2:1, stop:0 rgba(218, 218, 218, 255), stop:0.305419 \
            rgba(0, 7, 11, 255), stop:0.935961 rgba(2, 11, 18, 255), stop:1 rgba(240, 240, 240, 255)); \
            color: yellow; font-family: Consolas; font-size: 9pt; font: Bold; border-style: solid; border-width: 1px; border-color: yellow; border-radius: 5px')
        self.label_4th_index.setText("Reserved")
        
        self.label_5th_index.setStyleSheet('background-color: qlineargradient(spread:reflect, x1:1, y1:0, x2:0.995, y2:1, stop:0 rgba(218, 218, 218, 255), stop:0.305419 \
            rgba(0, 7, 11, 255), stop:0.935961 rgba(2, 11, 18, 255), stop:1 rgba(240, 240, 240, 255)); \
            color: yellow; font-family: Consolas; font-size: 9pt; font: Bold; border-style: solid; border-width: 1px; border-color: yellow; border-radius: 5px')
        self.label_5th_index.setText("Reserved")
        
        self.label_6th_index.setStyleSheet('background-color: qlineargradient(spread:reflect, x1:1, y1:0, x2:0.995, y2:1, stop:0 rgba(218, 218, 218, 255), stop:0.305419 \
            rgba(0, 7, 11, 255), stop:0.935961 rgba(2, 11, 18, 255), stop:1 rgba(240, 240, 240, 255)); \
            color: yellow; font-family: Consolas; font-size: 9pt; font: Bold; border-style: solid; border-width: 1px; border-color: yellow; border-radius: 5px')
        self.label_6th_index.setText("Reserved")        

        header_stylesheet = '::section{Background-color: black; color: white; border-style: solid; border-width: 1px; border-color: gray}'
        call_header_stylesheet = '::section{Background-color: black; color: lightgreen; font-family: Consolas; font-size: 9pt; font: Normal; border-style: solid; border-width: 1px; border-color: gray}'
        put_header_stylesheet = '::section{Background-color: black; color: lightgreen; font-family: Consolas; font-size: 9pt; font: Normal; border-style: solid; border-width: 1px; border-color: gray}'
        fut_header_stylesheet = '::section{Background-color: black; color: lightgreen; font-family: Consolas; font-size: 9pt; font: Normal; border-style: solid; border-width: 1px; border-color: gray}'
        quote_header_stylesheet = '::section{Background-color: black; color: lightgreen; font-family: Consolas; font-size: 9pt; font: Normal; border-style: solid; border-width: 1px; border-color: gray}'
        supply_header_stylesheet = '::section{Background-color: black; color: lightgreen; font-family: Consolas; font-size: 9pt; font: Normal; border-style: solid; border-width: 1px; border-color: gray}'
        
        dt = datetime.now()

        txt = '[{0:02d}:{1:02d}:{2:02d}] GUI 초기화중...\r'.format(dt.hour, dt.minute, dt.second)
        #self.parent.textBrowser.append(txt)
        #self.textBrowser.append(txt)
        
        # 선물 tablewidget 초기화
        self.tableWidget_fut.setRowCount(3)
        self.tableWidget_fut.setColumnCount(Futures_column.OID.value + 1)
        self.tableWidget_fut.horizontalHeader().setStyleSheet(fut_header_stylesheet)

        self.tableWidget_fut.setHorizontalHeaderLabels(['MLT', '▲▼', 'HMSC', 'HMDC', 'HMSR', 'HMDR', 'HCR', 'HRR', '전저', '전고', '종가', '피봇', '시가', '저가', '현재가', '고가', '시가갭', '대비', '진폭', '체결', 'OI', 'OI↕'])
        self.tableWidget_fut.verticalHeader().setVisible(False)
        self.tableWidget_fut.setAlternatingRowColors(True)

        for i in range(3):
            for j in range(Futures_column.OID.value + 1):
                item = QTableWidgetItem("{0}".format('0'))
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(검정색))
                item.setForeground(QBrush(흰색))
                self.tableWidget_fut.setItem(i, j, item)
                self.tableWidget_fut.resizeColumnToContents(j)

        item = QTableWidgetItem('-')
        item.setTextAlignment(Qt.AlignCenter)
        item.setBackground(QBrush(검정색))
        item.setForeground(QBrush(흰색))
        self.tableWidget_fut.setItem(0, Futures_column.OLOH.value, item)

        item = QTableWidgetItem('-')
        item.setTextAlignment(Qt.AlignCenter)
        item.setBackground(QBrush(검정색))
        item.setForeground(QBrush(흰색))
        self.tableWidget_fut.setItem(1, Futures_column.OLOH.value, item)

        item = QTableWidgetItem("{0}".format('SF'))
        item.setTextAlignment(Qt.AlignCenter)
        item.setBackground(QBrush(검정색))
        item.setForeground(QBrush(흰색))
        self.tableWidget_fut.setItem(2, Futures_column.OLOH.value, item)
        
        item = QTableWidgetItem("{0}".format('차월물'))
        item.setTextAlignment(Qt.AlignCenter)
        item.setBackground(QBrush(검정색))
        item.setForeground(QBrush(녹색))
        self.tableWidget_fut.setItem(0, 0, item)

        item = QTableWidgetItem("{0}".format('근월물'))        
        item.setTextAlignment(Qt.AlignCenter)
        item.setBackground(QBrush(검정색))
        item.setForeground(QBrush(녹색))
        self.tableWidget_fut.setItem(1, 0, item)

        item = QTableWidgetItem("{0}".format('KP200'))
        item.setTextAlignment(Qt.AlignCenter)
        item.setBackground(QBrush(검정색))
        item.setForeground(QBrush(녹색))
        self.tableWidget_fut.setItem(2, 0, item)                

        item = QTableWidgetItem("{0}".format('F/C\n진폭비'))
        item.setTextAlignment(Qt.AlignCenter)
        item.setBackground(QBrush(라임))
        item.setForeground(QBrush(검정색))
        self.tableWidget_fut.setItem(2, Futures_column.거래량.value, item)

        self.tableWidget_fut.resizeColumnsToContents()
        
        # Quote tablewidget 초기화
        self.tableWidget_quote.setRowCount(1)
        self.tableWidget_quote.setColumnCount(Quote_column.미결종합.value)

        self.tableWidget_quote.horizontalHeader().setStyleSheet(quote_header_stylesheet)

        self.tableWidget_quote.setHorizontalHeaderLabels(['콜CMSC', '콜CMDC', '콜CMSR', '콜CMDR', '풋CMSC', '풋CMDC', '풋CMSR', '풋CMDR', '콜HCR', '콜HRR', '풋HCR', '풋HRR', '∑HCRΔ/∑HRRΔ', '∑콜OI:∑풋OI'])
        self.tableWidget_quote.verticalHeader().setVisible(False)

        header = self.tableWidget_quote.horizontalHeader()
        header.setSectionResizeMode(QHeaderView.ResizeToContents)
        header.setSectionResizeMode(12, QHeaderView.Stretch)

        self.tableWidget_quote.verticalHeader().setStretchLastSection(True)
        self.tableWidget_quote.clearContents()

        for i in range(Quote_column.미결종합.value):
            item = QTableWidgetItem('0')
            item.setTextAlignment(Qt.AlignCenter)
            item.setBackground(QBrush(검정색))
            item.setForeground(QBrush(흰색))
            self.tableWidget_quote.setItem(0, i, item)

        # 수급 tablewidget 초기화
        self.tableWidget_supply.setRowCount(1)
        self.tableWidget_supply.setColumnCount(Supply_column.종합.value)

        self.tableWidget_supply.horizontalHeader().setStyleSheet(supply_header_stylesheet)

        self.tableWidget_supply.setHorizontalHeaderLabels(['외인선물', '외인현물', '기관선물', '기관현물', '개인선물', '개인현물', '프로그램', '종합'])
        self.tableWidget_supply.verticalHeader().setVisible(False)

        header = self.tableWidget_supply.horizontalHeader()
        header.setSectionResizeMode(QHeaderView.ResizeToContents)
        header.setSectionResizeMode(7, QHeaderView.Stretch)

        self.tableWidget_supply.verticalHeader().setStretchLastSection(True)
        self.tableWidget_supply.clearContents()

        for i in range(Supply_column.종합.value - 1):
            item = QTableWidgetItem('0')
            item.setTextAlignment(Qt.AlignCenter)
            item.setBackground(QBrush(검정색))
            item.setForeground(QBrush(흰색))
            self.tableWidget_supply.setItem(0, i, item)

        item = QTableWidgetItem('선물합\n현물합')
        item.setTextAlignment(Qt.AlignCenter)
        item.setBackground(QBrush(검정색))
        item.setForeground(QBrush(흰색))
        self.tableWidget_supply.setItem(0, Supply_column.종합.value - 1, item)    
        
        # call tablewidget 초기화
        self.tableWidget_call.setRowCount(ActvalCount)
        self.tableWidget_call.setColumnCount(Option_column.OID.value + 1)
        
        self.tableWidget_call.horizontalHeader().setStyleSheet(call_header_stylesheet)

        self.tableWidget_call.setHorizontalHeaderLabels(['콜', '행사가', '▲:▼', '기준가', '월저', '월고', '전저', '전고', 
        '종가\n✓', '피봇\n✓', '시가\n✓', '저가', '현재가', '고가', '시가갭\n%', '시가대비\n%', '진폭', '체결', '∑OI', 'OI↕'])
        self.tableWidget_call.verticalHeader().setVisible(False)
        self.tableWidget_call.setAlternatingRowColors(True)

        # put tablewidget 초기화
        self.tableWidget_put.setRowCount(ActvalCount)
        self.tableWidget_put.setColumnCount(Option_column.OID.value + 1)

        self.tableWidget_put.horizontalHeader().setStyleSheet(put_header_stylesheet)

        self.tableWidget_put.setHorizontalHeaderLabels(['풋', '행사가', '▲:▼', '기준가', '월저', '월고', '전저', '전고', 
        '종가\n✓', '피봇\n✓', '시가\n✓', '저가', '현재가', '고가', '시가갭\n%', '시가대비\n%', '진폭', '체결', '∑OI', 'OI↕'])
        self.tableWidget_put.verticalHeader().setVisible(False)
        self.tableWidget_put.setAlternatingRowColors(True)
        
        call_cell_widget = []
        put_cell_widget = []
        
        for i in range(ActvalCount):

            call_cell_widget.append(QWidget())            
            lay_out = QHBoxLayout(call_cell_widget[i])
            lay_out.addWidget(QCheckBox())
            lay_out.setAlignment(Qt.AlignCenter)          
            call_cell_widget[i].setLayout(lay_out)         
            self.tableWidget_call.setCellWidget(i, 0, call_cell_widget[i])

            put_cell_widget.append(QWidget())            
            lay_out = QHBoxLayout(put_cell_widget[i])
            lay_out.addWidget(QCheckBox())
            lay_out.setAlignment(Qt.AlignCenter)           
            put_cell_widget[i].setLayout(lay_out)
            self.tableWidget_put.setCellWidget(i, 0, put_cell_widget[i])

            item = QTableWidgetItem("{0}".format(''))
            self.tableWidget_call.setItem(i, 0, item)
            self.tableWidget_call.item(i, 0).setBackground(QBrush(검정색))
            self.tableWidget_call.item(i, 0).setForeground(QBrush(흰색))

            item = QTableWidgetItem("{0}".format(''))
            self.tableWidget_put.setItem(i, 0, item)
            self.tableWidget_put.item(i, 0).setBackground(QBrush(검정색))
            self.tableWidget_put.item(i, 0).setForeground(QBrush(흰색))

            # 테이블위젯내 체크박스 스테이트 변화 이벤트 발생로직
            call_channel = self.tableWidget_call.cellWidget(i, 0).findChild(type(QCheckBox()))
            call_channel.clicked.connect(lambda checked, row=i, col=0: self.OnCallTable_CheckStateChanged(checked, row, col))

            put_channel = self.tableWidget_put.cellWidget(i, 0).findChild(type(QCheckBox()))
            put_channel.clicked.connect(lambda checked, row=i, col=0: self.OnPutTable_CheckStateChanged(checked, row, col))

            for j in range(self.tableWidget_call.columnCount() - 1):

                item = QTableWidgetItem("{0}".format('0'))
                item.setTextAlignment(Qt.AlignCenter)
                self.tableWidget_call.setItem(i, j + 1, item)
                self.tableWidget_call.item(i, j + 1).setBackground(QBrush(검정색))
                self.tableWidget_call.item(i, j + 1).setForeground(QBrush(흰색))
                
                self.tableWidget_call.resizeColumnToContents(j + 1)

                item = QTableWidgetItem("{0}".format('0'))
                item.setTextAlignment(Qt.AlignCenter)
                self.tableWidget_put.setItem(i, j + 1, item)
                self.tableWidget_put.item(i, j + 1).setBackground(QBrush(검정색))
                self.tableWidget_put.item(i, j + 1).setForeground(QBrush(흰색))

                self.tableWidget_put.resizeColumnToContents(j + 1)

            # 긴 loop를 도는 동안 GUI 응답없음을 방지하기 위함
            if i % 10 == 0:                
                txt = ' 선물옵션 전광판 초기화중({0:.0f}%)...\r'.format((i / ActvalCount) * 100)
                self.parent.statusbar.showMessage(txt)
                QApplication.processEvents()
            else:
                pass

        txt = ' 선물옵션 전광판 초기화완료\r'
        self.parent.statusbar.showMessage(txt)

        # 선물관련 변수 초기화
        self.kp200_realdata = dict()
        self.fut_realdata = dict()
        self.cme_realdata = dict()

        self.kp200_realdata['KP200'] = 0.0
        self.kp200_realdata['전저'] = 0.0
        self.kp200_realdata['전고'] = 0.0
        self.kp200_realdata['종가'] = 0.0
        self.kp200_realdata['피봇'] = 0.0
        self.kp200_realdata['시가'] = 0.0
        self.kp200_realdata['시가갭'] = 0.0
        self.kp200_realdata['저가'] = 0.0
        self.kp200_realdata['현재가'] = 0.0
        self.kp200_realdata['고가'] = 0.0
        self.kp200_realdata['대비'] = 0
        self.kp200_realdata['진폭'] = 0.0
        self.kp200_realdata['거래량'] = 0
        self.kp200_realdata['미결'] = 0
        self.kp200_realdata['미결증감'] = 0

        self.fut_realdata['KP200'] = 0.0
        self.fut_realdata['전저'] = 0.0
        self.fut_realdata['전고'] = 0.0
        self.fut_realdata['종가'] = 0.0
        self.fut_realdata['피봇'] = 0.0
        self.fut_realdata['시가'] = 0.0
        self.fut_realdata['시가갭'] = 0.0
        self.fut_realdata['저가'] = 0.0
        self.fut_realdata['현재가'] = 0.0
        self.fut_realdata['고가'] = 0.0
        self.fut_realdata['대비'] = 0
        self.fut_realdata['등락율'] = 0.0
        self.fut_realdata['진폭'] = 0.0
        self.fut_realdata['거래량'] = 0
        self.fut_realdata['미결'] = 0
        self.fut_realdata['미결증감'] = 0

        self.cme_realdata['KP200'] = 0.0
        self.cme_realdata['전저'] = 0.0
        self.cme_realdata['전고'] = 0.0
        self.cme_realdata['종가'] = 0.0
        self.cme_realdata['피봇'] = 0.0
        self.cme_realdata['시가'] = 0.0
        self.cme_realdata['시가갭'] = 0.0
        self.cme_realdata['저가'] = 0.0
        self.cme_realdata['현재가'] = 0.0
        self.cme_realdata['고가'] = 0.0
        self.cme_realdata['대비'] = 0
        self.cme_realdata['진폭'] = 0.0
        self.cme_realdata['거래량'] = 0
        self.cme_realdata['미결'] = 0
        self.cme_realdata['미결증감'] = 0              
        
        fut_h_header = self.tableWidget_fut.horizontalHeader()
        fut_h_header.sectionClicked.connect(self.futures_horizontal_header_clicked)

        supply_h_header = self.tableWidget_supply.horizontalHeader()
        supply_h_header.sectionClicked.connect(self.supply_demand_horizontal_header_clicked)

        quote_h_header = self.tableWidget_quote.horizontalHeader()
        quote_h_header.sectionClicked.connect(self.quote_horizontal_header_clicked)

        self.tableWidget_fut.cellClicked.connect(self.futures_table_cell_clicked)
        self.tableWidget_supply.cellClicked.connect(self.supply_demand_table_cell_clicked)
        self.tableWidget_quote.cellClicked.connect(self.quote_table_cell_clicked)        

        # 컬럼 헤더 click시 Event 처리용.
        call_h_header = self.tableWidget_call.horizontalHeader()
        call_h_header.sectionClicked.connect(self.call_horizontal_header_clicked)

        put_h_header = self.tableWidget_put.horizontalHeader()
        put_h_header.sectionClicked.connect(self.put_horizontal_header_clicked)

        self.tableWidget_call.cellClicked.connect(self.call_table_cell_clicked)
        self.tableWidget_put.cellClicked.connect(self.put_table_cell_clicked)
        
        self.tableWidget_call.verticalScrollBar().valueChanged.connect(self.call_table_vertical_scroll_position)
        self.tableWidget_put.verticalScrollBar().valueChanged.connect(self.put_table_vertical_scroll_position)        
        
        #self.checkBox_NM.stateChanged.connect(self.checkBox_NM_checkState)        

        self.alternate_flag = True

        call_node_state = {'OLOH': True, '기준가': False, '월저': False, '월고': False, '전저': False, '전고': False, '종가': True, '피봇': True, '시가': True, '대비': False, '미결': False, '미결증감': False}
        put_node_state = {'OLOH': True, '기준가': False, '월저': False, '월고': False, '전저': False, '전고': False, '종가': True, '피봇': True, '시가': True, '대비': False, '미결': False, '미결증감': False}

        list_low1 = []
        list_low2 = []
        list_low3 = []
        list_low4 = []
        list_low5 = []

        list_high1 = []
        list_high2 = []
        list_high3 = []
        list_high4 = []
        list_high5 = []

        for i in range(len(DEFAULT_NODE_LIST)):

            QApplication.processEvents()

            list_low5.append(round(DEFAULT_NODE_LIST[i] - 0.05, 2))
            list_low4.append(round(DEFAULT_NODE_LIST[i] - 0.04, 2))
            list_low3.append(round(DEFAULT_NODE_LIST[i] - 0.03, 2))
            list_low2.append(round(DEFAULT_NODE_LIST[i] - 0.02, 2))
            list_low1.append(round(DEFAULT_NODE_LIST[i] - 0.01, 2))

            list_high1.append(round(DEFAULT_NODE_LIST[i] + 0.01, 2))
            list_high2.append(round(DEFAULT_NODE_LIST[i] + 0.02, 2))
            list_high3.append(round(DEFAULT_NODE_LIST[i] + 0.03, 2))
            list_high4.append(round(DEFAULT_NODE_LIST[i] + 0.04, 2))
            list_high5.append(round(DEFAULT_NODE_LIST[i] + 0.05, 2))

        if window.id == 'soojin65':
            global ResizeRowsToContents

            ResizeRowsToContents = True
            COREVAL = DEFAULT_NODE_LIST
        else:
            COREVAL = DEFAULT_NODE_LIST + list_low1 + list_low2 + list_low3 + list_low4 + list_low5 + list_high1 + list_high2 + list_high3 + list_high4 + list_high5
        
        COREVAL.sort()        
        
        if int(current_txt[0:2]) < 12:
            txt = '[{0:02d}:{1:02d}:{2:02d}] ♣♣♣ Good Morning! Have a Good Day ♣♣♣\r'.format(dt.hour, dt.minute, dt.second)
        else:
            txt = '[{0:02d}:{1:02d}:{2:02d}] ♣♣♣ Good Afternoon! Have a Good Day ♣♣♣\r'.format(dt.hour, dt.minute, dt.second)
        self.textBrowser.append(txt)
        
        txt = '[{0:02d}:{1:02d}:{2:02d}] OS Type : {3}\r'.format(dt.hour, dt.minute, dt.second, os_type)
        self.textBrowser.append(txt)

        if os.path.exists('SkyBot.exe'):

            buildtime = time.ctime(os.path.getmtime('SkyBot.exe'))
        else:
            buildtime = time.ctime(os.path.getmtime(__file__))

        if TELEGRAM_SERVICE:

            # 텔레그램 Webhook 등록여부를 체크한다.
            chk_webhook = Check_Webhook()

            if chk_webhook is not None:

                if chk_webhook.url != '':
                    # Webhook을 삭제한다.                    
                    print('telegram webhook =', chk_webhook)

                    Delete_Webhook()

                    txt = '[{0:02d}:{1:02d}:{2:02d}] 텔레그램 웹훅을 삭제합니다.\r'.format(dt.hour, dt.minute, dt.second)
                    self.textBrowser.append(txt)
                    print(txt)
                else:
                    txt = '[{0:02d}:{1:02d}:{2:02d}] 텔레그램 웹훅이 없습니다.\r'.format(dt.hour, dt.minute, dt.second)
                    self.textBrowser.append(txt)
                    print(txt)
            else:
                pass
        else:
            pass

        if DayTime:

            if TARGET_MONTH == 'CM':

                if not REAL_SERVER:
                    widget_title = repr(current_month) + '월 만기 주간 선물옵션(모의투자 서버) 전광판' + '(' + today_title + ')' + ' build : ' + buildtime
                else:
                    widget_title = repr(current_month) + '월 만기 주간 선물옵션(실투자 서버) 전광판' + '(' + today_title + ')' + ' build : ' + buildtime

                print(widget_title)
                ToYourTelegram("[{0:02d}:{1:02d}:{2:02d}] {3}월 만기 주간 SkyBot이 실행되었습니다.".format(dt.hour, dt.minute, dt.second, current_month))

            elif TARGET_MONTH == 'NM':

                if not REAL_SERVER:
                    widget_title = repr(next_month) + '월 만기 주간 선물옵션(모의투자 서버) 전광판' + '(' + today_title + ')' + ' build : ' + buildtime
                else:
                    widget_title = repr(next_month) + '월 만기 주간 선물옵션(실투자 서버) 전광판' + '(' + today_title + ')' + ' build : ' + buildtime

                ToYourTelegram("[{0:02d}:{1:02d}:{2:02d}] {3}월 만기 주간 SkyBot이 실행되었습니다.".format(dt.hour, dt.minute, dt.second, next_month))

            else:
                pass
        else:
            KSE_START_HOUR = 18            

            if MANGI_YAGAN:

                if TARGET_MONTH == 'CM':

                    if not REAL_SERVER:
                        widget_title = repr(next_month) + '월 만기 야간 선물옵션(모의투자 서버) 전광판' + '(' + today_title + ')' + ' build : ' + buildtime
                    else:
                        widget_title = repr(next_month) + '월 만기 야간 선물옵션(실투자 서버) 전광판' + '(' + today_title + ')' + ' build : ' + buildtime

                    ToYourTelegram("[{0:02d}:{1:02d}:{2:02d}] {3}월 만기 야간 SkyBot이 실행되었습니다.".format(dt.hour, dt.minute, dt.second, next_month))

                    print('next_month =', next_month)

                elif TARGET_MONTH == 'NM':

                    if not REAL_SERVER:
                        widget_title = repr(month_after_next) + '월 만기 야간 선물옵션(모의투자 서버) 전광판' + '(' + today_title + ')' + ' build : ' + buildtime
                    else:
                        widget_title = repr(month_after_next) + '월 만기 야간 선물옵션(실투자 서버) 전광판' + '(' + today_title + ')' + ' build : ' + buildtime

                    ToYourTelegram("[{0:02d}:{1:02d}:{2:02d}] {3}월 만기 야간 SkyBot이 실행되었습니다.".format(dt.hour, dt.minute, dt.second, month_after_next))
                else:
                    pass
            else:
                if TARGET_MONTH == 'CM':

                    if not REAL_SERVER:
                        widget_title = repr(current_month) + '월 만기 야간 선물옵션(모의투자 서버) 전광판' + '(' + today_title + ')' + ' build : ' + buildtime
                    else:
                        widget_title = repr(current_month) + '월 만기 야간 선물옵션(실투자 서버) 전광판' + '(' + today_title + ')' + ' build : ' + buildtime

                    ToYourTelegram("[{0:02d}:{1:02d}:{2:02d}] {3}월 만기 야간 SkyBot이 실행되었습니다.".format(dt.hour, dt.minute, dt.second, current_month))

                elif TARGET_MONTH == 'NM':

                    if not REAL_SERVER:
                        widget_title = repr(next_month) + '월 만기 야간 선물옵션(모의투자 서버) 전광판' + '(' + today_title + ')' + ' build : ' + buildtime
                    else:
                        widget_title = repr(next_month) + '월 만기 야간 선물옵션(실투자 서버) 전광판' + '(' + today_title + ')' + ' build : ' + buildtime

                    ToYourTelegram("[{0:02d}:{1:02d}:{2:02d}] {3}월 만기 야간 SkyBot이 실행되었습니다.".format(dt.hour, dt.minute, dt.second, next_month))

                else:
                    pass
        
        self.setWindowTitle(widget_title)
        
        if window.id == 'soojin65':
            txt = '[{0:02d}:{1:02d}:{2:02d}] COREVAL = {3}\r'.format(dt.hour, dt.minute, dt.second, COREVAL)
            self.textBrowser.append(txt)

            txt = '[{0:02d}:{1:02d}:{2:02d}] ResizeRowsToContents = {3}\r'.format(dt.hour, dt.minute, dt.second, ResizeRowsToContents)
            self.textBrowser.append(txt)
        else:
            pass
        
        global 진성맥점

        진성맥점 = 고정_진성맥점[:]
        print('진성맥점 =', 진성맥점)

        if bms_node_list:

            listsum = []

            for i in range(len(bms_node_list)):

                QApplication.processEvents()

                var1 = self.get_list_item(bms_node_list, i)
                var2 = self.get_list_item(bms_node_frequency_list, i)
                if var1 != None and var2 != None: # 유효한 것만 합친다 (결국 두 리스트중에서 작은 사이즈로)
                    listsum.append([var1, var2])

            new_node = sorted(listsum, key=operator.itemgetter(0))
            print('new node list =', new_node)

            for i in range(len(new_node)):

                #txt = '[{0:02d}:{1:02d}:{2:02d}] {3}번째 동적맥점 {4:.2f}(발생빈도수 = {5}) 추가됨...\r'.format(dt.hour, dt.minute, dt.second, i + 1, new_node[i][0], new_node[i][1])
                #self.textBrowser.append(txt)

                QApplication.processEvents()

                item = QTableWidgetItem("{0:.2f}\n({1})".format(new_node[i][0], new_node[i][1]))
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(lime))
                item.setForeground(QBrush(검정색))

                if NightTime:
                    self.tableWidget_fut.setItem(1, 2 + i, item)
                else:
                    self.tableWidget_fut.setItem(0, 2 + i, item)

            bms_node_list.sort()

            txt = '[{0:02d}:{1:02d}:{2:02d}] 오늘의 중요맥점은 {3} 입니다.\r'.format(dt.hour, dt.minute, dt.second, bms_node_list)
            self.textBrowser.append(txt)        
        else:
            pass

        self.XingAdminCheck()       

        self.pushButton_start.setFocus()

        # 버티칼 스크롤바를 항상 bottom으로...
        self.parent.textBrowser.verticalScrollBar().setValue(self.parent.textBrowser.verticalScrollBar().maximum())

    def __del__(self):
        
        print('Score Board Diaglog객체가 소멸됩니다.')

    @pyqtSlot(Exception, str)
    def on_exceptionOccurred(self, exception, slot_name):
        QMessageBox.critical(self, "Uncaught exception in 선물옵션전광판!", f"In pyqtSlot: {slot_name}:\n" f"Caught exception: {exception.__repr__()}")

    @pyqtSlot()
    def start_button_clicked(self):

        #playsound('.\Resources\click.wav')
        #winsound.PlaySound('.\Resources\click.wav', winsound.SND_FILENAME)
        winsound.PlaySound('Resources/click.wav', winsound.SND_FILENAME)
        self.RunCode()

    @pyqtSlot()
    def telegram_button_clicked(self):

        dt = datetime.now()

        #playsound('Resources/click.wav')
        #winsound.PlaySound('Resources/click.wav', winsound.SND_FILENAME)
        #self.RunTelegram()

        txt = '[{0:02d}:{1:02d}:{2:02d}] 화면을 캡처합니다.\r'.format(dt.hour, dt.minute, dt.second)
        self.parent.textBrowser.append(txt)

        self.capture_screenshot()
    
    ## list에서 i번째 아이템을 리턴한다.
    def get_list_item(self, list, i):

        if i >= 0 and i < len(list):
            return list[i]
        else:
            return None

    def OnCallTable_CheckStateChanged(self, checked, row, column):

        global selected_call, flag_calltable_checkstate_changed

        flag_calltable_checkstate_changed = True       

        if checked:
            selected_call.append(row)
        else:
            selected_call.remove(row)

        selected_call.sort()

        print('selected_call =', selected_call)

        if TARGET_MONTH == 'CM':

            for i in range(len(selected_call)):
                print('CM call code =', CM_CALL_CODE[selected_call[i]])

        elif TARGET_MONTH == 'NM':

            for i in range(len(selected_call)):
                print('NM call code =', NM_CALL_CODE[selected_call[i]])
        else:
            pass

    def OnPutTable_CheckStateChanged(self, checked, row, column):

        global selected_put, flag_puttable_checkstate_changed

        flag_puttable_checkstate_changed = True

        if checked:
            selected_put.append(row)
        else:
            selected_put.remove(row)

        selected_put.sort()

        print('selected_put =', selected_put)

        if TARGET_MONTH == 'CM':

            for i in range(len(selected_put)):
                print('CM put code =', CM_PUT_CODE[selected_put[i]])

        elif TARGET_MONTH == 'NM':

            for i in range(len(selected_put)):
                print('NM put code =', NM_PUT_CODE[selected_put[i]])
        else:
            pass
    
    # Xing 관리자모드 실행 체크함수
    def XingAdminCheck(self):

        # 프로세스가 관리자 권한으로 실행 여부
        dt = datetime.now()

        if ctypes.windll.shell32.IsUserAnAdmin():
            print('관리자권한으로 실행된 프로세스입니다.')
            txt = '[{0:02d}:{1:02d}:{2:02d}] 관리자권한으로 실행된 프로세스입니다.\r'.format(dt.hour, dt.minute, dt.second)
            self.textBrowser.append(txt)
            return True
        else:
            '''
            print('일반권한으로 실행된 프로세스입니다.')
            txt = '[{0:02d}:{1:02d}:{2:02d}] 일반권한으로 실행된 프로세스입니다.\r'.format(dt.hour, dt.minute, dt.second)
            self.textBrowser.append(txt)
            '''
            return False

    # 다중모니터 스크린샷 함수
    def capture_screenshot(self):

        if ResizeRowsToContents:
            self.tableWidget_call.resizeRowsToContents()
        else:
            pass
        self.tableWidget_call.resizeColumnsToContents()

        if ResizeRowsToContents:
            self.tableWidget_put.resizeRowsToContents()
        else:
            pass
        self.tableWidget_put.resizeColumnsToContents()

        if ResizeRowsToContents:
            self.tableWidget_fut.resizeRowsToContents()
        else:
            pass
        self.tableWidget_fut.resizeColumnsToContents()

        # Capture entire screen
        with mss() as sct:
            '''
            monitor = sct.monitors[2]
            sct_img = sct.grab(monitor)
            # Convert to PIL/Pillow Image
            return Image.frombytes('RGB', sct_img.size, sct_img.bgra, 'raw', 'BGRX')
            '''
            now = time.localtime()
            times = "%04d-%02d-%02d-%02d-%02d-%02d" % (now.tm_year, now.tm_mon, now.tm_mday, now.tm_hour, now.tm_min, now.tm_sec)

            for num, monitor in enumerate(sct.monitors[1:], 1):

                # Get raw pixels from the screen
                sct_img = sct.grab(monitor)

                # Create the Image
                img = Image.frombytes("RGB", sct_img.size, sct_img.bgra, "raw", "BGRX")

                # The same, but less efficient:
                # img = Image.frombytes('RGB', sct_img.size, sct_img.rgb)
                # saveas = "Screenshot {}{}".format(times, '.png')
                # And save it!
                # output = "monitor-{}.png".format(num)

                output = "Monitor{} {}.png".format(num, times)
                img.save(output)

                txt = '[{0:02d}:{1:02d}:{2:02d}] {3}번째 화면을 캡처했습니다.\r'.format(now.tm_hour, now.tm_min, now.tm_sec, num)
                self.textBrowser.append(txt)
                print(txt)
    
    def showCustomMsgBox(self, title, txt):

        msgBox = QMessageBox()
        msgBox.setFont(QFont("Consolas", 15, QFont.Bold))
        msgBox.setIcon(QMessageBox.Information)
        msgBox.setText(txt)
        msgBox.setWindowTitle(title)
        msgBox.show()

        returnValue = msgBox.exec_()
        
        if returnValue == QMessageBox.Ok:
            print("showCustomMsgBox OK Clicked...")

    @pyqtSlot(int)
    def call_horizontal_header_clicked(self, idx):

        global call_node_state

        col_text = self.tableWidget_call.horizontalHeaderItem(idx).text()

        #title = 'Call Header Information'
        #txt = "({0}) = {1}".format(idx, col_text)
        #self.showCustomMsgBox(title, txt)

        if idx == Option_column.기준가.value or idx == Option_column.월저.value or idx == Option_column.월고.value or \
            idx == Option_column.전저.value or idx == Option_column.전고.value or idx == Option_column.종가.value or \
                idx == Option_column.피봇.value or idx == Option_column.시가.value:

            col_text = self.tableWidget_call.horizontalHeaderItem(idx).text()

            if col_text.find('✓') == -1:
                item = QTableWidgetItem(col_text + '\n✓')
                self.tableWidget_call.setHorizontalHeaderItem(idx, item)
                print("call header column.. ", idx, col_text)

                if idx == Option_column.기준가.value:
                    call_node_state['기준가'] = True
                elif idx == Option_column.월저.value:
                    call_node_state['월저'] = True
                elif idx == Option_column.월고.value:
                    call_node_state['월고'] = True
                elif idx == Option_column.전저.value:
                    call_node_state['전저'] = True
                elif idx == Option_column.전고.value:
                    call_node_state['전고'] = True
                elif idx == Option_column.종가.value:
                    call_node_state['종가'] = True
                elif idx == Option_column.피봇.value:
                    call_node_state['피봇'] = True
                elif idx == Option_column.시가.value:
                    call_node_state['시가'] = True
                else:
                    pass
            else:
                item = QTableWidgetItem(col_text.replace('\n✓', ''))
                self.tableWidget_call.setHorizontalHeaderItem(idx, item)
                print("call header column.. ", idx, col_text)

                global call_scroll_end_position

                if call_scroll_end_position > option_pairs_count:

                    call_scroll_end_position = option_pairs_count
                else:
                    pass

                if idx == Option_column.기준가.value:

                    call_node_state['기준가'] = False

                    for i in range(call_scroll_begin_position, call_scroll_end_position):

                        self.tableWidget_call.item(i, Option_column.기준가.value).setBackground(QBrush(흰색))
                        self.tableWidget_call.item(i, Option_column.기준가.value).setForeground(QBrush(검정색))

                elif idx == Option_column.월저.value:

                    call_node_state['월저'] = False

                    for i in range(call_scroll_begin_position, call_scroll_end_position):

                        self.tableWidget_call.item(i, Option_column.월저.value).setBackground(QBrush(흰색))
                        self.tableWidget_call.item(i, Option_column.월저.value).setForeground(QBrush(검정색))

                elif idx == Option_column.월고.value:

                    call_node_state['월고'] = False

                    for i in range(call_scroll_begin_position, call_scroll_end_position):

                        self.tableWidget_call.item(i, Option_column.월고.value).setBackground(QBrush(흰색))
                        self.tableWidget_call.item(i, Option_column.월고.value).setForeground(QBrush(검정색))

                elif idx == Option_column.전저.value:

                    call_node_state['전저'] = False

                    for i in range(call_scroll_begin_position, call_scroll_end_position):

                        self.tableWidget_call.item(i, Option_column.전저.value).setBackground(QBrush(흰색))
                        self.tableWidget_call.item(i, Option_column.전저.value).setForeground(QBrush(검정색))

                elif idx == Option_column.전고.value:

                    call_node_state['전고'] = False

                    for i in range(call_scroll_begin_position, call_scroll_end_position):

                        self.tableWidget_call.item(i, Option_column.전고.value).setBackground(QBrush(흰색))
                        self.tableWidget_call.item(i, Option_column.전고.value).setForeground(QBrush(검정색))

                elif idx == Option_column.종가.value:

                    call_node_state['종가'] = False

                    for i in range(call_scroll_begin_position, call_scroll_end_position):

                        self.tableWidget_call.item(i, Option_column.종가.value).setBackground(QBrush(흰색))
                        self.tableWidget_call.item(i, Option_column.종가.value).setForeground(QBrush(검정색))

                elif idx == Option_column.피봇.value:

                    call_node_state['피봇'] = False

                    for i in range(call_scroll_begin_position, call_scroll_end_position):

                        self.tableWidget_call.item(i, Option_column.피봇.value).setBackground(QBrush(흰색))
                        self.tableWidget_call.item(i, Option_column.피봇.value).setForeground(QBrush(검정색))

                elif idx == Option_column.시가.value:

                    call_node_state['시가'] = False

                    for i in range(call_scroll_begin_position, call_scroll_end_position):

                        self.tableWidget_call.item(i, Option_column.시가.value).setBackground(QBrush(흰색))
                        self.tableWidget_call.item(i, Option_column.시가.value).setForeground(QBrush(검정색))
            
            # cell focus 이동
            self.tableWidget_call.setCurrentCell(ActvalCount, Option_column.OID.value)
            self.call_scroll_coloring()
        else:
            pass

        if ResizeRowsToContents:
            self.tableWidget_call.resizeRowsToContents()
        else:
            pass
        self.tableWidget_call.resizeColumnsToContents()

    @pyqtSlot(int)
    def put_horizontal_header_clicked(self, idx):

        global put_node_state

        col_text = self.tableWidget_put.horizontalHeaderItem(idx).text()

        #title = 'Put Header Information'
        #txt = "({0}) = {1}".format(idx, col_text)
        #self.showCustomMsgBox(title, txt)

        if idx == Option_column.기준가.value or idx == Option_column.월저.value or idx == Option_column.월고.value or \
            idx == Option_column.전저.value or idx == Option_column.전고.value or idx == Option_column.종가.value or \
                idx == Option_column.피봇.value or idx == Option_column.시가.value:

            col_text = self.tableWidget_put.horizontalHeaderItem(idx).text()

            if col_text.find('✓') == -1:
                item = QTableWidgetItem(col_text + '\n✓')
                self.tableWidget_put.setHorizontalHeaderItem(idx, item)
                print("put header column.. ", idx, col_text)

                if idx == Option_column.기준가.value:
                    put_node_state['기준가'] = True
                elif idx == Option_column.월저.value:
                    put_node_state['월저'] = True
                elif idx == Option_column.월고.value:
                    put_node_state['월고'] = True
                elif idx == Option_column.전저.value:
                    put_node_state['전저'] = True
                elif idx == Option_column.전고.value:
                    put_node_state['전고'] = True
                elif idx == Option_column.종가.value:
                    put_node_state['종가'] = True
                elif idx == Option_column.피봇.value:
                    put_node_state['피봇'] = True
                elif idx == Option_column.시가.value:
                    put_node_state['시가'] = True
                else:
                    pass
            else:
                item = QTableWidgetItem(col_text.replace('\n✓', ''))
                self.tableWidget_put.setHorizontalHeaderItem(idx, item)
                print("put header column.. ", idx, col_text)

                global put_scroll_end_position

                if put_scroll_end_position > option_pairs_count:

                    put_scroll_end_position = option_pairs_count
                else:
                    pass

                if idx == Option_column.기준가.value:

                    put_node_state['기준가'] = False

                    for i in range(put_scroll_begin_position, put_scroll_end_position):

                        self.tableWidget_put.item(i, Option_column.기준가.value).setBackground(QBrush(흰색))
                        self.tableWidget_put.item(i, Option_column.기준가.value).setForeground(QBrush(검정색))

                elif idx == Option_column.월저.value:

                    put_node_state['월저'] = False

                    for i in range(put_scroll_begin_position, put_scroll_end_position):

                        self.tableWidget_put.item(i, Option_column.월저.value).setBackground(QBrush(흰색))
                        self.tableWidget_put.item(i, Option_column.월저.value).setForeground(QBrush(검정색))

                elif idx == Option_column.월고.value:

                    put_node_state['월고'] = False

                    for i in range(put_scroll_begin_position, put_scroll_end_position):

                        self.tableWidget_put.item(i, Option_column.월고.value).setBackground(QBrush(흰색))
                        self.tableWidget_put.item(i, Option_column.월고.value).setForeground(QBrush(검정색))

                elif idx == Option_column.전저.value:

                    put_node_state['전저'] = False

                    for i in range(put_scroll_begin_position, put_scroll_end_position):

                        self.tableWidget_put.item(i, Option_column.전저.value).setBackground(QBrush(흰색))
                        self.tableWidget_put.item(i, Option_column.전저.value).setForeground(QBrush(검정색))

                elif idx == Option_column.전고.value:

                    put_node_state['전고'] = False

                    for i in range(put_scroll_begin_position, put_scroll_end_position):

                        self.tableWidget_put.item(i, Option_column.전고.value).setBackground(QBrush(흰색))
                        self.tableWidget_put.item(i, Option_column.전고.value).setForeground(QBrush(검정색))

                elif idx == Option_column.종가.value:

                    put_node_state['종가'] = False

                    for i in range(put_scroll_begin_position, put_scroll_end_position):

                        self.tableWidget_put.item(i, Option_column.종가.value).setBackground(QBrush(흰색))
                        self.tableWidget_put.item(i, Option_column.종가.value).setForeground(QBrush(검정색))

                elif idx == Option_column.피봇.value:

                    put_node_state['피봇'] = False

                    for i in range(put_scroll_begin_position, put_scroll_end_position):

                        self.tableWidget_put.item(i, Option_column.피봇.value).setBackground(QBrush(흰색))
                        self.tableWidget_put.item(i, Option_column.피봇.value).setForeground(QBrush(검정색))

                elif idx == Option_column.시가.value:

                    put_node_state['시가'] = False

                    for i in range(put_scroll_begin_position, put_scroll_end_position):

                        self.tableWidget_put.item(i, Option_column.시가.value).setBackground(QBrush(흰색))
                        self.tableWidget_put.item(i, Option_column.시가.value).setForeground(QBrush(검정색))
            
            # cell focus 이동
            self.tableWidget_put.setCurrentCell(ActvalCount, Option_column.OID.value)
            self.put_scroll_coloring()
        else:
            pass

        if ResizeRowsToContents:
            self.tableWidget_put.resizeRowsToContents()
        else:
            pass
        self.tableWidget_put.resizeColumnsToContents()

    @pyqtSlot(int)
    def futures_horizontal_header_clicked(self, idx):

        # cell focus 이동
        self.tableWidget_fut.setCurrentCell(3, Futures_column.OID.value)

        self.tableWidget_fut.resizeRowsToContents()
        self.tableWidget_fut.resizeColumnsToContents()

    @pyqtSlot(int)
    def supply_demand_horizontal_header_clicked(self, idx):

        # cell focus 이동
        self.tableWidget_supply.setCurrentCell(1, Supply_column.종합.value)

        self.tableWidget_supply.resizeRowsToContents()
        self.tableWidget_supply.resizeColumnsToContents()

    @pyqtSlot(int)
    def quote_horizontal_header_clicked(self, idx):

        # cell focus 이동
        self.tableWidget_quote.setCurrentCell(1, Quote_column.미결종합.value)

        self.tableWidget_quote.resizeRowsToContents()
        self.tableWidget_quote.resizeColumnsToContents()

    @pyqtSlot(int, int)
    def call_table_cell_clicked(self, row, col):

        cell = self.tableWidget_call.item(row, col)

        if cell is not None:

            #title = 'Call Cell Information'
            #txt = "({0}, {1}) = {2}".format(row, col, cell.text())
            #self.showCustomMsgBox(title, txt)

            if atm_txt != '':

                if row < ATM_INDEX:

                    call_positionCell = self.tableWidget_call.item(ATM_INDEX + 9, 1)
                else:
                    call_positionCell = self.tableWidget_call.item(ATM_INDEX - 9, 1)

                self.tableWidget_call.scrollToItem(call_positionCell)

            else:
                pass

            # cell focus 이동
            self.tableWidget_call.setCurrentCell(ActvalCount, Option_column.OID.value)
        else:
            pass

        if ResizeRowsToContents:
            self.tableWidget_call.resizeRowsToContents()
        else:
            pass
        self.tableWidget_call.resizeColumnsToContents()

    @pyqtSlot(int, int)
    def put_table_cell_clicked(self, row, col):

        cell = self.tableWidget_put.item(row, col)

        if cell is not None:

            #title = 'Put Cell Information'
            #txt = "({0}, {1}) = {2}".format(row, col, cell.text())
            #self.showCustomMsgBox(title, txt)

            if atm_txt != '':

                if row < ATM_INDEX:

                    put_positionCell = self.tableWidget_put.item(ATM_INDEX + 20, 1)
                else:
                    put_positionCell = self.tableWidget_put.item(ATM_INDEX - 9, 1)

                self.tableWidget_put.scrollToItem(put_positionCell)
            else:
                pass

            # cell focus 이동
            self.tableWidget_put.setCurrentCell(ActvalCount, Option_column.OID.value)
        else:
            pass

        if ResizeRowsToContents:
            self.tableWidget_put.resizeRowsToContents()
        else:
            pass
        self.tableWidget_put.resizeColumnsToContents()

    @pyqtSlot(int, int)
    def futures_table_cell_clicked(self, row, col):

        dt = datetime.now()
        
        cell = self.tableWidget_fut.item(row, col)
        
        if cell is not None:

            global 콜매수, 콜매도, 풋매수, 풋매도, 손절, 익절
            global plot_drate_scale_factor
            global flag_cm_drate_scale_factor_set, flag_nm_drate_scale_factor_set
            
            fut_txt = cell.text()            
            
            if row == 2 and col == Futures_column.OLOH.value:
                
                if float(fut_txt) != plot_drate_scale_factor:

                    if 근월물_선물_시가등락율 != 0:
                        plot_drate_scale_factor = int(float(fut_txt) / 근월물_선물_시가등락율)
                    else:
                        plot_drate_scale_factor = int(SP500_전일종가 / FUT_전일종가)

                    txt = '[{0:02d}:{1:02d}:{2:02d}] {3} {4} {5}\r'.format(dt.hour, dt.minute, dt.second, 근월물_선물_시가등락율, SP500_전일종가, FUT_전일종가)
                    self.parent.textBrowser.append(txt)

                    txt = '[{0:02d}:{1:02d}:{2:02d}] Drate Scale Factor를 {3} (으)로 수정합니다.\r'.format(dt.hour, dt.minute, dt.second, plot_drate_scale_factor)
                    self.parent.textBrowser.append(txt)

                    item = QTableWidgetItem("{0}".format(plot_drate_scale_factor))
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_fut.setItem(2, Futures_column.OLOH.value, item)

                    flag_cm_drate_scale_factor_set = True
                    flag_nm_drate_scale_factor_set = True
                else:
                    pass
            else:
                pass

            # cell focus 이동
            self.tableWidget_fut.setCurrentCell(3, Futures_column.OID.value)

            self.tableWidget_fut.resizeRowsToContents()
            self.tableWidget_fut.resizeColumnsToContents()             
        else:
            pass

    @pyqtSlot(int, int)
    def supply_demand_table_cell_clicked(self, row, col):

        cell = self.tableWidget_supply.item(row, col)

        #title = 'Supply & Demand Cell Information'
        #txt = "({0}, {1}) = {2}".format(row, col, cell.text())
        #self.showCustomMsgBox(title, txt)

        if cell is not None:

            # cell focus 이동
            self.tableWidget_supply.setCurrentCell(1, 7)

            self.tableWidget_supply.resizeRowsToContents()
            self.tableWidget_supply.resizeColumnsToContents()
        else:
            pass

    @pyqtSlot(int, int)
    def quote_table_cell_clicked(self, row, col):

        cell = self.tableWidget_quote.item(row, col)

        #title = 'Quote Cell Information'
        #txt = "({0}, {1}) = {2}".format(row, col, cell.text())
        #self.showCustomMsgBox(title, txt)

        if cell is not None:

            # cell focus 이동
            self.tableWidget_quote.setCurrentCell(1, Quote_column.미결종합.value - 1)

            self.tableWidget_quote.resizeRowsToContents()
            self.tableWidget_quote.resizeColumnsToContents()
        else:
            pass
    
    @pyqtSlot(int)
    def call_table_vertical_scroll_position(self, row):

        global call_scroll_begin_position, call_scroll_end_position

        call_scroll_begin_position = row

        if call_scroll_begin_position <= option_pairs_count:

            call_scroll_end_position = call_scroll_begin_position + call_scroll_depth

            print('call scroll position -----> from %d to %d' % (call_scroll_begin_position, call_scroll_end_position))

            self.call_scroll_coloring()

        elif call_scroll_begin_position > option_pairs_count:
            pass

        if ResizeRowsToContents:
            self.tableWidget_call.resizeRowsToContents()
        else:
            pass
        self.tableWidget_call.resizeColumnsToContents()

    @pyqtSlot(int)
    def put_table_vertical_scroll_position(self, row):

        global put_scroll_begin_position, put_scroll_end_position

        put_scroll_begin_position = row

        if put_scroll_begin_position <= option_pairs_count:

            put_scroll_end_position = put_scroll_begin_position + put_scroll_depth

            print('put scroll position -----> from %d to %d' % (put_scroll_begin_position, put_scroll_end_position))

            self.put_scroll_coloring()

        elif put_scroll_begin_position > option_pairs_count:
            pass

        if ResizeRowsToContents:
            self.tableWidget_put.resizeRowsToContents()
        else:
            pass
        self.tableWidget_put.resizeColumnsToContents()
    
    def all_node_set(self):

        global call_node_state, put_node_state

        for idx in range(Option_column.기준가.value, Option_column.시가갭.value):

            col_text = self.tableWidget_call.horizontalHeaderItem(idx).text()

            if col_text.find('✓') == -1:
            
                item = QTableWidgetItem(col_text + '\n✓')
                self.tableWidget_call.setHorizontalHeaderItem(idx, item)

                if idx == Option_column.기준가.value:
                    call_node_state['기준가'] = True
                elif idx == Option_column.월저.value:
                    call_node_state['월저'] = True
                elif idx == Option_column.월고.value:
                    call_node_state['월고'] = True
                elif idx == Option_column.전저.value:
                    call_node_state['전저'] = True
                elif idx == Option_column.전고.value:
                    call_node_state['전고'] = True
                elif idx == Option_column.종가.value:
                    call_node_state['종가'] = True
                elif idx == Option_column.피봇.value:
                    call_node_state['피봇'] = True
                elif idx == Option_column.시가.value:
                    call_node_state['시가'] = True
                else:
                    pass
            else:
                pass

            col_text = self.tableWidget_put.horizontalHeaderItem(idx).text()

            if col_text.find('✓') == -1:

                item = QTableWidgetItem(col_text + '\n✓')
                self.tableWidget_put.setHorizontalHeaderItem(idx, item)

                if idx == Option_column.기준가.value:
                    put_node_state['기준가'] = True
                elif idx == Option_column.월저.value:
                    put_node_state['월저'] = True
                elif idx == Option_column.월고.value:
                    put_node_state['월고'] = True
                elif idx == Option_column.전저.value:
                    put_node_state['전저'] = True
                elif idx == Option_column.전고.value:
                    put_node_state['전고'] = True
                elif idx == Option_column.종가.value:
                    put_node_state['종가'] = True
                elif idx == Option_column.피봇.value:
                    put_node_state['피봇'] = True
                elif idx == Option_column.시가.value:
                    put_node_state['시가'] = True
                else:
                    pass
            else:
                pass    

    def t8415_opt_request(self, code):

        if today_txt == MONTH_FIRSTDAY:
            self.XQ_t8415.Query(단축코드=code, 시작일자=yesterday_txt, 종료일자=today_txt)
        else:
            self.XQ_t8415.Query(단축코드=code, 시작일자=MONTH_FIRSTDAY, 종료일자=today_txt)

    def t8416_fut_request(self, code):

        # 휴일 포함 30일치 과거데이타를 요청한다.
        temp = today - timedelta(30)
        startday_txt = temp.strftime('%Y%m%d')

        self.XQ_t8416.Query(단축코드=code, 시작일자=startday_txt, 종료일자=today_txt)
        
    def t8416_opt_request(self, code):

        if today_txt == MONTH_FIRSTDAY:
            self.XQ_t8416.Query(단축코드=code, 시작일자=yesterday_txt, 종료일자=today_txt)
        else:
            self.XQ_t8416.Query(단축코드=code, 시작일자=MONTH_FIRSTDAY, 종료일자=today_txt)
        
    @pyqtSlot()
    def send_telegram_message(self):
        
        global telegram_toggle, FLAG_ASYM, FLAG_NODE, FLAG_OLOH
        global FLAG_GUEST_CONTROL

        try:
            dt = datetime.now()

            # 텔레그램 Webhook 등록여부를 체크한다.c8
            chk_webhook = Check_Webhook()

            if chk_webhook is not None:

                if chk_webhook.url != '':

                    # Webhook을 삭제한다.
                    Delete_Webhook()

                    txt = '웹훅 삭제...'
                    print(txt)
                else:
                    txt = 'None'
            else:
                txt = 'None' 

            telegram_toggle = not telegram_toggle

            #txt = 'None'
            
            # 텔레그램 명령어 파싱
            element = telegram_command.split()
            
            command_count = len(element)

            if command_count > 0:

                command = []

                for i in range(command_count):

                    command.append(element[i])

                if command_count == 1 and command[0] == '/start':

                    FLAG_ASYM = True
                    FLAG_NODE = True
                    FLAG_OLOH = True

                elif command_count == 1 and command[0] == 'Allstop':

                    FLAG_ASYM = True
                    FLAG_NODE = True
                    FLAG_OLOH = True

                elif command_count == 1 and command[0] == 'Allgo':

                    FLAG_ASYM = True
                    FLAG_NODE = True
                    FLAG_OLOH = True

                elif command_count == 2 and command[0] == 'Go':

                    if command[1] == 'a':                    

                        FLAG_ASYM = True
                        FLAG_NODE = False
                        FLAG_OLOH = False

                    elif command[1] == 'n':

                        FLAG_ASYM = False
                        FLAG_NODE = True
                        FLAG_OLOH = False

                    elif command[1] == 'o':

                        FLAG_ASYM = False
                        FLAG_NODE = False
                        FLAG_OLOH = True

                    elif command[1] == 'an':

                        FLAG_ASYM = True
                        FLAG_NODE = True
                        FLAG_OLOH = False

                    elif command[1] == 'ao':

                        FLAG_ASYM = True
                        FLAG_NODE = False
                        FLAG_OLOH = True

                    elif command[1] == 'no':

                        FLAG_ASYM = False
                        FLAG_NODE = True
                        FLAG_OLOH = True

                    elif command[1] == 'ano':

                        FLAG_ASYM = True
                        FLAG_NODE = True
                        FLAG_OLOH = True                
                    else:
                        FLAG_ASYM = False
                        FLAG_NODE = False
                        FLAG_OLOH = False
                else:
                    FLAG_ASYM = False
                    FLAG_NODE = False
                    FLAG_OLOH = False

                if window.id == 'soojin65':
                    
                    if command[0] == 'Allstop':
                        if FLAG_GUEST_CONTROL:
                            FLAG_GUEST_CONTROL = False
                            #ToMyTelegram('Allstop...')
                        else:
                            pass
                    elif command[0] == 'Allgo':
                        if not FLAG_GUEST_CONTROL:
                            FLAG_GUEST_CONTROL = True
                            #ToMyTelegram('Allgo...')
                        else:
                            pass
                    else:
                        pass
                else:
                    pass                  

                if TELEGRAM_SERVICE and flag_telegram_on and (command[0] == 'Go' or command[0] == '/start'):

                    if telegram_toggle:

                        pass

                        '''
                        if flag_call_strong:
                            send_txt = "[{0:02d}:{1:02d}:{2:02d}] ▲ Call Strong({3:.1f}/{4:.1f}) !!!".format(dt.hour, dt.minute, dt.second, call_otm_cdb_percent_mean, put_otm_cdb_percent_mean)
                            ToYourTelegram(send_txt)
                        elif flag_call_weak:
                            send_txt = "[{0:02d}:{1:02d}:{2:02d}] ▼ Call Weak({3:.1f}/{4:.1f}) !!!".format(dt.hour, dt.minute, dt.second, call_otm_cdb_percent_mean, put_otm_cdb_percent_mean)
                            ToYourTelegram(send_txt)
                        elif flag_put_strong:
                            send_txt = "[{0:02d}:{1:02d}:{2:02d}] ▲ Put Strong({3:.1f}/{4:.1f}) !!!".format(dt.hour, dt.minute, dt.second, call_otm_cdb_percent_mean, put_otm_cdb_percent_mean)
                            ToYourTelegram(send_txt)
                        elif flag_put_weak:
                            send_txt = "[{0:02d}:{1:02d}:{2:02d}] ▼ Put Weak({3:.1f}/{4:.1f}) !!!".format(dt.hour, dt.minute, dt.second, call_otm_cdb_percent_mean, put_otm_cdb_percent_mean)
                            ToYourTelegram(send_txt)
                        else:
                            pass
                        
                        # 선물 OL/OH 알람
                        if fut_cm_oloh_txt != '' and FLAG_OLOH:
                            send_txt = fut_cm_oloh_txt
                            ToYourTelegram(send_txt)
                        else:
                            pass

                        # Strong 에너지 알람
                        if flag_call_dominant:
                            send_txt = "[{0:02d}:{1:02d}:{2:02d}] ★ Call Strong({3:.2f}/{4:.2f}) !!!".format(dt.hour, dt.minute, dt.second, 근월물_선물_종가대비_등락율, DOW_등락율)
                            ToYourTelegram(send_txt)
                        elif flag_put_dominant:
                            send_txt = "[{0:02d}:{1:02d}:{2:02d}] ★ Put Strong({3:.2f}/{4:.2f}) !!!".format(dt.hour, dt.minute, dt.second, 근월물_선물_종가대비_등락율, DOW_등락율)
                            ToYourTelegram(send_txt)
                        else:
                            pass

                        # 변동성돌파 알람
                        if vb_txt != '':
                            send_txt = "[{0:02d}:{1:02d}:{2:02d}] ★★ {3} !!!".format(dt.hour, dt.minute, dt.second, vb_txt)
                            ToYourTelegram(send_txt)
                        else:
                            pass

                        # 원웨이 알람
                        if TARGET_MONTH == 'CM':
                            
                            # kp200 맥점 알람
                            if kp200_low_node_txt != '' and FLAG_NODE:

                                send_txt = kp200_low_node_txt
                                ToYourTelegram(send_txt)
                            else:
                                pass

                            if kp200_high_node_txt != '' and FLAG_NODE:

                                send_txt = kp200_high_node_txt
                                ToYourTelegram(send_txt)
                            else:
                                pass

                            if call_ms_oneway:
                                send_txt = "[{0:02d}:{1:02d}:{2:02d}] ★★★ CM Call OneWay !!!".format(dt.hour, dt.minute, dt.second)
                                ToYourTelegram(send_txt)
                            elif put_ms_oneway:
                                send_txt = "[{0:02d}:{1:02d}:{2:02d}] ★★★ CM Put OneWay !!!".format(dt.hour, dt.minute, dt.second)
                                ToYourTelegram(send_txt)
                            else:
                                pass

                        elif TARGET_MONTH == 'NM':
                            
                            if call_ol_count > call_oh_count and put_ol_count < put_oh_count:
                                nm_txt = "[{0:02d}:{1:02d}:{2:02d}] NM Call 우세 ".format(dt.hour, dt.minute, dt.second)
                                send_txt = nm_txt + nm_call_oloh_txt + ', ' + nm_put_oloh_txt
                                ToYourTelegram(send_txt)
                            elif call_ol_count < call_oh_count and put_ol_count > put_oh_count:
                                nm_txt = "[{0:02d}:{1:02d}:{2:02d}] NM Put 우세 ".format(dt.hour, dt.minute, dt.second)
                                send_txt = nm_txt + nm_call_oloh_txt + ', ' + nm_put_oloh_txt
                                ToYourTelegram(send_txt)
                            else:
                                pass

                            if call_ms_oneway:
                                send_txt = "[{0:02d}:{1:02d}:{2:02d}] ★★★ NM Call OneWay !!!".format(dt.hour, dt.minute, dt.second)
                                ToYourTelegram(send_txt)
                            elif put_ms_oneway:
                                send_txt = "[{0:02d}:{1:02d}:{2:02d}] ★★★ NM Put OneWay !!!".format(dt.hour, dt.minute, dt.second)
                                ToYourTelegram(send_txt)
                            else:
                                pass
                        else:
                            pass
                        '''
                    else:
                        pass               
                else:
                    pass  
            else:
                pass   
            '''
            if flag_market_service:
                txt = '[{0:02d}:{1:02d}:{2:02d}] Telegram Send Message = {3}\r'.format(dt.hour, dt.minute, dt.second, send_txt)
                self.textBrowser.append(txt)
                print(txt)
            else:
                pass
            '''
        except:
            pass

    @pyqtSlot()
    def listen_telegram_message(self):
        
        global telegram_command

        try:
            dt = datetime.now()            

            if flag_market_service:

                if TELEGRAM_SERVICE and flag_telegram_on:

                    # 텔레그램 메시지 수신
                    if window.id == 'soojin65':
                        #telegram_command = FromMyTelegram()
                        print('텔레그램 수신 메시지 =', str)
                        pass
                    else:
                        telegram_command = FromYourTelegram()
                        #print('텔레그램 수신 메시지 =', str)
                else:
                    txt = 'Stopped by Tool...'
                
                if telegram_command != '':
                    
                    if window.id == 'soojin65':
                        txt = '[{0:02d}:{1:02d}:{2:02d}] Telegram Listen Command is {3}\r'.format(dt.hour, dt.minute, dt.second, telegram_command)                        
                        print(txt)
                    else:
                        pass
                        #txt = '[{0:02d}:{1:02d}:{2:02d}] Telegram Listen Message is {3}\r'.format(dt.hour, dt.minute, dt.second, telegram_command)
                        #self.textBrowser.append(txt)
                else:
                    pass
                    #txt = '[{0:02d}:{1:02d}:{2:02d}] Telegram Listen Message is None\r'.format(dt.hour, dt.minute, dt.second)
                    #self.textBrowser.append(txt)                
            else:
                pass
        except:
            pass

    @logging_time_main_loop
    #@pyqtSlot(int, int, int, int)
    def update_screen(self):

        global flag_internet_connection_broken, flag_service_provider_broken
        global flag_screen_update_is_running

        global flag_kp200_low, flag_kp200_high
        global flag_offline            

        global call_plot_data, put_plot_data, centerval_plot_data
        global SP500_당일종가, DOW_당일종가, NASDAQ_당일종가, WTI_당일종가, EURO_당일종가, HANGSENG_당일종가, GOLD_당일종가 
        global flag_logfile, flag_broken_capture
        
        global flag_call_low_update, flag_call_high_update, flag_put_low_update, flag_put_high_update
        global flag_call_cross_coloring, flag_put_cross_coloring, flag_clear

        global t0167_server_hour, t0167_server_minute, t0167_server_second, system_server_time_gap
        global call_low_coreval_txt, call_high_coreval_txt, put_low_coreval_txt, put_high_coreval_txt
        global call_low_node_count, call_high_node_count, put_low_node_count, put_high_node_count
        global call_low_node_list, call_high_node_list, put_low_node_list, put_high_node_list
        global call_low_node_txt, call_high_node_txt, put_low_node_txt, put_high_node_txt
        global kp200_low_node_txt, kp200_high_node_txt

        try:
            dt = datetime.now()

            flag_screen_update_is_running = True

            self.alternate_flag = not self.alternate_flag
            
            # 온라인 여부확인
            online_state = self.parent.xing.main_connection.IsConnected()
            
            ipaddress = socket.gethostbyname(socket.gethostname())

            if not online_state:

                if ipaddress == '127.0.0.1':
                    # 인터넷 연결확인
                    txt = '[{0:02d}:{1:02d}:{2:02d}] 인터넷 연결이 끊겼습니다...\r'.format(dt.hour, dt.minute, dt.second)
                    self.parent.statusbar.showMessage(txt)

                    if not flag_broken_capture:                

                        self.textBrowser.append(txt)
                        print(txt)

                        self.parent.statusbar.showMessage(txt)

                        if TARGET_MONTH == 'CM':
                            self.capture_screenshot()
                        else:
                            pass              

                        file = open('inernet_error.log', 'w', encoding='UTF-8')
                        text = self.textBrowser.toPlainText()
                        file.write(text)
                        file.close()

                        flag_broken_capture = True

                        QMessageBox.critical(self, 'Error!', '인터넷 연결이 끊겼습니다.', QMessageBox.Ok)
                        return  
                    else:
                        pass
                
                    flag_internet_connection_broken = True
                else:
                    # 증권사 연결확인(인터넷이 연결된 상태에서만 확인가능)
                    txt = '[{0:02d}:{1:02d}:{2:02d}] 증권사 연결이 끊겼습니다...\r'.format(dt.hour, dt.minute, dt.second)
                    self.parent.statusbar.showMessage(txt)

                    if TARGET_MONTH == 'CM' and not flag_broken_capture:

                        self.textBrowser.append(txt)
                        print(txt)

                        self.parent.statusbar.showMessage(txt)

                        self.capture_screenshot()              

                        file = open('sc_error.log', 'w', encoding='UTF-8')
                        text = self.textBrowser.toPlainText()
                        file.write(text)
                        file.close()

                        flag_broken_capture = True

                        # 모든 쓰레드를 중지시킨다.
                        self.KillScoreBoardAllThread()

                        ToYourTelegram('증권사 연결이 끊겼습니다...')

                        QMessageBox.critical(self, 'Error!', '증권사 연결이 끊겼습니다.', QMessageBox.Ok)
                        return
                    else:
                        pass                               

                    flag_service_provider_broken = True              
            else:
                flag_internet_connection_broken = False
                flag_service_provider_broken = False
                        
            # 옵션 행사가가 200개 이상일 경우 대응
            if flag_t8416_rerequest and not flag_internet_connection_broken and self.alternate_flag:

                system_time = dt.hour * 3600 + dt.minute * 60 + dt.second

                txt = 't8416 재요청 CountDown = {0}'.format((t8416_loop_finish_time + 10 * 60) - system_time)
                print(txt)

                if (t8416_loop_finish_time + 10 * 60) - system_time < 1:

                    if flag_tts:
                        self.parent.speaker.setText('나머지 데이타를 수신합니다.')
                    else:
                        pass
                    self.t8416_additive_request()
                else:
                    pass
            else:
                pass
                        
            # 실시간 서비스
            if (not flag_internet_connection_broken and not flag_service_provider_broken) and FLAG_GUEST_CONTROL:
                
                self.display_atm(self.alternate_flag)
                
                self.option_quote_periodic_update()
                
                if flag_market_service and flag_option_start:
                    
                    if flag_option_periodic_update_mode:
                        
                        if self.alternate_flag:
                            # 콜 테이블 데이타 갱신 
                            if call_tickdata:
                                self.call_volume_power_update()                                
                            else:
                                pass
                        else:
                            # 풋 테이블 데이타 갱신
                            if put_tickdata:
                                self.put_volume_power_update()
                            else:
                                pass

                        # 수정미결 표시
                        if DayTime:
                            if call_tickdata and self.alternate_flag:
                                self.call_oi_update()
                            else:
                                pass

                            if put_tickdata and not self.alternate_flag:
                                self.put_oi_update()
                                self.oi_total_update()
                            else:
                                pass                            
                        else:
                            pass                        
                    else:
                        pass

                    if self.alternate_flag:                    

                        # 콜 저가, 고가 맥점 컬러갱신
                        if flag_call_low_update:

                            if flag_search_moving_node and bms_node_list:
                                self.search_moving_node()
                            else:
                                pass
                            
                            self.call_low_node_coloring()
                            
                            item = QTableWidgetItem('저가')
                            self.tableWidget_call.setHorizontalHeaderItem(Option_column.저가.value, item)

                            item = QTableWidgetItem('고가')
                            self.tableWidget_call.setHorizontalHeaderItem(Option_column.고가.value, item)

                            flag_call_low_update = False
                        else:
                            pass

                        if flag_call_high_update:

                            if flag_search_moving_node and bms_node_list:
                                self.search_moving_node()
                            else:
                                pass

                            self.call_high_node_coloring()
                            
                            item = QTableWidgetItem('저가')
                            self.tableWidget_call.setHorizontalHeaderItem(Option_column.저가.value, item)

                            item = QTableWidgetItem('고가')
                            self.tableWidget_call.setHorizontalHeaderItem(Option_column.고가.value, item)

                            flag_call_high_update = False
                        else:
                            pass                                                               
                    else:                            
                        # 풋 저가, 고가 맥점 컬러갱신
                        if flag_put_low_update:

                            if flag_search_moving_node and bms_node_list:
                                self.search_moving_node()
                            else:
                                pass

                            self.put_low_node_coloring()

                            item = QTableWidgetItem('저가')
                            self.tableWidget_put.setHorizontalHeaderItem(Option_column.저가.value, item)
                            
                            item = QTableWidgetItem('고가')
                            self.tableWidget_put.setHorizontalHeaderItem(Option_column.고가.value, item)

                            flag_put_low_update = False
                        else:
                            pass

                        if flag_put_high_update:

                            if flag_search_moving_node and bms_node_list:
                                self.search_moving_node()
                            else:
                                pass

                            self.put_high_node_coloring()
                            
                            item = QTableWidgetItem('저가')
                            self.tableWidget_put.setHorizontalHeaderItem(Option_column.저가.value, item)

                            item = QTableWidgetItem('고가')
                            self.tableWidget_put.setHorizontalHeaderItem(Option_column.고가.value, item)

                            flag_put_high_update = False
                        else:
                            pass 

                    # 매 10분마다 교차컬러링 수행
                    if not flag_call_low_update and not flag_call_high_update and not flag_put_low_update and not flag_put_high_update:

                        if flag_put_cross_coloring or (self.alternate_flag and dt.minute % CROSS_COLOR_INTERVAL == 0 and dt.second == 0):

                            flag_call_cross_coloring = True

                            txt = '[{0:02d}:{1:02d}:{2:02d}] Call 교차컬러링을 수행합니다.\r'.format(dt.hour, dt.minute, dt.second)
                            self.textBrowser.append(txt)
                            print(txt)

                            if not flag_clear:
                                
                                self.call_node_color_clear()
                                self.put_node_color_clear()
                                flag_clear = True
                                
                                if flag_search_moving_node and bms_node_list:
                                    self.search_moving_node()
                                else:
                                    pass
                            else:
                                pass 

                            self.call_open_check()   
                            self.call_cross_color_update()        
                            self.call_node_color_update()
                            self.call_coreval_color_update()

                        elif flag_call_cross_coloring or (not self.alternate_flag and dt.minute % CROSS_COLOR_INTERVAL == 0 and dt.second == 0):

                            flag_put_cross_coloring = True

                            txt = '[{0:02d}:{1:02d}:{2:02d}] Put 교차컬러링을 수행합니다.\r'.format(dt.hour, dt.minute, dt.second)
                            self.textBrowser.append(txt)
                            print(txt)                                        
                            
                            if not flag_clear:

                                self.call_node_color_clear()
                                self.put_node_color_clear()
                                flag_clear = True

                                if flag_search_moving_node and bms_node_list:
                                    self.search_moving_node()
                                else:
                                    pass
                            else:
                                pass

                            self.put_open_check()
                            self.put_cross_color_update()         
                            self.put_node_color_update()
                            self.put_coreval_color_update()

                        else:
                            pass
                    else:
                        pass

                    if flag_call_cross_coloring and flag_put_cross_coloring:

                        flag_call_cross_coloring = False
                        flag_put_cross_coloring = False
                        flag_clear = False
                    else:
                        pass

                    if True:
                    
                        # 진성 의미가인 경우 blinking(매우 중요 !!!)
                        if flag_call_open_in_fixed_coreval:
                            self.call_open_coreval_color_blink(not self.alternate_flag)
                        else:
                            pass

                        if flag_put_open_in_fixed_coreval:
                            self.put_open_coreval_color_blink(not self.alternate_flag)
                        else:
                            pass

                        if flag_call_low_coreval:
                            self.call_low_coreval_color_blink(self.alternate_flag)
                        else:                        
                            call_low_coreval_txt = ''
                            call_low_node_list = []
                            call_low_node_txt = ''

                        if flag_call_high_coreval:
                            self.call_high_coreval_color_blink(self.alternate_flag)
                        else:
                            call_high_coreval_txt = ''
                            call_high_node_list = []
                            call_high_node_txt = ''

                        if flag_put_low_coreval:
                            self.put_low_coreval_color_blink(self.alternate_flag)
                        else:
                            put_low_coreval_txt = ''
                            put_low_node_list = []
                            put_low_node_txt = ''

                        if flag_put_high_coreval:
                            self.put_high_coreval_color_blink(self.alternate_flag)                        
                        else:
                            put_high_coreval_txt = '' 
                            put_high_node_list = []
                            put_high_node_txt = ''                                                    

                        if flag_kp200_low_node:
                            self.kp200_low_color_blink(self.alternate_flag)
                        else:
                            kp200_low_node_txt = ''

                        if flag_kp200_high_node:
                            self.kp200_high_color_blink(self.alternate_flag)
                        else:
                            kp200_high_node_txt = ''
                    else:
                        pass                                      

                    # 비대칭장 탐색
                    if abs(call_otm_cdb_percent_mean) > 0 and abs(put_otm_cdb_percent_mean) > 0:
                        self.asym_detect(self.alternate_flag)
                    else:
                        pass                                                                  
                else:
                    pass                          
            else:
                pass
            
            # 증권사 서버초기화(오전 7시 10분경)전에 프로그램을 미리 오프라인으로 전환하여야 Crash 발생안함
            if (not flag_internet_connection_broken and not flag_service_provider_broken):
                
                if NightTime:                    

                    # 미국 주식장 종료 1분후에 프로그램을 오프라인으로 전환시킴
                    if SUMMER_TIME:
                        close_hour = 6
                    else:
                        close_hour = 7

                    if yagan_service_terminate or 시스템시간_분 == (close_hour * 3600 + 1 * 60):

                        global service_terminate
                        
                        if online_state:

                            SP500_당일종가 = SP500_현재가
                            DOW_당일종가 = DOW_현재가
                            NASDAQ_당일종가 = NASDAQ_현재가
                            HANGSENG_당일종가 = HANGSENG_현재가
                            WTI_당일종가 = WTI_현재가
                            GOLD_당일종가 = GOLD_현재가
                            EURO_당일종가 = EURO_현재가
                            YEN_당일종가 = YEN_현재가
                            ADI_당일종가 = ADI_현재가

                            # 다음날 해외선물 피봇계산을 위해 종료시(오전 6시 or 7시) 마지막 값 저장
                            txt = '[{0:02d}:{1:02d}:{2:02d}] FUT 종가 = {3:.2f}\r'.format(dt.hour, dt.minute, dt.second, FUT_당일종가)
                            self.textBrowser.append(txt)
                            print(txt)

                            txt = '[{0:02d}:{1:02d}:{2:02d}] SP500 Low = {3:.2f}, SP500 High = {4:.2f}, SP500 Close = {5:.2f}\r'.format \
                                (dt.hour, dt.minute, dt.second, SP500_저가, SP500_고가, SP500_당일종가)
                            self.textBrowser.append(txt)
                            print(txt)

                            txt = '[{0:02d}:{1:02d}:{2:02d}] DOW Low = {3:0.1f}, DOW High = {4:0.1f}, DOW Close = {5:0.1f}\r'.format \
                                (dt.hour, dt.minute, dt.second, DOW_저가, DOW_고가, DOW_당일종가)
                            self.textBrowser.append(txt)
                            print(txt)

                            txt = '[{0:02d}:{1:02d}:{2:02d}] NASDAQ Low = {3:.2f}, NASDAQ High = {4:.2f}, NASDAQ Close = {5:.2f}\r'.format \
                                (dt.hour, dt.minute, dt.second, NASDAQ_저가, NASDAQ_고가, NASDAQ_당일종가)
                            self.textBrowser.append(txt)
                            print(txt)
                            
                            txt = '[{0:02d}:{1:02d}:{2:02d}] HANGSENG Low = {3:.2f}, HANGSENG High = {4:.2f}, HANGSENG Close = {5:.2f}\r'.format \
                                (dt.hour, dt.minute, dt.second, HANGSENG_저가, HANGSENG_고가, HANGSENG_당일종가)
                            self.textBrowser.append(txt)
                            print(txt)

                            txt = '[{0:02d}:{1:02d}:{2:02d}] WTI Low = {3:.2f}, WTI High = {4:.2f}, WTI Close = {5:.2f}\r'.format \
                                (dt.hour, dt.minute, dt.second, WTI_저가, WTI_고가, WTI_당일종가)
                            self.textBrowser.append(txt)
                            print(txt)

                            txt = '[{0:02d}:{1:02d}:{2:02d}] GOLD Low = {3:.2f}, GOLD High = {4:.2f}, GOLD Close = {5:.2f}\r'.format \
                                (dt.hour, dt.minute, dt.second, GOLD_저가, GOLD_고가, GOLD_당일종가)
                            self.textBrowser.append(txt)
                            print(txt)

                            txt = '[{0:02d}:{1:02d}:{2:02d}] EURO Low = {3:.2f}, EURO High = {4:.2f}, EURO Close = {5:.2f}\r'.format \
                                (dt.hour, dt.minute, dt.second, EURO_저가, EURO_고가, EURO_당일종가)
                            self.textBrowser.append(txt)
                            print(txt)

                            txt = '[{0:02d}:{1:02d}:{2:02d}] YEN Low = {3:.2f}, YEN High = {4:.2f}, YEN Close = {5:.2f}\r'.format \
                                (dt.hour, dt.minute, dt.second, YEN_저가, YEN_고가, YEN_당일종가)
                            self.textBrowser.append(txt)
                            print(txt)

                            txt = '[{0:02d}:{1:02d}:{2:02d}] ADI Low = {3:.2f}, ADI High = {4:.2f}, ADI Close = {5:.2f}\r'.format \
                                (dt.hour, dt.minute, dt.second, ADI_저가, ADI_고가, ADI_당일종가)
                            self.textBrowser.append(txt)
                            print(txt)

                            txt = '[{0:02d}:{1:02d}:{2:02d}] 야간장 주요정보를 저징합니다...\r'.format(dt.hour, dt.minute, dt.second)
                            self.textBrowser.append(txt)
                            print(txt)

                            # 야간장의 주요정보를 저장
                            with open('nighttime.txt', mode='w', encoding='UTF-8') as nighttime_file:

                                now = time.localtime()

                                times = "%04d-%02d-%02d-%02d-%02d-%02d" % \
                                        (now.tm_year, now.tm_mon, now.tm_mday, now.tm_hour, now.tm_min, now.tm_sec)

                                file_txt = '{}\n'.format(times)
                                nighttime_file.write(file_txt)
                                file_txt = '\n'
                                nighttime_file.write(file_txt)
                                file_txt = '################# < Futures Index of the Last Night > ###################\n'
                                nighttime_file.write(file_txt)                            
                                file_txt = 'CME FUT Last Close = {0}\n'.format(FUT_당일종가)
                                nighttime_file.write(file_txt)
                                file_txt = '##################### < Foreign Futures Index of the Last Night > ####################\n'
                                nighttime_file.write(file_txt)
                                file_txt = 'S&P 500 Last Low = {0}\n'.format(SP500_저가)
                                nighttime_file.write(file_txt)
                                file_txt = 'S&P 500 Last High = {0}\n'.format(SP500_고가)
                                nighttime_file.write(file_txt)
                                file_txt = 'S&P 500 Last Close = {0}\n'.format(SP500_당일종가)
                                nighttime_file.write(file_txt)
                                file_txt = 'DOW Last Low = {0}\n'.format(DOW_저가)
                                nighttime_file.write(file_txt)
                                file_txt = 'DOW Last High = {0}\n'.format(DOW_고가)
                                nighttime_file.write(file_txt)
                                file_txt = 'DOW Last Close = {0}\n'.format(DOW_당일종가)
                                nighttime_file.write(file_txt)
                                file_txt = 'NASDAQ Last Low = {0}\n'.format(NASDAQ_저가)
                                nighttime_file.write(file_txt)
                                file_txt = 'NASDAQ Last High = {0}\n'.format(NASDAQ_고가)
                                nighttime_file.write(file_txt)
                                file_txt = 'NASDAQ Last Close = {0}\n'.format(NASDAQ_당일종가)
                                nighttime_file.write(file_txt)
                                file_txt = 'HANGSENG Last Low = {0}\n'.format(HANGSENG_저가)
                                nighttime_file.write(file_txt)
                                file_txt = 'HANGSENG Last High = {0}\n'.format(HANGSENG_고가)
                                nighttime_file.write(file_txt)
                                file_txt = 'HANGSENG Last Close = {0}\n'.format(HANGSENG_당일종가)
                                nighttime_file.write(file_txt)
                                file_txt = 'WTI Last Low = {0}\n'.format(WTI_저가)
                                nighttime_file.write(file_txt)
                                file_txt = 'WTI Last High = {0}\n'.format(WTI_고가)
                                nighttime_file.write(file_txt)
                                file_txt = 'WTI Last Close = {0}\n'.format(WTI_당일종가)
                                nighttime_file.write(file_txt)
                                file_txt = 'GOLD Last Low = {0}\n'.format(GOLD_저가)
                                nighttime_file.write(file_txt)
                                file_txt = 'GOLD Last High = {0}\n'.format(GOLD_고가)
                                nighttime_file.write(file_txt)
                                file_txt = 'GOLD Last Close = {0}\n'.format(GOLD_당일종가)
                                nighttime_file.write(file_txt)
                                file_txt = 'EURO Last Low = {0}\n'.format(EURO_저가)
                                nighttime_file.write(file_txt)
                                file_txt = 'EURO Last High = {0}\n'.format(EURO_고가)
                                nighttime_file.write(file_txt)
                                file_txt = 'EURO Last Close = {0}\n'.format(EURO_당일종가)
                                nighttime_file.write(file_txt)
                                file_txt = 'YEN Last Low = {0}\n'.format(YEN_저가)
                                nighttime_file.write(file_txt)
                                file_txt = 'YEN Last High = {0}\n'.format(YEN_고가)
                                nighttime_file.write(file_txt)
                                file_txt = 'YEN Last Close = {0}\n'.format(YEN_당일종가)
                                nighttime_file.write(file_txt)
                                file_txt = 'ADI Last Low = {0}\n'.format(ADI_저가)
                                nighttime_file.write(file_txt)
                                file_txt = 'ADI Last High = {0}\n'.format(ADI_고가)
                                nighttime_file.write(file_txt)
                                file_txt = 'ADI Last Close = {0}\n'.format(ADI_당일종가)
                                nighttime_file.write(file_txt)                              
                                
                                nighttime_file.close()

                                if TARGET_MONTH == 'CM':
                                    if os.path.isdir("d:/SkyBot_NM"):
                                        shutil.copyfile("./nighttime.txt", "d:/SkyBot_NM/nighttime.txt")
                                else:
                                    pass
                            
                            if CSV_FILE:
                                txt = '[{0:02d}:{1:02d}:{2:02d}] 실시간 데이타를 CSV파일로 저장합니다...\r'.format(dt.hour, dt.minute, dt.second)
                                self.textBrowser.append(txt)
                                print(txt)

                                close_all_writer()
                            else:
                                pass                            

                            txt = '[{0:02d}:{1:02d}:{2:02d}] 서버연결을 해지합니다...\r'.format(dt.hour, dt.minute, dt.second)
                            self.textBrowser.append(txt)
                            print(txt)

                            if not flag_offline:

                                flag_offline = True

                                self.KillScoreBoardAllThread()

                                if MULTIPROCESS:
                                    
                                    txt = '[{0:02d}:{1:02d}:{2:02d}] 멀티프로세스 쓰레드를 종료합니다...\r'.format(dt.hour, dt.minute, dt.second)
                                    self.textBrowser.append(txt)
                                    print(txt)

                                    if self.parent.realtime_futures_dataworker.isRunning():
                                        self.parent.realtime_futures_dataworker.terminate()
                                    else:
                                        pass

                                    if self.parent.mp_number == 2:
                                        self.parent.realtime_option_tick_dataworker.terminate()
                                    elif self.parent.mp_number == 3:
                                        self.parent.realtime_option_tick_dataworker.terminate()
                                        self.parent.realtime_option_quote_dataworker.terminate()
                                    elif self.parent.mp_number == 4:
                                        self.parent.realtime_option_tick_dataworker.terminate()
                                        self.parent.realtime_option_quote_dataworker.terminate()
                                        self.parent.realtime_ovc_dataworker.terminate()
                                    else:
                                        pass

                                    txt = '[{0:02d}:{1:02d}:{2:02d}] 멀티프로세스 로그인을 종료합니다...\r'.format(dt.hour, dt.minute, dt.second)
                                    self.textBrowser.append(txt)
                                    print(txt)
                                else:
                                    pass

                                txt = '[{0:02d}:{1:02d}:{2:02d}] 실시간데이타 통계 : {3}\r'.format(dt.hour, dt.minute, dt.second, drop_txt)
                                self.textBrowser.append(txt)

                                txt = '[{0:02d}:{1:02d}:{2:02d}] 로그파일을 저장합니다.\r'.format(dt.hour, dt.minute, dt.second)
                                self.textBrowser.append(txt)

                                service_terminate = True

                                self.SaveResult()

                                self.parent.xing.main_connection.disconnect()
                            else:
                                pass                            

                            #self.pushButton_start.setText(' ScrShot ')                            
                        else:
                            txt = '오프라인 : {0}'.format(drop_txt)
                            self.parent.statusbar.showMessage(txt)                           
                    else:
                        pass
                else:
                    # 장종료 1분후에 프로그램을 오프라인으로 전환시킴
                    if jugan_service_terminate or 시스템시간_분 == ((KSE_START_HOUR + 6) * 3600 + 46 * 60):
                        
                        if online_state:

                            txt = '[{0:02d}:{1:02d}:{2:02d}] 서버연결을 해지합니다...\r'.format(dt.hour, dt.minute, dt.second)
                            self.textBrowser.append(txt)
                            print(txt)

                            if not flag_offline:
                                
                                flag_offline = True

                                self.KillScoreBoardAllThread()

                                if MULTIPROCESS:
                                    
                                    if CSV_FILE:
                                        close_all_writer()
                                    else:
                                        pass
                                    
                                    txt = '[{0:02d}:{1:02d}:{2:02d}] 멀티프로세스 쓰레드를 종료합니다...\r'.format(dt.hour, dt.minute, dt.second)
                                    self.textBrowser.append(txt)
                                    print(txt)

                                    if self.parent.realtime_futures_dataworker.isRunning():
                                        self.parent.realtime_futures_dataworker.terminate()
                                    else:
                                        pass

                                    if self.parent.mp_number == 2:
                                        self.parent.realtime_option_tick_dataworker.terminate()
                                    elif self.parent.mp_number == 3:
                                        self.parent.realtime_option_tick_dataworker.terminate()
                                        self.parent.realtime_option_quote_dataworker.terminate()
                                    elif self.parent.mp_number == 4:
                                        self.parent.realtime_option_tick_dataworker.terminate()
                                        self.parent.realtime_option_quote_dataworker.terminate()
                                        self.parent.realtime_ovc_dataworker.terminate()
                                    else:
                                        pass                                    
                                else:
                                    pass

                                txt = '[{0:02d}:{1:02d}:{2:02d}] 수신된 옵션 틱 데이타 크기 : {3}\r'.format(dt.hour, dt.minute, dt.second, option_tick_total_size)
                                self.textBrowser.append(txt)
                                
                                txt = '[{0:02d}:{1:02d}:{2:02d}] 실시간데이타 통계 : {3}\r'.format(dt.hour, dt.minute, dt.second, drop_txt)
                                self.textBrowser.append(txt)

                                txt = '[{0:02d}:{1:02d}:{2:02d}] 로그파일을 저장합니다.\r'.format(dt.hour, dt.minute, dt.second)
                                self.textBrowser.append(txt)

                                self.SaveResult()

                                self.parent.xing.main_connection.disconnect()                                    
                            else:
                                pass
                        else:
                            txt = '오프라인 : {0}'.format(drop_txt)
                            self.parent.statusbar.showMessage(txt)                            
                    else:
                        pass
            else:
                pass

        except Exception as e:

            txt = '[{0:02d}:{1:02d}:{2:02d}] Exception : update_screen 에서 {3} \n상기 오류가 발생했습니다.\r'.format(dt.hour, dt.minute, dt.second, traceback.format_exc())
            self.parent.textBrowser.append(txt)

        finally:            
            if not flag_offline:

                item_txt = '{0:.2f}'.format(main_loop_processing_time)
                item = QTableWidgetItem(item_txt)
                item.setTextAlignment(Qt.AlignCenter)
                self.tableWidget_fut.setHorizontalHeaderItem(0, item)

                self.tableWidget_fut.resizeColumnToContents(0)
            else:
                pass

            flag_screen_update_is_running = False

    def opt_high_low_list_update(self):

        global call_저가, call_고가, put_저가, put_고가 
        global call_low_list, call_high_list, put_low_list, put_high_list, high_low_list, moving_list

        dt = datetime.now()
        
        call_low_list = []
        call_high_list = []
        put_low_list = []
        put_high_list = []
        high_low_list = []
        moving_list = []
        
        call_저가 = df_call['저가'].values.tolist()
        call_고가 = df_call['고가'].values.tolist()
        put_저가 = df_put['저가'].values.tolist()
        put_고가 = df_put['고가'].values.tolist()
        
        call_저가.sort()
        index1 = bisect(call_저가, SEARCH_MOVING_NODE_START_VALUE)
        index2 = bisect(call_저가, SEARCH_MOVING_NODE_END_VALUE)
        call_low_list = call_저가[index1:index2]

        call_고가.sort()
        index1 = bisect(call_고가, SEARCH_MOVING_NODE_START_VALUE)
        index2 = bisect(call_고가, SEARCH_MOVING_NODE_END_VALUE)
        call_high_list = call_고가[index1:index2]

        put_저가.sort()
        index1 = bisect(put_저가, SEARCH_MOVING_NODE_START_VALUE)
        index2 = bisect(put_저가, SEARCH_MOVING_NODE_END_VALUE)
        put_low_list = put_저가[index1:index2]

        put_고가.sort()
        index1 = bisect(put_고가, SEARCH_MOVING_NODE_START_VALUE)
        index2 = bisect(put_고가, SEARCH_MOVING_NODE_END_VALUE)
        put_high_list = put_고가[index1:index2]

        high_low_list = call_low_list + call_high_list + put_low_list + put_high_list
        high_low_list.sort()
        
        moving_list = FILE_HIGH_LOW_LIST + high_low_list
        moving_list.sort()
        
        #print('opt_high_low_list_update FILE_HIGH_LOW_LIST =', FILE_HIGH_LOW_LIST)
        #print('opt_high_low_list_update moving_list =', moving_list)        

    def get_value_frequency(self, value):

        frequency = moving_list.count(value)

        return frequency
    
    def get_maxval_info(self, input_list):
    
        input_list.sort()
        input_list.reverse()

        result = list(Counter(input_list).values())
        빈도수 = max(result)
        
        if 빈도수 > 2:

            max_index = result.index(max(result))

            # 최대 중복값 산출
            result = list(Counter(input_list).keys())
            value = float(result[max_index])

            return value, 빈도수
        else:
            return None, None

    def search_moving_node(self):

        global 진성맥점
        global 동적맥점_리스트, 동적맥점_빈도수_리스트 
        global flag_first_search 

        dt = datetime.now()

        txt = '[{0:02d}:{1:02d}:{2:02d}] 동적 맥점 탐색을 시작합니다.\r'.format(dt.hour, dt.minute, dt.second)
        self.textBrowser.append(txt)
        print(txt)
                
        동적맥점_리스트 = []
        동적맥점_빈도수_리스트 = []

        OLD_진성맥점 = 진성맥점[:]

        self.opt_high_low_list_update()
        
        # 1st search
        동적맥점1, 동적맥점1_빈도수 = self.get_maxval_info(moving_list)
        동적맥점_리스트.append(동적맥점1)
        동적맥점_빈도수_리스트.append(동적맥점1_빈도수)

        # 2nd search
        list_2 = list(filter((동적맥점1).__ne__, moving_list))
        동적맥점2, 동적맥점2_빈도수 = self.get_maxval_info(list_2)
        동적맥점_리스트.append(동적맥점2)
        동적맥점_빈도수_리스트.append(동적맥점2_빈도수)

        # 3rd search
        list_3 = list(filter((동적맥점2).__ne__, list_2))
        동적맥점3, 동적맥점3_빈도수 = self.get_maxval_info(list_3)
        동적맥점_리스트.append(동적맥점3)
        동적맥점_빈도수_리스트.append(동적맥점3_빈도수)

        # 4th search
        list_4 = list(filter((동적맥점3).__ne__, list_3))
        동적맥점4, 동적맥점4_빈도수 = self.get_maxval_info(list_4)
        동적맥점_리스트.append(동적맥점4)
        동적맥점_빈도수_리스트.append(동적맥점4_빈도수)

        # 5th search
        list_5 = list(filter((동적맥점4).__ne__, list_4))
        동적맥점5, 동적맥점5_빈도수 = self.get_maxval_info(list_5)
        동적맥점_리스트.append(동적맥점5)
        동적맥점_빈도수_리스트.append(동적맥점5_빈도수)

        # 6th search
        list_6 = list(filter((동적맥점5).__ne__, list_5))
        동적맥점6, 동적맥점6_빈도수 = self.get_maxval_info(list_6)
        동적맥점_리스트.append(동적맥점6)
        동적맥점_빈도수_리스트.append(동적맥점6_빈도수)

        # 7th search
        list_7 = list(filter((동적맥점6).__ne__, list_6))
        동적맥점7, 동적맥점7_빈도수 = self.get_maxval_info(list_7)
        동적맥점_리스트.append(동적맥점7)
        동적맥점_빈도수_리스트.append(동적맥점7_빈도수)

        # 8th search
        list_8 = list(filter((동적맥점7).__ne__, list_7))
        동적맥점8, 동적맥점8_빈도수 = self.get_maxval_info(list_8)
        동적맥점_리스트.append(동적맥점8)
        동적맥점_빈도수_리스트.append(동적맥점8_빈도수)

        # 9th search
        list_9 = list(filter((동적맥점8).__ne__, list_8))
        동적맥점9, 동적맥점9_빈도수 = self.get_maxval_info(list_9)
        동적맥점_리스트.append(동적맥점9)
        동적맥점_빈도수_리스트.append(동적맥점9_빈도수)

        # 10th search
        list_10 = list(filter((동적맥점9).__ne__, list_9))
        동적맥점10, 동적맥점10_빈도수 = self.get_maxval_info(list_10)
        동적맥점_리스트.append(동적맥점10)
        동적맥점_빈도수_리스트.append(동적맥점10_빈도수)

        # 11th search
        list_11 = list(filter((동적맥점10).__ne__, list_10))
        동적맥점11, 동적맥점11_빈도수 = self.get_maxval_info(list_11)
        동적맥점_리스트.append(동적맥점11)
        동적맥점_빈도수_리스트.append(동적맥점11_빈도수)

        # 12th search
        list_12 = list(filter((동적맥점11).__ne__, list_11))
        동적맥점12, 동적맥점12_빈도수 = self.get_maxval_info(list_12)
        동적맥점_리스트.append(동적맥점12)
        동적맥점_빈도수_리스트.append(동적맥점12_빈도수)

        listsum = []

        for i in range(len(동적맥점_리스트)):

            var1 = self.get_list_item(동적맥점_리스트, i)
            var2 = self.get_list_item(동적맥점_빈도수_리스트, i)
            if var1 != None and var2 != None: # 유효한 것만 합친다 (결국 두 리스트중에서 작은 사이즈로)
                listsum.append([var1, var2])

        new_node = sorted(listsum, key=operator.itemgetter(0))

        txt = '[{0:02d}:{1:02d}:{2:02d}] new node list = {3}\r'.format(dt.hour, dt.minute, dt.second, new_node)
        self.textBrowser.append(txt)
        print(txt)
        
        for i in range(len(new_node)):

            item = QTableWidgetItem("{0:.2f}\n({1})".format(new_node[i][0], new_node[i][1]))
            item.setTextAlignment(Qt.AlignCenter)
            item.setBackground(QBrush(lime))
            item.setForeground(QBrush(검정색))

            if i < 6:
                if NightTime:
                    self.tableWidget_fut.setItem(1, 2 + i, item)
                else:
                    self.tableWidget_fut.setItem(0, 2 + i, item)
            else:
                self.tableWidget_fut.setItem(2, i - 4, item)

            if high_low_list is not None and new_node[i][0] in high_low_list:

                txt = '[{0:02d}:{1:02d}:{2:02d}] {3}번째 동적맥점 {4:.2f}(빈도수 = {5}) 발생 !!!\r'.format \
                    (dt.hour, dt.minute, dt.second, i + 1, new_node[i][0], new_node[i][1])
                self.textBrowser.append(txt)
                print(txt)

                진성맥점.append(new_node[i][0])

                item_txt = "{0:.2f}\n({1})✓".format(new_node[i][0], new_node[i][1])
                item = QTableWidgetItem(item_txt)
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(lime))
                item.setForeground(QBrush(검정색))

                if i < 6:
                    if NightTime:
                        self.tableWidget_fut.setItem(1, 2 + i, item)
                    else:
                        self.tableWidget_fut.setItem(0, 2 + i, item)
                else:
                    self.tableWidget_fut.setItem(2, i - 4, item)
            else:
                pass        
        
        진성맥점 = list(set(진성맥점))
        진성맥점.sort()            

        if 진성맥점 != OLD_진성맥점:
            
            if ResizeRowsToContents:
                self.tableWidget_fut.resizeRowsToContents()
            else:
                pass
            self.tableWidget_fut.resizeColumnsToContents()

            new_list = list(set(진성맥점) - set(DEFAULT_NODE_LIST))
            new_list.sort()
            txt = '[{0:02d}:{1:02d}:{2:02d}] 탐색된 진성맥점 = {3}\r'.format(dt.hour, dt.minute, dt.second, new_list)
            self.textBrowser.append(txt)
        else:
            pass            

    def market_type_display(self, blink):

        dt = datetime.now()        

        if flag_option_start:

            # 콜 매수 OneWay장
            if call_ms_oneway:

                if blink:
                    self.label_main_time.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold; border-style: solid; border-width: 1px; border-color: white; border-radius: 5px')
                else:
                    self.label_main_time.setStyleSheet('background-color: white; color: red; font-family: Consolas; font-size: 9pt; font: Bold; border-style: solid; border-width: 1px; border-color: red; border-radius: 5px')

            # 콜 매수 비대칭장
            elif call_ms_asymmetric:

                self.label_main_time.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold; border-style: solid; border-width: 1px; border-color: white; border-radius: 5px')

            # 콜 매도 비대칭장
            elif call_md_asymmetric:

                self.label_main_time.setStyleSheet('background-color: black; color: pink; font-family: Consolas; font-size: 9pt; font: Bold; border-style: solid; border-width: 1px; border-color: pink; border-radius: 5px')

            # 콜 매도 양꽝장
            elif call_md_all_down:

                self.label_main_time.setStyleSheet('background-color: black; color: magenta; font-family: Consolas; font-size: 9pt; font: Bold; border-style: solid; border-width: 1px; border-color: magenta; border-radius: 5px')

            # 콜 매수 양빵장
            elif call_ms_all_up:

                self.label_main_time.setStyleSheet('background-color: magenta; color: black; font-family: Consolas; font-size: 9pt; font: Bold; border-style: solid; border-width: 1px; border-color: black; border-radius: 5px')

            # 풋 매수 OneWay장
            elif put_ms_oneway:

                if blink:
                    self.label_main_time.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold; border-style: solid; border-width: 1px; border-color: white; border-radius: 5px')
                else:
                    self.label_main_time.setStyleSheet('background-color: white; color: blue; font-family: Consolas; font-size: 9pt; font: Bold; border-style: solid; border-width: 1px; border-color: blue; border-radius: 5px')

            # 풋 매수 비대칭장
            elif put_ms_asymmetric:

                self.label_main_time.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold; border-style: solid; border-width: 1px; border-color: white; border-radius: 5px')

            # 풋 매도 비대칭장
            elif put_md_asymmetric:

                self.label_main_time.setStyleSheet('background-color: black; color: lightskyblue; font-family: Consolas; font-size: 9pt; font: Bold; border-style: solid; border-width: 1px; border-color: lightskyblue; border-radius: 5px')

            # 풋 매도 양꽝장
            elif put_md_all_down:

                self.label_main_time.setStyleSheet('background-color: black; color: cyan; font-family: Consolas; font-size: 9pt; font: Bold; border-style: solid; border-width: 1px; border-color: cyan; border-radius: 5px')

            # 풋 매수 양빵장
            elif put_ms_all_up:

                self.label_main_time.setStyleSheet('background-color: cyan; color: black; font-family: Consolas; font-size: 9pt; font: Bold; border-style: solid; border-width: 1px; border-color: black; border-radius: 5px')
            else:
                # 대칭장
                self.label_main_time.setStyleSheet('background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:0.857143, y2:0.857955, stop:0 rgba(10, 242, 251, 255), stop:1 rgba(224, 6, 159, 255)); \
                                                    color: black; font-family: Consolas; font-size: 9pt; font: Bold; border-style: solid; border-width: 1px; border-color: black; border-radius: 5px')           
        else:
            self.label_main_time.setStyleSheet('background-color: black; color: lawngreen; font-family: Consolas; font-size: 9pt; font: Bold; border-style: solid; border-width: 1px; border-color: lawngreen; border-radius: 5px')            
        
        # 해외선물 한국시간 표시
        if flag_screen_update_is_running:
            txt = '{0:02d}:{1:02d}:{2:02d}({3})'.format(dt.hour, dt.minute, dt.second, '⌛')
        else:
            txt = '{0:02d}:{1:02d}:{2:02d}({3:+d})'.format(dt.hour, dt.minute, dt.second, system_server_time_gap)

        self.label_main_time.setText(txt)
    
    def call_scroll_coloring(self):

        global coloring_done_time
        global node_coloring
        global call_scroll

        dt = datetime.now()
        start_time = timeit.default_timer()
        
        node_coloring = True
        call_scroll = True
            
        self.call_node_color_clear()         
        self.call_open_check()
        self.call_cross_color_update()        
        self.call_node_color_update()
        self.call_coreval_color_update()

        node_coloring = False
        call_scroll = False

        process_time = (timeit.default_timer() - start_time) * 1000

        txt = '[{0:02d}:{1:02d}:{2:02d}] 옵션 Call Node Color Check  ms\r'.format(dt.hour, dt.minute, dt.second, process_time)
        self.textBrowser.append(txt)
        print(txt)

    def call_low_node_coloring(self):

        dt = datetime.now()
        start_time = timeit.default_timer()
        
        self.call_node_color_clear()
        self.call_open_check()
        self.call_only_cross_color_update()        
        self.call_node_color_update()
        self.call_low_coreval_color_update()

        process_time = (timeit.default_timer() - start_time) * 1000

        txt = '[{0:02d}:{1:02d}:{2:02d}] Call Low Node Color Check  ms\r'.format(dt.hour, dt.minute, dt.second, process_time)
        self.textBrowser.append(txt)

    def call_high_node_coloring(self):

        dt = datetime.now()
        start_time = timeit.default_timer()

        self.call_node_color_clear() 
        self.call_open_check()
        self.call_only_cross_color_update()        
        self.call_node_color_update()
        self.call_high_coreval_color_update()

        process_time = (timeit.default_timer() - start_time) * 1000

        txt = '[{0:02d}:{1:02d}:{2:02d}] Call High Node Color Check  ms\r'.format(dt.hour, dt.minute, dt.second, process_time)
        self.textBrowser.append(txt)            
    
    def put_scroll_coloring(self):

        global coloring_done_time
        global node_coloring
        global put_scroll

        dt = datetime.now()
        start_time = timeit.default_timer()
        
        node_coloring = True
        put_scroll = True
            
        self.put_node_color_clear()        
        self.put_open_check()
        self.put_cross_color_update()        
        self.put_node_color_update()
        self.put_coreval_color_update()

        node_coloring = False
        put_scroll = False

        process_time = (timeit.default_timer() - start_time) * 1000

        txt = '[{0:02d}:{1:02d}:{2:02d}] 옵션 Put Node Color Check  ms\r'.format(dt.hour, dt.minute, dt.second, process_time)
        self.textBrowser.append(txt)
        print(txt)

    def put_low_node_coloring(self):

        dt = datetime.now()
        start_time = timeit.default_timer()

        self.put_node_color_clear()        
        self.put_open_check()    
        self.put_only_cross_color_update()        
        self.put_node_color_update()
        self.put_low_coreval_color_update()

        process_time = (timeit.default_timer() - start_time) * 1000

        txt = '[{0:02d}:{1:02d}:{2:02d}] Put Low Node Color Check  ms\r'.format(dt.hour, dt.minute, dt.second, process_time)
        self.textBrowser.append(txt)

    def put_high_node_coloring(self):

        dt = datetime.now()
        start_time = timeit.default_timer()
            
        self.put_node_color_clear()        
        self.put_open_check()     
        self.put_only_cross_color_update()        
        self.put_node_color_update()
        self.put_high_coreval_color_update()

        process_time = (timeit.default_timer() - start_time) * 1000

        txt = '[{0:02d}:{1:02d}:{2:02d}] Put High Node Color Check  ms\r'.format(dt.hour, dt.minute, dt.second, process_time)
        self.textBrowser.append(txt)

    # 탐색순서가 중요(교차탐색) !!!
    def opt_all_node_coloring(self):

        global coloring_done_time
        global node_coloring
        global refresh_coloring

        dt = datetime.now()
        start_time = timeit.default_timer()

        node_coloring = True
        refresh_coloring = True

        if bms_node_list:
            self.search_moving_node()            
        else:
            pass
        
        self.call_node_color_clear()
        self.call_open_check()
        self.call_cross_color_update()
        self.call_node_color_update()
        self.call_coreval_color_update()

        self.put_node_color_clear()
        self.put_open_check()        
        self.put_cross_color_update()        
        self.put_node_color_update()
        self.put_coreval_color_update()        
        
        node_coloring = False
        refresh_coloring = False

        process_time = (timeit.default_timer() - start_time) * 1000

        txt = '[{0:02d}:{1:02d}:{2:02d}] 옵션 All Node Color Check  ms\r'.format(dt.hour, dt.minute, dt.second, process_time)
        self.textBrowser.append(txt)
        print(txt)        

    def display_atm(self, blink):

        global basis
        global atm_txt, ATM_INDEX, old_atm_index, call_atm_value, put_atm_value 
        global atm_zero_sum, atm_zero_cha
        global selected_call, selected_put, flag_calltable_checkstate_changed, flag_puttable_checkstate_changed
        
        global 옵션_중심가, df_call_information_graph 

        dt = datetime.now()
        
        # 등가 check & coloring        
        old_atm_index = ATM_INDEX
        old_atm_txt = atm_txt

        atm_txt = self.get_atm_txt(self.fut_realdata['KP200'])
        ATM_INDEX = opt_actval.index(atm_txt)
        
        if ATM_INDEX != old_atm_index:

            self.tableWidget_call.item(old_atm_index, Option_column.행사가.value).setBackground(QBrush(라임))
            self.tableWidget_call.item(old_atm_index, Option_column.행사가.value).setForeground(QBrush(검정색))
            self.tableWidget_call.cellWidget(old_atm_index, 0).findChild(type(QCheckBox())).setChecked(Qt.Unchecked)
            self.tableWidget_call.item(ATM_INDEX, Option_column.행사가.value).setBackground(QBrush(노란색))
            self.tableWidget_call.item(ATM_INDEX, Option_column.행사가.value).setForeground(QBrush(검정색))
            self.tableWidget_call.cellWidget(ATM_INDEX, 0).findChild(type(QCheckBox())).setChecked(Qt.Checked)

            self.tableWidget_put.item(old_atm_index, Option_column.행사가.value).setBackground(QBrush(라임))
            self.tableWidget_put.item(old_atm_index, Option_column.행사가.value).setForeground(QBrush(검정색))
            self.tableWidget_put.cellWidget(old_atm_index, 0).findChild(type(QCheckBox())).setChecked(Qt.Unchecked)
            self.tableWidget_put.item(ATM_INDEX, Option_column.행사가.value).setBackground(QBrush(노란색))
            self.tableWidget_put.item(ATM_INDEX, Option_column.행사가.value).setForeground(QBrush(검정색))
            self.tableWidget_put.cellWidget(ATM_INDEX, 0).findChild(type(QCheckBox())).setChecked(Qt.Checked)

            selected_call = [ATM_INDEX]
            selected_put = [ATM_INDEX]

            flag_calltable_checkstate_changed = True
            flag_puttable_checkstate_changed = True

            txt = '[{0:02d}:{1:02d}:{2:02d}] 등가변경됨 : {3} -> {4}\r'.format(dt.hour, dt.minute, dt.second, old_atm_txt, atm_txt)
            self.textBrowser.append(txt)

            if flag_tts:
                winsound.PlaySound('Resources/doorbell.wav', winsound.SND_FILENAME)
        else:
            pass

        basis = round((self.fut_realdata['현재가'] - self.fut_realdata['KP200']), 2)

        call_atm_value = df_call.at[ATM_INDEX, '현재가']
        put_atm_value = df_put.at[ATM_INDEX, '현재가']

        atm_minus_5 = round((df_call.at[ATM_INDEX - 5, '현재가'] + df_put.at[ATM_INDEX - 5, '현재가']), 2)
        atm_minus_4 = round((df_call.at[ATM_INDEX - 4, '현재가'] + df_put.at[ATM_INDEX - 4, '현재가']), 2)   
        atm_minus_3 = round((df_call.at[ATM_INDEX - 3, '현재가'] + df_put.at[ATM_INDEX - 3, '현재가']), 2)
        atm_minus_2 = round((df_call.at[ATM_INDEX - 2, '현재가'] + df_put.at[ATM_INDEX - 2, '현재가']), 2)
        atm_minus_1 = round((df_call.at[ATM_INDEX - 1, '현재가'] + df_put.at[ATM_INDEX - 1, '현재가']) , 2)
        atm_zero_sum = round((df_call.at[ATM_INDEX, '현재가'] + df_put.at[ATM_INDEX, '현재가']) , 2)

        if call_atm_value >= put_atm_value:
            atm_zero_cha = round((call_atm_value - put_atm_value) , 2)
        else:
            atm_zero_cha = round((put_atm_value - call_atm_value) , 2)

        atm_plus_1 = round((df_call.at[ATM_INDEX + 1, '현재가'] + df_put.at[ATM_INDEX + 1, '현재가']) , 2)
        atm_plus_2 = round((df_call.at[ATM_INDEX + 2, '현재가'] + df_put.at[ATM_INDEX + 2, '현재가']) , 2)
        atm_plus_3 = round((df_call.at[ATM_INDEX + 3, '현재가'] + df_put.at[ATM_INDEX + 3, '현재가']) , 2)
        atm_plus_4 = round((df_call.at[ATM_INDEX + 4, '현재가'] + df_put.at[ATM_INDEX + 4, '현재가']) , 2)
        atm_plus_5 = round((df_call.at[ATM_INDEX + 5, '현재가'] + df_put.at[ATM_INDEX + 5, '현재가']) , 2)             

        if FLAG_ATM:            

            if 장시작_양합 > 0:
                txt = '{0}({1:.2f}:{2})'.format(basis, 장시작_양합, abs(atm_zero_cha))
            else :
                txt = '{0}({1}:{2})'.format(basis, atm_zero_sum, abs(atm_zero_cha))

            if basis < 0:
                self.label_atm.setStyleSheet('background-color: qlineargradient(spread:reflect, x1:1, y1:0, x2:0.995, y2:1, stop:0 rgba(218, 218, 218, 255), stop:0.305419 \
                                            rgba(0, 7, 11, 255), stop:0.935961 rgba(2, 11, 18, 255), stop:1 rgba(240, 240, 240, 255)); \
                                            color: yellow; font-family: Consolas; font-size: 9pt; font: Bold; border-style: solid; border-width: 1px; border-color: yellow; border-radius: 5px')
            else:
                self.label_atm.setStyleSheet('background-color: qlineargradient(spread:reflect, x1:0.5, y1:0.5, x2:1, y2:0.5, stop:0 rgba(255, 199, 0, 255), stop:1 rgba(192, 5, 67, 255)); \
                                            color: black; font-family: Consolas; font-size: 9pt; font: Bold; border-style: solid; border-width: 1px; border-color: black; border-radius: 5px')

            self.label_atm.setText(txt)
        else:
            pass

        # 예상 중심가 표시
        if call_atm_value > put_atm_value:

            옵션_중심가 = round((put_atm_value + atm_zero_cha / 2), 2)

        elif put_atm_value > call_atm_value:

            옵션_중심가 = round((call_atm_value + atm_zero_cha / 2), 2)
        else:
            옵션_중심가 = call_atm_value

            txt = '[{0:02d}:{1:02d}:{2:02d}] 등가 {3}에서 교차 중심가 {4} 발생 !!!\r'.format(dt.hour, dt.minute, dt.second, atm_txt, 옵션_중심가)
            self.textBrowser.append(txt)
        
        df_call_information_graph.at[plot_time_index, 'centerval'] = 옵션_중심가

        atm_list = []
        atm_list.append(atm_minus_5)
        atm_list.append(atm_minus_4)
        atm_list.append(atm_minus_3)
        atm_list.append(atm_minus_2)
        atm_list.append(atm_minus_1)
        atm_list.append(atm_zero_sum)
        atm_list.append(atm_plus_1)
        atm_list.append(atm_plus_2)
        atm_list.append(atm_plus_3)
        atm_list.append(atm_plus_4)
        atm_list.append(atm_plus_5)   

        min_index = atm_list.index(min(atm_list)) + ATM_INDEX - 5

        #중심가 계산
        CENTER_VAL_PLUS5 = round((df_call.at[ATM_INDEX - 5, '현재가'] + df_put.at[ATM_INDEX - 5, '현재가'])/2, 2)
        CENTER_VAL_PLUS4 = round((df_call.at[ATM_INDEX - 4, '현재가'] + df_put.at[ATM_INDEX - 4, '현재가'])/2, 2)
        CENTER_VAL_PLUS3 = round((df_call.at[ATM_INDEX - 3, '현재가'] + df_put.at[ATM_INDEX - 3, '현재가'])/2, 2)
        CENTER_VAL_PLUS2 = round((df_call.at[ATM_INDEX - 2, '현재가'] + df_put.at[ATM_INDEX - 2, '현재가'])/2, 2)
        CENTER_VAL_PLUS1 = round((df_call.at[ATM_INDEX - 1, '현재가'] + df_put.at[ATM_INDEX - 1, '현재가'])/2 , 2)
        
        CENTER_VAL_MINUS1 = round((df_call.at[ATM_INDEX + 1, '현재가'] + df_put.at[ATM_INDEX + 1, '현재가'])/2 , 2)
        CENTER_VAL_MINUS2 = round((df_call.at[ATM_INDEX + 2, '현재가'] + df_put.at[ATM_INDEX + 2, '현재가'])/2 , 2)
        CENTER_VAL_MINUS3 = round((df_call.at[ATM_INDEX + 3, '현재가'] + df_put.at[ATM_INDEX + 3, '현재가'])/2 , 2)
        CENTER_VAL_MINUS4 = round((df_call.at[ATM_INDEX + 4, '현재가'] + df_put.at[ATM_INDEX + 4, '현재가'])/2 , 2)
        CENTER_VAL_MINUS5 = round((df_call.at[ATM_INDEX + 5, '현재가'] + df_put.at[ATM_INDEX + 5, '현재가'])/2 , 2)

        # 콜에 중심가 표시
        val = df_call.at[ATM_INDEX - 5, '기준가']
        item = QTableWidgetItem("{0:.2f}\n({1})".format(val, CENTER_VAL_PLUS5))
        item.setTextAlignment(Qt.AlignCenter)
        item.setBackground(QBrush(라임))
        item.setForeground(QBrush(검정색))
        self.tableWidget_call.setItem(ATM_INDEX - 5, Option_column.기준가.value, item) 

        val = df_call.at[ATM_INDEX - 4, '기준가']
        item = QTableWidgetItem("{0:.2f}\n({1})".format(val, CENTER_VAL_PLUS4))
        item.setTextAlignment(Qt.AlignCenter)
        item.setBackground(QBrush(라임))
        item.setForeground(QBrush(검정색))
        self.tableWidget_call.setItem(ATM_INDEX - 4, Option_column.기준가.value, item) 

        val = df_call.at[ATM_INDEX - 3, '기준가']
        item = QTableWidgetItem("{0:.2f}\n({1})".format(val, CENTER_VAL_PLUS3))
        item.setTextAlignment(Qt.AlignCenter)
        item.setBackground(QBrush(라임))
        item.setForeground(QBrush(검정색))
        self.tableWidget_call.setItem(ATM_INDEX - 3, Option_column.기준가.value, item) 

        val = df_call.at[ATM_INDEX - 2, '기준가']
        item = QTableWidgetItem("{0:.2f}\n({1})".format(val, CENTER_VAL_PLUS2))
        item.setTextAlignment(Qt.AlignCenter)
        item.setBackground(QBrush(라임))
        item.setForeground(QBrush(검정색))
        self.tableWidget_call.setItem(ATM_INDEX - 2, Option_column.기준가.value, item)  

        val = df_call.at[ATM_INDEX - 1, '기준가']
        item = QTableWidgetItem("{0:.2f}\n({1})".format(val, CENTER_VAL_PLUS1))
        item.setTextAlignment(Qt.AlignCenter)
        item.setBackground(QBrush(라임))
        item.setForeground(QBrush(검정색))
        self.tableWidget_call.setItem(ATM_INDEX - 1, Option_column.기준가.value, item)            

        val = df_call.at[ATM_INDEX, '기준가']
        item = QTableWidgetItem("{0:.2f}\n({1})".format(val, 옵션_중심가))
        item.setTextAlignment(Qt.AlignCenter)
        item.setBackground(QBrush(노란색))
        item.setForeground(QBrush(검정색))
        self.tableWidget_call.setItem(ATM_INDEX, Option_column.기준가.value, item)            

        val = df_call.at[ATM_INDEX + 1, '기준가']
        item = QTableWidgetItem("{0:.2f}\n({1})".format(val, CENTER_VAL_MINUS1))
        item.setTextAlignment(Qt.AlignCenter)
        item.setBackground(QBrush(라임))
        item.setForeground(QBrush(검정색))
        self.tableWidget_call.setItem(ATM_INDEX + 1, Option_column.기준가.value, item)

        val = df_call.at[ATM_INDEX + 2, '기준가']
        item = QTableWidgetItem("{0:.2f}\n({1})".format(val, CENTER_VAL_MINUS2))
        item.setTextAlignment(Qt.AlignCenter)
        item.setBackground(QBrush(라임))
        item.setForeground(QBrush(검정색))
        self.tableWidget_call.setItem(ATM_INDEX + 2, Option_column.기준가.value, item)

        val = df_call.at[ATM_INDEX + 3, '기준가']
        item = QTableWidgetItem("{0:.2f}\n({1})".format(val, CENTER_VAL_MINUS3))
        item.setTextAlignment(Qt.AlignCenter)
        item.setBackground(QBrush(라임))
        item.setForeground(QBrush(검정색))
        self.tableWidget_call.setItem(ATM_INDEX + 3, Option_column.기준가.value, item)

        val = df_call.at[ATM_INDEX + 4, '기준가']
        item = QTableWidgetItem("{0:.2f}\n({1})".format(val, CENTER_VAL_MINUS4))
        item.setTextAlignment(Qt.AlignCenter)
        item.setBackground(QBrush(라임))
        item.setForeground(QBrush(검정색))
        self.tableWidget_call.setItem(ATM_INDEX + 4, Option_column.기준가.value, item)

        val = df_call.at[ATM_INDEX + 5, '기준가']
        item = QTableWidgetItem("{0:.2f}\n({1})".format(val, CENTER_VAL_MINUS5))
        item.setTextAlignment(Qt.AlignCenter)
        item.setBackground(QBrush(라임))
        item.setForeground(QBrush(검정색))
        self.tableWidget_call.setItem(ATM_INDEX + 5, Option_column.기준가.value, item)

        # 풋에 양합표시(콜에는 중심가 표시)
        val = df_put.at[ATM_INDEX - 5, '기준가']
        item = QTableWidgetItem("{0:.2f}\n({1})".format(val, atm_minus_5))
        item.setTextAlignment(Qt.AlignCenter)
        item.setBackground(QBrush(라임))
        item.setForeground(QBrush(검정색))
        self.tableWidget_put.setItem(ATM_INDEX - 5, Option_column.기준가.value, item)

        val = df_put.at[ATM_INDEX - 4, '기준가']
        item = QTableWidgetItem("{0:.2f}\n({1})".format(val, atm_minus_4))
        item.setTextAlignment(Qt.AlignCenter)
        item.setBackground(QBrush(라임))
        item.setForeground(QBrush(검정색))
        self.tableWidget_put.setItem(ATM_INDEX - 4, Option_column.기준가.value, item)

        val = df_put.at[ATM_INDEX - 3, '기준가']
        item = QTableWidgetItem("{0:.2f}\n({1})".format(val, atm_minus_3))
        item.setTextAlignment(Qt.AlignCenter)
        item.setBackground(QBrush(라임))
        item.setForeground(QBrush(검정색))
        self.tableWidget_put.setItem(ATM_INDEX - 3, Option_column.기준가.value, item)

        val = df_put.at[ATM_INDEX - 2, '기준가']
        item = QTableWidgetItem("{0:.2f}\n({1})".format(val, atm_minus_2))
        item.setTextAlignment(Qt.AlignCenter)
        item.setBackground(QBrush(라임))
        item.setForeground(QBrush(검정색))
        self.tableWidget_put.setItem(ATM_INDEX - 2, Option_column.기준가.value, item)    

        val = df_put.at[ATM_INDEX - 1, '기준가']
        item = QTableWidgetItem("{0:.2f}\n({1})".format(val, atm_minus_1))
        item.setTextAlignment(Qt.AlignCenter)
        item.setBackground(QBrush(라임))
        item.setForeground(QBrush(검정색))
        self.tableWidget_put.setItem(ATM_INDEX - 1, Option_column.기준가.value, item)            

        val = df_put.at[ATM_INDEX, '기준가']
        item = QTableWidgetItem("{0:.2f}\n({1})".format(val, atm_zero_sum))
        item.setTextAlignment(Qt.AlignCenter)
        item.setBackground(QBrush(노란색))
        item.setForeground(QBrush(검정색))
        self.tableWidget_put.setItem(ATM_INDEX, Option_column.기준가.value, item)            

        val = df_put.at[ATM_INDEX + 1, '기준가']
        item = QTableWidgetItem("{0:.2f}\n({1})".format(val, atm_plus_1))
        item.setTextAlignment(Qt.AlignCenter)
        item.setBackground(QBrush(라임))
        item.setForeground(QBrush(검정색))
        self.tableWidget_put.setItem(ATM_INDEX + 1, Option_column.기준가.value, item)

        val = df_put.at[ATM_INDEX + 2, '기준가']
        item = QTableWidgetItem("{0:.2f}\n({1})".format(val, atm_plus_2))
        item.setTextAlignment(Qt.AlignCenter)
        item.setBackground(QBrush(라임))
        item.setForeground(QBrush(검정색))
        self.tableWidget_put.setItem(ATM_INDEX + 2, Option_column.기준가.value, item)

        val = df_put.at[ATM_INDEX + 3, '기준가']
        item = QTableWidgetItem("{0:.2f}\n({1})".format(val, atm_plus_3))
        item.setTextAlignment(Qt.AlignCenter)
        item.setBackground(QBrush(라임))
        item.setForeground(QBrush(검정색))
        self.tableWidget_put.setItem(ATM_INDEX + 3, Option_column.기준가.value, item)

        val = df_put.at[ATM_INDEX + 4, '기준가']
        item = QTableWidgetItem("{0:.2f}\n({1})".format(val, atm_plus_4))
        item.setTextAlignment(Qt.AlignCenter)
        item.setBackground(QBrush(라임))
        item.setForeground(QBrush(검정색))
        self.tableWidget_put.setItem(ATM_INDEX + 4, Option_column.기준가.value, item)

        val = df_put.at[ATM_INDEX + 5, '기준가']
        item = QTableWidgetItem("{0:.2f}\n({1})".format(val, atm_plus_5))
        item.setTextAlignment(Qt.AlignCenter)
        item.setBackground(QBrush(라임))
        item.setForeground(QBrush(검정색))
        self.tableWidget_put.setItem(ATM_INDEX + 5, Option_column.기준가.value, item)

        if min_index != ATM_INDEX:

            # 풋에만 컬러링
            #self.tableWidget_call.item(min_index, Option_column.기준가.value).setBackground(QBrush(검정색))
            #self.tableWidget_call.item(min_index, Option_column.기준가.value).setForeground(QBrush(노란색))
            self.tableWidget_put.item(min_index, Option_column.기준가.value).setBackground(QBrush(검정색))
            self.tableWidget_put.item(min_index, Option_column.기준가.value).setForeground(QBrush(노란색))
        else:
            pass

    def is_within_n_tick(self, source, target, n):

        if round((target - 0.01*n), 2) <= source <= round((target + 0.01*n), 2):
            return True
        else:
            return False

    def make_node_list(self, input_list):

        list_low = []
        list_zero = []
        list_high = []

        # 리스트에서 특정요소를 제거
        remove_set = {0, 0.01, nan, NaN}

        temp_lst = [i for i in input_list if i not in remove_set]

        # 리스트의 중복요소 제거
        result_lst = list(set(temp_lst))
        result_lst.sort()

        # 컬러링 탐색구간 설정(0.1 ~ 20)
        index1 = bisect(result_lst, nodelist_low_cutoff)
        index2 = bisect(result_lst, nodelist_high_cutoff)

        list_singleval = result_lst[index1:index2]

        for i in range(len(list_singleval)):
            list_low.append(round(list_singleval[i] - 0.01, 2))
            list_zero.append(round(list_singleval[i] + 0.0, 2))
            list_high.append(round(list_singleval[i] + 0.01, 2))

        output_list = list_low + list_zero + list_high
        output_list.sort()

        return output_list

    def get_atm_txt(self, kp200):

        temp = math.floor(round(kp200 / 2.5, 0) * 2.5)
        str_atm = '{0:.0f}'.format(temp)

        return str_atm

    # 현재가 클리어
    def cv_color_clear(self):

        if NightTime:
            self.tableWidget_fut.item(0, Futures_column.현재가.value).setBackground(QBrush(옅은회색))
        else:
            self.tableWidget_fut.item(1, Futures_column.현재가.value).setBackground(QBrush(옅은회색))
            self.tableWidget_fut.item(2, Futures_column.현재가.value).setBackground(QBrush(옅은회색))

        global call_scroll_end_position

        if call_scroll_end_position > option_pairs_count:

            call_scroll_end_position = option_pairs_count
        else:
            pass

        for i in range(call_scroll_begin_position, call_scroll_end_position):

            self.tableWidget_call.item(i, Option_column.현재가.value).setBackground(QBrush(옅은회색))

        global put_scroll_end_position

        if put_scroll_end_position > option_pairs_count:

            put_scroll_end_position = option_pairs_count
        else:
            pass

        for i in range(put_scroll_begin_position, put_scroll_end_position):

            self.tableWidget_put.item(i, Option_column.현재가.value).setBackground(QBrush(옅은회색))

    # 저가, 현재가, 고가 클리어
    def price_color_clear(self):

        # 선물
        if NightTime:
            self.tableWidget_fut.item(0, Futures_column.현재가.value).setBackground(QBrush(흰색))
        else:
            self.tableWidget_fut.item(1, Futures_column.현재가.value).setBackground(QBrush(흰색))
            self.tableWidget_fut.item(2, Futures_column.현재가.value).setBackground(QBrush(흰색))
        
        global call_scroll_end_position

        if call_scroll_end_position > option_pairs_count:

            call_scroll_end_position = option_pairs_count
        else:
            pass

        # 콜
        for i in range(call_scroll_begin_position, call_scroll_end_position):

            self.tableWidget_call.item(i, Option_column.현재가.value).setBackground(QBrush(흰색))

        global put_scroll_end_position

        if put_scroll_end_position > option_pairs_count:

            put_scroll_end_position = option_pairs_count
        else:
            pass

        # 풋
        for i in range(put_scroll_begin_position, put_scroll_end_position):

            self.tableWidget_put.item(i, Option_column.현재가.value).setBackground(QBrush(흰색))
    
    def asym_detect(self, blink):
        
        global 비대칭장
        global call_ms_oneway, put_ms_oneway, call_md_all_down, put_md_all_down 
        global call_ms_asymmetric, put_ms_asymmetric, call_md_asymmetric, put_md_asymmetric
        global call_ms_all_up, put_ms_all_up

        dt = datetime.now()

        if call_otm_cdb_percent_mean > 0 and put_otm_cdb_percent_mean < 0:

            if abs(call_otm_cdb_percent_mean/put_otm_cdb_percent_mean) >= ASYM_RATIO:
                
                if abs(call_otm_cdb_percent_mean/put_otm_cdb_percent_mean) >= ONEWAY_RATIO and flag_fut_vs_sp500_drate_direction:

                    # 콜 원웨이(원웨이장은 플래그 세팅을 나중에 해줌 --> 발생시각 표시를 위해)
                    call_ms_oneway = True
                    call_ms_asymmetric = False
                    call_md_asymmetric = False
                    call_md_all_down = False
                    call_ms_all_up = False
                    put_ms_oneway = False 
                    put_ms_asymmetric = False
                    put_md_asymmetric = False
                    put_md_all_down = False
                    put_ms_all_up = False

                else:
                    # 콜매수 비대칭
                    call_ms_oneway = False
                    call_ms_asymmetric = True
                    call_md_asymmetric = False
                    call_md_all_down = False
                    call_ms_all_up = False
                    put_ms_oneway = False 
                    put_ms_asymmetric = False
                    put_md_asymmetric = False
                    put_md_all_down = False
                    put_ms_all_up = False
                    
            elif abs(put_otm_cdb_percent_mean/call_otm_cdb_percent_mean) >= ASYM_RATIO:

                # 풋매도 비대칭
                call_ms_oneway = False
                call_ms_asymmetric = False
                call_md_asymmetric = False
                call_md_all_down = False
                call_ms_all_up = False
                put_ms_oneway = False 
                put_ms_asymmetric = False
                put_md_asymmetric = True
                put_md_all_down = False
                put_ms_all_up = False
                
            else:
                # 대칭장
                비대칭장 = ''

                call_ms_oneway = False
                call_ms_asymmetric = False
                call_md_asymmetric = False
                call_md_all_down = False
                call_ms_all_up = False
                put_ms_oneway = False 
                put_ms_asymmetric = False
                put_md_asymmetric = False
                put_md_all_down = False
                put_ms_all_up = False

        elif call_otm_cdb_percent_mean < 0 and put_otm_cdb_percent_mean > 0:

            if abs(call_otm_cdb_percent_mean/put_otm_cdb_percent_mean) >= ASYM_RATIO:

                # 콜매도 비대칭
                call_ms_oneway = False
                call_ms_asymmetric = False
                call_md_asymmetric = True
                call_md_all_down = False
                call_ms_all_up = False
                put_ms_oneway = False 
                put_ms_asymmetric = False
                put_md_asymmetric = False
                put_md_all_down = False
                put_ms_all_up = False
                
            elif abs(put_otm_cdb_percent_mean/call_otm_cdb_percent_mean) >= ASYM_RATIO:

                if abs(put_otm_cdb_percent_mean/call_otm_cdb_percent_mean) >= ONEWAY_RATIO and flag_fut_vs_sp500_drate_direction:

                    # 풋 원웨이(원웨이장은 플래그 세팅을 나중에 해줌 --> 발생시각 표시를 위해)
                    call_ms_oneway = False
                    call_ms_asymmetric = False
                    call_md_asymmetric = False
                    call_md_all_down = False
                    call_ms_all_up = False
                    put_ms_oneway = True 
                    put_ms_asymmetric = False
                    put_md_asymmetric = False
                    put_md_all_down = False
                    put_ms_all_up = False
                    
                else:
                    # 풋매수
                    call_ms_oneway = False
                    call_ms_asymmetric = False
                    call_md_asymmetric = False
                    call_md_all_down = False
                    call_ms_all_up = False
                    put_ms_oneway = False 
                    put_ms_asymmetric = True
                    put_md_asymmetric = False
                    put_md_all_down = False
                    put_ms_all_up = False                    
            else:
                # 대칭장
                비대칭장 = ''

                call_ms_oneway = False
                call_ms_asymmetric = False
                call_md_asymmetric = False
                call_md_all_down = False
                call_ms_all_up = False
                put_ms_oneway = False 
                put_ms_asymmetric = False
                put_md_asymmetric = False
                put_md_all_down = False
                put_ms_all_up = False

        elif call_otm_cdb_percent_mean < 0 and put_otm_cdb_percent_mean < 0:

            if call_otm_cdb_percent_mean < put_otm_cdb_percent_mean:

                # 콜매도 양꽝장
                call_ms_oneway = False
                call_ms_asymmetric = False
                call_md_asymmetric = False
                call_md_all_down = True
                call_ms_all_up = False
                put_ms_oneway = False 
                put_ms_asymmetric = False
                put_md_asymmetric = False
                put_md_all_down = False
                put_ms_all_up = False
                
            elif call_otm_cdb_percent_mean > put_otm_cdb_percent_mean:

                # 풋매도 양꽝장
                call_ms_oneway = False
                call_ms_asymmetric = False
                call_md_asymmetric = False
                call_md_all_down = False
                call_ms_all_up = False
                put_ms_oneway = False 
                put_ms_asymmetric = False
                put_md_asymmetric = False
                put_md_all_down = True
                put_ms_all_up = False                
            else:
                # 대칭장
                비대칭장 = ''

                call_ms_oneway = False
                call_ms_asymmetric = False
                call_md_asymmetric = False
                call_md_all_down = False
                call_ms_all_up = False
                put_ms_oneway = False 
                put_ms_asymmetric = False
                put_md_asymmetric = False
                put_md_all_down = False
                put_ms_all_up = False

        elif call_otm_cdb_percent_mean > 0 and put_otm_cdb_percent_mean > 0:

            if call_otm_cdb_percent_mean > put_otm_cdb_percent_mean:

                # 콜매수 양빵장
                call_ms_oneway = False
                call_ms_asymmetric = False
                call_md_asymmetric = False
                call_md_all_down = False
                call_ms_all_up = True
                put_ms_oneway = False 
                put_ms_asymmetric = False
                put_md_asymmetric = False
                put_md_all_down = False
                put_ms_all_up = False
                
            elif call_otm_cdb_percent_mean < put_otm_cdb_percent_mean:

                # 풋매수 양빵장
                call_ms_oneway = False
                call_ms_asymmetric = False
                call_md_asymmetric = False
                call_md_all_down = False
                call_ms_all_up = False
                put_ms_oneway = False 
                put_ms_asymmetric = False
                put_md_asymmetric = False
                put_md_all_down = False
                put_ms_all_up = True
                
            else:
                # 대칭장
                비대칭장 = ''

                call_ms_oneway = False
                call_ms_asymmetric = False
                call_md_asymmetric = False
                call_md_all_down = False
                call_ms_all_up = False
                put_ms_oneway = False 
                put_ms_asymmetric = False
                put_md_asymmetric = False
                put_md_all_down = False
                put_ms_all_up = False
        else:
            pass

    def call_node_color_clear(self):

        global call_scroll_end_position

        if call_scroll_end_position > option_pairs_count:

            call_scroll_end_position = option_pairs_count
        else:
            pass

        for i in range(call_scroll_begin_position, call_scroll_end_position):
            
            if call_node_state['기준가']:
                self.tableWidget_call.item(i, Option_column.기준가.value).setBackground(QBrush(흰색))
                self.tableWidget_call.item(i, Option_column.기준가.value).setForeground(QBrush(검정색))
            else:
                pass

            if call_node_state['월저']:
                self.tableWidget_call.item(i, Option_column.월저.value).setBackground(QBrush(흰색))
                self.tableWidget_call.item(i, Option_column.월저.value).setForeground(QBrush(검정색))
            else:
                pass

            if call_node_state['월고']:
                self.tableWidget_call.item(i, Option_column.월고.value).setBackground(QBrush(흰색))
                self.tableWidget_call.item(i, Option_column.월고.value).setForeground(QBrush(검정색))
            else:
                pass

            if call_node_state['전저']:
                self.tableWidget_call.item(i, Option_column.전저.value).setBackground(QBrush(흰색))
                self.tableWidget_call.item(i, Option_column.전저.value).setForeground(QBrush(검정색))
            else:
                pass

            if call_node_state['전고']:
                self.tableWidget_call.item(i, Option_column.전고.value).setBackground(QBrush(흰색))
                self.tableWidget_call.item(i, Option_column.전고.value).setForeground(QBrush(검정색))
            else:
                pass

            if call_node_state['종가']:
                self.tableWidget_call.item(i, Option_column.종가.value).setBackground(QBrush(흰색))
                self.tableWidget_call.item(i, Option_column.종가.value).setForeground(QBrush(검정색))
            else:
                pass

            if call_node_state['피봇']:
                self.tableWidget_call.item(i, Option_column.피봇.value).setBackground(QBrush(흰색))
                self.tableWidget_call.item(i, Option_column.피봇.value).setForeground(QBrush(검정색))
            else:
                pass

            if call_node_state['시가']:

                시가 = df_call.at[i, '시가']
                종가 = df_call.at[i, '종가']

                if 시가 > 0:

                    self.tableWidget_call.item(i, Option_column.시가.value).setBackground(QBrush(흰색))

                    if 시가 > 종가:
                        self.tableWidget_call.item(i, Option_column.시가.value).setForeground(QBrush(적색))
                    elif 시가 < 종가:
                        self.tableWidget_call.item(i, Option_column.시가.value).setForeground(QBrush(청색))
                    else:
                        self.tableWidget_call.item(i, Option_column.시가.value).setForeground(QBrush(검정색))
                else:
                    self.tableWidget_call.item(i, Option_column.시가.value).setBackground(QBrush(검정색))
                    self.tableWidget_call.item(i, Option_column.시가.value).setForeground(QBrush(흰색))
            else:
                pass

            if i == ATM_INDEX - 1 or i == ATM_INDEX or i == ATM_INDEX + 1:
                self.tableWidget_call.item(i, Option_column.저가.value).setBackground(QBrush(옅은회색))
                self.tableWidget_call.item(i, Option_column.저가.value).setForeground(QBrush(검정색))

                self.tableWidget_call.item(i, Option_column.고가.value).setBackground(QBrush(옅은회색))
                self.tableWidget_call.item(i, Option_column.고가.value).setForeground(QBrush(검정색))
            else:
                self.tableWidget_call.item(i, Option_column.저가.value).setBackground(QBrush(흰색))
                self.tableWidget_call.item(i, Option_column.저가.value).setForeground(QBrush(검정색))

                self.tableWidget_call.item(i, Option_column.고가.value).setBackground(QBrush(흰색))
                self.tableWidget_call.item(i, Option_column.고가.value).setForeground(QBrush(검정색))
   
    def call_cross_color_update(self):

        global call_scroll_end_position

        if call_scroll_end_position > option_pairs_count:

            call_scroll_end_position = option_pairs_count
        else:
            pass

        for i in range(call_scroll_begin_position, call_scroll_end_position):

            저가 = df_call.at[i, '저가']
            고가 = df_call.at[i, '고가']

            if 저가 < 고가:

                if 저가 > 1.0 and 저가 in put_저가_node_list:

                    self.tableWidget_call.item(i, Option_column.저가.value).setBackground(QBrush(gray))
                    self.tableWidget_call.item(i, Option_column.저가.value).setForeground(QBrush(검정색))
                else:
                    pass

                if 저가 > 1.0 and 저가 in put_고가_node_list:

                    self.tableWidget_call.item(i, Option_column.저가.value).setBackground(QBrush(gray))
                    self.tableWidget_call.item(i, Option_column.저가.value).setForeground(QBrush(검정색))
                else:
                    pass

                if 저가 > 1.0 and 저가 in call_고가_node_list:

                    self.tableWidget_call.item(i, Option_column.저가.value).setBackground(QBrush(gray))
                    self.tableWidget_call.item(i, Option_column.저가.value).setForeground(QBrush(검정색))                  
                else:
                    pass

                if 고가 > 1.0 and 고가 in put_저가_node_list:

                    self.tableWidget_call.item(i, Option_column.고가.value).setBackground(QBrush(gray))
                    self.tableWidget_call.item(i, Option_column.고가.value).setForeground(QBrush(검정색))
                else:
                    pass

                if 고가 > 1.0 and 고가 in put_고가_node_list:

                    self.tableWidget_call.item(i, Option_column.고가.value).setBackground(QBrush(gray))
                    self.tableWidget_call.item(i, Option_column.고가.value).setForeground(QBrush(검정색))
                else:
                    pass

                if 고가 > 1.0 and 고가 in call_저가_node_list:

                    self.tableWidget_call.item(i, Option_column.고가.value).setBackground(QBrush(gray))
                    self.tableWidget_call.item(i, Option_column.고가.value).setForeground(QBrush(검정색))   
                else:
                    pass
            else:
                pass            
    
    def put_cross_color_update(self):

        global put_scroll_end_position        

        if put_scroll_end_position > option_pairs_count:

            put_scroll_end_position = option_pairs_count
        else:
            pass

        for i in range(put_scroll_begin_position, put_scroll_end_position):

            저가 = df_put.at[i, '저가']
            고가 = df_put.at[i, '고가']

            if 저가 < 고가:

                if 저가 > 1.0 and 저가 in call_저가_node_list:

                    self.tableWidget_put.item(i, Option_column.저가.value).setBackground(QBrush(gray))
                    self.tableWidget_put.item(i, Option_column.저가.value).setForeground(QBrush(검정색))
                else:
                    pass

                if 저가 > 1.0 and 저가 in call_고가_node_list:

                    self.tableWidget_put.item(i, Option_column.저가.value).setBackground(QBrush(gray))
                    self.tableWidget_put.item(i, Option_column.저가.value).setForeground(QBrush(검정색))
                else:
                    pass

                if 저가 > 1.0 and 저가 in put_고가_node_list:

                    self.tableWidget_put.item(i, Option_column.저가.value).setBackground(QBrush(gray))
                    self.tableWidget_put.item(i, Option_column.저가.value).setForeground(QBrush(검정색))                 
                else:
                    pass

                if 고가 > 1.0 and 고가 in call_저가_node_list:

                    self.tableWidget_put.item(i, Option_column.고가.value).setBackground(QBrush(gray))
                    self.tableWidget_put.item(i, Option_column.고가.value).setForeground(QBrush(검정색))
                else:
                    pass

                if 고가 > 1.0 and 고가 in call_고가_node_list:

                    self.tableWidget_put.item(i, Option_column.고가.value).setBackground(QBrush(gray))
                    self.tableWidget_put.item(i, Option_column.고가.value).setForeground(QBrush(검정색))
                else:
                    pass

                if 고가 > 1.0 and 고가 in put_저가_node_list:

                    self.tableWidget_put.item(i, Option_column.고가.value).setBackground(QBrush(gray))
                    self.tableWidget_put.item(i, Option_column.고가.value).setForeground(QBrush(검정색))                  
                else:
                    pass
            else:
                pass            

    def call_only_cross_color_update(self):

        global call_scroll_end_position

        if call_scroll_end_position > option_pairs_count:
            call_scroll_end_position = option_pairs_count
        else:
            pass

        for i in range(call_scroll_begin_position, call_scroll_end_position):

            저가 = df_call.at[i, '저가']
            고가 = df_call.at[i, '고가']

            if 저가 < 고가:

                if 저가 > 1.0 and 저가 in call_고가_node_list:

                    self.tableWidget_call.item(i, Option_column.저가.value).setBackground(QBrush(검정색))
                    self.tableWidget_call.item(i, Option_column.저가.value).setForeground(QBrush(흰색))                  
                else:
                    pass
                
                if 고가 > 1.0 and 고가 in call_저가_node_list:

                    self.tableWidget_call.item(i, Option_column.고가.value).setBackground(QBrush(검정색))
                    self.tableWidget_call.item(i, Option_column.고가.value).setForeground(QBrush(흰색))   
                else:
                    pass
            else:
                pass
    
    def put_only_cross_color_update(self):

        global put_scroll_end_position

        if put_scroll_end_position > option_pairs_count:
            put_scroll_end_position = option_pairs_count
        else:
            pass

        for i in range(put_scroll_begin_position, put_scroll_end_position):

            저가 = df_put.at[i, '저가']
            고가 = df_put.at[i, '고가']

            if 저가 < 고가:

                if 저가 > 1.0 and 저가 in put_고가_node_list:

                    self.tableWidget_put.item(i, Option_column.저가.value).setBackground(QBrush(검정색))
                    self.tableWidget_put.item(i, Option_column.저가.value).setForeground(QBrush(흰색))                 
                else:
                    pass
                
                if 고가 > 1.0 and 고가 in put_저가_node_list:

                    self.tableWidget_put.item(i, Option_column.고가.value).setBackground(QBrush(검정색))
                    self.tableWidget_put.item(i, Option_column.고가.value).setForeground(QBrush(흰색))                  
                else:
                    pass
            else:
                pass           

    def kp200_low_color_blink(self, blink):

        if blink:
            self.tableWidget_fut.item(2, Futures_column.저가.value).setBackground(QBrush(대맥점색))
            self.tableWidget_fut.item(2, Futures_column.저가.value).setForeground(QBrush(검정색))
        else:
            self.tableWidget_fut.item(2, Futures_column.저가.value).setBackground(QBrush(검정색))
            self.tableWidget_fut.item(2, Futures_column.저가.value).setForeground(QBrush(대맥점색))

    def kp200_high_color_blink(self, blink):

        if blink:
            self.tableWidget_fut.item(2, Futures_column.고가.value).setBackground(QBrush(대맥점색))
            self.tableWidget_fut.item(2, Futures_column.고가.value).setForeground(QBrush(검정색))
        else:
            self.tableWidget_fut.item(2, Futures_column.고가.value).setBackground(QBrush(검정색))
            self.tableWidget_fut.item(2, Futures_column.고가.value).setForeground(QBrush(대맥점색))

    def call_open_coreval_color_blink(self, blink):

        if self.call_open_list:
            loop_list = self.call_open_list
        else:
            loop_list = self.opt_total_actval_list

        for i in loop_list:

            if i % 10 == 0:
                QApplication.processEvents()
            else:
                pass

            시가 = df_call.at[i, '시가']

            if 시가 in FIXED_COREVAL:

                if blink:
                    self.tableWidget_call.item(i, Option_column.시가.value).setBackground(QBrush(노란색))
                    self.tableWidget_call.item(i, Option_column.시가.value).setForeground(QBrush(적색))                    
                else:
                    self.tableWidget_call.item(i, Option_column.시가.value).setBackground(QBrush(검정색))
                    self.tableWidget_call.item(i, Option_column.시가.value).setForeground(QBrush(노란색))
            else:
                pass

    def call_low_coreval_color_blink(self, blink):

        global call_low_node_count, call_low_node_list, call_low_node_txt
        global telegram_send_txt_call_low
        global flag_call_low_in_fixed_coreval, call_low_val_in_fixed_coreval

        dt = datetime.now()

        flag_call_low_in_fixed_coreval = False
        call_low_val_in_fixed_coreval.clear()
        
        if self.call_open_list:
            loop_list = self.call_open_list
        else:
            loop_list = self.opt_total_actval_list

        count = 0
        call_low_node_list = [] 

        call_low_node_old_count = call_low_node_count

        for i in loop_list:

            if i % 10 == 0:
                QApplication.processEvents()
            else:
                pass

            저가 = df_call.at[i, '저가']

            if 저가 in 진성맥점:

                count += 1
                call_low_node_list.append(저가)

                if blink:
                    self.tableWidget_call.item(i, Option_column.저가.value).setBackground(QBrush(대맥점색))
                    self.tableWidget_call.item(i, Option_column.저가.value).setForeground(QBrush(검정색))                    
                else:
                    self.tableWidget_call.item(i, Option_column.저가.value).setBackground(QBrush(검정색))
                    self.tableWidget_call.item(i, Option_column.저가.value).setForeground(QBrush(대맥점색))
            else:
                pass

            if 저가 in FIXED_COREVAL:

                flag_call_low_in_fixed_coreval = True
                call_low_val_in_fixed_coreval.append(저가)

                if blink:
                    self.tableWidget_call.item(i, Option_column.저가.value).setBackground(QBrush(노란색))
                    self.tableWidget_call.item(i, Option_column.저가.value).setForeground(QBrush(적색))                    
                else:
                    self.tableWidget_call.item(i, Option_column.저가.value).setBackground(QBrush(검정색))
                    self.tableWidget_call.item(i, Option_column.저가.value).setForeground(QBrush(노란색))
            else:
                pass

        if call_low_node_list and call_low_node_txt == '':

            if TARGET_MONTH == 'CM':

                call_low_node_txt = "[{0:02d}:{1:02d}:{2:02d}] CM 콜저가 맥점 {3} 발생 C ▲".format(dt.hour, dt.minute, dt.second, call_low_node_list)

            elif TARGET_MONTH == 'NM':

                call_low_node_txt = "[{0:02d}:{1:02d}:{2:02d}] NM 콜저가 맥점 {3} 발생 C ▲".format(dt.hour, dt.minute, dt.second, call_low_node_list)
            else:
                pass                        
        else:
            call_low_node_txt == ''

        call_low_node_count = count

        if count == 0:

            telegram_send_txt_call_low = ''

        elif count == 1:
            
            if self.tableWidget_call.horizontalHeaderItem(Option_column.저가.value).text() != '★':
            
                item = QTableWidgetItem('★')
                self.tableWidget_call.setHorizontalHeaderItem(Option_column.저가.value, item)

                self.tableWidget_call.resizeColumnToContents(Option_column.저가.value)
                telegram_send_txt_call_low = ''
            else:
                pass

        elif count == 2:

            if self.tableWidget_call.horizontalHeaderItem(Option_column.저가.value).text() != '★ 2':
            
                item = QTableWidgetItem('★ 2')
                self.tableWidget_call.setHorizontalHeaderItem(Option_column.저가.value, item)

                self.tableWidget_call.resizeColumnToContents(Option_column.저가.value)

                if TARGET_MONTH == 'CM' and call_low_node_count != call_low_node_old_count:

                    telegram_send_txt_call_low = "[{0:02d}:{1:02d}:{2:02d}] CM 콜저가 맥점 ★ 2 발생".format(dt.hour, dt.minute, dt.second)

                elif TARGET_MONTH == 'NM' and call_low_node_count != call_low_node_old_count:

                    telegram_send_txt_call_low = "[{0:02d}:{1:02d}:{2:02d}] NM 콜저가 맥점 ★ 2 발생".format(dt.hour, dt.minute, dt.second)
                else:
                    pass  
            else:
                pass

        elif count == 3: 

            if self.tableWidget_call.horizontalHeaderItem(Option_column.저가.value).text() != '★ 3':
            
                item = QTableWidgetItem('★ 3')
                self.tableWidget_call.setHorizontalHeaderItem(Option_column.저가.value, item)

                self.tableWidget_call.resizeColumnToContents(Option_column.저가.value)

                if TARGET_MONTH == 'CM' and call_low_node_count != call_low_node_old_count:

                    telegram_send_txt_call_low = "[{0:02d}:{1:02d}:{2:02d}] CM 콜저가 맥점 ★ 3 발생".format(dt.hour, dt.minute, dt.second)

                elif TARGET_MONTH == 'NM' and call_low_node_count != call_low_node_old_count:

                    telegram_send_txt_call_low = "[{0:02d}:{1:02d}:{2:02d}] NM 콜저가 맥점 ★ 3 발생".format(dt.hour, dt.minute, dt.second)
                else:
                    pass  
            else:
                pass

        else:

            if self.tableWidget_call.horizontalHeaderItem(Option_column.저가.value).text() != '★ +':
            
                item = QTableWidgetItem('★ +')
                self.tableWidget_call.setHorizontalHeaderItem(Option_column.저가.value, item)

                self.tableWidget_call.resizeColumnToContents(Option_column.저가.value)

                if TARGET_MONTH == 'CM' and call_low_node_count != call_low_node_old_count:

                    telegram_send_txt_call_low = "[{0:02d}:{1:02d}:{2:02d}] CM 콜저가 맥점 ★ + 발생".format(dt.hour, dt.minute, dt.second)

                elif TARGET_MONTH == 'NM' and call_low_node_count != call_low_node_old_count:

                    telegram_send_txt_call_low = "[{0:02d}:{1:02d}:{2:02d}] NM 콜저가 맥점 ★ + 발생".format(dt.hour, dt.minute, dt.second)
                else:
                    pass  
            else:
                pass

    def call_high_coreval_color_blink(self, blink):

        global call_high_node_count, call_high_node_list, call_high_node_txt
        global telegram_send_txt_call_high
        global flag_call_high_in_fixed_coreval, call_high_val_in_fixed_coreval

        dt = datetime.now()

        flag_call_high_in_fixed_coreval = False
        call_high_val_in_fixed_coreval.clear()
        
        if self.call_open_list:
            loop_list = self.call_open_list
        else:
            loop_list = self.opt_total_actval_list 

        count = 0
        call_high_node_list = [] 

        call_high_node_old_count = call_high_node_count

        for i in loop_list:

            if i % 10 == 0:
                QApplication.processEvents()
            else:
                pass

            고가 = df_call.at[i, '고가']

            if 고가 in 진성맥점:

                count += 1
                call_high_node_list.append(고가)
                    
                if blink:
                    self.tableWidget_call.item(i, Option_column.고가.value).setBackground(QBrush(대맥점색))
                    self.tableWidget_call.item(i, Option_column.고가.value).setForeground(QBrush(검정색))                    
                else:
                    self.tableWidget_call.item(i, Option_column.고가.value).setBackground(QBrush(검정색))
                    self.tableWidget_call.item(i, Option_column.고가.value).setForeground(QBrush(대맥점색))
            else:
                pass

            if 고가 in FIXED_COREVAL:

                flag_call_high_in_fixed_coreval = True
                call_high_val_in_fixed_coreval.append(고가)
                    
                if blink:
                    self.tableWidget_call.item(i, Option_column.고가.value).setBackground(QBrush(노란색))
                    self.tableWidget_call.item(i, Option_column.고가.value).setForeground(QBrush(적색))                    
                else:
                    self.tableWidget_call.item(i, Option_column.고가.value).setBackground(QBrush(검정색))
                    self.tableWidget_call.item(i, Option_column.고가.value).setForeground(QBrush(노란색))
            else:
                pass

        if call_high_node_list and call_high_node_txt == '':

            if TARGET_MONTH == 'CM':

                call_high_node_txt = "[{0:02d}:{1:02d}:{2:02d}] CM 콜고가 맥점 {3} 발생 C ▼".format(dt.hour, dt.minute, dt.second, call_high_node_list)

            elif TARGET_MONTH == 'NM':

                call_high_node_txt = "[{0:02d}:{1:02d}:{2:02d}] NM 콜고가 맥점 {3} 발생 C ▼".format(dt.hour, dt.minute, dt.second, call_high_node_list)
            else:
                pass
        else:
            call_high_node_txt == ''

        call_high_node_count = count 

        if count == 0:

            telegram_send_txt_call_high = ''   

        elif count == 1:
            
            if self.tableWidget_call.horizontalHeaderItem(Option_column.고가.value).text() != '★':
            
                item = QTableWidgetItem('★')
                self.tableWidget_call.setHorizontalHeaderItem(Option_column.고가.value, item)

                self.tableWidget_call.resizeColumnToContents(Option_column.고가.value)
                telegram_send_txt_call_high = '' 
            else:
                pass

        elif count == 2:

            if self.tableWidget_call.horizontalHeaderItem(Option_column.고가.value).text() != '★ 2':
            
                item = QTableWidgetItem('★ 2')
                self.tableWidget_call.setHorizontalHeaderItem(Option_column.고가.value, item)

                self.tableWidget_call.resizeColumnToContents(Option_column.고가.value)

                if TARGET_MONTH == 'CM' and call_high_node_count != call_high_node_old_count:

                    telegram_send_txt_call_high = "[{0:02d}:{1:02d}:{2:02d}] CM 콜고가 맥점 ★ 2 발생".format(dt.hour, dt.minute, dt.second)

                elif TARGET_MONTH == 'NM' and call_high_node_count != call_high_node_old_count:

                    telegram_send_txt_call_high = "[{0:02d}:{1:02d}:{2:02d}] NM 콜고가 맥점 ★ 2 발생".format(dt.hour, dt.minute, dt.second)
                else:
                    pass  
            else:
                pass

        elif count == 3: 

            if self.tableWidget_call.horizontalHeaderItem(Option_column.고가.value).text() != '★ 3':
            
                item = QTableWidgetItem('★ 3')
                self.tableWidget_call.setHorizontalHeaderItem(Option_column.고가.value, item)

                self.tableWidget_call.resizeColumnToContents(Option_column.고가.value)

                if TARGET_MONTH == 'CM' and call_high_node_count != call_high_node_old_count:

                    telegram_send_txt_call_high = "[{0:02d}:{1:02d}:{2:02d}] CM 콜고가 맥점 ★ 3 발생".format(dt.hour, dt.minute, dt.second)

                elif TARGET_MONTH == 'NM' and call_high_node_count != call_high_node_old_count:

                    telegram_send_txt_call_high = "[{0:02d}:{1:02d}:{2:02d}] NM 콜고가 맥점 ★ 3 발생".format(dt.hour, dt.minute, dt.second)
                else:
                    pass 
            else:
                pass

        else:

            if self.tableWidget_call.horizontalHeaderItem(Option_column.고가.value).text() != '★ +':
            
                item = QTableWidgetItem('★ +')
                self.tableWidget_call.setHorizontalHeaderItem(Option_column.고가.value, item)

                self.tableWidget_call.resizeColumnToContents(Option_column.고가.value)

                if TARGET_MONTH == 'CM' and call_high_node_count != call_high_node_old_count:

                    telegram_send_txt_call_high = "[{0:02d}:{1:02d}:{2:02d}] CM 콜고가 맥점 ★ + 발생".format(dt.hour, dt.minute, dt.second)

                elif TARGET_MONTH == 'NM' and call_high_node_count != call_high_node_old_count:

                    telegram_send_txt_call_high = "[{0:02d}:{1:02d}:{2:02d}] NM 콜고가 맥점 ★ + 발생".format(dt.hour, dt.minute, dt.second)
                else:
                    pass 
            else:
                pass

    def call_coreval_color_update(self):

        global flag_call_low_coreval, flag_call_high_coreval
        global call_low_node_count, call_high_node_count
        global telegram_send_txt_call_low, telegram_send_txt_call_high
        global flag_call_low_in_fixed_coreval, flag_call_high_in_fixed_coreval

        dt = datetime.now()
        
        flag_call_low_coreval = False
        flag_call_high_coreval = False

        flag_call_low_in_fixed_coreval = False
        flag_call_high_in_fixed_coreval = False

        item = QTableWidgetItem('저가')
        self.tableWidget_call.setHorizontalHeaderItem(Option_column.저가.value, item)

        item = QTableWidgetItem('고가')
        self.tableWidget_call.setHorizontalHeaderItem(Option_column.고가.value, item)

        if self.call_open_list:
            loop_list = self.call_open_list
        else:
            loop_list = self.opt_total_actval_list

        count_low = 0
        count_high = 0

        for i in loop_list:

            if i % 10 == 0:
                QApplication.processEvents()
            else:
                pass

            시가 = df_call.at[i, '시가']
            저가 = df_call.at[i, '저가']
            고가 = df_call.at[i, '고가']

            if True:

                if 시가 in COREVAL:
                    self.tableWidget_call.item(i, Option_column.시가.value).setBackground(QBrush(대맥점색))
                    self.tableWidget_call.item(i, Option_column.시가.value).setForeground(QBrush(검정색))
                else:
                    pass

                if 저가 in COREVAL:
                    self.tableWidget_call.item(i, Option_column.저가.value).setBackground(QBrush(대맥점색))
                    self.tableWidget_call.item(i, Option_column.저가.value).setForeground(QBrush(검정색))
                else:
                    pass
                
                if 저가 in 진성맥점:

                    self.tableWidget_call.item(i, Option_column.저가.value).setBackground(QBrush(검정색))
                    self.tableWidget_call.item(i, Option_column.저가.value).setForeground(QBrush(대맥점색))
                    
                    txt = '[{0:02d}:{1:02d}:{2:02d}] call low 진성맥점 = {3}, low = {4}\r'.format(dt.hour, dt.minute, dt.second, 진성맥점, 저가)
                    self.textBrowser.append(txt)

                    flag_call_low_coreval = True

                    count_low += 1

                else:
                    pass

                if 저가 in FIXED_COREVAL:
                    flag_call_low_in_fixed_coreval = True
                else:
                    pass

                if 고가 in COREVAL:
                    self.tableWidget_call.item(i, Option_column.고가.value).setBackground(QBrush(대맥점색))
                    self.tableWidget_call.item(i, Option_column.고가.value).setForeground(QBrush(검정색))
                else:
                    pass
                
                if 고가 in 진성맥점:

                    self.tableWidget_call.item(i, Option_column.고가.value).setBackground(QBrush(검정색))
                    self.tableWidget_call.item(i, Option_column.고가.value).setForeground(QBrush(대맥점색))
                    
                    txt = '[{0:02d}:{1:02d}:{2:02d}] call high 진성맥점 = {3}, high = {4}\r'.format(dt.hour, dt.minute, dt.second, 진성맥점, 고가)
                    self.textBrowser.append(txt)

                    flag_call_high_coreval = True

                    count_high += 1

                else:
                    pass

                if 고가 in FIXED_COREVAL:
                    flag_call_high_in_fixed_coreval = True
                else:
                    pass
            else:
                pass

        call_low_node_count = count_low

        if count_low == 0:

            telegram_send_txt_call_low = ''  

        elif count_low == 1:            

            item = QTableWidgetItem('★')
            self.tableWidget_call.setHorizontalHeaderItem(Option_column.저가.value, item)
            telegram_send_txt_call_low = ''

        elif count_low == 2:

            item = QTableWidgetItem('★ 2')
            self.tableWidget_call.setHorizontalHeaderItem(Option_column.저가.value, item)

        elif count_low == 3:

            item = QTableWidgetItem('★ 3')
            self.tableWidget_call.setHorizontalHeaderItem(Option_column.저가.value, item)
        else:
            item = QTableWidgetItem('★ +')
            self.tableWidget_call.setHorizontalHeaderItem(Option_column.저가.value, item)

        call_high_node_count = count_high

        if count_high == 0:

            telegram_send_txt_call_high = ''    

        elif count_high == 1:            

            item = QTableWidgetItem('★')
            self.tableWidget_call.setHorizontalHeaderItem(Option_column.고가.value, item)
            telegram_send_txt_call_high = ''

        elif count_high == 2:

            item = QTableWidgetItem('★ 2')
            self.tableWidget_call.setHorizontalHeaderItem(Option_column.고가.value, item)

        elif count_high == 3:

            item = QTableWidgetItem('★ 3')
            self.tableWidget_call.setHorizontalHeaderItem(Option_column.고가.value, item)
        else:
            item = QTableWidgetItem('★ +')
            self.tableWidget_call.setHorizontalHeaderItem(Option_column.고가.value, item)        

    def call_low_coreval_color_update(self):

        global flag_call_low_coreval
        global flag_call_low_in_fixed_coreval

        flag_call_low_coreval = False
        flag_call_low_in_fixed_coreval = False

        if self.call_open_list:
            loop_list = self.call_open_list
        else:
            loop_list = self.opt_total_actval_list

        for i in loop_list:

            if i % 10 == 0:
                QApplication.processEvents()
            else:
                pass

            시가 = df_call.at[i, '시가']
            저가 = df_call.at[i, '저가']

            if True:

                if 시가 in COREVAL:
                    self.tableWidget_call.item(i, Option_column.시가.value).setBackground(QBrush(대맥점색))
                    self.tableWidget_call.item(i, Option_column.시가.value).setForeground(QBrush(검정색))
                else:
                    pass

                if 저가 in COREVAL:
                    self.tableWidget_call.item(i, Option_column.저가.value).setBackground(QBrush(대맥점색))
                    self.tableWidget_call.item(i, Option_column.저가.value).setForeground(QBrush(검정색))
                else:
                    pass
                
                if 저가 in 진성맥점:
                    flag_call_low_coreval = True
                else:
                    pass

                if 저가 in FIXED_COREVAL:
                    flag_call_low_in_fixed_coreval = True
                else:
                    pass                
            else:
                pass

    def call_high_coreval_color_update(self):

        global flag_call_high_coreval
        global flag_call_high_in_fixed_coreval

        flag_call_high_coreval = False
        flag_call_high_in_fixed_coreval = False

        if self.call_open_list:
            loop_list = self.call_open_list
        else:
            loop_list = self.opt_total_actval_list

        for i in loop_list:

            if i % 10 == 0:
                QApplication.processEvents()
            else:
                pass

            시가 = df_call.at[i, '시가']
            고가 = df_call.at[i, '고가']

            if True:

                if 시가 in COREVAL:
                    self.tableWidget_call.item(i, Option_column.시가.value).setBackground(QBrush(대맥점색))
                    self.tableWidget_call.item(i, Option_column.시가.value).setForeground(QBrush(검정색))
                else:
                    pass        

                if 고가 in COREVAL:
                    self.tableWidget_call.item(i, Option_column.고가.value).setBackground(QBrush(대맥점색))
                    self.tableWidget_call.item(i, Option_column.고가.value).setForeground(QBrush(검정색))
                else:
                    pass
                
                if 고가 in 진성맥점:
                    flag_call_high_coreval = True
                else:
                    pass

                if 고가 in FIXED_COREVAL:
                    flag_call_high_in_fixed_coreval = True
                else:
                    pass
            else:
                pass

    # 콜 컬러링 Apply 함수
    # 콜 저가, 고가가 풋시가에 있는지 검사
    def check_call_low_isin_put_open_list(self, x):

        if x > OTM_SEARCH_START_VAL and x in put_시가_node_list:

            i = call_저가.index(x) + 1

            self.tableWidget_call.item(i, Option_column.저가.value).setBackground(QBrush(풋시가색))
            self.tableWidget_call.item(i, Option_column.저가.value).setForeground(QBrush(흰색))            
        else:
            pass
    
    def check_call_high_isin_put_open_list(self, x):

        if x > OTM_SEARCH_START_VAL and x in put_시가_node_list:

            i = call_고가.index(x) + 1

            self.tableWidget_call.item(i, Option_column.고가.value).setBackground(QBrush(풋시가색))
            self.tableWidget_call.item(i, Option_column.고가.value).setForeground(QBrush(흰색))            
        else:
            pass

    # 콜 저가, 고가가 풋종가에 있는지 검사
    def check_call_low_isin_put_close_list(self, x):

        if x > OTM_SEARCH_START_VAL and x in put_종가_node_list:

            i = call_저가.index(x) + 1

            self.tableWidget_call.item(i, Option_column.저가.value).setBackground(QBrush(풋종가색))
            self.tableWidget_call.item(i, Option_column.저가.value).setForeground(QBrush(검정색))       
        else:
            pass

    def check_call_high_isin_put_close_list(self, x):

        if x > OTM_SEARCH_START_VAL and x in put_종가_node_list:

            i = call_고가.index(x) + 1

            self.tableWidget_call.item(i, Option_column.고가.value).setBackground(QBrush(풋종가색))
            self.tableWidget_call.item(i, Option_column.고가.value).setForeground(QBrush(검정색))       
        else:
            pass

    # 콜 저가, 고가가 풋피봇에 있는지 검사
    def check_call_low_isin_put_pivot_list(self, x):

        if x > OTM_SEARCH_START_VAL and x in put_피봇_node_list:

            i = call_저가.index(x) + 1

            self.tableWidget_call.item(i, Option_column.저가.value).setBackground(QBrush(풋피봇색))
            self.tableWidget_call.item(i, Option_column.저가.value).setForeground(QBrush(검정색))      
        else:
            pass

    def check_call_high_isin_put_pivot_list(self, x):

        if x > OTM_SEARCH_START_VAL and x in put_피봇_node_list:

            i = call_고가.index(x) + 1

            self.tableWidget_call.item(i, Option_column.고가.value).setBackground(QBrush(풋피봇색))
            self.tableWidget_call.item(i, Option_column.고가.value).setForeground(QBrush(검정색))      
        else:
            pass

    # 콜 저가, 고가가 콜시가에 있는지 검사
    def check_call_low_isin_call_open_list(self, x):

        if x > OTM_SEARCH_START_VAL and x in call_시가_node_list:

            i = call_저가.index(x) + 1

            self.tableWidget_call.item(i, Option_column.저가.value).setBackground(QBrush(콜시가색))
            self.tableWidget_call.item(i, Option_column.저가.value).setForeground(QBrush(검정색))  
        else:
            pass

    def check_call_high_isin_call_open_list(self, x):

        if x > OTM_SEARCH_START_VAL and x in call_시가_node_list:

            i = call_고가.index(x) + 1

            self.tableWidget_call.item(i, Option_column.고가.value).setBackground(QBrush(콜시가색))
            self.tableWidget_call.item(i, Option_column.고가.value).setForeground(QBrush(검정색))  
        else:
            pass

    # 콜 저가, 고가가 콜종가에 있는지 검사
    def check_call_low_isin_call_close_list(self, x):

        if x > OTM_SEARCH_START_VAL and x in call_종가_node_list:

            i = call_저가.index(x) + 1

            self.tableWidget_call.item(i, Option_column.저가.value).setBackground(QBrush(콜종가색))
            self.tableWidget_call.item(i, Option_column.저가.value).setForeground(QBrush(검정색))
        else:
            pass

    def check_call_high_isin_call_close_list(self, x):

        if x > OTM_SEARCH_START_VAL and x in call_종가_node_list:

            i = call_고가.index(x) + 1

            self.tableWidget_call.item(i, Option_column.고가.value).setBackground(QBrush(콜종가색))
            self.tableWidget_call.item(i, Option_column.고가.value).setForeground(QBrush(검정색))
        else:
            pass

    # 콜 저가, 고가가 콜피봇에 있는지 검사
    def check_call_low_isin_call_pivot_list(self, x):

        if x > OTM_SEARCH_START_VAL and x in call_피봇_node_list:

            i = call_저가.index(x) + 1

            self.tableWidget_call.item(i, Option_column.저가.value).setBackground(QBrush(콜피봇색))
            self.tableWidget_call.item(i, Option_column.저가.value).setForeground(QBrush(검정색))
        else:
            pass

    def check_call_high_isin_call_pivot_list(self, x):

        if x > OTM_SEARCH_START_VAL and x in call_피봇_node_list:

            i = call_고가.index(x) + 1

            self.tableWidget_call.item(i, Option_column.고가.value).setBackground(QBrush(콜피봇색))
            self.tableWidget_call.item(i, Option_column.고가.value).setForeground(QBrush(검정색))
        else:
            pass

    # 콜종가가 풋, 콜의 저가, 고가에 있는지 검사
    def check_call_close_isin_put_low_list(self, x):

        if x > OTM_SEARCH_START_VAL and x in put_저가_node_list:

            i = call_종가.index(x) + 1

            self.tableWidget_call.item(i, Option_column.종가.value).setBackground(QBrush(콜종가색))
            self.tableWidget_call.item(i, Option_column.종가.value).setForeground(QBrush(검정색))         
        else:
            pass

    def check_call_close_isin_put_high_list(self, x):

        if x > OTM_SEARCH_START_VAL and x in put_고가_node_list:

            i = call_종가.index(x) + 1

            self.tableWidget_call.item(i, Option_column.종가.value).setBackground(QBrush(콜종가색))
            self.tableWidget_call.item(i, Option_column.종가.value).setForeground(QBrush(검정색))         
        else:
            pass

    def check_call_close_isin_call_low_list(self, x):

        if x > OTM_SEARCH_START_VAL and x in call_저가_node_list:

            i = call_종가.index(x) + 1

            self.tableWidget_call.item(i, Option_column.종가.value).setBackground(QBrush(콜종가색))
            self.tableWidget_call.item(i, Option_column.종가.value).setForeground(QBrush(검정색))         
        else:
            pass

    def check_call_close_isin_call_high_list(self, x):

        if x > OTM_SEARCH_START_VAL and x in call_고가_node_list:

            i = call_종가.index(x) + 1

            self.tableWidget_call.item(i, Option_column.종가.value).setBackground(QBrush(콜종가색))
            self.tableWidget_call.item(i, Option_column.종가.value).setForeground(QBrush(검정색))         
        else:
            pass

    # 콜피봇이 풋, 콜의 저가, 고가에 있는지 검사
    def check_call_pivot_isin_put_low_list(self, x):

        if x > OTM_SEARCH_START_VAL and x in put_저가_node_list:

            i = call_피봇.index(x) + 1

            self.tableWidget_call.item(i, Option_column.피봇.value).setBackground(QBrush(콜피봇색))
            self.tableWidget_call.item(i, Option_column.피봇.value).setForeground(QBrush(검정색))       
        else:
            pass

    def check_call_pivot_isin_put_high_list(self, x):

        if x > OTM_SEARCH_START_VAL and x in put_고가_node_list:

            i = call_피봇.index(x) + 1

            self.tableWidget_call.item(i, Option_column.피봇.value).setBackground(QBrush(콜피봇색))
            self.tableWidget_call.item(i, Option_column.피봇.value).setForeground(QBrush(검정색))       
        else:
            pass

    def check_call_pivot_isin_call_low_list(self, x):

        if x > OTM_SEARCH_START_VAL and x in call_저가_node_list:

            i = call_피봇.index(x) + 1

            self.tableWidget_call.item(i, Option_column.피봇.value).setBackground(QBrush(콜피봇색))
            self.tableWidget_call.item(i, Option_column.피봇.value).setForeground(QBrush(검정색))       
        else:
            pass

    def check_call_pivot_isin_call_high_list(self, x):

        if x > OTM_SEARCH_START_VAL and x in call_고가_node_list:

            i = call_피봇.index(x) + 1

            self.tableWidget_call.item(i, Option_column.피봇.value).setBackground(QBrush(콜피봇색))
            self.tableWidget_call.item(i, Option_column.피봇.value).setForeground(QBrush(검정색))       
        else:
            pass

    # 콜시가가 풋, 콜의 저가, 고가에 있는지 검사
    def check_call_open_isin_put_low_list(self, x):

        if x > OTM_SEARCH_START_VAL and x in put_저가_node_list:

            i = call_시가.index(x) + 1

            self.tableWidget_call.item(i, Option_column.시가.value).setBackground(QBrush(콜시가색))
            self.tableWidget_call.item(i, Option_column.시가.value).setForeground(QBrush(검정색))     
        else:
            pass

    def check_call_open_isin_put_high_list(self, x):

        if x > OTM_SEARCH_START_VAL and x in put_고가_node_list:

            i = call_시가.index(x) + 1

            self.tableWidget_call.item(i, Option_column.시가.value).setBackground(QBrush(콜시가색))
            self.tableWidget_call.item(i, Option_column.시가.value).setForeground(QBrush(검정색))     
        else:
            pass

    def check_call_open_isin_call_low_list(self, x):

        if x > OTM_SEARCH_START_VAL and x in call_저가_node_list:

            i = call_시가.index(x) + 1

            self.tableWidget_call.item(i, Option_column.시가.value).setBackground(QBrush(콜시가색))
            self.tableWidget_call.item(i, Option_column.시가.value).setForeground(QBrush(검정색))     
        else:
            pass

    def check_call_open_isin_call_high_list(self, x):

        if x > OTM_SEARCH_START_VAL and x in call_고가_node_list:

            i = call_시가.index(x) + 1

            self.tableWidget_call.item(i, Option_column.시가.value).setBackground(QBrush(콜시가색))
            self.tableWidget_call.item(i, Option_column.시가.value).setForeground(QBrush(검정색))     
        else:
            pass

    # 콜시가가 맥점에 있는지 검사
    def check_call_open_isin_coreval_list(self, x):

        if x > OTM_SEARCH_START_VAL and x in COREVAL:

            i = call_시가.index(x) + 1

            self.tableWidget_call.item(i, Option_column.시가.value).setBackground(QBrush(대맥점색))
            self.tableWidget_call.item(i, Option_column.시가.value).setForeground(QBrush(검정색))  
        else:
            pass
    
    def call_node_color_update(self):
        
        global call_scroll_end_position

        if call_scroll_end_position > option_pairs_count:
            call_scroll_end_position = option_pairs_count
        else:
            pass

        for i in range(call_scroll_begin_position, call_scroll_end_position):

            저가 = df_call.at[i, '저가']
            고가 = df_call.at[i, '고가']

            if 저가 < 고가:

                # 콜 저가,고가를 풋 node와 비교후 컬러링                            
                if put_node_state['시가']:

                    if 저가 in put_시가_node_list:
                        self.tableWidget_call.item(i, Option_column.저가.value).setBackground(QBrush(풋시가색))
                        self.tableWidget_call.item(i, Option_column.저가.value).setForeground(QBrush(흰색))
                    else:
                        pass

                    if 고가 in put_시가_node_list:
                        self.tableWidget_call.item(i, Option_column.고가.value).setBackground(QBrush(풋시가색))
                        self.tableWidget_call.item(i, Option_column.고가.value).setForeground(QBrush(흰색))
                    else:
                        pass                   
                else:
                    pass

                if put_node_state['기준가']:

                    if 저가 in put_기준가_node_list:
                        self.tableWidget_call.item(i, Option_column.저가.value).setBackground(QBrush(풋기준가색))
                        self.tableWidget_call.item(i, Option_column.저가.value).setForeground(QBrush(흰색))
                    else:
                        pass

                    if 고가 in put_기준가_node_list:
                        self.tableWidget_call.item(i, Option_column.고가.value).setBackground(QBrush(풋기준가색))
                        self.tableWidget_call.item(i, Option_column.고가.value).setForeground(QBrush(흰색))
                    else:
                        pass                    
                else:
                    pass

                if put_node_state['월저']:

                    if 저가 in put_월저_node_list:
                        self.tableWidget_call.item(i, Option_column.저가.value).setBackground(QBrush(풋월저색))
                        self.tableWidget_call.item(i, Option_column.저가.value).setForeground(QBrush(흰색))
                    else:
                        pass

                    if 고가 in put_월저_node_list:
                        self.tableWidget_call.item(i, Option_column.고가.value).setBackground(QBrush(풋월저색))
                        self.tableWidget_call.item(i, Option_column.고가.value).setForeground(QBrush(흰색))
                    else:
                        pass                    
                else:
                    pass

                if put_node_state['월고']:

                    if 저가 in put_월고_node_list:
                        self.tableWidget_call.item(i, Option_column.저가.value).setBackground(QBrush(풋월고색))
                        self.tableWidget_call.item(i, Option_column.저가.value).setForeground(QBrush(흰색))
                    else:
                        pass

                    if 고가 in put_월고_node_list:
                        self.tableWidget_call.item(i, Option_column.고가.value).setBackground(QBrush(풋월고색))
                        self.tableWidget_call.item(i, Option_column.고가.value).setForeground(QBrush(흰색))
                    else:
                        pass                    
                else:
                    pass

                if put_node_state['전저']:

                    if 저가 in put_전저_node_list:
                        self.tableWidget_call.item(i, Option_column.저가.value).setBackground(QBrush(풋전저색))
                        self.tableWidget_call.item(i, Option_column.저가.value).setForeground(QBrush(흰색))
                    else:
                        pass

                    if 고가 in put_전저_node_list:
                        self.tableWidget_call.item(i, Option_column.고가.value).setBackground(QBrush(풋전저색))
                        self.tableWidget_call.item(i, Option_column.고가.value).setForeground(QBrush(흰색))
                    else:
                        pass                    
                else:
                    pass

                if put_node_state['전고']:

                    if 저가 in put_전고_node_list:
                        self.tableWidget_call.item(i, Option_column.저가.value).setBackground(QBrush(풋전고색))
                        self.tableWidget_call.item(i, Option_column.저가.value).setForeground(QBrush(검정색))
                    else:
                        pass

                    if 고가 in put_전고_node_list:
                        self.tableWidget_call.item(i, Option_column.고가.value).setBackground(QBrush(풋전고색))
                        self.tableWidget_call.item(i, Option_column.고가.value).setForeground(QBrush(검정색))
                    else:
                        pass                    
                else:
                    pass

                if put_node_state['종가']:

                    if 저가 in put_종가_node_list:
                        self.tableWidget_call.item(i, Option_column.저가.value).setBackground(QBrush(풋종가색))
                        self.tableWidget_call.item(i, Option_column.저가.value).setForeground(QBrush(검정색))
                    else:
                        pass

                    if 고가 in put_종가_node_list:
                        self.tableWidget_call.item(i, Option_column.고가.value).setBackground(QBrush(풋종가색))
                        self.tableWidget_call.item(i, Option_column.고가.value).setForeground(QBrush(검정색))
                    else:
                        pass                    
                else:
                    pass

                if put_node_state['피봇']:

                    if 저가 in put_피봇_node_list:
                        self.tableWidget_call.item(i, Option_column.저가.value).setBackground(QBrush(풋피봇색))
                        self.tableWidget_call.item(i, Option_column.저가.value).setForeground(QBrush(검정색))
                    else:
                        pass

                    if 고가 in put_피봇_node_list:
                        self.tableWidget_call.item(i, Option_column.고가.value).setBackground(QBrush(풋피봇색))
                        self.tableWidget_call.item(i, Option_column.고가.value).setForeground(QBrush(검정색))
                    else:
                        pass                   
                else:
                    pass
                
                # 콜 저가,고가를 콜 node와 비교후 컬러링            
                if call_node_state['시가']:

                    if 저가 in call_시가_node_list:
                        self.tableWidget_call.item(i, Option_column.저가.value).setBackground(QBrush(콜시가색))
                        self.tableWidget_call.item(i, Option_column.저가.value).setForeground(QBrush(검정색))
                    else:
                        pass

                    if 고가 in call_시가_node_list:
                        self.tableWidget_call.item(i, Option_column.고가.value).setBackground(QBrush(콜시가색))
                        self.tableWidget_call.item(i, Option_column.고가.value).setForeground(QBrush(검정색))
                    else:
                        pass                   
                else:
                    pass

                if call_node_state['기준가']:

                    if 저가 in call_기준가_node_list:
                        self.tableWidget_call.item(i, Option_column.저가.value).setBackground(QBrush(콜기준가색))
                        self.tableWidget_call.item(i, Option_column.저가.value).setForeground(QBrush(검정색))
                    else:
                        pass

                    if 고가 in call_기준가_node_list:
                        self.tableWidget_call.item(i, Option_column.고가.value).setBackground(QBrush(콜기준가색))
                        self.tableWidget_call.item(i, Option_column.고가.value).setForeground(QBrush(검정색))
                    else:
                        pass                   
                else:
                    pass

                if call_node_state['월저']:

                    if 저가 in call_월저_node_list:
                        self.tableWidget_call.item(i, Option_column.저가.value).setBackground(QBrush(콜월저색))
                        self.tableWidget_call.item(i, Option_column.저가.value).setForeground(QBrush(흰색))
                    else:
                        pass

                    if 고가 in call_월저_node_list:
                        self.tableWidget_call.item(i, Option_column.고가.value).setBackground(QBrush(콜월저색))
                        self.tableWidget_call.item(i, Option_column.고가.value).setForeground(QBrush(흰색))
                    else:
                        pass                    
                else:
                    pass

                if call_node_state['월고']:

                    if 저가 in call_월고_node_list:
                        self.tableWidget_call.item(i, Option_column.저가.value).setBackground(QBrush(콜월고색))
                        self.tableWidget_call.item(i, Option_column.저가.value).setForeground(QBrush(검정색))
                    else:
                        pass

                    if 고가 in call_월고_node_list:
                        self.tableWidget_call.item(i, Option_column.고가.value).setBackground(QBrush(콜월고색))
                        self.tableWidget_call.item(i, Option_column.고가.value).setForeground(QBrush(검정색))
                    else:
                        pass                    
                else:
                    pass

                if call_node_state['전저']:

                    if 저가 in call_전저_node_list:
                        self.tableWidget_call.item(i, Option_column.저가.value).setBackground(QBrush(콜전저색))
                        self.tableWidget_call.item(i, Option_column.저가.value).setForeground(QBrush(검정색))
                    else:
                        pass

                    if 고가 in call_전저_node_list:
                        self.tableWidget_call.item(i, Option_column.고가.value).setBackground(QBrush(콜전저색))
                        self.tableWidget_call.item(i, Option_column.고가.value).setForeground(QBrush(검정색))
                    else:
                        pass                    
                else:
                    pass

                if call_node_state['전고']:

                    if 저가 in call_전고_node_list:
                        self.tableWidget_call.item(i, Option_column.저가.value).setBackground(QBrush(콜전고색))
                        self.tableWidget_call.item(i, Option_column.저가.value).setForeground(QBrush(검정색))
                    else:
                        pass

                    if 고가 in call_전고_node_list:
                        self.tableWidget_call.item(i, Option_column.고가.value).setBackground(QBrush(콜전고색))
                        self.tableWidget_call.item(i, Option_column.고가.value).setForeground(QBrush(검정색))
                    else:
                        pass                    
                else:
                    pass

                if call_node_state['종가']:

                    if 저가 in call_종가_node_list:
                        self.tableWidget_call.item(i, Option_column.저가.value).setBackground(QBrush(콜종가색))
                        self.tableWidget_call.item(i, Option_column.저가.value).setForeground(QBrush(검정색))
                    else:
                        pass

                    if 고가 in call_종가_node_list:
                        self.tableWidget_call.item(i, Option_column.고가.value).setBackground(QBrush(콜종가색))
                        self.tableWidget_call.item(i, Option_column.고가.value).setForeground(QBrush(검정색))
                    else:
                        pass                    
                else:
                    pass

                if call_node_state['피봇']:

                    if 저가 in call_피봇_node_list:
                        self.tableWidget_call.item(i, Option_column.저가.value).setBackground(QBrush(콜피봇색))
                        self.tableWidget_call.item(i, Option_column.저가.value).setForeground(QBrush(검정색))
                    else:
                        pass

                    if 고가 in call_피봇_node_list:
                        self.tableWidget_call.item(i, Option_column.고가.value).setBackground(QBrush(콜피봇색))
                        self.tableWidget_call.item(i, Option_column.고가.value).setForeground(QBrush(검정색))
                    else:
                        pass                    
                else:
                    pass

                # 콜 맥점을 콜,풋의 저가,고가와 비교후 컬러링
                if call_node_state['기준가']:      

                    기준가 = df_call.at[i, '기준가']              

                    if 기준가 in put_저가_node_list:
                        self.tableWidget_call.item(i, Option_column.기준가.value).setBackground(QBrush(콜기준가색))
                        self.tableWidget_call.item(i, Option_column.기준가.value).setForeground(QBrush(검정색))
                    else:
                        pass

                    if 기준가 in put_고가_node_list:
                        self.tableWidget_call.item(i, Option_column.기준가.value).setBackground(QBrush(콜기준가색))
                        self.tableWidget_call.item(i, Option_column.기준가.value).setForeground(QBrush(검정색))
                    else:
                        pass

                    if 기준가 in call_저가_node_list:
                        self.tableWidget_call.item(i, Option_column.기준가.value).setBackground(QBrush(콜기준가색))
                        self.tableWidget_call.item(i, Option_column.기준가.value).setForeground(QBrush(검정색))
                    else:
                        pass

                    if 기준가 in call_고가_node_list:
                        self.tableWidget_call.item(i, Option_column.기준가.value).setBackground(QBrush(콜기준가색))
                        self.tableWidget_call.item(i, Option_column.기준가.value).setForeground(QBrush(검정색))
                    else:
                        pass              
                else:
                    pass

                if call_node_state['월저']:

                    월저 = df_call.at[i, '월저']

                    if 월저 in put_저가_node_list:
                        self.tableWidget_call.item(i, Option_column.월저.value).setBackground(QBrush(콜월저색))
                        self.tableWidget_call.item(i, Option_column.월저.value).setForeground(QBrush(흰색))
                    else:
                        pass

                    if 월저 in put_고가_node_list:
                        self.tableWidget_call.item(i, Option_column.월저.value).setBackground(QBrush(콜월저색))
                        self.tableWidget_call.item(i, Option_column.월저.value).setForeground(QBrush(흰색))
                    else:
                        pass

                    if 월저 in call_저가_node_list:
                        self.tableWidget_call.item(i, Option_column.월저.value).setBackground(QBrush(콜월저색))
                        self.tableWidget_call.item(i, Option_column.월저.value).setForeground(QBrush(흰색))
                    else:
                        pass

                    if 월저 in call_고가_node_list:
                        self.tableWidget_call.item(i, Option_column.월저.value).setBackground(QBrush(콜월저색))
                        self.tableWidget_call.item(i, Option_column.월저.value).setForeground(QBrush(흰색))
                    else:
                        pass              
                else:
                    pass

                if call_node_state['월고']:

                    월고 = df_call.at[i, '월고']

                    if 월고 in put_저가_node_list:
                        self.tableWidget_call.item(i, Option_column.월고.value).setBackground(QBrush(콜월고색))
                        self.tableWidget_call.item(i, Option_column.월고.value).setForeground(QBrush(검정색))
                    else:
                        pass

                    if 월고 in put_고가_node_list:
                        self.tableWidget_call.item(i, Option_column.월고.value).setBackground(QBrush(콜월고색))
                        self.tableWidget_call.item(i, Option_column.월고.value).setForeground(QBrush(검정색))
                    else:
                        pass

                    if 월고 in call_저가_node_list:
                        self.tableWidget_call.item(i, Option_column.월고.value).setBackground(QBrush(콜월고색))
                        self.tableWidget_call.item(i, Option_column.월고.value).setForeground(QBrush(검정색))
                    else:
                        pass

                    if 월고 in call_고가_node_list:
                        self.tableWidget_call.item(i, Option_column.월고.value).setBackground(QBrush(콜월고색))
                        self.tableWidget_call.item(i, Option_column.월고.value).setForeground(QBrush(검정색))
                    else:
                        pass           
                else:
                    pass

                if call_node_state['전저']:

                    전저 = df_call.at[i, '전저']

                    if 전저 in put_저가_node_list:
                        self.tableWidget_call.item(i, Option_column.전저.value).setBackground(QBrush(콜전저색))
                        self.tableWidget_call.item(i, Option_column.전저.value).setForeground(QBrush(검정색))
                    else:
                        pass

                    if 전저 in put_고가_node_list:
                        self.tableWidget_call.item(i, Option_column.전저.value).setBackground(QBrush(콜전저색))
                        self.tableWidget_call.item(i, Option_column.전저.value).setForeground(QBrush(검정색))
                    else:
                        pass

                    if 전저 in call_저가_node_list:
                        self.tableWidget_call.item(i, Option_column.전저.value).setBackground(QBrush(콜전저색))
                        self.tableWidget_call.item(i, Option_column.전저.value).setForeground(QBrush(검정색))
                    else:
                        pass

                    if 전저 in call_고가_node_list:
                        self.tableWidget_call.item(i, Option_column.전저.value).setBackground(QBrush(콜전저색))
                        self.tableWidget_call.item(i, Option_column.전저.value).setForeground(QBrush(검정색))
                    else:
                        pass          
                else:
                    pass

                if call_node_state['전고']:

                    전고 = df_call.at[i, '전고']

                    if 전고 in put_저가_node_list:
                        self.tableWidget_call.item(i, Option_column.전고.value).setBackground(QBrush(콜전고색))
                        self.tableWidget_call.item(i, Option_column.전고.value).setForeground(QBrush(검정색))
                    else:
                        pass

                    if 전고 in put_고가_node_list:
                        self.tableWidget_call.item(i, Option_column.전고.value).setBackground(QBrush(콜전고색))
                        self.tableWidget_call.item(i, Option_column.전고.value).setForeground(QBrush(검정색))
                    else:
                        pass

                    if 전고 in call_저가_node_list:
                        self.tableWidget_call.item(i, Option_column.전고.value).setBackground(QBrush(콜전고색))
                        self.tableWidget_call.item(i, Option_column.전고.value).setForeground(QBrush(검정색))
                    else:
                        pass

                    if 전고 in call_고가_node_list:
                        self.tableWidget_call.item(i, Option_column.전고.value).setBackground(QBrush(콜전고색))
                        self.tableWidget_call.item(i, Option_column.전고.value).setForeground(QBrush(검정색))
                    else:
                        pass          
                else:
                    pass

                if call_node_state['종가']:

                    종가 = df_call.at[i, '종가']

                    if 종가 in put_저가_node_list:
                        self.tableWidget_call.item(i, Option_column.종가.value).setBackground(QBrush(콜종가색))
                        self.tableWidget_call.item(i, Option_column.종가.value).setForeground(QBrush(검정색))
                    else:
                        pass

                    if 종가 in put_고가_node_list:
                        self.tableWidget_call.item(i, Option_column.종가.value).setBackground(QBrush(콜종가색))
                        self.tableWidget_call.item(i, Option_column.종가.value).setForeground(QBrush(검정색))
                    else:
                        pass

                    if 종가 in call_저가_node_list:
                        self.tableWidget_call.item(i, Option_column.종가.value).setBackground(QBrush(콜종가색))
                        self.tableWidget_call.item(i, Option_column.종가.value).setForeground(QBrush(검정색))
                    else:
                        pass

                    if 종가 in call_고가_node_list:
                        self.tableWidget_call.item(i, Option_column.종가.value).setBackground(QBrush(콜종가색))
                        self.tableWidget_call.item(i, Option_column.종가.value).setForeground(QBrush(검정색))
                    else:
                        pass         
                else:
                    pass

                if call_node_state['피봇']:

                    피봇 = df_call.at[i, '피봇']

                    if 피봇 in put_저가_node_list:
                        self.tableWidget_call.item(i, Option_column.피봇.value).setBackground(QBrush(콜피봇색))
                        self.tableWidget_call.item(i, Option_column.피봇.value).setForeground(QBrush(검정색))
                    else:
                        pass

                    if 피봇 in put_고가_node_list:
                        self.tableWidget_call.item(i, Option_column.피봇.value).setBackground(QBrush(콜피봇색))
                        self.tableWidget_call.item(i, Option_column.피봇.value).setForeground(QBrush(검정색))
                    else:
                        pass

                    if 피봇 in call_저가_node_list:
                        self.tableWidget_call.item(i, Option_column.피봇.value).setBackground(QBrush(콜피봇색))
                        self.tableWidget_call.item(i, Option_column.피봇.value).setForeground(QBrush(검정색))
                    else:
                        pass

                    if 피봇 in call_고가_node_list:
                        self.tableWidget_call.item(i, Option_column.피봇.value).setBackground(QBrush(콜피봇색))
                        self.tableWidget_call.item(i, Option_column.피봇.value).setForeground(QBrush(검정색))
                    else:
                        pass          
                else:
                    pass

                if call_node_state['시가']:

                    시가 = df_call.at[i, '시가']

                    if 시가 in put_저가_node_list:
                        self.tableWidget_call.item(i, Option_column.시가.value).setBackground(QBrush(콜시가색))
                        self.tableWidget_call.item(i, Option_column.시가.value).setForeground(QBrush(검정색))
                    else:
                        pass

                    if 시가 in put_고가_node_list:
                        self.tableWidget_call.item(i, Option_column.시가.value).setBackground(QBrush(콜시가색))
                        self.tableWidget_call.item(i, Option_column.시가.value).setForeground(QBrush(검정색))
                    else:
                        pass

                    if 시가 in call_저가_node_list:
                        self.tableWidget_call.item(i, Option_column.시가.value).setBackground(QBrush(콜시가색))
                        self.tableWidget_call.item(i, Option_column.시가.value).setForeground(QBrush(검정색))
                    else:
                        pass

                    if 시가 in call_고가_node_list:
                        self.tableWidget_call.item(i, Option_column.시가.value).setBackground(QBrush(콜시가색))
                        self.tableWidget_call.item(i, Option_column.시가.value).setForeground(QBrush(검정색))
                    else:
                        pass     
                else:
                    pass

                if call_node_state['시가']:

                    시가 = df_call.at[i, '시가']

                    if 시가 in COREVAL:
                        self.tableWidget_call.item(i, Option_column.시가.value).setBackground(QBrush(대맥점색))
                        self.tableWidget_call.item(i, Option_column.시가.value).setForeground(QBrush(검정색))
                    else:
                        pass
                else:
                    pass          
            else:
                if call_node_state['종가']:

                    종가 = df_call.at[i, '종가']

                    if 종가 in put_저가_node_list:
                        self.tableWidget_call.item(i, Option_column.종가.value).setBackground(QBrush(콜종가색))
                        self.tableWidget_call.item(i, Option_column.종가.value).setForeground(QBrush(검정색))
                    else:
                        pass

                    if 종가 in put_고가_node_list:
                        self.tableWidget_call.item(i, Option_column.종가.value).setBackground(QBrush(콜종가색))
                        self.tableWidget_call.item(i, Option_column.종가.value).setForeground(QBrush(검정색))
                    else:
                        pass

                    if 종가 in call_저가_node_list:
                        self.tableWidget_call.item(i, Option_column.종가.value).setBackground(QBrush(콜종가색))
                        self.tableWidget_call.item(i, Option_column.종가.value).setForeground(QBrush(검정색))
                    else:
                        pass

                    if 종가 in call_고가_node_list:
                        self.tableWidget_call.item(i, Option_column.종가.value).setBackground(QBrush(콜종가색))
                        self.tableWidget_call.item(i, Option_column.종가.value).setForeground(QBrush(검정색))
                    else:
                        pass         
                else:
                    pass            

    # 풋 컬러링 Apply 함수
    # 풋 저가, 고가가 콜시가에 있는지 검사
    def check_put_low_isin_call_open_list(self, x):

        if x > OTM_SEARCH_START_VAL and x in call_시가_node_list:

            i = put_저가.index(x) + 1

            self.tableWidget_put.item(i, Option_column.저가.value).setBackground(QBrush(콜시가색))
            self.tableWidget_put.item(i, Option_column.저가.value).setForeground(QBrush(검정색))            
        else:
            pass

    def check_put_high_isin_call_open_list(self, x): 

        if x > OTM_SEARCH_START_VAL and x in call_시가_node_list:

            i = put_고가.index(x) + 1

            self.tableWidget_put.item(i, Option_column.고가.value).setBackground(QBrush(콜시가색))
            self.tableWidget_put.item(i, Option_column.고가.value).setForeground(QBrush(검정색))            
        else:
            pass

    # 풋 저가, 고가가 콜종가에 있는지 검사
    def check_put_low_isin_call_close_list(self, x):

        if x > OTM_SEARCH_START_VAL and x in call_종가_node_list:

            i = put_저가.index(x) + 1

            self.tableWidget_put.item(i, Option_column.저가.value).setBackground(QBrush(콜종가색))
            self.tableWidget_put.item(i, Option_column.저가.value).setForeground(QBrush(검정색))            
        else:
            pass

    def check_put_high_isin_call_close_list(self, x):

        if x > OTM_SEARCH_START_VAL and x in call_종가_node_list:

            i = put_고가.index(x) + 1

            self.tableWidget_put.item(i, Option_column.고가.value).setBackground(QBrush(콜종가색))
            self.tableWidget_put.item(i, Option_column.고가.value).setForeground(QBrush(검정색))            
        else:
            pass

    # 풋 저가, 고가가 콜피봇에 있는지 검사
    def check_put_low_isin_call_pivot_list(self, x):

        if x > OTM_SEARCH_START_VAL and x in call_피봇_node_list:

            i = put_저가.index(x) + 1

            self.tableWidget_put.item(i, Option_column.저가.value).setBackground(QBrush(콜피봇색))
            self.tableWidget_put.item(i, Option_column.저가.value).setForeground(QBrush(검정색))            
        else:
            pass

    def check_put_high_isin_call_pivot_list(self, x):

        if x > OTM_SEARCH_START_VAL and x in call_피봇_node_list:

            i = put_고가.index(x) + 1

            self.tableWidget_put.item(i, Option_column.고가.value).setBackground(QBrush(콜피봇색))
            self.tableWidget_put.item(i, Option_column.고가.value).setForeground(QBrush(검정색))            
        else:
            pass

    # 풋 저가, 고가가 풋시가에 있는지 검사
    def check_put_low_isin_put_open_list(self, x):

        if x > OTM_SEARCH_START_VAL and x in put_시가_node_list:

            i = put_저가.index(x) + 1

            self.tableWidget_put.item(i, Option_column.저가.value).setBackground(QBrush(풋시가색))
            self.tableWidget_put.item(i, Option_column.저가.value).setForeground(QBrush(흰색))            
        else:
            pass

    def check_put_high_isin_put_open_list(self, x):

        if x > OTM_SEARCH_START_VAL and x in put_시가_node_list:

            i = put_고가.index(x) + 1

            self.tableWidget_put.item(i, Option_column.고가.value).setBackground(QBrush(풋시가색))
            self.tableWidget_put.item(i, Option_column.고가.value).setForeground(QBrush(흰색))            
        else:
            pass

    # 풋 저가, 고가가 풋종가에 있는지 검사
    def check_put_low_isin_put_close_list(self, x):

        if x > OTM_SEARCH_START_VAL and x in put_종가_node_list:

            i = put_저가.index(x) + 1

            self.tableWidget_put.item(i, Option_column.저가.value).setBackground(QBrush(풋종가색))
            self.tableWidget_put.item(i, Option_column.저가.value).setForeground(QBrush(검정색))            
        else:
            pass

    def check_put_high_isin_put_close_list(self, x):

        if x > OTM_SEARCH_START_VAL and x in put_종가_node_list:

            i = put_고가.index(x) + 1

            self.tableWidget_put.item(i, Option_column.고가.value).setBackground(QBrush(풋종가색))
            self.tableWidget_put.item(i, Option_column.고가.value).setForeground(QBrush(검정색))            
        else:
            pass

    # 풋 저가, 고가가 풋피봇에 있는지 검사
    def check_put_low_isin_put_pivot_list(self, x):

        if x > OTM_SEARCH_START_VAL and x in put_피봇_node_list:

            i = put_저가.index(x) + 1

            self.tableWidget_put.item(i, Option_column.저가.value).setBackground(QBrush(풋피봇색))
            self.tableWidget_put.item(i, Option_column.저가.value).setForeground(QBrush(검정색))            
        else:
            pass

    def check_put_high_isin_put_pivot_list(self, x):

        if x > OTM_SEARCH_START_VAL and x in put_피봇_node_list:

            i = put_고가.index(x) + 1

            self.tableWidget_put.item(i, Option_column.고가.value).setBackground(QBrush(풋피봇색))
            self.tableWidget_put.item(i, Option_column.고가.value).setForeground(QBrush(검정색))            
        else:
            pass

    # 풋종가가 콜, 풋의 저가, 고가에 있는지 검사
    def check_put_close_isin_call_low_list(self, x):

        if x > OTM_SEARCH_START_VAL and x in call_저가_node_list:

            i = put_종가.index(x) + 1

            self.tableWidget_put.item(i, Option_column.종가.value).setBackground(QBrush(풋종가색))
            self.tableWidget_put.item(i, Option_column.종가.value).setForeground(QBrush(검정색))            
        else:
            pass

    def check_put_close_isin_call_high_list(self, x):

        if x > OTM_SEARCH_START_VAL and x in call_고가_node_list:

            i = put_종가.index(x) + 1

            self.tableWidget_put.item(i, Option_column.종가.value).setBackground(QBrush(풋종가색))
            self.tableWidget_put.item(i, Option_column.종가.value).setForeground(QBrush(검정색))            
        else:
            pass

    def check_put_close_isin_put_low_list(self, x):

        if x > OTM_SEARCH_START_VAL and x in put_저가_node_list:

            i = put_종가.index(x) + 1

            self.tableWidget_put.item(i, Option_column.종가.value).setBackground(QBrush(풋종가색))
            self.tableWidget_put.item(i, Option_column.종가.value).setForeground(QBrush(검정색))            
        else:
            pass

    def check_put_close_isin_put_high_list(self, x):

        if x > OTM_SEARCH_START_VAL and x in put_고가_node_list:

            i = put_종가.index(x) + 1

            self.tableWidget_put.item(i, Option_column.종가.value).setBackground(QBrush(풋종가색))
            self.tableWidget_put.item(i, Option_column.종가.value).setForeground(QBrush(검정색))            
        else:
            pass

    # 풋피봇이 콜, 풋의 저가, 고가에 있는지 검사
    def check_put_pivot_isin_call_low_list(self, x):

        if x > OTM_SEARCH_START_VAL and x in call_저가_node_list:

            i = put_피봇.index(x) + 1

            self.tableWidget_put.item(i, Option_column.피봇.value).setBackground(QBrush(풋피봇색))
            self.tableWidget_put.item(i, Option_column.피봇.value).setForeground(QBrush(검정색))            
        else:
            pass

    def check_put_pivot_isin_call_high_list(self, x):

        if x > OTM_SEARCH_START_VAL and x in call_고가_node_list:

            i = put_피봇.index(x) + 1

            self.tableWidget_put.item(i, Option_column.피봇.value).setBackground(QBrush(풋피봇색))
            self.tableWidget_put.item(i, Option_column.피봇.value).setForeground(QBrush(검정색))            
        else:
            pass

    def check_put_pivot_isin_put_low_list(self, x):

        if x > OTM_SEARCH_START_VAL and x in put_저가_node_list:

            i = put_피봇.index(x) + 1

            self.tableWidget_put.item(i, Option_column.피봇.value).setBackground(QBrush(풋피봇색))
            self.tableWidget_put.item(i, Option_column.피봇.value).setForeground(QBrush(검정색))            
        else:
            pass

    def check_put_pivot_isin_put_high_list(self, x):

        if x > OTM_SEARCH_START_VAL and x in put_고가_node_list:

            i = put_피봇.index(x) + 1

            self.tableWidget_put.item(i, Option_column.피봇.value).setBackground(QBrush(풋피봇색))
            self.tableWidget_put.item(i, Option_column.피봇.value).setForeground(QBrush(검정색))            
        else:
            pass

    # 풋시가가 콜, 풋의 저가, 고가에 있는지 검사
    def check_put_open_isin_call_low_list(self, x):

        if x > OTM_SEARCH_START_VAL and x in call_저가_node_list:

            i = put_시가.index(x) + 1

            self.tableWidget_put.item(i, Option_column.시가.value).setBackground(QBrush(풋시가색))
            self.tableWidget_put.item(i, Option_column.시가.value).setForeground(QBrush(흰색))            
        else:
            pass

    def check_put_open_isin_call_high_list(self, x):

        if x > OTM_SEARCH_START_VAL and x in call_고가_node_list:

            i = put_시가.index(x) + 1

            self.tableWidget_put.item(i, Option_column.시가.value).setBackground(QBrush(풋시가색))
            self.tableWidget_put.item(i, Option_column.시가.value).setForeground(QBrush(흰색))            
        else:
            pass

    def check_put_open_isin_put_low_list(self, x):

        if x > OTM_SEARCH_START_VAL and x in put_저가_node_list:

            i = put_시가.index(x) + 1

            self.tableWidget_put.item(i, Option_column.시가.value).setBackground(QBrush(풋시가색))
            self.tableWidget_put.item(i, Option_column.시가.value).setForeground(QBrush(흰색))            
        else:
            pass

    def check_put_open_isin_put_high_list(self, x):

        if x > OTM_SEARCH_START_VAL and x in put_고가_node_list:

            i = put_시가.index(x) + 1

            self.tableWidget_put.item(i, Option_column.시가.value).setBackground(QBrush(풋시가색))
            self.tableWidget_put.item(i, Option_column.시가.value).setForeground(QBrush(흰색))            
        else:
            pass

    # 풋시가가 맥점에 있는지 검사
    def check_put_open_isin_coreval_list(self, x):

        if x > OTM_SEARCH_START_VAL and x in COREVAL:

            i = put_시가.index(x) + 1

            self.tableWidget_put.item(i, Option_column.시가.value).setBackground(QBrush(대맥점색))
            self.tableWidget_put.item(i, Option_column.시가.value).setForeground(QBrush(검정색))            
        else:
            pass

    def put_node_color_update(self):
        
        global put_scroll_end_position

        if put_scroll_end_position > option_pairs_count:
            put_scroll_end_position = option_pairs_count
        else:
            pass
        
        for i in range(put_scroll_begin_position, put_scroll_end_position):

            저가 = df_put.at[i, '저가']
            고가 = df_put.at[i, '고가']

            if 저가 < 고가:

                # 풋 저가,고가를 콜 node와 비교후 컬러링            
                if call_node_state['시가']:

                    if 저가 in call_시가_node_list:
                        self.tableWidget_put.item(i, Option_column.저가.value).setBackground(QBrush(콜시가색))
                        self.tableWidget_put.item(i, Option_column.저가.value).setForeground(QBrush(검정색))
                    else:
                        pass

                    if 고가 in call_시가_node_list:
                        self.tableWidget_put.item(i, Option_column.고가.value).setBackground(QBrush(콜시가색))
                        self.tableWidget_put.item(i, Option_column.고가.value).setForeground(QBrush(검정색))
                    else:
                        pass                    
                else:
                    pass

                if call_node_state['기준가']:

                    if 저가 in call_기준가_node_list:
                        self.tableWidget_put.item(i, Option_column.저가.value).setBackground(QBrush(콜기준가색))
                        self.tableWidget_put.item(i, Option_column.저가.value).setForeground(QBrush(검정색))
                    else:
                        pass

                    if 고가 in call_기준가_node_list:
                        self.tableWidget_put.item(i, Option_column.고가.value).setBackground(QBrush(콜기준가색))
                        self.tableWidget_put.item(i, Option_column.고가.value).setForeground(QBrush(검정색))
                    else:
                        pass                    
                else:
                    pass

                if call_node_state['월저']:

                    if 저가 in call_월저_node_list:
                        self.tableWidget_put.item(i, Option_column.저가.value).setBackground(QBrush(콜월저색))
                        self.tableWidget_put.item(i, Option_column.저가.value).setForeground(QBrush(흰색))
                    else:
                        pass

                    if 고가 in call_월저_node_list:
                        self.tableWidget_put.item(i, Option_column.고가.value).setBackground(QBrush(콜월저색))
                        self.tableWidget_put.item(i, Option_column.고가.value).setForeground(QBrush(흰색))
                    else:
                        pass                    
                else:
                    pass

                if call_node_state['월고']:

                    if 저가 in call_월고_node_list:
                        self.tableWidget_put.item(i, Option_column.저가.value).setBackground(QBrush(콜월고색))
                        self.tableWidget_put.item(i, Option_column.저가.value).setForeground(QBrush(검정색))
                    else:
                        pass

                    if 고가 in call_월고_node_list:
                        self.tableWidget_put.item(i, Option_column.고가.value).setBackground(QBrush(콜월고색))
                        self.tableWidget_put.item(i, Option_column.고가.value).setForeground(QBrush(검정색))
                    else:
                        pass                    
                else:
                    pass

                if call_node_state['전저']:

                    if 저가 in call_전저_node_list:
                        self.tableWidget_put.item(i, Option_column.저가.value).setBackground(QBrush(콜전저색))
                        self.tableWidget_put.item(i, Option_column.저가.value).setForeground(QBrush(검정색))
                    else:
                        pass

                    if 고가 in call_전저_node_list:
                        self.tableWidget_put.item(i, Option_column.고가.value).setBackground(QBrush(콜전저색))
                        self.tableWidget_put.item(i, Option_column.고가.value).setForeground(QBrush(검정색))
                    else:
                        pass                   
                else:
                    pass

                if call_node_state['전고']:

                    if 저가 in call_전고_node_list:
                        self.tableWidget_put.item(i, Option_column.저가.value).setBackground(QBrush(콜전고색))
                        self.tableWidget_put.item(i, Option_column.저가.value).setForeground(QBrush(검정색))
                    else:
                        pass

                    if 고가 in call_전고_node_list:
                        self.tableWidget_put.item(i, Option_column.고가.value).setBackground(QBrush(콜전고색))
                        self.tableWidget_put.item(i, Option_column.고가.value).setForeground(QBrush(검정색))
                    else:
                        pass                    
                else:
                    pass

                if call_node_state['종가']:

                    if 저가 in call_종가_node_list:
                        self.tableWidget_put.item(i, Option_column.저가.value).setBackground(QBrush(콜종가색))
                        self.tableWidget_put.item(i, Option_column.저가.value).setForeground(QBrush(검정색))
                    else:
                        pass

                    if 고가 in call_종가_node_list:
                        self.tableWidget_put.item(i, Option_column.고가.value).setBackground(QBrush(콜종가색))
                        self.tableWidget_put.item(i, Option_column.고가.value).setForeground(QBrush(검정색))
                    else:
                        pass                    
                else:
                    pass

                if call_node_state['피봇']:

                    if 저가 in call_피봇_node_list:
                        self.tableWidget_put.item(i, Option_column.저가.value).setBackground(QBrush(콜피봇색))
                        self.tableWidget_put.item(i, Option_column.저가.value).setForeground(QBrush(검정색))
                    else:
                        pass

                    if 고가 in call_피봇_node_list:
                        self.tableWidget_put.item(i, Option_column.고가.value).setBackground(QBrush(콜피봇색))
                        self.tableWidget_put.item(i, Option_column.고가.value).setForeground(QBrush(검정색))
                    else:
                        pass                    
                else:
                    pass

                # 풋 저가,고가를 풋 node와 비교후 컬러링            
                if put_node_state['시가']:

                    if 저가 in put_시가_node_list:
                        self.tableWidget_put.item(i, Option_column.저가.value).setBackground(QBrush(풋시가색))
                        self.tableWidget_put.item(i, Option_column.저가.value).setForeground(QBrush(흰색))
                    else:
                        pass

                    if 고가 in put_시가_node_list:
                        self.tableWidget_put.item(i, Option_column.고가.value).setBackground(QBrush(풋시가색))
                        self.tableWidget_put.item(i, Option_column.고가.value).setForeground(QBrush(흰색))
                    else:
                        pass                    
                else:
                    pass         

                if put_node_state['기준가']:

                    if 저가 in put_기준가_node_list:
                        self.tableWidget_put.item(i, Option_column.저가.value).setBackground(QBrush(풋기준가색))
                        self.tableWidget_put.item(i, Option_column.저가.value).setForeground(QBrush(흰색))
                    else:
                        pass

                    if 고가 in put_기준가_node_list:
                        self.tableWidget_put.item(i, Option_column.고가.value).setBackground(QBrush(풋기준가색))
                        self.tableWidget_put.item(i, Option_column.고가.value).setForeground(QBrush(흰색))
                    else:
                        pass                    
                else:
                    pass

                if put_node_state['월저']:

                    if 저가 in put_월저_node_list:
                        self.tableWidget_put.item(i, Option_column.저가.value).setBackground(QBrush(풋월저색))
                        self.tableWidget_put.item(i, Option_column.저가.value).setForeground(QBrush(흰색))
                    else:
                        pass

                    if 고가 in put_월저_node_list:
                        self.tableWidget_put.item(i, Option_column.고가.value).setBackground(QBrush(풋월저색))
                        self.tableWidget_put.item(i, Option_column.고가.value).setForeground(QBrush(흰색))
                    else:
                        pass                   
                else:
                    pass

                if put_node_state['월고']:

                    if 저가 in put_월고_node_list:
                        self.tableWidget_put.item(i, Option_column.저가.value).setBackground(QBrush(풋월고색))
                        self.tableWidget_put.item(i, Option_column.저가.value).setForeground(QBrush(흰색))
                    else:
                        pass

                    if 고가 in put_월고_node_list:
                        self.tableWidget_put.item(i, Option_column.고가.value).setBackground(QBrush(풋월고색))
                        self.tableWidget_put.item(i, Option_column.고가.value).setForeground(QBrush(흰색))
                    else:
                        pass                    
                else:
                    pass

                if put_node_state['전저']:

                    if 저가 in put_전저_node_list:
                        self.tableWidget_put.item(i, Option_column.저가.value).setBackground(QBrush(풋전저색))
                        self.tableWidget_put.item(i, Option_column.저가.value).setForeground(QBrush(흰색))
                    else:
                        pass

                    if 고가 in put_전저_node_list:
                        self.tableWidget_put.item(i, Option_column.고가.value).setBackground(QBrush(풋전저색))
                        self.tableWidget_put.item(i, Option_column.고가.value).setForeground(QBrush(흰색))
                    else:
                        pass                    
                else:
                    pass

                if put_node_state['전고']:

                    if 저가 in put_전고_node_list:
                        self.tableWidget_put.item(i, Option_column.저가.value).setBackground(QBrush(풋전고색))
                        self.tableWidget_put.item(i, Option_column.저가.value).setForeground(QBrush(검정색))
                    else:
                        pass

                    if 고가 in put_전고_node_list:
                        self.tableWidget_put.item(i, Option_column.고가.value).setBackground(QBrush(풋전고색))
                        self.tableWidget_put.item(i, Option_column.고가.value).setForeground(QBrush(검정색))
                    else:
                        pass                    
                else:
                    pass

                if put_node_state['종가']:

                    if 저가 in put_종가_node_list:
                        self.tableWidget_put.item(i, Option_column.저가.value).setBackground(QBrush(풋종가색))
                        self.tableWidget_put.item(i, Option_column.저가.value).setForeground(QBrush(검정색))
                    else:
                        pass

                    if 고가 in put_종가_node_list:
                        self.tableWidget_put.item(i, Option_column.고가.value).setBackground(QBrush(풋종가색))
                        self.tableWidget_put.item(i, Option_column.고가.value).setForeground(QBrush(검정색))
                    else:
                        pass                    
                else:
                    pass

                if put_node_state['피봇']:

                    if 저가 in put_피봇_node_list:
                        self.tableWidget_put.item(i, Option_column.저가.value).setBackground(QBrush(풋피봇색))
                        self.tableWidget_put.item(i, Option_column.저가.value).setForeground(QBrush(검정색))
                    else:
                        pass

                    if 고가 in put_피봇_node_list:
                        self.tableWidget_put.item(i, Option_column.고가.value).setBackground(QBrush(풋피봇색))
                        self.tableWidget_put.item(i, Option_column.고가.value).setForeground(QBrush(검정색))
                    else:
                        pass                    
                else:
                    pass                  

                # 풋 맥점을 콜,풋의 저가,고가와 비교후 컬러링
                if put_node_state['기준가']:

                    기준가 = df_put.at[i, '기준가']

                    if 기준가 in call_저가_node_list:
                        self.tableWidget_put.item(i, Option_column.기준가.value).setBackground(QBrush(풋기준가색))
                        self.tableWidget_put.item(i, Option_column.기준가.value).setForeground(QBrush(흰색))
                    else:
                        pass

                    if 기준가 in call_고가_node_list:
                        self.tableWidget_put.item(i, Option_column.기준가.value).setBackground(QBrush(풋기준가색))
                        self.tableWidget_put.item(i, Option_column.기준가.value).setForeground(QBrush(흰색))
                    else:
                        pass

                    if 기준가 in put_저가_node_list:
                        self.tableWidget_put.item(i, Option_column.기준가.value).setBackground(QBrush(풋기준가색))
                        self.tableWidget_put.item(i, Option_column.기준가.value).setForeground(QBrush(흰색))
                    else:
                        pass

                    if 기준가 in put_고가_node_list:
                        self.tableWidget_put.item(i, Option_column.기준가.value).setBackground(QBrush(풋기준가색))
                        self.tableWidget_put.item(i, Option_column.기준가.value).setForeground(QBrush(흰색))
                    else:
                        pass           
                else:
                    pass

                if put_node_state['월저']:

                    월저 = df_put.at[i, '월저']

                    if 월저 in call_저가_node_list:
                        self.tableWidget_put.item(i, Option_column.월저.value).setBackground(QBrush(풋월저색))
                        self.tableWidget_put.item(i, Option_column.월저.value).setForeground(QBrush(흰색))
                    else:
                        pass

                    if 월저 in call_고가_node_list:
                        self.tableWidget_put.item(i, Option_column.월저.value).setBackground(QBrush(풋월저색))
                        self.tableWidget_put.item(i, Option_column.월저.value).setForeground(QBrush(흰색))
                    else:
                        pass

                    if 월저 in put_저가_node_list:
                        self.tableWidget_put.item(i, Option_column.월저.value).setBackground(QBrush(풋월저색))
                        self.tableWidget_put.item(i, Option_column.월저.value).setForeground(QBrush(흰색))
                    else:
                        pass

                    if 월저 in put_고가_node_list:
                        self.tableWidget_put.item(i, Option_column.월저.value).setBackground(QBrush(풋월저색))
                        self.tableWidget_put.item(i, Option_column.월저.value).setForeground(QBrush(흰색))
                    else:
                        pass           
                else:
                    pass

                if put_node_state['월고']:

                    월고 = df_put.at[i, '월고']

                    if 월고 in call_저가_node_list:
                        self.tableWidget_put.item(i, Option_column.월고.value).setBackground(QBrush(풋월고색))
                        self.tableWidget_put.item(i, Option_column.월고.value).setForeground(QBrush(흰색))
                    else:
                        pass

                    if 월고 in call_고가_node_list:
                        self.tableWidget_put.item(i, Option_column.월고.value).setBackground(QBrush(풋월고색))
                        self.tableWidget_put.item(i, Option_column.월고.value).setForeground(QBrush(흰색))
                    else:
                        pass

                    if 월고 in put_저가_node_list:
                        self.tableWidget_put.item(i, Option_column.월고.value).setBackground(QBrush(풋월고색))
                        self.tableWidget_put.item(i, Option_column.월고.value).setForeground(QBrush(흰색))
                    else:
                        pass

                    if 월고 in put_고가_node_list:
                        self.tableWidget_put.item(i, Option_column.월고.value).setBackground(QBrush(풋월고색))
                        self.tableWidget_put.item(i, Option_column.월고.value).setForeground(QBrush(흰색))
                    else:
                        pass         
                else:
                    pass

                if put_node_state['전저']:

                    전저 = df_put.at[i, '전저']

                    if 전저 in call_저가_node_list:
                        self.tableWidget_put.item(i, Option_column.전저.value).setBackground(QBrush(풋전저색))
                        self.tableWidget_put.item(i, Option_column.전저.value).setForeground(QBrush(흰색))
                    else:
                        pass

                    if 전저 in call_고가_node_list:
                        self.tableWidget_put.item(i, Option_column.전저.value).setBackground(QBrush(풋전저색))
                        self.tableWidget_put.item(i, Option_column.전저.value).setForeground(QBrush(흰색))
                    else:
                        pass

                    if 전저 in put_저가_node_list:
                        self.tableWidget_put.item(i, Option_column.전저.value).setBackground(QBrush(풋전저색))
                        self.tableWidget_put.item(i, Option_column.전저.value).setForeground(QBrush(흰색))
                    else:
                        pass

                    if 전저 in put_고가_node_list:
                        self.tableWidget_put.item(i, Option_column.전저.value).setBackground(QBrush(풋전저색))
                        self.tableWidget_put.item(i, Option_column.전저.value).setForeground(QBrush(흰색))
                    else:
                        pass        
                else:
                    pass

                if put_node_state['전고']:

                    전고 = df_put.at[i, '전고']

                    if 전고 in call_저가_node_list:
                        self.tableWidget_put.item(i, Option_column.전고.value).setBackground(QBrush(풋전고색))
                        self.tableWidget_put.item(i, Option_column.전고.value).setForeground(QBrush(검정색))
                    else:
                        pass

                    if 전고 in call_고가_node_list:
                        self.tableWidget_put.item(i, Option_column.전고.value).setBackground(QBrush(풋전고색))
                        self.tableWidget_put.item(i, Option_column.전고.value).setForeground(QBrush(검정색))
                    else:
                        pass

                    if 전고 in put_저가_node_list:
                        self.tableWidget_put.item(i, Option_column.전고.value).setBackground(QBrush(풋전고색))
                        self.tableWidget_put.item(i, Option_column.전고.value).setForeground(QBrush(검정색))
                    else:
                        pass

                    if 전고 in put_고가_node_list:
                        self.tableWidget_put.item(i, Option_column.전고.value).setBackground(QBrush(풋전고색))
                        self.tableWidget_put.item(i, Option_column.전고.value).setForeground(QBrush(검정색))
                    else:
                        pass       
                else:
                    pass

                if put_node_state['종가']:

                    종가 = df_put.at[i, '종가']

                    if 종가 in call_저가_node_list:
                        self.tableWidget_put.item(i, Option_column.종가.value).setBackground(QBrush(풋종가색))
                        self.tableWidget_put.item(i, Option_column.종가.value).setForeground(QBrush(검정색))
                    else:
                        pass

                    if 종가 in call_고가_node_list:
                        self.tableWidget_put.item(i, Option_column.종가.value).setBackground(QBrush(풋종가색))
                        self.tableWidget_put.item(i, Option_column.종가.value).setForeground(QBrush(검정색))
                    else:
                        pass

                    if 종가 in put_저가_node_list:
                        self.tableWidget_put.item(i, Option_column.종가.value).setBackground(QBrush(풋종가색))
                        self.tableWidget_put.item(i, Option_column.종가.value).setForeground(QBrush(검정색))
                    else:
                        pass

                    if 종가 in put_고가_node_list:
                        self.tableWidget_put.item(i, Option_column.종가.value).setBackground(QBrush(풋종가색))
                        self.tableWidget_put.item(i, Option_column.종가.value).setForeground(QBrush(검정색))
                    else:
                        pass    
                else:
                    pass

                if put_node_state['피봇']:

                    피봇 = df_put.at[i, '피봇']

                    if 피봇 in call_저가_node_list:
                        self.tableWidget_put.item(i, Option_column.피봇.value).setBackground(QBrush(풋피봇색))
                        self.tableWidget_put.item(i, Option_column.피봇.value).setForeground(QBrush(검정색))
                    else:
                        pass

                    if 피봇 in call_고가_node_list:
                        self.tableWidget_put.item(i, Option_column.피봇.value).setBackground(QBrush(풋피봇색))
                        self.tableWidget_put.item(i, Option_column.피봇.value).setForeground(QBrush(검정색))
                    else:
                        pass

                    if 피봇 in put_저가_node_list:
                        self.tableWidget_put.item(i, Option_column.피봇.value).setBackground(QBrush(풋피봇색))
                        self.tableWidget_put.item(i, Option_column.피봇.value).setForeground(QBrush(검정색))
                    else:
                        pass

                    if 피봇 in put_고가_node_list:
                        self.tableWidget_put.item(i, Option_column.피봇.value).setBackground(QBrush(풋피봇색))
                        self.tableWidget_put.item(i, Option_column.피봇.value).setForeground(QBrush(검정색))
                    else:
                        pass           
                else:
                    pass

                if put_node_state['시가']:

                    시가 = df_put.at[i, '시가']

                    if 시가 in call_저가_node_list:
                        self.tableWidget_put.item(i, Option_column.시가.value).setBackground(QBrush(풋시가색))
                        self.tableWidget_put.item(i, Option_column.시가.value).setForeground(QBrush(흰색))
                    else:
                        pass

                    if 시가 in call_고가_node_list:
                        self.tableWidget_put.item(i, Option_column.시가.value).setBackground(QBrush(풋시가색))
                        self.tableWidget_put.item(i, Option_column.시가.value).setForeground(QBrush(흰색))
                    else:
                        pass

                    if 시가 in put_저가_node_list:
                        self.tableWidget_put.item(i, Option_column.시가.value).setBackground(QBrush(풋시가색))
                        self.tableWidget_put.item(i, Option_column.시가.value).setForeground(QBrush(흰색))
                    else:
                        pass

                    if 시가 in put_고가_node_list:
                        self.tableWidget_put.item(i, Option_column.시가.value).setBackground(QBrush(풋시가색))
                        self.tableWidget_put.item(i, Option_column.시가.value).setForeground(QBrush(흰색))
                    else:
                        pass       
                else:
                    pass           

                if put_node_state['시가']:

                    시가 = df_put.at[i, '시가']

                    if 시가 in COREVAL:
                        self.tableWidget_put.item(i, Option_column.시가.value).setBackground(QBrush(대맥점색))
                        self.tableWidget_put.item(i, Option_column.시가.value).setForeground(QBrush(검정색))
                    else:
                        pass
                else:
                    pass           
            else:
                if put_node_state['종가']:

                    종가 = df_put.at[i, '종가']

                    if 종가 in call_저가_node_list:
                        self.tableWidget_put.item(i, Option_column.종가.value).setBackground(QBrush(풋종가색))
                        self.tableWidget_put.item(i, Option_column.종가.value).setForeground(QBrush(검정색))
                    else:
                        pass

                    if 종가 in call_고가_node_list:
                        self.tableWidget_put.item(i, Option_column.종가.value).setBackground(QBrush(풋종가색))
                        self.tableWidget_put.item(i, Option_column.종가.value).setForeground(QBrush(검정색))
                    else:
                        pass

                    if 종가 in put_저가_node_list:
                        self.tableWidget_put.item(i, Option_column.종가.value).setBackground(QBrush(풋종가색))
                        self.tableWidget_put.item(i, Option_column.종가.value).setForeground(QBrush(검정색))
                    else:
                        pass

                    if 종가 in put_고가_node_list:
                        self.tableWidget_put.item(i, Option_column.종가.value).setBackground(QBrush(풋종가색))
                        self.tableWidget_put.item(i, Option_column.종가.value).setForeground(QBrush(검정색))
                    else:
                        pass    
                else:
                    pass            

    def put_node_color_clear(self):

        global put_scroll_end_position

        if put_scroll_end_position > option_pairs_count:

            put_scroll_end_position = option_pairs_count
        else:
            pass

        for i in range(put_scroll_begin_position, put_scroll_end_position):
            
            if put_node_state['기준가']:
                self.tableWidget_put.item(i, Option_column.기준가.value).setBackground(QBrush(흰색))
                self.tableWidget_put.item(i, Option_column.기준가.value).setForeground(QBrush(검정색))
            else:
                pass

            if put_node_state['월저']:
                self.tableWidget_put.item(i, Option_column.월저.value).setBackground(QBrush(흰색))
                self.tableWidget_put.item(i, Option_column.월저.value).setForeground(QBrush(검정색))
            else:
                pass

            if put_node_state['월고']:
                self.tableWidget_put.item(i, Option_column.월고.value).setBackground(QBrush(흰색))
                self.tableWidget_put.item(i, Option_column.월고.value).setForeground(QBrush(검정색))
            else:
                pass

            if put_node_state['전저']:
                self.tableWidget_put.item(i, Option_column.전저.value).setBackground(QBrush(흰색))
                self.tableWidget_put.item(i, Option_column.전저.value).setForeground(QBrush(검정색))
            else:
                pass

            if put_node_state['전고']:
                self.tableWidget_put.item(i, Option_column.전고.value).setBackground(QBrush(흰색))
                self.tableWidget_put.item(i, Option_column.전고.value).setForeground(QBrush(검정색))
            else:
                pass

            if put_node_state['종가']:
                self.tableWidget_put.item(i, Option_column.종가.value).setBackground(QBrush(흰색))
                self.tableWidget_put.item(i, Option_column.종가.value).setForeground(QBrush(검정색))
            else:
                pass

            if put_node_state['피봇']:
                self.tableWidget_put.item(i, Option_column.피봇.value).setBackground(QBrush(흰색))
                self.tableWidget_put.item(i, Option_column.피봇.value).setForeground(QBrush(검정색))
            else:
                pass

            if put_node_state['시가']:

                시가 = df_put.at[i, '시가']
                종가 = df_put.at[i, '종가']

                if 시가 > 0:
                    self.tableWidget_put.item(i, Option_column.시가.value).setBackground(QBrush(흰색))

                    if 시가 > 종가:
                        self.tableWidget_put.item(i, Option_column.시가.value).setForeground(QBrush(적색))
                    elif 시가 < 종가:
                        self.tableWidget_put.item(i, Option_column.시가.value).setForeground(QBrush(청색))
                    else:
                        self.tableWidget_put.item(i, Option_column.시가.value).setForeground(QBrush(검정색))
                else:
                    self.tableWidget_put.item(i, Option_column.시가.value).setBackground(QBrush(검정색))
                    self.tableWidget_put.item(i, Option_column.시가.value).setForeground(QBrush(흰색))
            else:
                pass

            if i == ATM_INDEX - 1 or i == ATM_INDEX or i == ATM_INDEX + 1:
                self.tableWidget_put.item(i, Option_column.저가.value).setBackground(QBrush(옅은회색))
                self.tableWidget_put.item(i, Option_column.저가.value).setForeground(QBrush(검정색))

                self.tableWidget_put.item(i, Option_column.고가.value).setBackground(QBrush(옅은회색))
                self.tableWidget_put.item(i, Option_column.고가.value).setForeground(QBrush(검정색))
            else:
                self.tableWidget_put.item(i, Option_column.저가.value).setBackground(QBrush(흰색))
                self.tableWidget_put.item(i, Option_column.저가.value).setForeground(QBrush(검정색))

                self.tableWidget_put.item(i, Option_column.고가.value).setBackground(QBrush(흰색))
                self.tableWidget_put.item(i, Option_column.고가.value).setForeground(QBrush(검정색))

    def put_open_coreval_color_blink(self, blink):

        if self.put_open_list:
            loop_list = self.put_open_list
        else:
            loop_list = self.opt_total_actval_list

        for i in loop_list:

            if i % 10 == 0:
                QApplication.processEvents()
            else:
                pass

            시가 = df_put.at[i, '시가']

            if 시가 in FIXED_COREVAL:

                if blink:
                    self.tableWidget_put.item(i, Option_column.시가.value).setBackground(QBrush(노란색))
                    self.tableWidget_put.item(i, Option_column.시가.value).setForeground(QBrush(적색))                    
                else:
                    self.tableWidget_put.item(i, Option_column.시가.value).setBackground(QBrush(검정색))
                    self.tableWidget_put.item(i, Option_column.시가.value).setForeground(QBrush(노란색))
            else:
                pass
      
    def put_low_coreval_color_blink(self, blink):

        global put_low_node_count, put_low_node_list, put_low_node_txt
        global telegram_send_txt_put_low
        global flag_put_low_in_fixed_coreval, put_low_val_in_fixed_coreval

        dt = datetime.now()

        flag_put_low_in_fixed_coreval = False
        put_low_val_in_fixed_coreval.clear()
        
        if self.put_open_list:
            loop_list = self.put_open_list
        else:
            loop_list = self.opt_total_actval_list

        count = 0
        put_low_node_list = [] 

        put_low_node_old_count = put_low_node_count

        for i in loop_list:

            if i % 10 == 0:
                QApplication.processEvents()
            else:
                pass

            저가 = df_put.at[i, '저가']

            if 저가 in 진성맥점:

                count += 1
                put_low_node_list.append(저가)

                if blink:
                    self.tableWidget_put.item(i, Option_column.저가.value).setBackground(QBrush(대맥점색))
                    self.tableWidget_put.item(i, Option_column.저가.value).setForeground(QBrush(검정색))                                                                     
                else:
                    self.tableWidget_put.item(i, Option_column.저가.value).setBackground(QBrush(검정색))
                    self.tableWidget_put.item(i, Option_column.저가.value).setForeground(QBrush(대맥점색))
            else:
                pass

            if 저가 in FIXED_COREVAL:

                flag_put_low_in_fixed_coreval = True
                put_low_val_in_fixed_coreval.append(저가)

                if blink:
                    self.tableWidget_put.item(i, Option_column.저가.value).setBackground(QBrush(노란색))
                    self.tableWidget_put.item(i, Option_column.저가.value).setForeground(QBrush(적색))                                                                     
                else:
                    self.tableWidget_put.item(i, Option_column.저가.value).setBackground(QBrush(검정색))
                    self.tableWidget_put.item(i, Option_column.저가.value).setForeground(QBrush(노란색))
            else:
                pass

        if put_low_node_list and put_low_node_txt == '':

            if TARGET_MONTH == 'CM':

                put_low_node_txt = "[{0:02d}:{1:02d}:{2:02d}] CM 풋저가 맥점 {3} 발생 P ▲".format(dt.hour, dt.minute, dt.second, put_low_node_list)

            elif TARGET_MONTH == 'NM':

                put_low_node_txt = "[{0:02d}:{1:02d}:{2:02d}] NM 풋저가 맥점 {3} 발생 P ▲".format(dt.hour, dt.minute, dt.second, put_low_node_list)
            else:
                pass
        else:
            put_low_node_txt == ''    

        put_low_node_count = count

        if count == 0:

            telegram_send_txt_put_low = ''

        elif count == 1:
            
            if self.tableWidget_put.horizontalHeaderItem(Option_column.저가.value).text() != '★':
            
                item = QTableWidgetItem('★')
                self.tableWidget_put.setHorizontalHeaderItem(Option_column.저가.value, item)

                self.tableWidget_put.resizeColumnToContents(Option_column.저가.value)
                telegram_send_txt_put_low = ''
            else:
                pass

        elif count == 2:

            if self.tableWidget_put.horizontalHeaderItem(Option_column.저가.value).text() != '★ 2':
            
                item = QTableWidgetItem('★ 2')
                self.tableWidget_put.setHorizontalHeaderItem(Option_column.저가.value, item)

                self.tableWidget_put.resizeColumnToContents(Option_column.저가.value)

                if TARGET_MONTH == 'CM' and put_low_node_count != put_low_node_old_count:

                    telegram_send_txt_put_low = "[{0:02d}:{1:02d}:{2:02d}] CM 풋저가 맥점 ★ 2 발생".format(dt.hour, dt.minute, dt.second)

                elif TARGET_MONTH == 'NM' and put_low_node_count != put_low_node_old_count:

                    telegram_send_txt_put_low = "[{0:02d}:{1:02d}:{2:02d}] NM 풋저가 맥점 ★ 2 발생".format(dt.hour, dt.minute, dt.second)
                else:
                    pass
            else:
                pass

        elif count == 3: 

            if self.tableWidget_put.horizontalHeaderItem(Option_column.저가.value).text() != '★ 3':
            
                item = QTableWidgetItem('★ 3')
                self.tableWidget_put.setHorizontalHeaderItem(Option_column.저가.value, item)

                self.tableWidget_put.resizeColumnToContents(Option_column.저가.value)

                if TARGET_MONTH == 'CM' and put_low_node_count != put_low_node_old_count:

                    telegram_send_txt_put_low = "[{0:02d}:{1:02d}:{2:02d}] CM 풋저가 맥점 ★ 3 발생".format(dt.hour, dt.minute, dt.second)

                elif TARGET_MONTH == 'NM' and put_low_node_count != put_low_node_old_count:

                    telegram_send_txt_put_low = "[{0:02d}:{1:02d}:{2:02d}] NM 풋저가 맥점 ★ 3 발생".format(dt.hour, dt.minute, dt.second)
                else:
                    pass
            else:
                pass

        else:

            if self.tableWidget_put.horizontalHeaderItem(Option_column.저가.value).text() != '★ +':
            
                item = QTableWidgetItem('★ +')
                self.tableWidget_put.setHorizontalHeaderItem(Option_column.저가.value, item)

                self.tableWidget_put.resizeColumnToContents(Option_column.저가.value)

                if TARGET_MONTH == 'CM' and put_low_node_count != put_low_node_old_count:

                    telegram_send_txt_put_low = "[{0:02d}:{1:02d}:{2:02d}] CM 풋저가 맥점 ★ + 발생".format(dt.hour, dt.minute, dt.second)

                elif TARGET_MONTH == 'NM' and put_low_node_count != put_low_node_old_count:

                    telegram_send_txt_put_low = "[{0:02d}:{1:02d}:{2:02d}] NM 풋저가 맥점 ★ + 발생".format(dt.hour, dt.minute, dt.second)
                else:
                    pass
            else:
                pass

    def put_high_coreval_color_blink(self, blink):

        global put_high_node_count, put_high_node_list, put_high_node_txt
        global telegram_send_txt_put_high
        global flag_put_high_in_fixed_coreval, put_high_val_in_fixed_coreval

        dt = datetime.now()

        flag_put_high_in_fixed_coreval = False
        put_high_val_in_fixed_coreval.clear()

        if self.put_open_list:
            loop_list = self.put_open_list
        else:
            loop_list = self.opt_total_actval_list

        count = 0
        put_high_node_list = []

        put_high_node_old_count = put_high_node_count

        for i in loop_list:

            if i % 10 == 0:
                QApplication.processEvents()
            else:
                pass

            고가 = df_put.at[i, '고가']

            if 고가 in 진성맥점:

                count += 1
                put_high_node_list.append(고가)

                if blink:
                    self.tableWidget_put.item(i, Option_column.고가.value).setBackground(QBrush(대맥점색))
                    self.tableWidget_put.item(i, Option_column.고가.value).setForeground(QBrush(검정색))                    
                else:
                    self.tableWidget_put.item(i, Option_column.고가.value).setBackground(QBrush(검정색))
                    self.tableWidget_put.item(i, Option_column.고가.value).setForeground(QBrush(대맥점색))                 
            else:
                pass

            if 고가 in FIXED_COREVAL:

                flag_put_high_in_fixed_coreval = True
                put_high_val_in_fixed_coreval.append(고가)

                if blink:
                    self.tableWidget_put.item(i, Option_column.고가.value).setBackground(QBrush(노란색))
                    self.tableWidget_put.item(i, Option_column.고가.value).setForeground(QBrush(적색))                    
                else:
                    self.tableWidget_put.item(i, Option_column.고가.value).setBackground(QBrush(검정색))
                    self.tableWidget_put.item(i, Option_column.고가.value).setForeground(QBrush(노란색))
            else:
                pass

        if put_high_node_list and put_high_node_txt == '':

            if TARGET_MONTH == 'CM': 

                put_high_node_txt = "[{0:02d}:{1:02d}:{2:02d}] CM 풋고가 맥점 {3} 발생 P ▼".format(dt.hour, dt.minute, dt.second, put_high_node_list)

            elif TARGET_MONTH == 'NM':

                put_high_node_txt = "[{0:02d}:{1:02d}:{2:02d}] NM 풋고가 맥점 {3} 발생 P ▼".format(dt.hour, dt.minute, dt.second, put_high_node_list)
            else:
                pass
        else:
            put_high_node_txt == ''

        put_high_node_count = count

        if count == 0:

            telegram_send_txt_put_high = ''

        elif count == 1:
            
            if self.tableWidget_put.horizontalHeaderItem(Option_column.고가.value).text() != '★':
            
                item = QTableWidgetItem('★')
                self.tableWidget_put.setHorizontalHeaderItem(Option_column.고가.value, item)

                self.tableWidget_put.resizeColumnToContents(Option_column.고가.value)

                telegram_send_txt_put_high = ''
            else:
                pass

        elif count == 2:

            if self.tableWidget_put.horizontalHeaderItem(Option_column.고가.value).text() != '★ 2':
            
                item = QTableWidgetItem('★ 2')
                self.tableWidget_put.setHorizontalHeaderItem(Option_column.고가.value, item)

                self.tableWidget_put.resizeColumnToContents(Option_column.고가.value)

                if TARGET_MONTH == 'CM' and put_high_node_count != put_high_node_old_count:

                    telegram_send_txt_put_high = "[{0:02d}:{1:02d}:{2:02d}] CM 풋고가 맥점 ★ 2 발생".format(dt.hour, dt.minute, dt.second)

                elif TARGET_MONTH == 'NM' and put_high_node_count != put_high_node_old_count:

                    telegram_send_txt_put_high = "[{0:02d}:{1:02d}:{2:02d}] NM 풋고가 맥점 ★ 2 발생".format(dt.hour, dt.minute, dt.second)
                else:
                    pass
            else:
                pass

        elif count == 3: 

            if self.tableWidget_put.horizontalHeaderItem(Option_column.고가.value).text() != '★ 3':
            
                item = QTableWidgetItem('★ 3')
                self.tableWidget_put.setHorizontalHeaderItem(Option_column.고가.value, item)

                self.tableWidget_put.resizeColumnToContents(Option_column.고가.value)

                if TARGET_MONTH == 'CM' and put_high_node_count != put_high_node_old_count:

                    telegram_send_txt_put_high = "[{0:02d}:{1:02d}:{2:02d}] CM 풋고가 맥점 ★ 3 발생".format(dt.hour, dt.minute, dt.second)

                elif TARGET_MONTH == 'NM' and put_high_node_count != put_high_node_old_count:

                    telegram_send_txt_put_high = "[{0:02d}:{1:02d}:{2:02d}] NM 풋고가 맥점 ★ 3 발생".format(dt.hour, dt.minute, dt.second)
                else:
                    pass
            else:
                pass
        else:

            if self.tableWidget_put.horizontalHeaderItem(Option_column.고가.value).text() != '★ +':
            
                item = QTableWidgetItem('★ +')
                self.tableWidget_put.setHorizontalHeaderItem(Option_column.고가.value, item)

                self.tableWidget_put.resizeColumnToContents(Option_column.고가.value)

                if TARGET_MONTH == 'CM' and put_high_node_count != put_high_node_old_count:

                    telegram_send_txt_put_high = "[{0:02d}:{1:02d}:{2:02d}] CM 풋고가 맥점 ★ + 발생".format(dt.hour, dt.minute, dt.second)

                elif TARGET_MONTH == 'NM' and put_high_node_count != put_high_node_old_count:

                    telegram_send_txt_put_high = "[{0:02d}:{1:02d}:{2:02d}] NM 풋고가 맥점 ★ + 발생".format(dt.hour, dt.minute, dt.second)
                else:
                    pass
            else:
                pass
    
    def put_coreval_color_update(self):

        global flag_put_low_coreval, flag_put_high_coreval
        global put_low_node_count, put_high_node_count
        global telegram_send_txt_put_low, telegram_send_txt_put_high
        global flag_put_low_in_fixed_coreval, flag_put_high_in_fixed_coreval

        dt = datetime.now()
        
        flag_put_low_coreval = False
        flag_put_high_coreval = False

        flag_put_low_in_fixed_coreval = False
        flag_put_high_in_fixed_coreval = False

        item = QTableWidgetItem('저가')
        self.tableWidget_put.setHorizontalHeaderItem(Option_column.저가.value, item)

        item = QTableWidgetItem('고가')
        self.tableWidget_put.setHorizontalHeaderItem(Option_column.고가.value, item)

        if self.put_open_list:
            loop_list = self.put_open_list
        else:
            loop_list = self.opt_total_actval_list

        count_low = 0
        count_high = 0

        for i in loop_list:

            if i % 10 == 0:
                QApplication.processEvents()
            else:
                pass

            시가 = df_put.at[i, '시가']
            저가 = df_put.at[i, '저가']
            고가 = df_put.at[i, '고가']

            if True:

                if 시가 in COREVAL:
                    self.tableWidget_put.item(i, Option_column.시가.value).setBackground(QBrush(대맥점색))
                    self.tableWidget_put.item(i, Option_column.시가.value).setForeground(QBrush(검정색))
                else:
                    pass

                if 저가 in COREVAL:
                    self.tableWidget_put.item(i, Option_column.저가.value).setBackground(QBrush(대맥점색))
                    self.tableWidget_put.item(i, Option_column.저가.value).setForeground(QBrush(검정색))
                else:
                    pass
                
                if 저가 in 진성맥점:

                    self.tableWidget_put.item(i, Option_column.저가.value).setBackground(QBrush(검정색))
                    self.tableWidget_put.item(i, Option_column.저가.value).setForeground(QBrush(대맥점색))
                    
                    txt = '[{0:02d}:{1:02d}:{2:02d}] put low 진성맥점 = {3}, low = {4}\r'.format(dt.hour, dt.minute, dt.second, 진성맥점, 저가)
                    self.textBrowser.append(txt)

                    flag_put_low_coreval = True

                    count_low += 1

                else:
                    pass

                if 저가 in FIXED_COREVAL:
                    flag_put_low_in_fixed_coreval = True
                else:
                    pass

                if 고가 in COREVAL:

                    self.tableWidget_put.item(i, Option_column.고가.value).setBackground(QBrush(대맥점색))
                    self.tableWidget_put.item(i, Option_column.고가.value).setForeground(QBrush(검정색))
                else:
                    pass
                
                if 고가 in 진성맥점:

                    self.tableWidget_put.item(i, Option_column.고가.value).setBackground(QBrush(검정색))
                    self.tableWidget_put.item(i, Option_column.고가.value).setForeground(QBrush(대맥점색))
                    
                    txt = '[{0:02d}:{1:02d}:{2:02d}] put high 진성맥점 = {3}, high = {4}\r'.format(dt.hour, dt.minute, dt.second, 진성맥점, 고가)
                    self.textBrowser.append(txt)

                    flag_put_high_coreval = True

                    count_high += 1

                else:
                    pass

                if 고가 in FIXED_COREVAL:
                    flag_put_high_in_fixed_coreval = True
                else:
                    pass
            else:
                pass

        put_low_node_count = count_low

        if count_low == 0:

            telegram_send_txt_put_low = ''  

        elif count_low == 1:              

            item = QTableWidgetItem('★')
            self.tableWidget_put.setHorizontalHeaderItem(Option_column.저가.value, item)
            telegram_send_txt_put_low = '' 

        elif count_low == 2:

            item = QTableWidgetItem('★ 2')
            self.tableWidget_put.setHorizontalHeaderItem(Option_column.저가.value, item)

        elif count_low == 3:

            item = QTableWidgetItem('★ 3')
            self.tableWidget_put.setHorizontalHeaderItem(Option_column.저가.value, item)
        else:
            item = QTableWidgetItem('★ +')
            self.tableWidget_put.setHorizontalHeaderItem(Option_column.저가.value, item)

        put_high_node_count = count_high

        if count_high == 0:

            telegram_send_txt_put_high = ''

        elif count_high == 1:          

            item = QTableWidgetItem('★')
            self.tableWidget_put.setHorizontalHeaderItem(Option_column.고가.value, item)
            telegram_send_txt_put_high = ''

        elif count_high == 2:

            item = QTableWidgetItem('★ 2')
            self.tableWidget_put.setHorizontalHeaderItem(Option_column.고가.value, item)

        elif count_high == 3:

            item = QTableWidgetItem('★ 3')
            self.tableWidget_put.setHorizontalHeaderItem(Option_column.고가.value, item)
        else:
            item = QTableWidgetItem('★ +')
            self.tableWidget_put.setHorizontalHeaderItem(Option_column.고가.value, item)
        
    def put_low_coreval_color_update(self):

        global flag_put_low_coreval
        global flag_put_low_in_fixed_coreval

        flag_put_low_coreval = False
        flag_put_low_in_fixed_coreval = False

        if self.put_open_list:
            loop_list = self.put_open_list
        else:
            loop_list = self.opt_total_actval_list

        for i in loop_list:

            if i % 10 == 0:
                QApplication.processEvents()
            else:
                pass

            시가 = df_put.at[i, '시가']
            저가 = df_put.at[i, '저가']

            if True:

                if 시가 in COREVAL:
                    self.tableWidget_put.item(i, Option_column.시가.value).setBackground(QBrush(대맥점색))
                    self.tableWidget_put.item(i, Option_column.시가.value).setForeground(QBrush(검정색))
                else:
                    pass

                if 저가 in COREVAL:
                    self.tableWidget_put.item(i, Option_column.저가.value).setBackground(QBrush(대맥점색))
                    self.tableWidget_put.item(i, Option_column.저가.value).setForeground(QBrush(검정색))
                else:
                    pass
                
                if 저가 in 진성맥점:
                    flag_put_low_coreval = True
                else:
                    pass

                if 저가 in FIXED_COREVAL:
                    flag_put_low_in_fixed_coreval = True
                else:
                    pass                
            else:
                pass 

    def put_high_coreval_color_update(self):

        global flag_put_high_coreval
        global flag_put_high_in_fixed_coreval

        flag_put_high_coreval = False
        flag_put_high_in_fixed_coreval = False

        if self.put_open_list:
            loop_list = self.put_open_list
        else:
            loop_list = self.opt_total_actval_list

        for i in loop_list:

            if i % 10 == 0:
                QApplication.processEvents()
            else:
                pass

            시가 = df_put.at[i, '시가']
            고가 = df_put.at[i, '고가']

            if True:

                if 시가 in COREVAL:
                    self.tableWidget_put.item(i, Option_column.시가.value).setBackground(QBrush(대맥점색))
                    self.tableWidget_put.item(i, Option_column.시가.value).setForeground(QBrush(검정색))
                else:
                    pass             

                if 고가 in COREVAL:
                    self.tableWidget_put.item(i, Option_column.고가.value).setBackground(QBrush(대맥점색))
                    self.tableWidget_put.item(i, Option_column.고가.value).setForeground(QBrush(검정색))
                else:
                    pass
                
                if 고가 in 진성맥점:
                    flag_put_high_coreval = True
                else:
                    pass

                if 고가 in FIXED_COREVAL:
                    flag_put_high_in_fixed_coreval = True
                else:
                    pass
            else:
                pass
    
    def kp200_node_color_clear(self):

        self.tableWidget_fut.item(2, Futures_column.전저.value).setBackground(QBrush(흰색))
        self.tableWidget_fut.item(2, Futures_column.전저.value).setForeground(QBrush(검정색))

        self.tableWidget_fut.item(2, Futures_column.전고.value).setBackground(QBrush(흰색))
        self.tableWidget_fut.item(2, Futures_column.전고.value).setForeground(QBrush(검정색))

        self.tableWidget_fut.item(2, Futures_column.종가.value).setBackground(QBrush(흰색))
        self.tableWidget_fut.item(2, Futures_column.종가.value).setForeground(QBrush(검정색))

        self.tableWidget_fut.item(2, Futures_column.피봇.value).setBackground(QBrush(흰색))
        self.tableWidget_fut.item(2, Futures_column.피봇.value).setForeground(QBrush(검정색))

        self.tableWidget_fut.item(2, Futures_column.시가.value).setBackground(QBrush(흰색))

        if KP200_당일시가 > 0 and KP200_전일종가 > 0:
            if KP200_당일시가 > KP200_전일종가:
                self.tableWidget_fut.item(2, Futures_column.시가.value).setForeground(QBrush(적색))
            elif KP200_당일시가 < KP200_전일종가:
                self.tableWidget_fut.item(2, Futures_column.시가.value).setForeground(QBrush(청색))
            else:
                self.tableWidget_fut.item(2, Futures_column.시가.value).setForeground(QBrush(검정색))
        else:
            self.tableWidget_fut.item(2, Futures_column.시가.value).setForeground(QBrush(검정색))
        
        self.tableWidget_fut.item(2, Futures_column.저가.value).setBackground(QBrush(옅은회색))
        self.tableWidget_fut.item(2, Futures_column.저가.value).setForeground(QBrush(검정색))

        self.tableWidget_fut.item(2, Futures_column.고가.value).setBackground(QBrush(옅은회색))
        self.tableWidget_fut.item(2, Futures_column.고가.value).setForeground(QBrush(검정색))            

    def fut_cm_node_color_clear(self):

        self.tableWidget_fut.item(1, Futures_column.전저.value).setBackground(QBrush(흰색))
        self.tableWidget_fut.item(1, Futures_column.전저.value).setForeground(QBrush(검정색))

        self.tableWidget_fut.item(1, Futures_column.전고.value).setBackground(QBrush(흰색))
        self.tableWidget_fut.item(1, Futures_column.전고.value).setForeground(QBrush(검정색))

        self.tableWidget_fut.item(1, Futures_column.종가.value).setBackground(QBrush(흰색))
        self.tableWidget_fut.item(1, Futures_column.종가.value).setForeground(QBrush(검정색))

        self.tableWidget_fut.item(1, Futures_column.피봇.value).setBackground(QBrush(흰색))
        self.tableWidget_fut.item(1, Futures_column.피봇.value).setForeground(QBrush(검정색))

        self.tableWidget_fut.item(1, Futures_column.시가.value).setBackground(QBrush(흰색))
        self.tableWidget_fut.item(1, Futures_column.시가.value).setForeground(QBrush(검정색))
        
        self.tableWidget_fut.item(1, Futures_column.저가.value).setBackground(QBrush(옅은회색))
        self.tableWidget_fut.item(1, Futures_column.저가.value).setForeground(QBrush(검정색))

        self.tableWidget_fut.item(1, Futures_column.고가.value).setBackground(QBrush(옅은회색))
        self.tableWidget_fut.item(1, Futures_column.고가.value).setForeground(QBrush(검정색))            

    def fut_nm_node_color_clear(self):

        self.tableWidget_fut.item(0, Futures_column.전저.value).setBackground(QBrush(흰색))
        self.tableWidget_fut.item(0, Futures_column.전저.value).setForeground(QBrush(검정색))

        self.tableWidget_fut.item(0, Futures_column.전고.value).setBackground(QBrush(흰색))
        self.tableWidget_fut.item(0, Futures_column.전고.value).setForeground(QBrush(검정색))

        self.tableWidget_fut.item(0, Futures_column.종가.value).setBackground(QBrush(흰색))
        self.tableWidget_fut.item(0, Futures_column.종가.value).setForeground(QBrush(검정색))

        self.tableWidget_fut.item(0, Futures_column.피봇.value).setBackground(QBrush(흰색))
        self.tableWidget_fut.item(0, Futures_column.피봇.value).setForeground(QBrush(검정색))

        self.tableWidget_fut.item(0, Futures_column.시가.value).setBackground(QBrush(흰색))
        self.tableWidget_fut.item(0, Futures_column.시가.value).setForeground(QBrush(검정색))
        
        self.tableWidget_fut.item(0, Futures_column.저가.value).setBackground(QBrush(옅은회색))
        self.tableWidget_fut.item(0, Futures_column.저가.value).setForeground(QBrush(검정색))

        self.tableWidget_fut.item(0, Futures_column.고가.value).setBackground(QBrush(옅은회색))
        self.tableWidget_fut.item(0, Futures_column.고가.value).setForeground(QBrush(검정색)) 

    def kp200_low_node_coloring(self):

        dt = datetime.now()

        global flag_kp200_low_node, kp200_low_node_time, kp200_low_node_txt  

        flag_kp200_low_node = False    
                
        for i in range(10):

            if self.is_within_n_tick(self.kp200_realdata['저가'], KP200_COREVAL[i], 10):

                if not flag_kp200_low_node:
                
                    self.tableWidget_fut.item(2, Futures_column.저가.value).setBackground(QBrush(대맥점색))
                    self.tableWidget_fut.item(2, Futures_column.저가.value).setForeground(QBrush(검정색))

                    kp200_low_node_txt = "[{0:02d}:{1:02d}:{2:02d}] kp200 저가맥점 {3:.2f} 발생 !!!\r".format(dt.hour, dt.minute, dt.second, self.kp200_realdata['저가'])
                    self.textBrowser.append(kp200_low_node_txt)
                    self.parent.textBrowser.append(kp200_low_node_txt)

                    flag_kp200_low_node = True
                else:
                    pass                
            else:
                pass

    def kp200_high_node_coloring(self):  

        dt = datetime.now() 

        global flag_kp200_high_node, kp200_high_node_time, kp200_high_node_txt 

        flag_kp200_high_node = False    
                
        for i in range(10):

            if self.is_within_n_tick(self.kp200_realdata['고가'], KP200_COREVAL[i], 10):

                if not flag_kp200_high_node:
                
                    self.tableWidget_fut.item(2, Futures_column.고가.value).setBackground(QBrush(대맥점색))
                    self.tableWidget_fut.item(2, Futures_column.고가.value).setForeground(QBrush(검정색))

                    kp200_high_node_txt = "[{0:02d}:{1:02d}:{2:02d}] kp200 고가맥점 {3:.2f} 발생 !!!\r".format(dt.hour, dt.minute, dt.second, self.kp200_realdata['고가'])
                    self.textBrowser.append(kp200_high_node_txt)
                    self.parent.textBrowser.append(kp200_high_node_txt)

                    flag_kp200_high_node = True
                else:
                    pass                
            else:
                pass

    def fut_cm_oloh_check(self):

        global flag_fut_cm_ol, flag_fut_cm_oh, fut_cm_oloh_txt, plot_drate_scale_factor, flag_cm_drate_scale_factor_set

        dt = datetime.now()

        # FUT OL/OH
        if self.is_within_n_tick(근월물_선물_시가, 근월물_선물_저가, 10) and not self.is_within_n_tick(근월물_선물_시가, 근월물_선물_고가, 10):                            

            if not flag_fut_cm_ol:

                fut_cm_oloh_txt = "[{0:02d}:{1:02d}:{2:02d}] CM 선물 OL ▲\r".format(dt.hour, dt.minute, dt.second)
                self.textBrowser.append(fut_cm_oloh_txt)
                self.parent.textBrowser.append(fut_cm_oloh_txt)

                item = QTableWidgetItem('▲')
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(적색))
                item.setForeground(QBrush(흰색))

                self.tableWidget_fut.setItem(1, Futures_column.OLOH.value, item)                

                self.tableWidget_fut.item(1, Futures_column.시가.value).setBackground(QBrush(적색))
                self.tableWidget_fut.item(1, Futures_column.시가.value).setForeground(QBrush(흰색))
                self.tableWidget_fut.item(1, Futures_column.저가.value).setBackground(QBrush(적색))
                self.tableWidget_fut.item(1, Futures_column.저가.value).setForeground(QBrush(흰색))

                flag_fut_cm_ol = True
            else:
                pass            

        elif not self.is_within_n_tick(근월물_선물_시가, 근월물_선물_저가, 10) and self.is_within_n_tick(근월물_선물_시가, 근월물_선물_고가, 10):                            

            if not flag_fut_cm_oh:

                fut_cm_oloh_txt = "[{0:02d}:{1:02d}:{2:02d}] CM 선물 OH ▼\r".format(dt.hour, dt.minute, dt.second)
                self.textBrowser.append(fut_cm_oloh_txt)
                self.parent.textBrowser.append(fut_cm_oloh_txt)

                item = QTableWidgetItem('▼')
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(청색))
                item.setForeground(QBrush(흰색))

                self.tableWidget_fut.setItem(1, Futures_column.OLOH.value, item)                

                self.tableWidget_fut.item(1, Futures_column.시가.value).setBackground(QBrush(청색))
                self.tableWidget_fut.item(1, Futures_column.시가.value).setForeground(QBrush(흰색))
                self.tableWidget_fut.item(1, Futures_column.고가.value).setBackground(QBrush(청색))
                self.tableWidget_fut.item(1, Futures_column.고가.value).setForeground(QBrush(흰색))

                flag_fut_cm_oh = True
            else:
                pass
        else:

            if flag_fut_cm_ol:
            
                flag_fut_cm_oh = False
                fut_cm_oloh_txt = ''

                item = QTableWidgetItem('-')
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(검정색))
                item.setForeground(QBrush(흰색))

                self.tableWidget_fut.setItem(1, Futures_column.OLOH.value, item)

                self.tableWidget_fut.item(1, Futures_column.시가.value).setBackground(QBrush(흰색))

                if 근월물_선물_시가 > 근월물_선물_종가:
                    self.tableWidget_fut.item(1, Futures_column.시가.value).setForeground(QBrush(적색))
                elif 근월물_선물_시가 < 근월물_선물_종가:
                    self.tableWidget_fut.item(1, Futures_column.시가.value).setForeground(QBrush(청색))
                else:
                    self.tableWidget_fut.item(1, Futures_column.시가.value).setForeground(QBrush(검정색))

                self.tableWidget_fut.item(1, Futures_column.저가.value).setBackground(QBrush(옅은회색))
                self.tableWidget_fut.item(1, Futures_column.저가.value).setForeground(QBrush(검정색))
                self.tableWidget_fut.item(1, Futures_column.고가.value).setBackground(QBrush(옅은회색))
                self.tableWidget_fut.item(1, Futures_column.고가.value).setForeground(QBrush(검정색))

                flag_fut_cm_ol = False
            else:
                pass

            if flag_fut_cm_oh:
                
                fut_cm_oloh_txt = ''

                item = QTableWidgetItem('-')
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(검정색))
                item.setForeground(QBrush(흰색))

                self.tableWidget_fut.setItem(1, Futures_column.OLOH.value, item)

                self.tableWidget_fut.item(1, Futures_column.시가.value).setBackground(QBrush(흰색))

                if 근월물_선물_시가 > 근월물_선물_종가:
                    self.tableWidget_fut.item(1, Futures_column.시가.value).setForeground(QBrush(적색))
                elif 근월물_선물_시가 < 근월물_선물_종가:
                    self.tableWidget_fut.item(1, Futures_column.시가.value).setForeground(QBrush(청색))
                else:
                    self.tableWidget_fut.item(1, Futures_column.시가.value).setForeground(QBrush(검정색))

                self.tableWidget_fut.item(1, Futures_column.저가.value).setBackground(QBrush(옅은회색))
                self.tableWidget_fut.item(1, Futures_column.저가.value).setForeground(QBrush(검정색))
                self.tableWidget_fut.item(1, Futures_column.고가.value).setBackground(QBrush(옅은회색))
                self.tableWidget_fut.item(1, Futures_column.고가.value).setForeground(QBrush(검정색))

                flag_fut_cm_oh = False
            else:
                pass

        # Scale Factor 계산
        if TARGET_MONTH == 'CM' and not flag_cm_drate_scale_factor_set:

            if CALL_ATM_DRATE_REFERENCE:
                drate_reference = 콜_등가_시가등락율
            else:
                drate_reference = 풋_등가_시가등락율

            if abs(근월물_선물_시가등락율) > 0 and abs(drate_reference) > 0:

                plot_drate_scale_factor = int(abs(drate_reference / 근월물_선물_시가등락율))

                if plot_drate_scale_factor > 100:
                    plot_drate_scale_factor = int(plot_drate_scale_factor / 10)
                else:
                    pass

                item = QTableWidgetItem("{0}".format(plot_drate_scale_factor))
                item.setTextAlignment(Qt.AlignCenter)
                self.tableWidget_fut.setItem(2, Futures_column.OLOH.value, item)

                flag_cm_drate_scale_factor_set = True
            else:
                plot_drate_scale_factor = int(SP500_전일종가 / FUT_전일종가)            
        else:
            pass            
    
    def fut_nm_oloh_check(self):

        global flag_fut_nm_ol, flag_fut_nm_oh, fut_nm_oloh_txt, plot_drate_scale_factor, flag_nm_drate_scale_factor_set

        dt = datetime.now()

        # FUT OL/OH
        if self.is_within_n_tick(차월물_선물_시가, 차월물_선물_저가, 10) and not self.is_within_n_tick(차월물_선물_시가, 차월물_선물_고가, 10):            
            
            if not flag_fut_nm_ol:

                if TARGET_MONTH == 'CM':
                    txt = 'NM 상승'
                    self.parent.speaker.setText(txt)

                flag_fut_nm_ol = True

                fut_nm_oloh_txt = "[{0:02d}:{1:02d}:{2:02d}] NM 선물 OL ▲\r".format(dt.hour, dt.minute, dt.second)
                self.textBrowser.append(fut_nm_oloh_txt)
                self.parent.textBrowser.append(fut_nm_oloh_txt)

                item = QTableWidgetItem('▲')
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(적색))
                item.setForeground(QBrush(흰색))

                self.tableWidget_fut.setItem(0, Futures_column.OLOH.value, item)

                self.tableWidget_fut.item(0, Futures_column.시가.value).setBackground(QBrush(적색))
                self.tableWidget_fut.item(0, Futures_column.시가.value).setForeground(QBrush(흰색))
                self.tableWidget_fut.item(0, Futures_column.저가.value).setBackground(QBrush(적색))
                self.tableWidget_fut.item(0, Futures_column.저가.value).setForeground(QBrush(흰색))
            else:
                pass                                

        elif not self.is_within_n_tick(차월물_선물_시가, 차월물_선물_저가, 10) and self.is_within_n_tick(차월물_선물_시가, 차월물_선물_고가, 10):

            if not flag_fut_nm_oh:

                if TARGET_MONTH == 'CM':
                    txt = 'NM 하강'
                    self.parent.speaker.setText(txt)

                flag_fut_nm_oh = True

                fut_nm_oloh_txt = "[{0:02d}:{1:02d}:{2:02d}] NM 선물 OH ▼\r".format(dt.hour, dt.minute, dt.second)
                self.textBrowser.append(fut_nm_oloh_txt)
                self.parent.textBrowser.append(fut_nm_oloh_txt)

                item = QTableWidgetItem('▼')
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(청색))
                item.setForeground(QBrush(흰색))

                self.tableWidget_fut.setItem(0, Futures_column.OLOH.value, item)

                self.tableWidget_fut.item(0, Futures_column.시가.value).setBackground(QBrush(청색))
                self.tableWidget_fut.item(0, Futures_column.시가.value).setForeground(QBrush(흰색))
                self.tableWidget_fut.item(0, Futures_column.고가.value).setBackground(QBrush(청색))
                self.tableWidget_fut.item(0, Futures_column.고가.value).setForeground(QBrush(흰색))
            else:
                pass                           
        else:

            if flag_fut_nm_ol:

                flag_fut_nm_ol = False
                fut_nm_oloh_txt = ''

                item = QTableWidgetItem('-')
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(검정색))
                item.setForeground(QBrush(흰색))

                self.tableWidget_fut.setItem(0, Futures_column.OLOH.value, item)

                self.tableWidget_fut.item(0, Futures_column.시가.value).setBackground(QBrush(흰색))

                if 차월물_선물_시가 > 차월물_선물_종가:
                    self.tableWidget_fut.item(0, Futures_column.시가.value).setForeground(QBrush(적색))
                elif 차월물_선물_시가 < 차월물_선물_종가:
                    self.tableWidget_fut.item(0, Futures_column.시가.value).setForeground(QBrush(청색))
                else:
                    self.tableWidget_fut.item(0, Futures_column.시가.value).setForeground(QBrush(검정색))

                self.tableWidget_fut.item(0, Futures_column.저가.value).setBackground(QBrush(옅은회색))
                self.tableWidget_fut.item(0, Futures_column.저가.value).setForeground(QBrush(검정색))
                self.tableWidget_fut.item(0, Futures_column.고가.value).setBackground(QBrush(옅은회색))
                self.tableWidget_fut.item(0, Futures_column.고가.value).setForeground(QBrush(검정색))
            else:
                pass

            if flag_fut_nm_oh:

                flag_fut_nm_oh = False
                fut_nm_oloh_txt = ''

                item = QTableWidgetItem('-')
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(검정색))
                item.setForeground(QBrush(흰색))

                self.tableWidget_fut.setItem(0, Futures_column.OLOH.value, item)

                self.tableWidget_fut.item(0, Futures_column.시가.value).setBackground(QBrush(흰색))

                if 차월물_선물_시가 > 차월물_선물_종가:
                    self.tableWidget_fut.item(0, Futures_column.시가.value).setForeground(QBrush(적색))
                elif 차월물_선물_시가 < 차월물_선물_종가:
                    self.tableWidget_fut.item(0, Futures_column.시가.value).setForeground(QBrush(청색))
                else:
                    self.tableWidget_fut.item(0, Futures_column.시가.value).setForeground(QBrush(검정색))

                self.tableWidget_fut.item(0, Futures_column.저가.value).setBackground(QBrush(옅은회색))
                self.tableWidget_fut.item(0, Futures_column.저가.value).setForeground(QBrush(검정색))
                self.tableWidget_fut.item(0, Futures_column.고가.value).setBackground(QBrush(옅은회색))
                self.tableWidget_fut.item(0, Futures_column.고가.value).setForeground(QBrush(검정색))
            else:
                pass            
        
        # Scale Factor 계산
        if TARGET_MONTH == 'NM' and not flag_nm_drate_scale_factor_set:

            if CALL_ATM_DRATE_REFERENCE:
                drate_reference = 콜_등가_시가등락율
            else:
                drate_reference = 풋_등가_시가등락율

            if abs(차월물_선물_시가등락율) > 0 and abs(drate_reference) > 0:

                plot_drate_scale_factor = int(abs(drate_reference / 차월물_선물_시가등락율))

                if plot_drate_scale_factor > 100:
                    plot_drate_scale_factor = int(plot_drate_scale_factor / 10)
                else:
                    pass

                item = QTableWidgetItem("{0}".format(plot_drate_scale_factor))
                item.setTextAlignment(Qt.AlignCenter)
                self.tableWidget_fut.setItem(2, Futures_column.OLOH.value, item)

                flag_nm_drate_scale_factor_set = True
            else:
                plot_drate_scale_factor = int(SP500_전일종가 / FUT_전일종가)            
        else:
            pass
        
    def kp200_node_coloring(self):

        dt = datetime.now()
                
        # 전저, 전고, 종가, 피봇 컬러링
        if self.is_within_n_tick(KP200_전저, self.kp200_realdata['저가'], 10):

            self.tableWidget_fut.item(2, Futures_column.전저.value).setBackground(QBrush(콜전저색))
            self.tableWidget_fut.item(2, Futures_column.전저.value).setForeground(QBrush(검정색))
            self.tableWidget_fut.item(2, Futures_column.저가.value).setBackground(QBrush(콜전저색))
            self.tableWidget_fut.item(2, Futures_column.저가.value).setForeground(QBrush(검정색))                
        else:
            pass

        if self.is_within_n_tick(KP200_전고, self.kp200_realdata['저가'], 10):

            self.tableWidget_fut.item(2, Futures_column.전고.value).setBackground(QBrush(콜전고색))
            self.tableWidget_fut.item(2, Futures_column.전고.value).setForeground(QBrush(검정색))
            self.tableWidget_fut.item(2, Futures_column.저가.value).setBackground(QBrush(콜전고색))
            self.tableWidget_fut.item(2, Futures_column.저가.value).setForeground(QBrush(검정색))                
        else:
            pass

        if self.is_within_n_tick(KP200_전일종가, self.kp200_realdata['저가'], 10):

            self.tableWidget_fut.item(2, Futures_column.종가.value).setBackground(QBrush(콜종가색))
            self.tableWidget_fut.item(2, Futures_column.종가.value).setForeground(QBrush(검정색))
            self.tableWidget_fut.item(2, Futures_column.저가.value).setBackground(QBrush(콜종가색))
            self.tableWidget_fut.item(2, Futures_column.저가.value).setForeground(QBrush(검정색))                
        else:
            pass

        if kp200_피봇 > 0:

            if self.is_within_n_tick(kp200_피봇, self.kp200_realdata['저가'], 10):

                self.tableWidget_fut.item(2, Futures_column.피봇.value).setBackground(QBrush(콜피봇색))
                self.tableWidget_fut.item(2, Futures_column.피봇.value).setForeground(QBrush(검정색))
                self.tableWidget_fut.item(2, Futures_column.저가.value).setBackground(QBrush(콜피봇색))
                self.tableWidget_fut.item(2, Futures_column.저가.value).setForeground(QBrush(검정색))                    
            else:
                pass
        else:
            pass        

        if self.is_within_n_tick(KP200_전저, self.kp200_realdata['고가'], 10):

            self.tableWidget_fut.item(2, Futures_column.전저.value).setBackground(QBrush(콜전저색))
            self.tableWidget_fut.item(2, Futures_column.전저.value).setForeground(QBrush(검정색))
            self.tableWidget_fut.item(2, Futures_column.고가.value).setBackground(QBrush(콜전저색))
            self.tableWidget_fut.item(2, Futures_column.고가.value).setForeground(QBrush(검정색))                
        else:
            pass        

        if self.is_within_n_tick(KP200_전고, self.kp200_realdata['고가'], 10):

            self.tableWidget_fut.item(2, Futures_column.전고.value).setBackground(QBrush(콜전고색))
            self.tableWidget_fut.item(2, Futures_column.전고.value).setForeground(QBrush(검정색))
            self.tableWidget_fut.item(2, Futures_column.고가.value).setBackground(QBrush(콜전고색))
            self.tableWidget_fut.item(2, Futures_column.고가.value).setForeground(QBrush(검정색))                
        else:
            pass        

        if self.is_within_n_tick(KP200_전일종가, self.kp200_realdata['고가'], 10):

            self.tableWidget_fut.item(2, Futures_column.종가.value).setBackground(QBrush(콜종가색))
            self.tableWidget_fut.item(2, Futures_column.종가.value).setForeground(QBrush(검정색))
            self.tableWidget_fut.item(2, Futures_column.고가.value).setBackground(QBrush(콜종가색))
            self.tableWidget_fut.item(2, Futures_column.고가.value).setForeground(QBrush(검정색))                
        else:
            pass

        if kp200_피봇 > 0:

            if self.is_within_n_tick(kp200_피봇, self.kp200_realdata['고가'], 10):                

                self.tableWidget_fut.item(2, Futures_column.피봇.value).setBackground(QBrush(콜피봇색))
                self.tableWidget_fut.item(2, Futures_column.피봇.value).setForeground(QBrush(검정색))
                self.tableWidget_fut.item(2, Futures_column.고가.value).setBackground(QBrush(콜피봇색))
                self.tableWidget_fut.item(2, Futures_column.고가.value).setForeground(QBrush(검정색))                    
            else:
                pass  
        else:
            pass

        # 선물 맥점 컬러링
        txt = '[{0:02d}:{1:02d}:{2:02d}] KP200 맥점 컬러링을 완료했습니다.\r'.format(dt.hour, dt.minute, dt.second)
        self.textBrowser.append(txt)

    def fut_cm_node_coloring(self):

        dt = datetime.now()
        
        # 전저, 전고, 종가, 피봇 컬러링
        if self.is_within_n_tick(근월물_선물_전저, 근월물_선물_저가, 10):

            self.tableWidget_fut.item(1, Futures_column.전저.value).setBackground(QBrush(콜전저색))
            self.tableWidget_fut.item(1, Futures_column.전저.value).setForeground(QBrush(검정색))
            self.tableWidget_fut.item(1, Futures_column.저가.value).setBackground(QBrush(콜전저색))
            self.tableWidget_fut.item(1, Futures_column.저가.value).setForeground(QBrush(검정색))                
        else:
            pass

        if self.is_within_n_tick(근월물_선물_전고, 근월물_선물_저가, 10):

            self.tableWidget_fut.item(1, Futures_column.전고.value).setBackground(QBrush(콜전고색))
            self.tableWidget_fut.item(1, Futures_column.전고.value).setForeground(QBrush(검정색))
            self.tableWidget_fut.item(1, Futures_column.저가.value).setBackground(QBrush(콜전고색))
            self.tableWidget_fut.item(1, Futures_column.저가.value).setForeground(QBrush(검정색))                
        else:
            pass

        if self.is_within_n_tick(근월물_선물_종가, 근월물_선물_저가, 10):

            self.tableWidget_fut.item(1, Futures_column.종가.value).setBackground(QBrush(콜종가색))
            self.tableWidget_fut.item(1, Futures_column.종가.value).setForeground(QBrush(검정색))
            self.tableWidget_fut.item(1, Futures_column.저가.value).setBackground(QBrush(콜종가색))
            self.tableWidget_fut.item(1, Futures_column.저가.value).setForeground(QBrush(검정색))                
        else:
            pass

        if 근월물_선물_피봇 > 0 and self.is_within_n_tick(근월물_선물_피봇, 근월물_선물_저가, 10):

            self.tableWidget_fut.item(1, Futures_column.피봇.value).setBackground(QBrush(콜피봇색))
            self.tableWidget_fut.item(1, Futures_column.피봇.value).setForeground(QBrush(검정색))
            self.tableWidget_fut.item(1, Futures_column.저가.value).setBackground(QBrush(콜피봇색))
            self.tableWidget_fut.item(1, Futures_column.저가.value).setForeground(QBrush(검정색))                
        else:
            pass       

        if self.is_within_n_tick(근월물_선물_전저, 근월물_선물_고가, 10):

            self.tableWidget_fut.item(1, Futures_column.전저.value).setBackground(QBrush(콜전저색))
            self.tableWidget_fut.item(1, Futures_column.전저.value).setForeground(QBrush(검정색))
            self.tableWidget_fut.item(1, Futures_column.고가.value).setBackground(QBrush(콜전저색))
            self.tableWidget_fut.item(1, Futures_column.고가.value).setForeground(QBrush(검정색))                
        else:
            pass        

        if self.is_within_n_tick(근월물_선물_전고, 근월물_선물_고가, 10):

            self.tableWidget_fut.item(1, Futures_column.전고.value).setBackground(QBrush(콜전고색))
            self.tableWidget_fut.item(1, Futures_column.전고.value).setForeground(QBrush(검정색))
            self.tableWidget_fut.item(1, Futures_column.고가.value).setBackground(QBrush(콜전고색))
            self.tableWidget_fut.item(1, Futures_column.고가.value).setForeground(QBrush(검정색))                
        else:
            pass        

        if self.is_within_n_tick(근월물_선물_종가, 근월물_선물_고가, 10):

            self.tableWidget_fut.item(1, Futures_column.종가.value).setBackground(QBrush(콜종가색))
            self.tableWidget_fut.item(1, Futures_column.종가.value).setForeground(QBrush(검정색))
            self.tableWidget_fut.item(1, Futures_column.고가.value).setBackground(QBrush(콜종가색))
            self.tableWidget_fut.item(1, Futures_column.고가.value).setForeground(QBrush(검정색))                
        else:
            pass

        if 근월물_선물_피봇 > 0 and self.is_within_n_tick(근월물_선물_피봇, 근월물_선물_고가, 10):                

            self.tableWidget_fut.item(1, Futures_column.피봇.value).setBackground(QBrush(콜피봇색))
            self.tableWidget_fut.item(1, Futures_column.피봇.value).setForeground(QBrush(검정색))
            self.tableWidget_fut.item(1, Futures_column.고가.value).setBackground(QBrush(콜피봇색))
            self.tableWidget_fut.item(1, Futures_column.고가.value).setForeground(QBrush(검정색))                
        else:
            pass

    def fut_nm_node_coloring(self):

        dt = datetime.now()
        
        # 전저, 전고, 종가, 피봇 컬러링
        if self.is_within_n_tick(차월물_선물_전저, 차월물_선물_저가, 10):

            self.tableWidget_fut.item(0, Futures_column.전저.value).setBackground(QBrush(콜전저색))
            self.tableWidget_fut.item(0, Futures_column.전저.value).setForeground(QBrush(검정색))
            self.tableWidget_fut.item(0, Futures_column.저가.value).setBackground(QBrush(콜전저색))
            self.tableWidget_fut.item(0, Futures_column.저가.value).setForeground(QBrush(검정색))
        else:
            pass

        if self.is_within_n_tick(차월물_선물_전고, 차월물_선물_저가, 10):

            self.tableWidget_fut.item(0, Futures_column.전고.value).setBackground(QBrush(콜전고색))
            self.tableWidget_fut.item(0, Futures_column.전고.value).setForeground(QBrush(검정색))
            self.tableWidget_fut.item(0, Futures_column.저가.value).setBackground(QBrush(콜전고색))
            self.tableWidget_fut.item(0, Futures_column.저가.value).setForeground(QBrush(검정색))
        else:
            pass

        if self.is_within_n_tick(차월물_선물_종가, 차월물_선물_저가, 10):

            self.tableWidget_fut.item(0, Futures_column.종가.value).setBackground(QBrush(콜종가색))
            self.tableWidget_fut.item(0, Futures_column.종가.value).setForeground(QBrush(검정색))
            self.tableWidget_fut.item(0, Futures_column.저가.value).setBackground(QBrush(콜종가색))
            self.tableWidget_fut.item(0, Futures_column.저가.value).setForeground(QBrush(검정색))
        else:
            pass

        if 차월물_선물_피봇 > 0 and self.is_within_n_tick(차월물_선물_피봇, 차월물_선물_저가, 10):

            self.tableWidget_fut.item(0, Futures_column.피봇.value).setBackground(QBrush(콜피봇색))
            self.tableWidget_fut.item(0, Futures_column.피봇.value).setForeground(QBrush(검정색))
            self.tableWidget_fut.item(0, Futures_column.저가.value).setBackground(QBrush(콜피봇색))
            self.tableWidget_fut.item(0, Futures_column.저가.value).setForeground(QBrush(검정색))
        else:
            pass       

        if self.is_within_n_tick(차월물_선물_전저, 차월물_선물_고가, 10):

            self.tableWidget_fut.item(0, Futures_column.전저.value).setBackground(QBrush(콜전저색))
            self.tableWidget_fut.item(0, Futures_column.전저.value).setForeground(QBrush(검정색))
            self.tableWidget_fut.item(0, Futures_column.고가.value).setBackground(QBrush(콜전저색))
            self.tableWidget_fut.item(0, Futures_column.고가.value).setForeground(QBrush(검정색))
        else:
            pass        

        if self.is_within_n_tick(차월물_선물_전고, 차월물_선물_고가, 10):

            self.tableWidget_fut.item(0, Futures_column.전고.value).setBackground(QBrush(콜전고색))
            self.tableWidget_fut.item(0, Futures_column.전고.value).setForeground(QBrush(검정색))
            self.tableWidget_fut.item(0, Futures_column.고가.value).setBackground(QBrush(콜전고색))
            self.tableWidget_fut.item(0, Futures_column.고가.value).setForeground(QBrush(검정색))
        else:
            pass        

        if self.is_within_n_tick(차월물_선물_종가, 차월물_선물_고가, 10):

            self.tableWidget_fut.item(0, Futures_column.종가.value).setBackground(QBrush(콜종가색))
            self.tableWidget_fut.item(0, Futures_column.종가.value).setForeground(QBrush(검정색))
            self.tableWidget_fut.item(0, Futures_column.고가.value).setBackground(QBrush(콜종가색))
            self.tableWidget_fut.item(0, Futures_column.고가.value).setForeground(QBrush(검정색))
        else:
            pass

        if 차월물_선물_피봇 > 0 and self.is_within_n_tick(차월물_선물_피봇, 차월물_선물_고가, 10):                

            self.tableWidget_fut.item(0, Futures_column.피봇.value).setBackground(QBrush(콜피봇색))
            self.tableWidget_fut.item(0, Futures_column.피봇.value).setForeground(QBrush(검정색))
            self.tableWidget_fut.item(0, Futures_column.고가.value).setBackground(QBrush(콜피봇색))
            self.tableWidget_fut.item(0, Futures_column.고가.value).setForeground(QBrush(검정색))
        else:
            pass

    # 근월물 선물	
    def fut_cm_update(self, tickdata):        

        global df_fut
        global atm_txt, atm_val, ATM_INDEX, old_atm_index        
        global 근월물_선물_시가, 근월물_선물_현재가, 근월물_선물_저가, 근월물_선물_고가, 근월물_선물_피봇
        global fut_cm_volume_power
        global flag_first_arrive, fut_first_arrive_time
        global telegram_send_worker_on_time, flag_telegram_send_worker, flag_telegram_listen_worker
        global 근월물_선물_저가, 근월물_선물_현재가, 근월물_선물_시가대비, 근월물_선물_종가대비, 근월물_선물_종가대비_등락율, 근월물_선물_고가, 근월물_선물_진폭, 근월물_선물_시가등락율
        global 선물_진폭비, 선물_체결시간
        global fut_tick_list, fut_value_list, df_fut_ohlc
        global flag_call_dominant, flag_put_dominant
        global plot_drate_scale_factor
        global flag_fut_vs_sp500_drate_direction
        global volatility_breakout_downward_point, volatility_breakout_upward_point
        global df_futures_cm_graph, flag_futures_cm_ohlc_open, 근월물_선물_현재가_버퍼
        global flag_telegram_send_start, flag_telegram_listen_start
        global futures_fibonacci_levels

        try:
            dt = datetime.now()

            선물_체결시간 = tickdata['수신시간']

            시가 = tickdata['시가']
            현재가 = tickdata['현재가']
            저가 = tickdata['저가']
            고가 = tickdata['고가']    

            근월물_선물_시가 = float(tickdata['시가'])
            근월물_선물_현재가 = float(tickdata['현재가'])
            근월물_선물_저가 = float(tickdata['저가'])
            근월물_선물_고가 = float(tickdata['고가'])

            근월물_선물_시가대비 = 근월물_선물_현재가 - 근월물_선물_시가
            근월물_선물_종가대비 = 근월물_선물_현재가 - 근월물_선물_종가        
            근월물_선물_진폭 = 근월물_선물_고가 - 근월물_선물_저가

            volatility_breakout_downward_point = 근월물_선물_시가 - k_value
            volatility_breakout_upward_point = 근월물_선물_시가 + k_value

            fut_time = dt.hour * 3600 + dt.minute * 60 + dt.second

            if not flag_first_arrive:
                fut_first_arrive_time = fut_time
                flag_first_arrive = True
            else:
                pass

            if TELEGRAM_SERVICE and not flag_telegram_send_worker and DayTime:

                #self.telegram_send_worker.start()
                flag_telegram_send_start = True

                telegram_send_worker_on_time = fut_first_arrive_time 

                txt = '[{0:02d}:{1:02d}:{2:02d}] telegram send worker({3})가 시작됩니다.\r'.format(dt.hour, dt.minute, dt.second, telegram_send_worker_on_time)
                self.textBrowser.append(txt)
                print(txt) 

                if TARGET_MONTH == 'CM':

                    txt = '[{0:02d}:{1:02d}:{2:02d}] CM 텔레그램이 시작됩니다.\r'.format(dt.hour, dt.minute, dt.second)
                    ToYourTelegram(txt)

                elif TARGET_MONTH == 'NM':

                    txt = '[{0:02d}:{1:02d}:{2:02d}] NM 텔레그램이 시작됩니다.\r'.format(dt.hour, dt.minute, dt.second)
                    ToYourTelegram(txt)
                else:
                    pass         

                flag_telegram_send_worker = True             
            else:
                pass

            # Telegram Send Worker 시작 후 TELEGRAM_START_TIME분에 Telegram Listen을 위한 Polling Thread 시작 !!!
            if not flag_telegram_listen_worker and fut_time > telegram_send_worker_on_time + 60 * TELEGRAM_START_TIME and DayTime:

                if TELEGRAM_SERVICE:

                    #self.telegram_listen_worker.start()
                    flag_telegram_listen_start = True

                    if TARGET_MONTH == 'CM':

                        if window.id == 'soojin65':
                            txt = '[{0:02d}:{1:02d}:{2:02d}] ***님 텔레그램 Polling이 시작됩니다.'.format(dt.hour, dt.minute, dt.second)
                            #ToMyTelegram(txt)
                        else:
                            ToYourTelegram("CM 텔레그램 Polling이 시작됩니다.")

                    elif TARGET_MONTH == 'NM':

                        ToYourTelegram("NM 텔레그램 Polling이 시작됩니다.")
                    else:
                        pass
                    
                    self.pushButton_scrshot.setStyleSheet('QPushButton {background-color: lawngreen; color: black; font-family: Consolas; font-size: 10pt; font: Bold; border-style: solid; border-width: 1px; border-color: black; border-radius: 5px} \
                                                            QPushButton:hover {background-color: black; color: white} \
                                                            QPushButton:pressed {background-color: gold}')
                    flag_telegram_listen_worker = True
                else:
                    pass            
            else:
                pass

            if fut_time == fut_first_arrive_time + 2 or fut_time == fut_first_arrive_time + 3:

                # 선물 시가갭 컬러링(주간 장시작시 표시안되는 오류 대응)
                if 근월물_선물_시가 > 근월물_선물_종가:
                    self.tableWidget_fut.item(1, Futures_column.시가갭.value).setBackground(QBrush(콜기준가색))
                    self.tableWidget_fut.item(1, Futures_column.시가갭.value).setForeground(QBrush(검정색))
                elif 근월물_선물_시가 < 근월물_선물_종가:
                    self.tableWidget_fut.item(1, Futures_column.시가갭.value).setBackground(QBrush(풋기준가색))
                    self.tableWidget_fut.item(1, Futures_column.시가갭.value).setForeground(QBrush(흰색))
                else:
                    self.tableWidget_fut.item(1, Futures_column.시가갭.value).setBackground(QBrush(흰색))
                    self.tableWidget_fut.item(1, Futures_column.시가갭.value).setForeground(QBrush(검정색))                  
            else:
                pass        
            
            # 시가 및 피봇 갱신
            if 시가 != self.tableWidget_fut.item(1, Futures_column.시가.value).text().split('\n')[0]:

                df_futures_cm_graph.at[GuardTime + 1, 'Open'] = 근월물_선물_시가                

                df_fut.at[1, '시가'] = 근월물_선물_시가
                self.fut_realdata['시가'] = 근월물_선물_시가  

                txt = '{0}\n({1:.2f})'.format(시가, SP500_기준_예상시가)

                item = QTableWidgetItem(txt)
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(흰색))        

                if 근월물_선물_시가 > 근월물_선물_종가:
                    item.setForeground(QBrush(적색))
                elif 근월물_선물_시가 < 근월물_선물_종가:
                    item.setForeground(QBrush(청색))
                else:
                    item.setForeground(QBrush(검정색)) 

                self.tableWidget_fut.setItem(1, Futures_column.시가.value, item)                

                시가갭 = 근월물_선물_시가 - 근월물_선물_종가                            

                item = QTableWidgetItem("{0:.2f}".format(시가갭))
                item.setTextAlignment(Qt.AlignCenter)

                if 근월물_선물_시가 > 근월물_선물_종가:
                    item.setBackground(QBrush(콜기준가색))
                    item.setForeground(QBrush(검정색))
                elif 근월물_선물_시가 < 근월물_선물_종가:
                    item.setBackground(QBrush(풋기준가색))
                    item.setForeground(QBrush(흰색))
                else:
                    item.setBackground(QBrush(흰색))  

                self.tableWidget_fut.setItem(1, Futures_column.시가갭.value, item)

                if 근월물_선물_현재가 >= 근월물_선물_시가:
                    uptrend = True
                else:
                    uptrend = False
                    
                futures_fibonacci_levels = []

                max_level = 근월물_선물_고가
                min_level = 근월물_선물_저가

                for ratio in Fibonacci_Retracements_Ratios:

                    if uptrend:
                        futures_fibonacci_levels.append(max_level - (max_level - min_level) * ratio)
                    else:
                        futures_fibonacci_levels.append(min_level + (max_level - min_level) * ratio)
            else:
                pass

            근월물_선물_피봇 = calc_pivot(근월물_선물_전저, 근월물_선물_전고, 근월물_선물_종가, 근월물_선물_시가, 2)

            if 근월물_선물_피봇 != float(self.tableWidget_fut.item(1, Futures_column.피봇.value).text()):

                item = QTableWidgetItem("{0:.2f}".format(근월물_선물_피봇))
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(흰색))
                item.setForeground(QBrush(검정색))
                self.tableWidget_fut.setItem(1, Futures_column.피봇.value, item)

                df_fut.at[1, '피봇'] = 근월물_선물_피봇
                self.fut_realdata['피봇'] = 근월물_선물_피봇
            else:
                pass

            # 현재가 갱신
            선물_과거가 = self.tableWidget_fut.item(1, Futures_column.현재가.value).text().split('\n')[0]            

            if 현재가 != 선물_과거가:

                df_fut.at[1, '현재가'] = 근월물_선물_현재가
                self.fut_realdata['현재가'] = 근월물_선물_현재가 

                if 근월물_선물_현재가 < float(선물_과거가):
                    item = QTableWidgetItem(현재가 + '\n' + '▼')
                    item.setBackground(QBrush(lightskyblue))
                elif 근월물_선물_현재가 > float(선물_과거가):
                    item = QTableWidgetItem(현재가 + '\n' + '▲')
                    item.setBackground(QBrush(pink))
                else:    
                    item = QTableWidgetItem(현재가)

                if 근월물_선물_시가 < 근월물_선물_현재가:
                    item.setForeground(QBrush(적색))
                elif 근월물_선물_시가 > 근월물_선물_현재가:
                    item.setForeground(QBrush(청색))
                else:
                    item.setForeground(QBrush(검정색))

                item.setTextAlignment(Qt.AlignCenter)
                self.tableWidget_fut.setItem(1, Futures_column.현재가.value, item)

                item = QTableWidgetItem("{0:.2f}\n({1:.2f}%)".format(근월물_선물_시가대비, 근월물_선물_시가대비_등락율))
                item.setTextAlignment(Qt.AlignCenter)

                if 근월물_선물_종가대비_등락율 > 0 and SP500_등락율 > 0 and flag_fut_vs_sp500_drate_direction:

                    item.setBackground(QBrush(pink))
                    item.setForeground(QBrush(검정색))

                elif 근월물_선물_종가대비_등락율 < 0 and SP500_등락율 < 0 and flag_fut_vs_sp500_drate_direction:

                    item.setBackground(QBrush(lightskyblue))
                    item.setForeground(QBrush(검정색))
                else:                
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))

                self.tableWidget_fut.setItem(1, Futures_column.대비.value, item)

                self.tableWidget_fut.resizeRowToContents(1)

                self.tableWidget_fut.resizeColumnToContents(Futures_column.현재가.value)
                self.tableWidget_fut.resizeColumnToContents(Futures_column.대비.value)
            else:
                pass

            # 저가 갱신
            if 저가 != self.tableWidget_fut.item(1, Futures_column.저가.value).text().split('\n')[0]:

                txt = '{0:.2f}'.format(근월물_선물_저가) + '\n' + '({0:.2f})'.format(volatility_breakout_downward_point)

                item = QTableWidgetItem(txt)
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(회색))            

                self.tableWidget_fut.setItem(1, Futures_column.저가.value, item)
                df_fut.at[1, '저가'] = 근월물_선물_저가
                self.fut_realdata['저가'] = 근월물_선물_저가

                if 근월물_선물_전저 >= 근월물_선물_저가:

                    txt = '{0:.2f}'.format(근월물_선물_전저) + '\n▼'

                    item = QTableWidgetItem(txt)
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setForeground(QBrush(청색))  

                    if NightTime:           
                        self.tableWidget_fut.setItem(0, Futures_column.전저.value, item)
                    else:
                        self.tableWidget_fut.setItem(1, Futures_column.전저.value, item)
                else:
                    pass

                self.fut_cm_node_color_clear()                    
                self.fut_cm_oloh_check()
                self.fut_cm_node_coloring()

                txt = '[{0:02d}:{1:02d}:{2:02d}] 선물 저가 {3} Update...\r'.format(dt.hour, dt.minute, dt.second, 근월물_선물_저가)
                self.textBrowser.append(txt)

                진폭 = 근월물_선물_고가 - 근월물_선물_저가

                item = QTableWidgetItem("{0:.2f}".format(진폭))
                item.setTextAlignment(Qt.AlignCenter)

                if NightTime:
                    self.tableWidget_fut.setItem(0, Futures_column.진폭.value, item)
                else:
                    self.tableWidget_fut.setItem(1, Futures_column.진폭.value, item)

                futures_fibonacci_levels = []

                max_level = 근월물_선물_고가
                min_level = 근월물_선물_저가

                uptrend = False

                for ratio in Fibonacci_Retracements_Ratios:

                    if uptrend:
                        futures_fibonacci_levels.append(max_level - (max_level - min_level) * ratio)
                    else:
                        futures_fibonacci_levels.append(min_level + (max_level - min_level) * ratio)
            else:
                pass

            # 고가 갱신
            if 고가 != self.tableWidget_fut.item(1, Futures_column.고가.value).text().split('\n')[0]:

                txt = '{0:.2f}'.format(근월물_선물_고가) + '\n' + '({0:.2f})'.format(volatility_breakout_upward_point)

                item = QTableWidgetItem(txt)
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(회색))            

                self.tableWidget_fut.setItem(1, Futures_column.고가.value, item)
                df_fut.at[1, '고가'] = 근월물_선물_고가
                self.fut_realdata['고가'] = 근월물_선물_고가

                if 근월물_선물_전고 <= 근월물_선물_고가:

                    txt = '{0:.2f}'.format(근월물_선물_전고) + '\n▲'

                    item = QTableWidgetItem(txt)
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setForeground(QBrush(적색))  

                    if NightTime:           
                        self.tableWidget_fut.setItem(0, Futures_column.전고.value, item)
                    else:
                        self.tableWidget_fut.setItem(1, Futures_column.전고.value, item)
                else:
                    pass

                self.fut_cm_node_color_clear()                    
                self.fut_cm_oloh_check()
                self.fut_cm_node_coloring()

                txt = '[{0:02d}:{1:02d}:{2:02d}] 선물 고가 {3} Update...\r'.format(dt.hour, dt.minute, dt.second, 근월물_선물_고가)
                self.textBrowser.append(txt)

                진폭 = 근월물_선물_고가 - 근월물_선물_저가

                item = QTableWidgetItem("{0:.2f}".format(진폭))
                item.setTextAlignment(Qt.AlignCenter)

                if NightTime:
                    self.tableWidget_fut.setItem(0, Futures_column.진폭.value, item)
                else:
                    self.tableWidget_fut.setItem(1, Futures_column.진폭.value, item)

                futures_fibonacci_levels = []

                max_level = 근월물_선물_고가
                min_level = 근월물_선물_저가

                uptrend = True

                for ratio in Fibonacci_Retracements_Ratios:

                    if uptrend:
                        futures_fibonacci_levels.append(max_level - (max_level - min_level) * ratio)
                    else:
                        futures_fibonacci_levels.append(min_level + (max_level - min_level) * ratio)      
            else:
                pass

            self.tableWidget_fut.resizeColumnToContents(Futures_column.거래량.value)            

        except Exception as e:

            txt = '[{0:02d}:{1:02d}:{2:02d}] Exception : fut_cm_update 에서 {3}타입의 {4}예외가 발생했습니다.\r'.format(dt.hour, dt.minute, dt.second, type(e).__name__, str(e))
            self.parent.textBrowser.append(txt)

    # 차월물 선물	
    def fut_nm_update(self, tickdata):

        global 차월물_선물_피봇, 차월물_선물_시가, 차월물_선물_저가, 차월물_선물_현재가, 차월물_선물_고가, 차월물_선물_진폭
        global 차월물_선물_시가대비, 차월물_선물_종가대비
        global df_futures_nm_graph

        try:
            dt = datetime.now()

            시가 = tickdata['시가']
            현재가 = tickdata['현재가']
            저가 = tickdata['저가']
            고가 = tickdata['고가']    

            차월물_선물_시가 = float(tickdata['시가'])
            차월물_선물_현재가 = float(tickdata['현재가'])
            차월물_선물_저가 = float(tickdata['저가'])
            차월물_선물_고가 = float(tickdata['고가'])

            차월물_선물_진폭 = 차월물_선물_고가 - 차월물_선물_저가

            차월물_선물_시가대비 = 차월물_선물_현재가 - 차월물_선물_시가
            차월물_선물_종가대비 = 차월물_선물_현재가 - 차월물_선물_종가 

            # 시가 및 피봇 갱신
            if 시가 != self.tableWidget_fut.item(0, Futures_column.시가.value).text():

                df_futures_nm_graph.at[GuardTime + 1, 'Open'] = 차월물_선물_시가                

                item = QTableWidgetItem(시가)
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(흰색))        

                if 차월물_선물_시가 > 차월물_선물_종가:
                    item.setForeground(QBrush(적색))
                elif 차월물_선물_시가 < 차월물_선물_종가:
                    item.setForeground(QBrush(청색))
                else:
                    item.setForeground(QBrush(검정색))    

                self.tableWidget_fut.setItem(0, Futures_column.시가.value, item)

                시가갭 = 차월물_선물_시가 - 차월물_선물_종가

                item = QTableWidgetItem("{0:.2f}".format(시가갭))
                item.setTextAlignment(Qt.AlignCenter)

                if 차월물_선물_시가 > 차월물_선물_종가:
                    item.setBackground(QBrush(콜기준가색))
                    item.setForeground(QBrush(검정색))
                elif 차월물_선물_시가 < 차월물_선물_종가:
                    item.setBackground(QBrush(풋기준가색))
                    item.setForeground(QBrush(흰색))
                else:
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색)) 

                self.tableWidget_fut.setItem(0, Futures_column.시가갭.value, item)        
            else:
                pass

            차월물_선물_피봇 = calc_pivot(차월물_선물_전저, 차월물_선물_전고, 차월물_선물_종가, 차월물_선물_시가, 2)

            if 차월물_선물_피봇 != float(self.tableWidget_fut.item(0, Futures_column.피봇.value).text()):

                item = QTableWidgetItem("{0:.2f}".format(차월물_선물_피봇))
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(흰색))
                item.setForeground(QBrush(검정색))
                self.tableWidget_fut.setItem(0, Futures_column.피봇.value, item)
            else:
                pass
            
            # 현재가 갱신
            선물_과거가 = self.tableWidget_fut.item(0, Futures_column.현재가.value).text().split('\n')[0]

            if 현재가 != 선물_과거가:

                if 차월물_선물_현재가 < float(선물_과거가):
                    txt = '{0}'.format(현재가) + '\n▼'
                    item = QTableWidgetItem(txt)
                    item.setBackground(QBrush(lightskyblue))
                elif 차월물_선물_현재가 > float(선물_과거가):
                    txt = '{0}'.format(현재가) + '\n▲'
                    item = QTableWidgetItem(txt)
                    item.setBackground(QBrush(pink))
                else:    
                    item = QTableWidgetItem(현재가)

                item.setTextAlignment(Qt.AlignCenter)

                if 차월물_선물_시가 < 차월물_선물_현재가:
                    item.setForeground(QBrush(적색))
                elif 차월물_선물_시가 > 차월물_선물_현재가:
                    item.setForeground(QBrush(청색))
                else:
                    item.setForeground(QBrush(검정색))

                self.tableWidget_fut.setItem(0, Futures_column.현재가.value, item)

                item = QTableWidgetItem("{0:.2f}\n({1:.2f}%)".format(차월물_선물_시가대비, 차월물_선물_시가대비_등락율))
                item.setTextAlignment(Qt.AlignCenter)

                if 차월물_선물_종가대비_등락율:

                    item.setBackground(QBrush(pink))
                    item.setForeground(QBrush(검정색))

                elif 차월물_선물_종가대비_등락율:

                    item.setBackground(QBrush(lightskyblue))
                    item.setForeground(QBrush(검정색))
                else:                
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))

                self.tableWidget_fut.setItem(0, Futures_column.대비.value, item)

                self.tableWidget_fut.resizeRowToContents(0)
            else:
                pass

            # 저가 갱신
            if 저가 != self.tableWidget_fut.item(0, Futures_column.저가.value).text():

                txt = '{0:.2f}'.format(차월물_선물_저가)

                item = QTableWidgetItem(txt)
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(회색))            

                self.tableWidget_fut.setItem(0, Futures_column.저가.value, item)

                if 차월물_선물_전저 >= 차월물_선물_저가:

                    txt = '{0:.2f}'.format(차월물_선물_전저) + '\n▼'

                    item = QTableWidgetItem(txt)
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setForeground(QBrush(청색))  

                    self.tableWidget_fut.setItem(0, Futures_column.전저.value, item)
                else:
                    pass

                self.fut_nm_node_color_clear()                    
                self.fut_nm_oloh_check()
                self.fut_nm_node_coloring()

                txt = '[{0:02d}:{1:02d}:{2:02d}] 차월물 선물 저가 {3} Update...\r'.format(dt.hour, dt.minute, dt.second, 차월물_선물_저가)
                self.textBrowser.append(txt)

                item = QTableWidgetItem("{0:.2f}".format(차월물_선물_진폭))
                item.setTextAlignment(Qt.AlignCenter)

                self.tableWidget_fut.setItem(0, Futures_column.진폭.value, item)       
            else:
                pass

            # 고가 갱신
            if 고가 != self.tableWidget_fut.item(0, Futures_column.고가.value).text():

                txt = '{0:.2f}'.format(차월물_선물_고가)

                item = QTableWidgetItem(txt)
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(회색))            

                self.tableWidget_fut.setItem(0, Futures_column.고가.value, item)

                if 차월물_선물_전고 <= 차월물_선물_고가:

                    txt = '{0:.2f}'.format(차월물_선물_전고) + '\n▲'

                    item = QTableWidgetItem(txt)
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setForeground(QBrush(적색))  

                    self.tableWidget_fut.setItem(0, Futures_column.전고.value, item)
                else:
                    pass

                self.fut_nm_node_color_clear()                    
                self.fut_nm_oloh_check()
                self.fut_nm_node_coloring()

                txt = '[{0:02d}:{1:02d}:{2:02d}] 차월물 선물 고가 {3} Update...\r'.format(dt.hour, dt.minute, dt.second, 차월물_선물_고가)
                self.textBrowser.append(txt)

                item = QTableWidgetItem("{0:.2f}".format(차월물_선물_진폭))
                item.setTextAlignment(Qt.AlignCenter)

                self.tableWidget_fut.setItem(0, Futures_column.진폭.value, item)    
            else:
                pass

        except Exception as e:

            txt = '[{0:02d}:{1:02d}:{2:02d}] Exception : fut_nm_update 에서 {3}타입의 {4}예외가 발생했습니다.\r'.format(dt.hour, dt.minute, dt.second, type(e).__name__, str(e))
            self.parent.textBrowser.append(txt)       

    def fut_cm_etc_update(self, tickdata):

        global df_fut, 선물_진폭비, flag_call_dominant, flag_put_dominant
        
        if 근월물_선물_시가 > 0:
            선물_진폭비 = (근월물_선물_고가 - 근월물_선물_저가) / 근월물_선물_시가
        else:
            선물_진폭비 = 0

        if SP500_진폭비 > 0:           
            선물_SP500_진폭비율 = 선물_진폭비 / SP500_진폭비 
        else:
            선물_SP500_진폭비율 = 0

        item = QTableWidgetItem("{0:.2f}".format(선물_SP500_진폭비율))
        item.setTextAlignment(Qt.AlignCenter)

        # 종합 에너지방향 표시
        if flag_fut_vs_sp500_drate_direction and fut_quote_energy_direction == 'call' and fut_volume_power_energy_direction == 'call':

            item.setBackground(QBrush(적색))
            item.setForeground(QBrush(흰색))
            flag_call_dominant = True

        elif flag_fut_vs_sp500_drate_direction and fut_quote_energy_direction == 'put' and fut_volume_power_energy_direction == 'put':

            item.setBackground(QBrush(청색))
            item.setForeground(QBrush(흰색))
            flag_put_dominant = True
        else:             
            item.setBackground(QBrush(라임))
            item.setForeground(QBrush(검정색))
            flag_call_dominant = False
            flag_put_dominant = False

        self.tableWidget_fut.setItem(2, Futures_column.거래량.value, item)
        self.tableWidget_fut.resizeColumnToContents(Futures_column.거래량.value)        

        # 미결 갱신
        df_fut.at[1, '미결'] = int(tickdata['미결제약정수량']) 
        self.fut_realdata['미결'] = int(tickdata['미결제약정수량'])

        #temp = format(int(tickdata['미결제약정수량']), ',')
        temp = '{0}k'.format(int(self.fut_realdata['미결']/1000))

        item = QTableWidgetItem(temp)
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_fut.setItem(1, Futures_column.OI.value, item) 

        # 미결증감 갱신
        df_fut.at[1, '미결증감'] = int(tickdata['미결제약정증감'])  
        self.fut_realdata['미결증감'] = int(tickdata['미결제약정증감'])

        temp = format(int(tickdata['미결제약정증감']), ',')  

        item = QTableWidgetItem(temp)
        item.setTextAlignment(Qt.AlignCenter)

        if int(tickdata['미결제약정증감']) < 0:
            item.setBackground(QBrush(라임))
        else:
            item.setBackground(QBrush(흰색))

        item.setForeground(QBrush(검정색))

        self.tableWidget_fut.setItem(1, Futures_column.OID.value, item)

        # 선물 Up/Down Indicator 표시
        '''
        global fut_bollinger_symbol, fut_psar_symbol, fut_oe_symbol, fut_mama_symbol

        if not np.isnan(df_futures_cm_graph.at[plot_time_index, 'BBMiddle_2nd']):

            if df_futures_cm_graph.at[plot_time_index, 'BBMiddle_2nd'] >= df_futures_cm_graph.at[plot_time_index, 'Price']:
                fut_bollinger_symbol = '▼'
            else:
                fut_bollinger_symbol = '▲'
        else:
            pass               

        if not np.isnan(df_futures_cm_graph.at[plot_time_index, 'PSAR']):

            if df_futures_cm_graph.at[plot_time_index, 'PSAR'] >= df_futures_cm_graph.at[plot_time_index, 'Price']:
                fut_psar_symbol = '▼'
            else:
                fut_psar_symbol = '▲'
        else:
            pass
        
        if not np.isnan(df_futures_cm_graph.at[plot_time_index, 'OE_CONV']) and np.isnan(df_futures_cm_graph.at[plot_time_index, 'OE_BASE']):

            if df_futures_cm_graph.at[plot_time_index, 'OE_CONV'] < df_futures_cm_graph.at[plot_time_index, 'OE_BASE']:
                fut_oe_symbol = '▼'
            else:
                fut_oe_symbol = '▲'
        else:
            pass

        if not np.isnan(df_futures_cm_graph.at[plot_time_index, 'MAMA']) and np.isnan(df_futures_cm_graph.at[plot_time_index, 'FAMA']):

            if df_futures_cm_graph.at[plot_time_index, 'FAMA'] >= df_futures_cm_graph.at[plot_time_index, 'BBLower_2nd']:

                if df_futures_cm_graph.at[plot_time_index, 'MAMA'] < df_futures_cm_graph.at[plot_time_index, 'FAMA']:                
                    fut_mama_symbol = '▼'
                else:
                    fut_mama_symbol = '▲'
            else:
                fut_mama_symbol = '-'
        else:
            pass

        indicator = fut_psar_symbol + ' ' + fut_bollinger_symbol + ' ' + fut_mama_symbol + ' ' + fut_oe_symbol

        if indicator != self.tableWidget_fut.horizontalHeaderItem(0).text():
            item = QTableWidgetItem(indicator)
            item.setTextAlignment(Qt.AlignCenter)
            self.tableWidget_fut.setHorizontalHeaderItem(0, item)
        else:
            pass
        '''        

    def fut_nm_etc_update(self, tickdata):        
                
        # 미결 갱신 
        미결 = int(tickdata['미결제약정수량'])

        temp = '{0}k'.format(int(미결/1000))
        item = QTableWidgetItem(temp)
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_fut.setItem(0, Futures_column.OI.value, item) 

        # 미결증감 갱신
        미결증감 = int(tickdata['미결제약정증감'])

        temp = format(미결증감, ',')
        item = QTableWidgetItem(temp)
        item.setTextAlignment(Qt.AlignCenter)

        if 미결증감 < 0:
            item.setBackground(QBrush(라임))
        else:
            item.setBackground(QBrush(흰색))

        item.setForeground(QBrush(검정색))

        self.tableWidget_fut.setItem(0, Futures_column.OID.value, item)

    def check_call_oloh(self, tickdata):

        global call_ol, call_oh 
        global call_ol_count, call_oh_count

        index = call_행사가.index(tickdata['단축코드'][5:8])
        
        콜시가 = float(tickdata['시가'])
        콜현재가 = float(tickdata['현재가'])
        콜저가 = float(tickdata['저가'])
        콜고가 = float(tickdata['고가'])

        if 콜시가 >= oloh_cutoff:

            if 콜시가 < 1.0:

                oloh_threshold = 1

            elif 1.0 <= 콜시가 < 2.0:

                oloh_threshold = 2

            elif 2.0 <= 콜시가 < 3.0:

                oloh_threshold = 3

            elif 3.0 <= 콜시가 < 4.0:

                oloh_threshold = 4
            else:
                oloh_threshold = 5   

            # call OL/OH count
            if self.is_within_n_tick(콜시가, 콜저가, oloh_threshold) and not self.is_within_n_tick(콜시가, 콜고가, oloh_threshold):

                if not call_ol[index]:

                    oloh_txt = '▲'

                    item = QTableWidgetItem(oloh_txt)
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(적색))
                    item.setForeground(QBrush(흰색))
                    self.tableWidget_call.setItem(index, Option_column.OLOH.value, item)

                    self.tableWidget_call.item(index, Option_column.시가.value).setBackground(QBrush(적색))
                    self.tableWidget_call.item(index, Option_column.시가.value).setForeground(QBrush(검정색))  

                    self.tableWidget_call.item(index, Option_column.저가.value).setBackground(QBrush(적색))
                    self.tableWidget_call.item(index, Option_column.저가.value).setForeground(QBrush(검정색))

                    call_ol[index] = True
                else:
                    pass

            elif self.is_within_n_tick(콜시가, 콜고가, oloh_threshold) and not self.is_within_n_tick(콜시가, 콜저가, oloh_threshold):

                if not call_oh[index]:

                    oloh_txt = '▼'

                    item = QTableWidgetItem(oloh_txt)
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(청색))
                    item.setForeground(QBrush(흰색))
                    self.tableWidget_call.setItem(index, Option_column.OLOH.value, item)

                    self.tableWidget_call.item(index, Option_column.시가.value).setBackground(QBrush(적색))
                    self.tableWidget_call.item(index, Option_column.시가.value).setForeground(QBrush(검정색))  

                    self.tableWidget_call.item(index, Option_column.고가.value).setBackground(QBrush(적색))
                    self.tableWidget_call.item(index, Option_column.고가.value).setForeground(QBrush(검정색)) 

                    call_oh[index] = True
                else:
                    pass
            else:

                if call_ol[index]:

                    oloh_txt = '-'

                    if oloh_txt != self.tableWidget_call.item(index, Option_column.OLOH.value).text():
                        item = QTableWidgetItem(oloh_txt)
                        item.setTextAlignment(Qt.AlignCenter)
                        item.setBackground(QBrush(검정색))
                        item.setForeground(QBrush(흰색))
                        self.tableWidget_call.setItem(index, Option_column.OLOH.value, item)
                    else:
                        pass

                    call_ol[index] = False
                else:
                    pass

                if call_oh[index]:

                    oloh_txt = '-'

                    if oloh_txt != self.tableWidget_call.item(index, Option_column.OLOH.value).text():
                        item = QTableWidgetItem(oloh_txt)
                        item.setTextAlignment(Qt.AlignCenter)
                        item.setBackground(QBrush(검정색))
                        item.setForeground(QBrush(흰색))
                        self.tableWidget_call.setItem(index, Option_column.OLOH.value, item)
                    else:
                        pass

                    call_oh[index] = False
                else:
                    pass
        else:
            pass        

        call_ol_count = call_ol.count(True)
        call_oh_count = call_oh.count(True)

        new_oloh = repr(call_ol_count) + ':' + repr(call_oh_count)

        if new_oloh != self.tableWidget_call.horizontalHeaderItem(2).text():
            item = QTableWidgetItem(new_oloh)
            item.setTextAlignment(Qt.AlignCenter)
            self.tableWidget_call.setHorizontalHeaderItem(2, item)
        else:
            pass

    # 콜 표시
    def call_update(self, tickdata):

        global call_open, call_itm_count
        global df_call
        global df_call_graph
        global atm_txt, ATM_INDEX, call_atm_value
        global call_시가, call_시가_node_list, call_피봇, call_피봇_node_list, 콜시가리스트
        global call_저가, call_저가_node_list, call_고가, call_고가_node_list
        global opt_callreal_update_counter
        global df_call_volume, call_volume_power, df_call_information_graph, df_put_information_graph
        global node_coloring
        global call_max_actval, call_open, call_ol, call_oh
        global 콜_인덱스, 콜_시가, 콜_현재가, 콜_저가, 콜_고가
        global flag_call_low_update, flag_call_high_update
        global call_gap_percent, call_db_percent, call_otm_cdb, call_otm_cdb_percent, call_otm_jdb, call_otm_jdb_percent
        global call_otm_cdb_percent_mean
        global 콜_등가_등락율, 콜_등가_시가등락율, plot_drate_scale_factor
        global flag_call_open_in_fixed_coreval      

        try:
            dt = datetime.now()
            start_time = timeit.default_timer()

            index = call_행사가.index(tickdata['단축코드'][5:8])

            시가 = tickdata['시가']
            현재가 = tickdata['현재가']
            저가 = tickdata['저가']
            고가 = tickdata['고가']
            등락율 = tickdata['등락율']

            콜종가 = df_call.at[index, '종가']
            콜전저 = df_call.at[index, '전저']
            콜전고 = df_call.at[index, '전고']
            콜시가 = float(tickdata['시가'])
            콜현재가 = float(tickdata['현재가'])
            콜저가 = float(tickdata['저가'])
            콜고가 = float(tickdata['고가'])
            콜등락율 = float(tickdata['등락율'])

            if index == ATM_INDEX:
                콜_등가_시가등락율 = (콜시가 / 콜종가 - 1) * 100
            else:
                pass

            # 콜 외가(등가포함) 대비 저장
            if index <= ATM_INDEX and 콜시가 > OTM_SEARCH_START_VAL and 콜저가 < 콜고가:
                call_otm_cdb[index] = 콜현재가 - 콜시가
                call_otm_cdb_percent[index] = (콜현재가 / 콜시가 - 1) * 100
                call_otm_jdb[index] = 콜현재가 - 콜종가
                call_otm_jdb_percent[index] = 콜등락율
            else:
                pass

            if 저가 != 고가 and not call_open[index]:

                # 등가 check & coloring
                self.tableWidget_call.item(index, Option_column.행사가.value).setBackground(QBrush(라임))
                self.tableWidget_call.item(index, Option_column.행사가.value).setForeground(QBrush(검정색))

                call_open[index] = True

                # 콜 시가 갱신
                if 콜시가 > opt_search_start_value:
                    self.call_open_list.append(index)
                    self.call_open_list = list(set(self.call_open_list))
                else:
                    pass

                txt = '[{0:02d}:{1:02d}:{2:02d}] Call Open List = {3}\r'.format \
                    (dt.hour, dt.minute, dt.second, self.call_open_list)
                self.textBrowser.append(txt)

                if DayTime and index > ATM_INDEX:
                    call_itm_count += 1
                else:
                    pass
                
                # Call Open Count 표시
                call_open_count = call_open.count(True)

                if call_open[option_pairs_count - 1]:

                    new_actval = repr(call_itm_count) + '/' + repr(call_open_count) + '\n*'
                else:
                    new_actval = repr(call_itm_count) + '/' + repr(call_open_count)

                if new_actval != self.tableWidget_call.horizontalHeaderItem(1).text():
                    item = QTableWidgetItem(new_actval)
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_call.setHorizontalHeaderItem(1, item)
                else:
                    pass            
            else:
                pass      

            # 시가 갱신
            if 시가 != self.tableWidget_call.item(index, Option_column.시가.value).text():

                df_call.at[index, '시가'] = 콜시가                

                df_call_graph[index].at[GuardTime + 1, 'Open'] = 콜시가
                df_call_graph[index].at[GuardTime + 1, 'Price'] = 콜시가

                item = QTableWidgetItem(시가)
                item.setTextAlignment(Qt.AlignCenter)

                if 콜시가 > 콜종가:
                    item.setForeground(QBrush(magenta))
                    item.setBackground(QBrush(검정색))
                elif 콜시가 < 콜종가:
                    item.setForeground(QBrush(cyan))
                    item.setBackground(QBrush(검정색))
                else:
                    item.setForeground(QBrush(흰색))
                    item.setBackground(QBrush(검정색))

                self.tableWidget_call.setItem(index, Option_column.시가.value, item)

                시가갭 = 콜시가 - 콜종가
                df_call.at[index, '시가갭'] = 시가갭

                #if 콜시가 > OTM_SEARCH_START_VAL:
                if True:
                    call_gap_percent[index] = (콜시가 / 콜종가 - 1) * 100

                    gap_txt = "{0:.2f}\n{1:.1f}%".format(시가갭, call_gap_percent[index])

                    item = QTableWidgetItem(gap_txt)
                    item.setTextAlignment(Qt.AlignCenter)

                    if 콜시가 > 콜종가:
                        item.setBackground(QBrush(콜기준가색))
                        item.setForeground(QBrush(검정색))
                    elif 콜시가 < 콜종가:
                        item.setBackground(QBrush(풋기준가색))
                        item.setForeground(QBrush(흰색))
                    else:
                        item.setBackground(QBrush(검정색))
                        item.setForeground(QBrush(흰색))

                    self.tableWidget_call.setItem(index, Option_column.시가갭.value, item)

                    # 시가갭 갱신
                    call_gap_percent_local = copy.deepcopy(call_gap_percent)
                    result1 = [i for i in call_gap_percent_local if i not in remove_set]

                    np_call_gap_percent_local = np.array(result1)

                    콜시가갭합_단위평균 = round(df_call['시가갭'].sum()/len(call_gap_percent), 2)        
                    콜시가갭합_퍼센트평균 = round(np.mean(np_call_gap_percent_local), 1)

                    call_txt = repr(콜시가갭합_단위평균) + '\n' + repr(콜시가갭합_퍼센트평균) + '%'

                    item = QTableWidgetItem(call_txt)
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_call.setHorizontalHeaderItem(Option_column.시가갭.value, item)
                    self.tableWidget_call.resizeColumnToContents(Option_column.시가갭.value)
                else:
                    pass

                if 콜시가 in COREVAL:
                    self.tableWidget_call.item(index, Option_column.시가.value).setBackground(QBrush(대맥점색))
                    self.tableWidget_call.item(index, Option_column.시가.value).setForeground(QBrush(검정색))
                else:
                    pass

                if 콜시가 in FIXED_COREVAL:
                    self.tableWidget_call.item(index, Option_column.시가.value).setBackground(QBrush(검정색))
                    self.tableWidget_call.item(index, Option_column.시가.value).setForeground(QBrush(노란색))
                    flag_call_open_in_fixed_coreval = True
                else:
                    pass
                
                call_시가 = df_call['시가'].values.tolist()
                call_시가_node_list = self.make_node_list(call_시가)                

                txt = '[{0:02d}:{1:02d}:{2:02d}] Call {3:.2f} Open Update !!!\r'.format \
                    (dt.hour, dt.minute, dt.second, 콜시가)
                self.textBrowser.append(txt)

                if index == option_pairs_count - 1:

                    txt = '[{0:02d}:{1:02d}:{2:02d}] 콜 최대 시작가 {3} 오픈되었습니다.\r'.format \
                        (dt.hour, dt.minute, dt.second, 콜시가)
                    self.textBrowser.append(txt)
                else:
                    pass
            else:
                pass

            피봇 = calc_pivot(콜전저, 콜전고, 콜종가, 콜시가, 2)

            if 피봇 != float(self.tableWidget_call.item(index, Option_column.피봇.value).text()):

                df_call.at[index, '피봇'] = 피봇

                if 피봇 >= 100:
                    item = QTableWidgetItem("{0:0.1f}".format(피봇))
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_call.setItem(index, Option_column.피봇.value, item)   
                else:
                    item = QTableWidgetItem("{0:.2f}".format(피봇))
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_call.setItem(index, Option_column.피봇.value, item)

                call_피봇 = df_call['피봇'].values.tolist()
                call_피봇_node_list = self.make_node_list(call_피봇)
            else:
                pass

            if call_scroll_begin_position <= index <= call_scroll_end_position:

                # 현재가 갱신
                콜_과거가 = self.tableWidget_call.item(index, Option_column.현재가.value).text().split('\n')[0]

                if 현재가 != 콜_과거가:

                    df_call.at[index, '현재가'] = 콜현재가

                    if 콜현재가 < float(콜_과거가):
                        item = QTableWidgetItem(현재가 + '\n' + '▼')
                        item.setBackground(QBrush(lightskyblue))
                    elif 콜현재가 > float(콜_과거가):
                        item = QTableWidgetItem(현재가 + '\n' + '▲')
                        item.setBackground(QBrush(pink))
                    else:    
                        item = QTableWidgetItem(현재가)
                        item.setBackground(QBrush(흰색))

                    if 콜시가 < 콜현재가:
                        item.setForeground(QBrush(적색))
                    elif 콜시가 > 콜현재가:
                        item.setForeground(QBrush(청색))
                    else:
                        item.setForeground(QBrush(검정색))

                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_call.setItem(index, Option_column.현재가.value, item)

                    if ResizeRowsToContents:
                        self.tableWidget_call.resizeRowToContents(index)
                    else:
                        pass

                    콜대비 = 콜현재가 - 콜시가
                    df_call.at[index, '대비'] = 콜대비

                    if 콜시가 > 0.1:
                        call_db_percent[index] = (콜현재가 / 콜시가 - 1) * 100

                        gap_txt = "{0:.2f}\n{1:.1f}%".format(콜대비, call_db_percent[index])                                            

                        item = QTableWidgetItem(gap_txt)
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_call.setItem(index, Option_column.대비.value, item)
                    else:
                        pass       
                else:
                    pass
                
                # 저가 갱신
                if 저가 != 고가 and 저가 != self.tableWidget_call.item(index, Option_column.저가.value).text().split('\n')[0]:

                    df_call.at[index, '저가'] = 콜저가

                    콜진폭 = 콜고가 - 콜저가
                    df_call.at[index, '진폭'] = 콜진폭

                    콜기준가 = df_call.at[index, '기준가']
                    콜월저 = df_call.at[index, '월저']
                    콜전저 = df_call.at[index, '전저']

                    item = QTableWidgetItem('▼')
                    self.tableWidget_call.setHorizontalHeaderItem(Option_column.저가.value, item)

                    call_저가 = df_call['저가'].values.tolist()
                    call_저가_node_list = self.make_node_list(call_저가)

                    if SEARCH_MOVING_NODE_START_VALUE < 콜저가 < SEARCH_MOVING_NODE_END_VALUE:
                        self.opt_high_low_list_update()
                        빈도수 = moving_list.count(콜저가)
                        item = QTableWidgetItem(저가 + '\n(' + repr(빈도수) + ')')
                    else:
                        item = QTableWidgetItem(저가)

                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(lightskyblue))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_call.setItem(index, Option_column.저가.value, item)

                    if 콜저가 in FIXED_COREVAL:
                        self.tableWidget_call.item(index, Option_column.저가.value).setBackground(QBrush(노란색))
                        self.tableWidget_call.item(index, Option_column.저가.value).setForeground(QBrush(적색)) 
                    else:
                        pass

                    if 콜전저 >= 콜저가:

                        txt = '{0:.2f}'.format(콜전저) + '\n' + '▼'

                        if str != self.tableWidget_call.item(index, Option_column.전저.value).text():
                            item = QTableWidgetItem(txt)
                            item.setTextAlignment(Qt.AlignCenter)

                            if DARK_STYLESHEET:
                                item.setForeground(QBrush(cyan))
                            else:
                                item.setForeground(QBrush(청색))

                            self.tableWidget_call.setItem(index, Option_column.전저.value, item)
                        else:
                            pass
                    else:
                        pass

                    if 콜월저 >= 콜저가:

                        txt = '{0:.2f}'.format(콜월저) + '\n' + '▼'

                        if str != self.tableWidget_call.item(index, Option_column.월저.value).text():
                            item = QTableWidgetItem(txt)
                            item.setTextAlignment(Qt.AlignCenter)

                            if DARK_STYLESHEET:
                                item.setForeground(QBrush(cyan))
                            else:
                                item.setForeground(QBrush(청색))

                            self.tableWidget_call.setItem(index, Option_column.월저.value, item)
                        else:
                            pass
                    else:
                        pass

                    if DayTime and 콜기준가 >= 콜저가:

                        if ATM_INDEX - 3 <= index <= ATM_INDEX + 3:
                            pass
                        else:
                            txt = '{0:.2f}'.format(콜기준가) + '\n' + '▼'

                            if str != self.tableWidget_call.item(index, Option_column.기준가.value).text():
                                item = QTableWidgetItem(txt)
                                item.setTextAlignment(Qt.AlignCenter)

                                if DARK_STYLESHEET:
                                    item.setForeground(QBrush(cyan))
                                else:
                                    item.setForeground(QBrush(청색))

                                self.tableWidget_call.setItem(index, Option_column.기준가.value, item)
                            else:
                                pass
                    else:
                        pass

                    item = QTableWidgetItem("{0:.2f}".format(콜진폭))
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_call.setItem(index, Option_column.진폭.value, item)

                    self.check_call_oloh(tickdata)

                    # 콜은 인덱스 기준으로 갱신
                    if 콜저가 < 콜고가:
                        flag_call_low_update = True
                    else:
                        pass

                    process_time = (timeit.default_timer() - start_time) * 1000

                    txt = '[{0:02d}:{1:02d}:{2:02d}] Call 저가 {3} Update : {4:.2f} ms\r'.format(dt.hour, dt.minute, dt.second, 콜저가, process_time)
                    self.textBrowser.append(txt)
                    print(txt) 
                else:
                    pass             

                # 고가 갱신
                if 저가 != 고가 and 고가 != self.tableWidget_call.item(index, Option_column.고가.value).text().split('\n')[0]:

                    df_call.at[index, '고가'] = 콜고가

                    콜진폭 = 콜고가 - 콜저가
                    df_call.at[index, '진폭'] = 콜진폭

                    콜월고 = df_call.at[index, '월고']
                    콜전고 = df_call.at[index, '전고']

                    item = QTableWidgetItem('▲')
                    self.tableWidget_call.setHorizontalHeaderItem(Option_column.고가.value, item)

                    call_고가 = df_call['고가'].values.tolist()
                    call_고가_node_list = self.make_node_list(call_고가)

                    if SEARCH_MOVING_NODE_START_VALUE < 콜고가 < SEARCH_MOVING_NODE_END_VALUE:
                        self.opt_high_low_list_update()
                        빈도수 = moving_list.count(콜고가)
                        item = QTableWidgetItem(고가 + '\n(' + repr(빈도수) + ')')
                    else:
                        item = QTableWidgetItem(고가)            

                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(pink))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_call.setItem(index, Option_column.고가.value, item)

                    if 콜고가 in FIXED_COREVAL:
                        self.tableWidget_call.item(index, Option_column.고가.value).setBackground(QBrush(노란색))
                        self.tableWidget_call.item(index, Option_column.고가.value).setForeground(QBrush(적색)) 
                    else:
                        pass

                    if 콜전고 <= 콜고가:

                        txt = '{0:.2f}'.format(콜전고) + '\n' + '▲'

                        if str != self.tableWidget_call.item(index, Option_column.전고.value).text():
                            item = QTableWidgetItem(txt)
                            item.setTextAlignment(Qt.AlignCenter)
                            item.setForeground(QBrush(magenta))             
                            self.tableWidget_call.setItem(index, Option_column.전고.value, item)
                        else:
                            pass
                    else:
                        pass

                    if 콜월고 <= 콜고가:

                        txt = '{0:.2f}'.format(콜월고) + '\n' + '▲'

                        if str != self.tableWidget_call.item(index, Option_column.월고.value).text():
                            item = QTableWidgetItem(txt)
                            item.setTextAlignment(Qt.AlignCenter)
                            item.setForeground(QBrush(magenta))             
                            self.tableWidget_call.setItem(index, Option_column.월고.value, item)
                        else:
                            pass
                    else:
                        pass

                    item = QTableWidgetItem("{0:.2f}".format(콜진폭))
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_call.setItem(index, Option_column.진폭.value, item)

                    self.check_call_oloh(tickdata)

                    # 콜은 인덱스 기준으로 갱신
                    if 콜저가 < 콜고가:
                        flag_call_high_update = True
                    else:
                        pass

                    process_time = (timeit.default_timer() - start_time) * 1000

                    txt = '[{0:02d}:{1:02d}:{2:02d}] Call 고가 {3} Update : {4:.2f} ms\r'.format(dt.hour, dt.minute, dt.second, 콜고가, process_time)
                    self.textBrowser.append(txt)
                    print(txt) 
                else:
                    pass
            else:
                pass

        except Exception as e:

            txt = '[{0:02d}:{1:02d}:{2:02d}] Exception : call_update 에서 {3} \n상기 오류가 발생했습니다.\r'.format(dt.hour, dt.minute, dt.second, traceback.format_exc())
            self.parent.textBrowser.append(txt)
    
    def call_db_update(self):

        global call_진폭, 콜대비합, df_call_information_graph
        global call_otm_cdb_mean, call_otm_cdb_percent_mean, call_otm_jdb_mean, call_otm_jdb_percent_mean
        global drate_gap
        
        진폭최대값 = df_call['진폭'].max()

        max_txt = '{0:.2f}'.format(진폭최대값)

        if max_txt != self.tableWidget_call.horizontalHeaderItem(Option_column.진폭.value).text():
            item = QTableWidgetItem(max_txt)
            self.tableWidget_call.setHorizontalHeaderItem(Option_column.진폭.value, item)
        else:
            pass

        #remove_set = {0, nan, NaN}
        
        # 처리시간 줄여야함
        call_otm_cdb_local = copy.deepcopy(call_otm_cdb)
        call_otm_cdb_local_remove_set = [i for i in call_otm_cdb_local if i not in remove_set]

        call_otm_jdb_local = copy.deepcopy(call_otm_jdb)
        call_otm_jdb_local_remove_set = [i for i in call_otm_jdb_local if i not in remove_set]

        call_otm_cdb_percent_local = copy.deepcopy(call_otm_cdb_percent)
        call_otm_cdb_percent_local_remove_set = [i for i in call_otm_cdb_percent_local if i not in remove_set]

        call_otm_jdb_percent_local = copy.deepcopy(call_otm_jdb_percent)
        call_otm_jdb_percent_local_remove_set = [i for i in call_otm_jdb_percent_local if i not in remove_set]

        np_call_otm_cdb_local = np.array(call_otm_cdb_local_remove_set)
        np_call_otm_cdb_percent_local = np.array(call_otm_cdb_percent_local_remove_set)

        np_call_otm_jdb_local = np.array(call_otm_jdb_local_remove_set)
        np_call_otm_jdb_percent_local = np.array(call_otm_jdb_percent_local_remove_set)

        call_otm_cdb_mean = round(np.mean(np_call_otm_cdb_local), 2)            
        call_otm_cdb_percent_mean = round(np.mean(np_call_otm_cdb_percent_local), 1)

        call_otm_jdb_mean = round(np.mean(np_call_otm_jdb_local), 2)            
        call_otm_jdb_percent_mean = round(np.mean(np_call_otm_jdb_percent_local), 1)

        if flag_market_service:
            df_call_information_graph.at[plot_time_index, 'Drate'] = call_otm_cdb_percent_mean
            drate_gap = call_otm_cdb_percent_mean - plot_drate_scale_factor * 근월물_선물_시가대비_등락율
        else:
            pass

        call_txt = repr(call_otm_cdb_mean) + '\n' + repr(call_otm_cdb_percent_mean) + '%'

        item = QTableWidgetItem(call_txt)
        self.tableWidget_call.setHorizontalHeaderItem(Option_column.대비.value, item)

        if ResizeRowsToContents:
            self.tableWidget_call.resizeRowsToContents()
        else:
            pass
        
        self.tableWidget_call.resizeColumnToContents(Option_column.대비.value)            
        
    def call_oi_update(self):
	
        index = call_행사가.index(call_tickdata['단축코드'][5:8])

        수정미결 = format(df_call.at[index, '수정미결'], ',')

        if 수정미결 != self.tableWidget_call.item(index, Option_column.OI.value).text():

            item = QTableWidgetItem(수정미결)
            item.setTextAlignment(Qt.AlignCenter)
            self.tableWidget_call.setItem(index, Option_column.OI.value, item)
        else:
            pass          

        수정미결증감 = format(df_call.at[index, '수정미결증감'], ',')

        if 수정미결증감 != self.tableWidget_call.item(index, Option_column.OID.value).text():

            item = QTableWidgetItem(수정미결증감)
            item.setTextAlignment(Qt.AlignCenter)

            if int(call_tickdata['미결제약정증감']) < 0:
                item.setBackground(QBrush(라임))
            else:
                item.setBackground(QBrush(흰색))

            item.setForeground(QBrush(검정색))

            self.tableWidget_call.setItem(index, Option_column.OID.value, item)
            self.tableWidget_call.resizeColumnToContents(Option_column.OID.value)
        else:
            pass
        
        수정미결합 = '{0}k'.format(format(int(df_call['수정미결'].sum()/1000), ','))

        if 수정미결합 != self.tableWidget_call.horizontalHeaderItem(Option_column.OI.value).text():
            item = QTableWidgetItem(수정미결합)
            item.setTextAlignment(Qt.AlignCenter)
            self.tableWidget_call.setHorizontalHeaderItem(Option_column.OI.value, item)
            self.tableWidget_call.resizeColumnToContents(Option_column.OI.value)
        else:
            pass    
    
    def call_volume_power_update(self):

        global df_call, df_call_volume, call_volume_power, call_volume, df_call_information_graph   
        global 콜_순매수_체결량

        index = call_행사가.index(call_tickdata['단축코드'][5:8])

        콜현재가 = df_call.at[index, '현재가']
        콜시가갭 = df_call.at[index, '시가갭']

        if 콜현재가 <= 콜시가갭:

            수정거래량 = (int(call_tickdata['매수누적체결량']) - int(call_tickdata['매도누적체결량'])) * 콜현재가

            if DayTime:

                매도누적체결건수 = int(call_tickdata['매도누적체결건수']) * 콜현재가
                매수누적체결건수 = int(call_tickdata['매수누적체결건수']) * 콜현재가
            else:
                pass
        else:

            수정거래량 = (int(call_tickdata['매수누적체결량']) - int(call_tickdata['매도누적체결량'])) * (콜현재가 - 콜시가갭)

            if DayTime:

                매도누적체결건수 = int(call_tickdata['매도누적체결건수']) * (콜현재가 - 콜시가갭)
                매수누적체결건수 = int(call_tickdata['매수누적체결건수']) * (콜현재가 - 콜시가갭)
            else:
                pass

        콜수정거래량 = int(수정거래량)
        df_call.at[index, '수정거래량'] = 콜수정거래량
        df_call.at[index, '거래량'] = int(call_tickdata['누적거래량'])

        if DayTime:

            df_call_volume.at[index, '매도누적체결건수'] = int(매도누적체결건수)
            df_call_volume.at[index, '매수누적체결건수'] = int(매수누적체결건수)
        else:
            pass
        
        수정거래량 = format(콜수정거래량, ',')

        if 수정거래량 != self.tableWidget_call.item(index, Option_column.VP.value).text():

            item = QTableWidgetItem(수정거래량)
            item.setTextAlignment(Qt.AlignCenter)

            if 콜수정거래량 > 0:
                item.setBackground(QBrush(pink))
            else:
                item.setBackground(QBrush(lightskyblue))

            item.setForeground(QBrush(검정색))

            self.tableWidget_call.setItem(index, Option_column.VP.value, item)
        else:
            pass

        순매수누적체결량 = format(call_volume_power, ',')

        if 순매수누적체결량 != self.tableWidget_call.horizontalHeaderItem(Option_column.VP.value).text():
            item = QTableWidgetItem(순매수누적체결량)
            item.setTextAlignment(Qt.AlignCenter)
            self.tableWidget_call.setHorizontalHeaderItem(Option_column.VP.value, item)
            self.tableWidget_call.resizeColumnToContents(Option_column.VP.value)            
        else:
            pass        
        
        call_volume = df_call_volume.sum()

        매수잔량 = format(int(call_volume['매수누적체결량']), ',')
        매도잔량 = format(int(call_volume['매도누적체결량']), ',')
        
        if DayTime:

            매수건수 = format(int(call_volume['매수누적체결건수']), ',')

            if 매수건수 != self.tableWidget_quote.item(0, 0).text():
                item = QTableWidgetItem(매수건수)
                item.setTextAlignment(Qt.AlignCenter)
                self.tableWidget_quote.setItem(0, 0, item)
            else:
                pass

            매도건수 = format(int(call_volume['매도누적체결건수']), ',')

            if 매도건수 != self.tableWidget_quote.item(0, 1).text():
                item = QTableWidgetItem(매도건수)
                item.setTextAlignment(Qt.AlignCenter)
                self.tableWidget_quote.setItem(0, 1, item)
            else:
                pass
        else:
            pass
        
        콜_순매수_체결량 = int(call_volume['매수누적체결량']) - int(call_volume['매도누적체결량'])

        if 매수잔량 != self.tableWidget_quote.item(0, 2).text():
            item = QTableWidgetItem(매수잔량)
            item.setTextAlignment(Qt.AlignCenter)

            if 콜_순매수_체결량 > 0 and 풋_순매수_체결량 < 0:

                item.setBackground(QBrush(적색))
                item.setForeground(QBrush(검정색))

            elif 콜_순매수_체결량 < 0 and 풋_순매수_체결량 > 0:

                item.setBackground(QBrush(청색))
                item.setForeground(QBrush(흰색))

            elif 콜_순매수_체결량 < 0 and 풋_순매수_체결량 < 0:

                item.setBackground(QBrush(검정색))
                item.setForeground(QBrush(흰색))
            else:
                item.setBackground(QBrush(흰색))
                item.setForeground(QBrush(검정색))         

            self.tableWidget_quote.setItem(0, 2, item)
        else:
            pass

        temp = format(콜_순매수_체결량, ',')
        item_txt = "{0}\n({1})".format(매도잔량, temp)

        if item_txt != self.tableWidget_quote.item(0, 3).text():
            item = QTableWidgetItem(item_txt)
            item.setTextAlignment(Qt.AlignCenter)

            if 콜_순매수_체결량 > 0 and 풋_순매수_체결량 < 0:

                item.setBackground(QBrush(적색))
                item.setForeground(QBrush(검정색))

            elif 콜_순매수_체결량 < 0 and 풋_순매수_체결량 > 0:

                item.setBackground(QBrush(청색))
                item.setForeground(QBrush(흰색))

            elif 콜_순매수_체결량 < 0 and 풋_순매수_체결량 < 0:

                item.setBackground(QBrush(검정색))
                item.setForeground(QBrush(흰색))
            else:
                item.setBackground(QBrush(흰색))
                item.setForeground(QBrush(검정색))            

            self.tableWidget_quote.setItem(0, 3, item)
        else:
            pass
    
    def call_open_check(self):

        global df_call, call_itm_count
        global call_open, call_ol, call_oh
        global call_gap_percent, call_db_percent
        global call_ol_count, call_oh_count
        global 콜대비합, call_otm_cdb_mean
        global call_open_count        
        global 콜시가갭합, 콜시가갭합_퍼센트평균, 콜시가갭합_단위평균, call_otm_cdb_percent_mean
        global call_otm_cdb, call_otm_cdb_percent
        global nm_call_oloh_txt, 콜_등가_시가등락율, plot_drate_scale_factor
        
        dt = datetime.now()

        if not flag_market_service or call_scroll or refresh_coloring:
            
            call_ol = [False] * option_pairs_count
            call_oh = [False] * option_pairs_count
            call_gap_percent = [0] * option_pairs_count
            call_db_percent = [0] * option_pairs_count
            call_itm_count = 0
            call_otm_cdb = [0] * option_pairs_count
            call_otm_cdb_percent = [0] * option_pairs_count
            call_open = [False] * option_pairs_count
            call_ol_count = 0
            call_oh_count = 0            

            if refresh_coloring:
                loop_list = self.opt_total_actval_list
            else:
                if self.call_open_list:
                    loop_list = self.call_open_list
                else:
                    loop_list = self.opt_total_actval_list

            for index in loop_list:

                if index % 10 == 0:
                    QApplication.processEvents()
                else:
                    pass

                종가 = df_call.at[index, '종가']
                시가 = df_call.at[index, '시가']
                저가 = df_call.at[index, '저가']
                고가 = df_call.at[index, '고가']
                현재가 = df_call.at[index, '현재가']

                item = QTableWidgetItem('-')
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(검정색))
                item.setForeground(QBrush(흰색))
                self.tableWidget_call.setItem(index, Option_column.OLOH.value, item)

                if 시가 > opt_search_start_value:

                    if index != ATM_INDEX:
                        self.tableWidget_call.item(index, Option_column.행사가.value).setBackground(QBrush(라임))
                        self.tableWidget_call.item(index, Option_column.행사가.value).setForeground(QBrush(검정색))
                    else:
                        self.tableWidget_call.item(index, Option_column.행사가.value).setBackground(QBrush(노란색))
                        self.tableWidget_call.item(index, Option_column.행사가.value).setForeground(QBrush(검정색))
                    
                    if 종가 > 0 and 저가 < 고가:

                        시가갭 = 시가 - 종가
                        df_call.at[index, '시가갭'] = 시가갭

                        call_gap_percent[index] = (시가 / 종가 - 1) * 100
                        콜_등가_시가등락율 = call_gap_percent[ATM_INDEX]

                        gap_txt = "{0:.2f}\n{1:.1f}%".format(시가갭, call_gap_percent[index])

                        item = QTableWidgetItem(gap_txt)
                        item.setTextAlignment(Qt.AlignCenter)

                        if 시가 > 종가:
                            item.setBackground(QBrush(콜기준가색))
                            item.setForeground(QBrush(검정색))
                        elif 시가 < 종가:
                            item.setBackground(QBrush(풋기준가색))
                            item.setForeground(QBrush(흰색))
                        else:
                            item.setBackground(QBrush(검정색))
                            item.setForeground(QBrush(흰색))

                        self.tableWidget_call.setItem(index, Option_column.시가갭.value, item)
                    else:
                        pass

                    if 저가 < 고가:

                        if index > ATM_INDEX:
                            call_itm_count += 1
                        else:
                            pass

                        call_open[index] = True                   

                        if 시가 >= oloh_cutoff:

                            if 시가 < 1.0:

                                oloh_threshold = 1

                            elif 1.0 <= 시가 < 2.0:

                                oloh_threshold = 2

                            elif 2.0 <= 시가 < 3.0:

                                oloh_threshold = 3

                            elif 3.0 <= 시가 < 4.0:

                                oloh_threshold = 4
                            else:
                                oloh_threshold = 5   

                            # call OL/OH count
                            if self.is_within_n_tick(시가, 저가, oloh_threshold) and not self.is_within_n_tick(시가, 고가, oloh_threshold):

                                oloh_txt = '▲'

                                item = QTableWidgetItem(oloh_txt)
                                item.setTextAlignment(Qt.AlignCenter)
                                item.setBackground(QBrush(적색))
                                item.setForeground(QBrush(흰색))
                                self.tableWidget_call.setItem(index, Option_column.OLOH.value, item)

                                self.tableWidget_call.item(index, Option_column.시가.value).setBackground(QBrush(적색))
                                self.tableWidget_call.item(index, Option_column.시가.value).setForeground(QBrush(검정색))  

                                self.tableWidget_call.item(index, Option_column.저가.value).setBackground(QBrush(적색))
                                self.tableWidget_call.item(index, Option_column.저가.value).setForeground(QBrush(검정색))

                                call_ol[index] = True

                            elif self.is_within_n_tick(시가, 고가, oloh_threshold) and not self.is_within_n_tick(시가, 저가, oloh_threshold):

                                oloh_txt = '▼'

                                item = QTableWidgetItem(oloh_txt)
                                item.setTextAlignment(Qt.AlignCenter)
                                item.setBackground(QBrush(청색))
                                item.setForeground(QBrush(흰색))
                                self.tableWidget_call.setItem(index, Option_column.OLOH.value, item)

                                self.tableWidget_call.item(index, Option_column.시가.value).setBackground(QBrush(적색))
                                self.tableWidget_call.item(index, Option_column.시가.value).setForeground(QBrush(검정색))  

                                self.tableWidget_call.item(index, Option_column.고가.value).setBackground(QBrush(적색))
                                self.tableWidget_call.item(index, Option_column.고가.value).setForeground(QBrush(검정색)) 

                                call_oh[index] = True
                            else:
                                oloh_txt = '-'

                                if oloh_txt != self.tableWidget_call.item(index, Option_column.OLOH.value).text():
                                    item = QTableWidgetItem(oloh_txt)
                                    item.setTextAlignment(Qt.AlignCenter)
                                    item.setBackground(QBrush(검정색))
                                    item.setForeground(QBrush(흰색))
                                    self.tableWidget_call.setItem(index, Option_column.OLOH.value, item)
                                else:
                                    pass

                                call_ol[index] = False
                                call_oh[index] = False
                        else:
                            pass
                    else:
                        pass

                    if 시가 > 0 and 저가 < 고가:

                        대비 = 현재가 - 시가

                        df_call.at[index, '대비'] = 대비
                        call_db_percent[index] = (현재가 / 시가 - 1) * 100

                        gap_txt = "{0:.2f}\n{1:.1f}%".format(대비, call_db_percent[index])

                        if gap_txt != self.tableWidget_call.item(index, Option_column.대비.value).text():

                            item = QTableWidgetItem(gap_txt)
                            item.setTextAlignment(Qt.AlignCenter)
                            self.tableWidget_call.setItem(index, Option_column.대비.value, item)
                        else:
                            pass
                    else:
                        pass
                else:
                    pass

                # 콜 외가(등가포함) 대비 저장
                if index <= ATM_INDEX and 시가 > OTM_SEARCH_START_VAL and 저가 < 고가:
                    call_otm_cdb[index] = 현재가 - 시가
                    call_otm_cdb_percent[index] = (현재가 / 시가 - 1) * 100
                else:
                    pass

            # Call Open Count 및 OLOH 표시
            call_open_count = call_open.count(True)

            if call_open[option_pairs_count - 1]:

                new_actval = repr(call_itm_count) + '/' + repr(call_open_count) + '\n*'
            else:
                new_actval = repr(call_itm_count) + '/' + repr(call_open_count)

            if new_actval != self.tableWidget_call.horizontalHeaderItem(1).text():
                item = QTableWidgetItem(new_actval)
                item.setTextAlignment(Qt.AlignCenter)
                self.tableWidget_call.setHorizontalHeaderItem(1, item)
            else:
                pass

            call_ol_count = call_ol.count(True)
            call_oh_count = call_oh.count(True)

            new_oloh = repr(call_ol_count) + ':' + repr(call_oh_count)
            item = QTableWidgetItem(new_oloh)
            item.setTextAlignment(Qt.AlignCenter)
            self.tableWidget_call.setHorizontalHeaderItem(2, item)

            if TARGET_MONTH == 'NM':

                if call_ol_count > 0 or call_oh_count > 0:
                    nm_call_oloh_txt = '▲:▼ = ' + repr(call_ol_count) + ':' + repr(call_oh_count)
                else:
                    nm_call_oloh_txt = ''                        
            else:
                pass

            # 시가갭 갱신
            call_gap_percent_local = copy.deepcopy(call_gap_percent)
            result1 = [i for i in call_gap_percent_local if i not in remove_set]

            np_call_gap_percent_local = np.array(result1)

            콜시가갭합_단위평균 = round(df_call['시가갭'].sum()/len(call_gap_percent), 2)        
            콜시가갭합_퍼센트평균 = round(np.mean(np_call_gap_percent_local), 1)

            call_txt = repr(콜시가갭합_단위평균) + '\n' + repr(콜시가갭합_퍼센트평균) + '%'

            item = QTableWidgetItem(call_txt)
            item.setTextAlignment(Qt.AlignCenter)
            self.tableWidget_call.setHorizontalHeaderItem(Option_column.시가갭.value, item)

            #self.call_db_update()
        else:
            pass

    def check_put_oloh(self, tickdata):

        global put_ol, put_oh
        global put_ol_count, put_oh_count

        index = put_행사가.index(tickdata['단축코드'][5:8])
        
        풋시가 = float(tickdata['시가'])
        풋현재가 = float(tickdata['현재가'])
        풋저가 = float(tickdata['저가'])
        풋고가 = float(tickdata['고가'])

        if 풋시가 >= oloh_cutoff:

            if 풋시가 < 1.0:

                oloh_threshold = 1

            elif 1.0 <= 풋시가 < 2.0:

                oloh_threshold = 2

            elif 2.0 <= 풋시가 < 3.0:

                oloh_threshold = 3

            elif 3.0 <= 풋시가 < 4.0:

                oloh_threshold = 4
            else:
                oloh_threshold = 5   

            # call OL/OH count
            if self.is_within_n_tick(풋시가, 풋저가, oloh_threshold) and not self.is_within_n_tick(풋시가, 풋고가, oloh_threshold):

                if not put_ol[index]:

                    oloh_txt = '▲'

                    item = QTableWidgetItem(oloh_txt)
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(적색))
                    item.setForeground(QBrush(흰색))
                    self.tableWidget_put.setItem(index, Option_column.OLOH.value, item)

                    self.tableWidget_put.item(index, Option_column.시가.value).setBackground(QBrush(청색))
                    self.tableWidget_put.item(index, Option_column.시가.value).setForeground(QBrush(흰색))  

                    self.tableWidget_put.item(index, Option_column.저가.value).setBackground(QBrush(청색))
                    self.tableWidget_put.item(index, Option_column.저가.value).setForeground(QBrush(흰색))

                    put_ol[index] = True
                else:
                    pass

            elif self.is_within_n_tick(풋시가, 풋고가, oloh_threshold) and not self.is_within_n_tick(풋시가, 풋저가, oloh_threshold):

                if not put_oh[index]:

                    oloh_txt = '▼'

                    item = QTableWidgetItem(oloh_txt)
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(청색))
                    item.setForeground(QBrush(흰색))
                    self.tableWidget_put.setItem(index, Option_column.OLOH.value, item)

                    self.tableWidget_put.item(index, Option_column.시가.value).setBackground(QBrush(청색))
                    self.tableWidget_put.item(index, Option_column.시가.value).setForeground(QBrush(흰색))  

                    self.tableWidget_put.item(index, Option_column.고가.value).setBackground(QBrush(청색))
                    self.tableWidget_put.item(index, Option_column.고가.value).setForeground(QBrush(흰색)) 

                    put_oh[index] = True
                else:
                    pass
            else:

                if put_ol[index]:

                    oloh_txt = '-'

                    if oloh_txt != self.tableWidget_put.item(index, Option_column.OLOH.value).text():
                        item = QTableWidgetItem(oloh_txt)
                        item.setTextAlignment(Qt.AlignCenter)
                        item.setBackground(QBrush(검정색))
                        item.setForeground(QBrush(흰색))
                        self.tableWidget_put.setItem(index, Option_column.OLOH.value, item)
                    else:
                        pass

                    put_ol[index] = False
                else:
                    pass

                if put_oh[index]:

                    oloh_txt = '-'

                    if oloh_txt != self.tableWidget_put.item(index, Option_column.OLOH.value).text():
                        item = QTableWidgetItem(oloh_txt)
                        item.setTextAlignment(Qt.AlignCenter)
                        item.setBackground(QBrush(검정색))
                        item.setForeground(QBrush(흰색))
                        self.tableWidget_put.setItem(index, Option_column.OLOH.value, item)
                    else:
                        pass

                    put_oh[index] = False
                else:
                    pass
        else:
            pass        

        put_ol_count = put_ol.count(True)
        put_oh_count = put_oh.count(True)

        new_oloh = repr(put_ol_count) + ':' + repr(put_oh_count)

        if new_oloh != self.tableWidget_put.horizontalHeaderItem(2).text():
            item = QTableWidgetItem(new_oloh)
            item.setTextAlignment(Qt.AlignCenter)
            self.tableWidget_put.setHorizontalHeaderItem(2, item)
        else:
            pass
        
    # 풋 표시
    def put_update(self, tickdata):

        global put_open, put_itm_count
        global df_put
        global df_put_graph
        global atm_txt, ATM_INDEX, put_atm_value
        global put_시가, put_시가_node_list, put_피봇, put_피봇_node_list, 풋시가리스트
        global put_저가, put_저가_node_list, put_고가, put_고가_node_list
        global opt_putreal_update_counter
        global df_put_volume, put_volume_power, df_put_information_graph
        global put_max_actval, put_open, put_ol, put_oh
        global 풋_인덱스, 풋_시가, 풋_현재가, 풋_저가, 풋_고가
        global flag_put_low_update, flag_put_high_update
        global put_gap_percent, put_db_percent, put_otm_cdb, put_otm_cdb_percent, put_otm_jdb, put_otm_jdb_percent
        global put_otm_cdb_percent_mean
        global 풋_등가_등락율, 풋_등가_시가등락율, plot_drate_scale_factor
        global flag_put_open_in_fixed_coreval

        try:
            dt = datetime.now()
            start_time = timeit.default_timer()

            index = put_행사가.index(tickdata['단축코드'][5:8])

            시가 = tickdata['시가']
            현재가 = tickdata['현재가']
            저가 = tickdata['저가']
            고가 = tickdata['고가']
            등락율 = tickdata['등락율']        

            풋종가 = df_put.at[index, '종가']
            풋전저 = df_put.at[index, '전저']
            풋전고 = df_put.at[index, '전고']
            풋시가 = float(tickdata['시가'])
            풋현재가 = float(tickdata['현재가'])
            풋저가 = float(tickdata['저가'])
            풋고가 = float(tickdata['고가'])
            풋등락율 = float(tickdata['등락율'])

            if index == ATM_INDEX:
                풋_등가_시가등락율 = (풋시가 / 풋종가 - 1) * 100
            else:
                pass

            # 풋 외가(등가포함) 대비 저장
            if index >= ATM_INDEX and 풋시가 > OTM_SEARCH_START_VAL and 풋저가 < 풋고가:
                put_otm_cdb[index] = 풋현재가 - 풋시가
                put_otm_cdb_percent[index] = (풋현재가 / 풋시가 - 1) * 100
                put_otm_jdb[index] = 풋현재가 - 풋종가
                put_otm_jdb_percent[index] = 풋등락율
            else:
                pass
            
            if 저가 != 고가 and not put_open[index]:

                # 등가 check & coloring
                self.tableWidget_put.item(index, Option_column.행사가.value).setBackground(QBrush(라임))
                self.tableWidget_put.item(index, Option_column.행사가.value).setForeground(QBrush(검정색))

                put_open[index] = True

                # 풋 시가 갱신
                if 풋시가 > opt_search_start_value:
                    self.put_open_list.append(index)
                    self.put_open_list = list(set(self.put_open_list))
                else:
                    pass

                txt = '[{0:02d}:{1:02d}:{2:02d}] Put Open List = {3}\r'.format \
                    (dt.hour, dt.minute, dt.second, self.put_open_list)
                self.textBrowser.append(txt)

                if DayTime and index < ATM_INDEX:
                    put_itm_count += 1
                else:
                    pass

                # Put Open Count 표시
                put_open_count = put_open.count(True)

                if put_open[0]:

                    new_actval = repr(put_itm_count) + '/' + repr(put_open_count) + '\n*'
                else:
                    new_actval = repr(put_itm_count) + '/' + repr(put_open_count)

                if new_actval != self.tableWidget_put.horizontalHeaderItem(1).text():
                    item = QTableWidgetItem(new_actval)
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_put.setHorizontalHeaderItem(1, item)
                else:
                    pass
            else:
                pass       
            
            # 시가 갱신
            if 시가 != self.tableWidget_put.item(index, Option_column.시가.value).text():

                df_put.at[index, '시가'] = 풋시가                

                df_put_graph[index].at[GuardTime + 1, 'Open'] = 풋시가
                df_put_graph[index].at[GuardTime + 1, 'Price'] = 풋시가

                item = QTableWidgetItem(시가)
                item.setTextAlignment(Qt.AlignCenter)

                if 풋시가 > 풋종가:
                    item.setForeground(QBrush(magenta))
                    item.setBackground(QBrush(검정색))
                elif 풋시가 < 풋종가:
                    item.setForeground(QBrush(cyan))
                    item.setBackground(QBrush(검정색))
                else:
                    item.setForeground(QBrush(흰색))
                    item.setBackground(QBrush(검정색))

                self.tableWidget_put.setItem(index, Option_column.시가.value, item)

                시가갭 = 풋시가 - 풋종가
                df_put.at[index, '시가갭'] = 시가갭

                #if 풋시가 > OTM_SEARCH_START_VAL:
                if True:
                    put_gap_percent[index] = (풋시가 / 풋종가 - 1) * 100

                    gap_txt = "{0:.2f}\n{1:.1f}%".format(시가갭, put_gap_percent[index])

                    item = QTableWidgetItem(gap_txt)
                    item.setTextAlignment(Qt.AlignCenter)

                    if 풋시가 > 풋종가:
                        item.setBackground(QBrush(콜기준가색))
                        item.setForeground(QBrush(검정색))
                    elif 풋시가 < 풋종가:
                        item.setBackground(QBrush(풋기준가색))
                        item.setForeground(QBrush(흰색))
                    else:
                        item.setBackground(QBrush(검정색))
                        item.setForeground(QBrush(흰색))

                    self.tableWidget_put.setItem(index, Option_column.시가갭.value, item)

                    # 시가갭 갱신
                    put_gap_percent_local = copy.deepcopy(put_gap_percent)
                    result1 = [i for i in put_gap_percent_local if i not in remove_set]

                    np_put_gap_percent_local = np.array(result1)

                    풋시가갭합_단위평균 = round(df_put['시가갭'].sum()/len(put_gap_percent), 2)        
                    풋시가갭합_퍼센트평균 = round(np.mean(np_put_gap_percent_local), 1)

                    put_txt = repr(풋시가갭합_단위평균) + '\n' + repr(풋시가갭합_퍼센트평균) + '%'

                    item = QTableWidgetItem(put_txt)
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_put.setHorizontalHeaderItem(Option_column.시가갭.value, item)
                    self.tableWidget_put.resizeColumnToContents(Option_column.시가갭.value)
                else:
                    pass                

                if 풋시가 in COREVAL:
                    self.tableWidget_put.item(index, Option_column.시가.value).setBackground(QBrush(대맥점색))
                    self.tableWidget_put.item(index, Option_column.시가.value).setForeground(QBrush(검정색))
                else:
                    pass

                if 풋시가 in FIXED_COREVAL:
                    self.tableWidget_put.item(index, Option_column.시가.value).setBackground(QBrush(검정색))
                    self.tableWidget_put.item(index, Option_column.시가.value).setForeground(QBrush(노란색))
                    flag_put_open_in_fixed_coreval = True
                else:
                    pass
                
                put_시가 = df_put['시가'].values.tolist()
                put_시가_node_list = self.make_node_list(put_시가)                

                txt = '[{0:02d}:{1:02d}:{2:02d}] Put {3:.2f} Open Update !!!\r'.format \
                    (dt.hour, dt.minute, dt.second, 풋시가)
                self.textBrowser.append(txt)

                if index == 0:

                    txt = '[{0:02d}:{1:02d}:{2:02d}] 풋 최대 시작가 {3} 오픈되었습니다.\r'.format \
                        (dt.hour, dt.minute, dt.second, 시가)
                    self.textBrowser.append(txt)
                else:
                    pass  
            else:
                pass

            피봇 = calc_pivot(풋전저, 풋전고, 풋종가, 풋시가, 2)

            if 피봇 != float(self.tableWidget_put.item(index, Option_column.피봇.value).text()):

                df_put.at[index, '피봇'] = 피봇

                if 피봇 >= 100:
                    item = QTableWidgetItem("{0:0.1f}".format(피봇))
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_put.setItem(index, Option_column.피봇.value, item)
                else:
                    item = QTableWidgetItem("{0:.2f}".format(피봇))
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_put.setItem(index, Option_column.피봇.value, item)
                
                put_피봇 = df_put['피봇'].values.tolist()
                put_피봇_node_list = self.make_node_list(put_피봇)
            else:
                pass
            
            if put_scroll_begin_position <= index <= put_scroll_end_position:

                # 현재가 갱신
                풋_과거가 = self.tableWidget_put.item(index, Option_column.현재가.value).text().split('\n')[0]

                if 현재가 != 풋_과거가:

                    df_put.at[index, '현재가'] = 풋현재가

                    if 풋현재가 < float(풋_과거가):
                        item = QTableWidgetItem(현재가 + '\n' + '▼')
                        item.setBackground(QBrush(lightskyblue))
                    elif 풋현재가 > float(풋_과거가):
                        item = QTableWidgetItem(현재가 + '\n' + '▲')
                        item.setBackground(QBrush(pink))
                    else:    
                        item = QTableWidgetItem(현재가)
                        item.setBackground(QBrush(흰색))

                    if 풋시가 < 풋현재가:
                        item.setForeground(QBrush(적색))
                    elif 풋시가 > 풋현재가:
                        item.setForeground(QBrush(청색))
                    else:
                        item.setForeground(QBrush(검정색))

                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_put.setItem(index, Option_column.현재가.value, item)

                    if ResizeRowsToContents:
                        self.tableWidget_put.resizeRowToContents(index)
                    else:
                        pass

                    풋대비 = 풋현재가 - 풋시가
                    df_put.at[index, '대비'] = 풋대비

                    if 풋시가 > 0.1:
                        put_db_percent[index] = (풋현재가 / 풋시가 - 1) * 100

                        gap_txt = "{0:.2f}\n{1:.1f}%".format(풋대비, put_db_percent[index])                         

                        item = QTableWidgetItem(gap_txt)
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_put.setItem(index, Option_column.대비.value, item)
                    else:
                        pass                   
                else:
                    pass
                
                # 저가 갱신
                if 저가 != 고가 and 저가 != self.tableWidget_put.item(index, Option_column.저가.value).text().split('\n')[0]:

                    df_put.at[index, '저가'] = 풋저가

                    풋진폭 = 풋고가 - 풋저가
                    df_put.at[index, '진폭'] = 풋진폭

                    풋기준가 = df_put.at[index, '기준가']
                    풋월저 = df_put.at[index, '월저']
                    풋전저 = df_put.at[index, '전저']

                    item = QTableWidgetItem('▼')
                    self.tableWidget_put.setHorizontalHeaderItem(Option_column.저가.value, item)

                    put_저가 = df_put['저가'].values.tolist()
                    put_저가_node_list = self.make_node_list(put_저가)

                    if SEARCH_MOVING_NODE_START_VALUE < 풋저가 < SEARCH_MOVING_NODE_END_VALUE:
                        self.opt_high_low_list_update()
                        빈도수 = moving_list.count(풋저가)
                        item = QTableWidgetItem(저가 + '\n(' + repr(빈도수) + ')')
                    else:
                        item = QTableWidgetItem(저가)

                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(lightskyblue))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_put.setItem(index, Option_column.저가.value, item)

                    if 풋저가 in FIXED_COREVAL:
                        self.tableWidget_put.item(index, Option_column.저가.value).setBackground(QBrush(노란색))
                        self.tableWidget_put.item(index, Option_column.저가.value).setForeground(QBrush(적색)) 
                    else:
                        pass

                    if 풋전저 >= 풋저가:

                        txt = '{0:.2f}'.format(풋전저) + '\n' + '▼'

                        if str != self.tableWidget_put.item(index, Option_column.전저.value).text():
                            item = QTableWidgetItem(txt)
                            item.setTextAlignment(Qt.AlignCenter)

                            if DARK_STYLESHEET:
                                item.setForeground(QBrush(cyan))
                            else:
                                item.setForeground(QBrush(청색))

                            self.tableWidget_put.setItem(index, Option_column.전저.value, item)
                        else:
                            pass
                    else:
                        pass

                    if 풋월저 >= 풋저가:

                        txt = '{0:.2f}'.format(풋월저) + '\n' + '▼'

                        if str != self.tableWidget_put.item(index, Option_column.월저.value).text():
                            item = QTableWidgetItem(txt)
                            item.setTextAlignment(Qt.AlignCenter)

                            if DARK_STYLESHEET:
                                item.setForeground(QBrush(cyan))
                            else:
                                item.setForeground(QBrush(청색))

                            self.tableWidget_put.setItem(index, Option_column.월저.value, item)
                        else:
                            pass
                    else:
                        pass

                    if DayTime and 풋기준가 >= 풋저가:

                        if ATM_INDEX - 3 <= index <= ATM_INDEX + 3:
                            pass
                        else:
                            txt = '{0:.2f}'.format(풋기준가) + '\n' + '▼'

                            if str != self.tableWidget_put.item(index, Option_column.기준가.value).text():
                                item = QTableWidgetItem(txt)
                                item.setTextAlignment(Qt.AlignCenter)

                                if DARK_STYLESHEET:
                                    item.setForeground(QBrush(cyan))
                                else:
                                    item.setForeground(QBrush(청색))

                                self.tableWidget_put.setItem(index, Option_column.기준가.value, item)
                            else:
                                pass                    
                    else:
                        pass

                    item = QTableWidgetItem("{0:.2f}".format(풋진폭))
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_put.setItem(index, Option_column.진폭.value, item)

                    self.check_put_oloh(tickdata)

                    # 풋은 가격기준으로 갱신
                    if 풋저가 < 풋고가 and update_start < 풋저가 < update_end:            
                        flag_put_low_update = True
                    else:
                        pass

                    process_time = (timeit.default_timer() - start_time) * 1000

                    txt = '[{0:02d}:{1:02d}:{2:02d}] Put 저가 {3} Update : {4:.2f} ms\r'.format(dt.hour, dt.minute, dt.second, 풋저가, process_time)
                    self.textBrowser.append(txt)
                    print(txt) 
                else:
                    pass

                # 고가 갱신
                if 저가 != 고가 and 고가 != self.tableWidget_put.item(index, Option_column.고가.value).text().split('\n')[0]:

                    df_put.at[index, '고가'] = 풋고가

                    풋진폭 = 풋고가 - 풋저가
                    df_put.at[index, '진폭'] = 풋진폭

                    풋월고 = df_put.at[index, '월고']
                    풋전고 = df_put.at[index, '전고']

                    item = QTableWidgetItem('▲')
                    self.tableWidget_put.setHorizontalHeaderItem(Option_column.고가.value, item)

                    put_고가 = df_put['고가'].values.tolist()
                    put_고가_node_list = self.make_node_list(put_고가)

                    if SEARCH_MOVING_NODE_START_VALUE < 풋고가 < SEARCH_MOVING_NODE_END_VALUE:
                        self.opt_high_low_list_update()
                        빈도수 = moving_list.count(풋고가)
                        item = QTableWidgetItem(고가 + '\n(' + repr(빈도수) + ')')
                    else:
                        item = QTableWidgetItem(고가)

                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(pink))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_put.setItem(index, Option_column.고가.value, item)

                    if 풋고가 in FIXED_COREVAL:
                        self.tableWidget_put.item(index, Option_column.고가.value).setBackground(QBrush(노란색))
                        self.tableWidget_put.item(index, Option_column.고가.value).setForeground(QBrush(적색)) 
                    else:
                        pass

                    if 풋전고 <= 풋고가:

                        txt = '{0:.2f}'.format(풋전고) + '\n' + '▲'

                        if str != self.tableWidget_put.item(index, Option_column.전고.value).text():
                            item = QTableWidgetItem(txt)
                            item.setTextAlignment(Qt.AlignCenter)
                            item.setForeground(QBrush(magenta))             
                            self.tableWidget_put.setItem(index, Option_column.전고.value, item)
                        else:
                            pass
                    else:
                        pass

                    if 풋월고 <= 풋고가:

                        txt = '{0:.2f}'.format(풋월고) + '\n' + '▲'

                        if str != self.tableWidget_put.item(index, Option_column.월고.value).text():
                            item = QTableWidgetItem(txt)
                            item.setTextAlignment(Qt.AlignCenter)
                            item.setForeground(QBrush(magenta))             
                            self.tableWidget_put.setItem(index, Option_column.월고.value, item)
                        else:
                            pass
                    else:
                        pass

                    item = QTableWidgetItem("{0:.2f}".format(풋진폭))
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_put.setItem(index, Option_column.진폭.value, item)

                    self.check_put_oloh(tickdata)

                    # 풋은 가격기준으로 갱신
                    if 풋저가 < 풋고가 and update_start < 풋고가 < update_end:            
                        flag_put_high_update = True
                    else:
                        pass

                    process_time = (timeit.default_timer() - start_time) * 1000

                    txt = '[{0:02d}:{1:02d}:{2:02d}] Put 고가 {3} Update : {4:.2f} ms\r'.format(dt.hour, dt.minute, dt.second, 풋고가, process_time)
                    self.textBrowser.append(txt)
                    print(txt) 
                else:
                    pass
            else:
                pass

        except Exception as e:

            txt = '[{0:02d}:{1:02d}:{2:02d}] Exception : put_update 에서 {3} \n상기 오류가 발생했습니다.\r'.format(dt.hour, dt.minute, dt.second, traceback.format_exc())
            self.parent.textBrowser.append(txt) 
    
    def put_db_update(self):

        global put_진폭, 풋대비합, df_put_information_graph
        global put_otm_cdb_mean, put_otm_cdb_percent_mean, put_otm_jdb_mean, put_otm_jdb_percent_mean
        
        진폭최대값 = df_put['진폭'].max()

        max_txt = '{0:.2f}'.format(진폭최대값)

        if max_txt != self.tableWidget_put.horizontalHeaderItem(Option_column.진폭.value).text():
            item = QTableWidgetItem(max_txt)
            self.tableWidget_put.setHorizontalHeaderItem(Option_column.진폭.value, item)
        else:
            pass      
        
        # 처리시간 줄여야함
        put_otm_cdb_local = copy.deepcopy(put_otm_cdb)
        put_otm_cdb_local_remove_set = [i for i in put_otm_cdb_local if i not in remove_set]

        put_otm_jdb_local = copy.deepcopy(put_otm_jdb)
        put_otm_jdb_local_remove_set = [i for i in put_otm_jdb_local if i not in remove_set]

        put_otm_cdb_percent_local = copy.deepcopy(put_otm_cdb_percent)
        put_otm_cdb_percent_local_remove_set = [i for i in put_otm_cdb_percent_local if i not in remove_set]

        put_otm_jdb_percent_local = copy.deepcopy(put_otm_jdb_percent)
        put_otm_jdb_percent_local_remove_set = [i for i in put_otm_jdb_percent_local if i not in remove_set]

        np_put_otm_cdb_local = np.array(put_otm_cdb_local_remove_set)
        np_put_otm_cdb_percent_local = np.array(put_otm_cdb_percent_local_remove_set)

        np_put_otm_jdb_local = np.array(put_otm_jdb_local_remove_set)
        np_put_otm_jdb_percent_local = np.array(put_otm_jdb_percent_local_remove_set)

        put_otm_cdb_mean = round(np.mean(np_put_otm_cdb_local), 2)      
        put_otm_cdb_percent_mean = round(np.mean(np_put_otm_cdb_percent_local), 1)

        put_otm_jdb_mean = round(np.mean(np_put_otm_jdb_local), 2)      
        put_otm_jdb_percent_mean = round(np.mean(np_put_otm_jdb_percent_local), 1)

        if flag_market_service:
            df_put_information_graph.at[plot_time_index, 'Drate'] = put_otm_cdb_percent_mean
        else:
            pass

        put_txt = repr(put_otm_cdb_mean) + '\n' + repr(put_otm_cdb_percent_mean) + '%'

        item = QTableWidgetItem(put_txt)
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_put.setHorizontalHeaderItem(Option_column.대비.value, item)

        if ResizeRowsToContents:
            self.tableWidget_put.resizeRowsToContents()
        else:
            pass
        
        self.tableWidget_put.resizeColumnToContents(Option_column.대비.value)          
        
    def put_oi_update(self):
		
        index = put_행사가.index(put_tickdata['단축코드'][5:8])

        수정미결 = format(df_put.at[index, '수정미결'], ',')

        if 수정미결 != self.tableWidget_put.item(index, Option_column.OI.value).text():

            item = QTableWidgetItem(수정미결)
            item.setTextAlignment(Qt.AlignCenter)
            self.tableWidget_put.setItem(index, Option_column.OI.value, item)
        else:
            pass            

        미결증감 = format(df_put.at[index, '수정미결증감'], ',')

        if 미결증감 != self.tableWidget_put.item(index, Option_column.OID.value).text():

            item = QTableWidgetItem(미결증감)
            item.setTextAlignment(Qt.AlignCenter)

            if int(put_tickdata['미결제약정증감']) < 0:
                item.setBackground(QBrush(라임))
            else:
                item.setBackground(QBrush(흰색))

            item.setForeground(QBrush(검정색))

            self.tableWidget_put.setItem(index, Option_column.OID.value, item)
            self.tableWidget_put.resizeColumnToContents(Option_column.OID.value)
        else:
            pass

        수정미결합 = '{0}k'.format(format(int(df_put['수정미결'].sum()/1000), ','))

        if 수정미결합 != self.tableWidget_put.horizontalHeaderItem(Option_column.OI.value).text():
            item = QTableWidgetItem(수정미결합)
            item.setTextAlignment(Qt.AlignCenter)
            self.tableWidget_put.setHorizontalHeaderItem(Option_column.OI.value, item)
            self.tableWidget_put.resizeColumnToContents(Option_column.OI.value)
        else:
            pass
        
    def put_volume_power_update(self):

        global df_put, df_put_volume, put_volume_power, put_volume, df_put_information_graph
        global 풋_순매수_체결량, option_volume_power

        index = put_행사가.index(put_tickdata['단축코드'][5:8])

        풋현재가 = df_put.at[index, '현재가']
        풋시가갭 = df_put.at[index, '시가갭']

        if 풋현재가 <= 풋시가갭:

            수정거래량 = (int(put_tickdata['매수누적체결량']) - int(put_tickdata['매도누적체결량'])) * 풋현재가

            if DayTime:

                매도누적체결건수 = int(put_tickdata['매도누적체결건수']) * 풋현재가
                매수누적체결건수 = int(put_tickdata['매수누적체결건수']) * 풋현재가
            else:
                pass
        else:

            수정거래량 = (int(put_tickdata['매수누적체결량']) - int(put_tickdata['매도누적체결량'])) * (풋현재가 - 풋시가갭)

            if DayTime:

                매도누적체결건수 = int(put_tickdata['매도누적체결건수']) * (풋현재가 - 풋시가갭)
                매수누적체결건수 = int(put_tickdata['매수누적체결건수']) * (풋현재가 - 풋시가갭)
            else:
                pass

        풋수정거래량 = int(수정거래량)
        df_put.at[index, '수정거래량'] = 풋수정거래량
        df_put.at[index, '거래량'] = int(put_tickdata['누적거래량'])

        if DayTime:
            
            df_put_volume.at[index, '매도누적체결건수'] = int(매도누적체결건수)
            df_put_volume.at[index, '매수누적체결건수'] = int(매수누적체결건수)
        else:
            pass
        
        수정거래량 = format(풋수정거래량, ',')

        if 수정거래량 != self.tableWidget_put.item(index, Option_column.VP.value).text():

            item = QTableWidgetItem(수정거래량)
            item.setTextAlignment(Qt.AlignCenter)

            if 풋수정거래량 > 0:
                item.setBackground(QBrush(pink))
            else:
                item.setBackground(QBrush(lightskyblue))

            item.setForeground(QBrush(검정색))

            self.tableWidget_put.setItem(index, Option_column.VP.value, item)
        else:
            pass   
        
        option_volume_power = call_volume_power - put_volume_power

        순매수누적체결량 = format(put_volume_power, ',')

        if 순매수누적체결량 != self.tableWidget_put.horizontalHeaderItem(Option_column.VP.value).text():
            item = QTableWidgetItem(순매수누적체결량)
            item.setTextAlignment(Qt.AlignCenter)
            self.tableWidget_put.setHorizontalHeaderItem(Option_column.VP.value, item)
            self.tableWidget_put.resizeColumnToContents(Option_column.VP.value)            
        else:
            pass                

        put_volume = df_put_volume.sum()

        매수잔량 = format(int(put_volume['매수누적체결량']), ',')
        매도잔량 = format(int(put_volume['매도누적체결량']), ',')

        if DayTime:

            매수건수 = format(int(put_volume['매수누적체결건수']), ',')

            if 매수건수 != self.tableWidget_quote.item(0, 4).text():
                item = QTableWidgetItem(매수건수)
                item.setTextAlignment(Qt.AlignCenter)
                self.tableWidget_quote.setItem(0, 4, item)
            else:
                pass

            매도건수 = format(int(put_volume['매도누적체결건수']), ',')

            if 매도건수 != self.tableWidget_quote.item(0, 5).text():
                item = QTableWidgetItem(매도건수)
                item.setTextAlignment(Qt.AlignCenter)
                self.tableWidget_quote.setItem(0, 5, item)
            else:
                pass
        else:
            pass
        
        풋_순매수_체결량 = int(put_volume['매수누적체결량']) - int(put_volume['매도누적체결량'])

        if 매수잔량 != self.tableWidget_quote.item(0, 6).text():
            item = QTableWidgetItem(매수잔량)
            item.setTextAlignment(Qt.AlignCenter)

            if 콜_순매수_체결량 > 0 and 풋_순매수_체결량 < 0:

                item.setBackground(QBrush(적색))
                item.setForeground(QBrush(검정색))

            elif 콜_순매수_체결량 < 0 and 풋_순매수_체결량 > 0:

                item.setBackground(QBrush(청색))
                item.setForeground(QBrush(흰색))
                
            elif 콜_순매수_체결량 < 0 and 풋_순매수_체결량 < 0:

                item.setBackground(QBrush(검정색))
                item.setForeground(QBrush(흰색))
            else:
                item.setBackground(QBrush(흰색))
                item.setForeground(QBrush(검정색))   

            self.tableWidget_quote.setItem(0, 6, item)
        else:
            pass

        temp = format(풋_순매수_체결량, ',')
        item_txt = "{0}\n({1})".format(매도잔량, temp)

        if item_txt != self.tableWidget_quote.item(0, 7).text():
            item = QTableWidgetItem(item_txt)
            item.setTextAlignment(Qt.AlignCenter)

            if 콜_순매수_체결량 > 0 and 풋_순매수_체결량 < 0:

                item.setBackground(QBrush(적색))
                item.setForeground(QBrush(검정색))

            elif 콜_순매수_체결량 < 0 and 풋_순매수_체결량 > 0:

                item.setBackground(QBrush(청색))
                item.setForeground(QBrush(흰색))
                
            elif 콜_순매수_체결량 < 0 and 풋_순매수_체결량 < 0:

                item.setBackground(QBrush(검정색))
                item.setForeground(QBrush(흰색))
            else:
                item.setBackground(QBrush(흰색))
                item.setForeground(QBrush(검정색))   

            self.tableWidget_quote.setItem(0, 7, item)
        else:
            pass
    
    def put_open_check(self):

        global df_put, put_itm_count
        global put_open, put_ol, put_oh, nm_put_ol, nm_put_oh
        global put_gap_percent, put_db_percent
        global put_ol_count, put_oh_count
        global 풋대비합, put_otm_cdb_mean 
        global put_open_count
        global 풋시가갭합, 풋시가갭합_퍼센트평균, 풋시가갭합_단위평균, put_otm_cdb_percent_mean
        global put_otm_cdb, put_otm_cdb_percent
        global nm_put_oloh_txt, 풋_등가_시가등락율, plot_drate_scale_factor 
        
        dt = datetime.now()

        if not flag_market_service or put_scroll or refresh_coloring:
            
            put_ol = [False] * option_pairs_count
            put_oh = [False] * option_pairs_count            
            put_gap_percent = [0] * option_pairs_count
            put_db_percent = [0] * option_pairs_count
            put_itm_count = 0
            put_otm_cdb = [0] * option_pairs_count
            put_otm_cdb_percent = [0] * option_pairs_count
            put_open = [False] * option_pairs_count
            put_ol_count = 0
            put_oh_count = 0

            nm_put_ol = [False] * option_pairs_count
            nm_put_oh = [False] * option_pairs_count
            
            if refresh_coloring:
                loop_list = self.opt_total_actval_list
            else:
                if self.put_open_list:
                    loop_list = self.put_open_list
                else:
                    loop_list = self.opt_total_actval_list
            
            for index in loop_list:

                if index % 10 == 0:
                    QApplication.processEvents()
                else:
                    pass

                종가 = df_put.at[index, '종가']
                시가 = df_put.at[index, '시가']
                저가 = df_put.at[index, '저가']
                고가 = df_put.at[index, '고가']
                현재가 = df_put.at[index, '현재가']

                item = QTableWidgetItem('-')
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(검정색))
                item.setForeground(QBrush(흰색))
                self.tableWidget_put.setItem(index, Option_column.OLOH.value, item)

                if 시가 > opt_search_start_value:

                    if index != ATM_INDEX:
                        self.tableWidget_put.item(index, Option_column.행사가.value).setBackground(QBrush(라임))
                        self.tableWidget_put.item(index, Option_column.행사가.value).setForeground(QBrush(검정색))
                    else:
                        self.tableWidget_put.item(index, Option_column.행사가.value).setBackground(QBrush(노란색))
                        self.tableWidget_put.item(index, Option_column.행사가.value).setForeground(QBrush(검정색))

                    if 종가 > 0 and 저가 < 고가:

                        시가갭 = 시가 - 종가

                        df_put.at[index, '시가갭'] = 시가갭

                        put_gap_percent[index] = (시가 / 종가 - 1) * 100
                        풋_등가_시가등락율 = put_gap_percent[ATM_INDEX]

                        gap_txt = "{0:.2f}\n{1:.1f}%".format(시가갭, put_gap_percent[index])

                        item = QTableWidgetItem(gap_txt)
                        item.setTextAlignment(Qt.AlignCenter)

                        if 시가 > 종가:
                            item.setBackground(QBrush(콜기준가색))
                            item.setForeground(QBrush(검정색))
                        elif 시가 < 종가:
                            item.setBackground(QBrush(풋기준가색))
                            item.setForeground(QBrush(흰색))
                        else:
                            item.setBackground(QBrush(검정색))
                            item.setForeground(QBrush(흰색))

                        self.tableWidget_put.setItem(index, Option_column.시가갭.value, item)
                    else:
                        pass

                    if 저가 < 고가:

                        if index < ATM_INDEX:
                            put_itm_count += 1
                        else:
                            pass

                        put_open[index] = True                    

                        if 시가 >= oloh_cutoff:

                            if 시가 < 1.0:

                                oloh_threshold = 1

                            elif 1.0 <= 시가 < 2.0:

                                oloh_threshold = 2

                            elif 2.0 <= 시가 < 3.0:

                                oloh_threshold = 3

                            elif 3.0 <= 시가 < 4.0:

                                oloh_threshold = 4
                            else:
                                oloh_threshold = 5   

                            # put OL/OH count
                            if self.is_within_n_tick(시가, 저가, oloh_threshold) and not self.is_within_n_tick(시가, 고가, oloh_threshold):

                                oloh_txt = '▲'

                                item = QTableWidgetItem(oloh_txt)
                                item.setTextAlignment(Qt.AlignCenter)
                                item.setBackground(QBrush(적색))
                                item.setForeground(QBrush(흰색))
                                self.tableWidget_put.setItem(index, Option_column.OLOH.value, item)

                                self.tableWidget_put.item(index, Option_column.시가.value).setBackground(QBrush(청색))
                                self.tableWidget_put.item(index, Option_column.시가.value).setForeground(QBrush(흰색))

                                self.tableWidget_put.item(index, Option_column.저가.value).setBackground(QBrush(청색))
                                self.tableWidget_put.item(index, Option_column.저가.value).setForeground(QBrush(흰색)) 

                                put_ol[index] = True
                                '''
                                if TARGET_MONTH == 'NM' and 시가 < 0.5:
                                    nm_put_ol[index] = True
                                else:
                                    pass
                                '''
                            elif self.is_within_n_tick(시가, 고가, oloh_threshold) and not self.is_within_n_tick(시가, 저가, oloh_threshold):

                                oloh_txt = '▼'

                                item = QTableWidgetItem(oloh_txt)
                                item.setTextAlignment(Qt.AlignCenter)
                                item.setBackground(QBrush(청색))
                                item.setForeground(QBrush(흰색))
                                self.tableWidget_put.setItem(index, Option_column.OLOH.value, item)

                                self.tableWidget_put.item(index, Option_column.시가.value).setBackground(QBrush(청색))
                                self.tableWidget_put.item(index, Option_column.시가.value).setForeground(QBrush(흰색))

                                self.tableWidget_put.item(index, Option_column.고가.value).setBackground(QBrush(청색))
                                self.tableWidget_put.item(index, Option_column.고가.value).setForeground(QBrush(흰색))

                                put_oh[index] = True
                                '''
                                if TARGET_MONTH == 'NM' and 시가 < 0.5:
                                    nm_put_oh[index] = True
                                else:
                                    pass
                                '''
                            else:
                                oloh_txt = '-'

                                if oloh_txt != self.tableWidget_put.item(index, Option_column.OLOH.value).text():
                                    item = QTableWidgetItem(oloh_txt)
                                    item.setTextAlignment(Qt.AlignCenter)
                                    item.setBackground(QBrush(검정색))
                                    item.setForeground(QBrush(흰색))
                                    self.tableWidget_put.setItem(index, Option_column.OLOH.value, item)                                
                                else:
                                    pass

                                put_ol[index] = False
                                put_oh[index] = False
                                '''
                                if TARGET_MONTH == 'NM' and 시가 < 0.5:
                                    nm_put_ol[index] = False
                                    nm_put_oh[index] = False
                                else:
                                    pass
                                '''
                        else:
                            pass
                    else:
                        pass

                    if 시가 > 0 and 저가 < 고가:

                        대비 = 현재가 - 시가

                        df_put.at[index, '대비'] = 대비                 
                        put_db_percent[index] = (현재가 / 시가 - 1) * 100

                        gap_txt = "{0:.2f}\n{1:.1f}%".format(대비, put_db_percent[index])

                        if gap_txt != self.tableWidget_put.item(index, Option_column.대비.value).text():

                            item = QTableWidgetItem(gap_txt)
                            item.setTextAlignment(Qt.AlignCenter)
                            self.tableWidget_put.setItem(index, Option_column.대비.value, item)
                        else:
                            pass
                    else:
                        pass
                else:
                    pass

                # 풋 외가(등가포함) 대비 저장
                if index >= ATM_INDEX and 시가 > OTM_SEARCH_START_VAL and 저가 < 고가:
                    put_otm_cdb[index] = 현재가 - 시가
                    put_otm_cdb_percent[index] = (현재가 / 시가 - 1) * 100
                else:
                    pass

            # Put Open Count 및 OLOH 표시
            put_open_count = put_open.count(True)

            if put_open[0]:

                new_actval = repr(put_itm_count) + '/' + repr(put_open_count) + '\n*'
            else:
                new_actval = repr(put_itm_count) + '/' + repr(put_open_count)

            if new_actval != self.tableWidget_put.horizontalHeaderItem(1).text():
                item = QTableWidgetItem(new_actval)
                item.setTextAlignment(Qt.AlignCenter)
                self.tableWidget_put.setHorizontalHeaderItem(1, item)
            else:
                pass

            put_ol_count = put_ol.count(True)
            put_oh_count = put_oh.count(True)

            new_oloh = repr(put_ol_count) + ':' + repr(put_oh_count)
            item = QTableWidgetItem(new_oloh)
            item.setTextAlignment(Qt.AlignCenter)
            self.tableWidget_put.setHorizontalHeaderItem(2, item)
            '''
            if TARGET_MONTH == 'NM':                     

                if put_ol_count > 0 or put_oh_count > 0:
                    nm_put_oloh_txt = '▲:▼ = ' + repr(put_ol_count) + ':' + repr(put_oh_count)
                else:
                    nm_put_oloh_txt = ''                            
            else:
                pass
            '''
            # 시가갭 갱신
            put_gap_percent_local = copy.deepcopy(put_gap_percent)
            result1 = [i for i in put_gap_percent_local if i not in remove_set]

            np_put_gap_percent_local = np.array(result1)

            풋시가갭합_단위평균 = round(df_put['시가갭'].sum()/len(put_gap_percent), 2)        
            풋시가갭합_퍼센트평균 = round(np.mean(np_put_gap_percent_local), 1)

            put_txt = repr(풋시가갭합_단위평균) + '\n' + repr(풋시가갭합_퍼센트평균) + '%'

            item = QTableWidgetItem(put_txt)
            item.setTextAlignment(Qt.AlignCenter)
            self.tableWidget_put.setHorizontalHeaderItem(Option_column.시가갭.value, item)

            #self.put_db_update()
        else:
            pass

    # 호가표시
    def option_quote_periodic_update(self):
        
        global call_quote, put_quote
        global 콜매수잔량, 콜매도잔량, 풋매수잔량, 풋매도잔량, 콜건수비, 콜잔량비, 풋건수비, 풋잔량비
        global df_call_information_graph, df_put_information_graph, call_remainder_ratio, put_remainder_ratio

        call_quote = df_call_quote.sum()
        put_quote = df_put_quote.sum()

        if call_quote['매도건수'] > 0:
            call_count_ratio = round((call_quote['매수건수'] / call_quote['매도건수']), 2)
        else:
            call_count_ratio = 0

        콜건수비 = call_count_ratio

        if put_quote['매도건수'] > 0:
            put_count_ratio = round((put_quote['매수건수'] / put_quote['매도건수']), 2)
        else:
            put_count_ratio = 0

        풋건수비 = put_count_ratio

        item_txt = "{0}\n({1})\n({2})".format(repr(call_count_ratio), format(call_quote['매수건수'], ','), format(call_quote['매도건수'], ','))

        if item_txt != self.tableWidget_quote.item(0, 8).text():

            item = QTableWidgetItem(item_txt)
            item.setTextAlignment(Qt.AlignCenter)
            self.tableWidget_quote.setItem(0, 8, item)
        else:
            pass
        
        콜매수잔량 = call_quote['매수잔량']
        콜매도잔량 = call_quote['매도잔량']

        if call_quote['매도잔량'] > 0:
            call_remainder_ratio = round((call_quote['매수잔량'] / call_quote['매도잔량']), 2)
        else:
            call_remainder_ratio = 0

        item_txt = "{0}\n({1})\n({2})".format(repr(call_remainder_ratio), format(call_quote['매수잔량'], ','), format(call_quote['매도잔량'], ','))

        if item_txt != self.tableWidget_quote.item(0, 9).text():

            item = QTableWidgetItem(item_txt)
            item.setTextAlignment(Qt.AlignCenter)
            self.tableWidget_quote.setItem(0, 9, item)
        else:
            pass

        item_txt = "{0}\n({1})\n({2})".format(repr(put_count_ratio), format(put_quote['매수건수'], ','), format(put_quote['매도건수'], ','))

        if item_txt != self.tableWidget_quote.item(0, 10).text():

            item = QTableWidgetItem(item_txt)
            item.setTextAlignment(Qt.AlignCenter)
            self.tableWidget_quote.setItem(0, 10, item)
        else:
            pass
        
        풋매수잔량 = put_quote['매수잔량']
        풋매도잔량 = put_quote['매도잔량']

        if put_quote['매도잔량'] > 0:
            put_remainder_ratio = round((put_quote['매수잔량'] / put_quote['매도잔량']), 2)
        else:
            put_remainder_ratio = 0
        
        item_txt = "{0}\n({1})\n({2})".format(repr(put_remainder_ratio), format(put_quote['매수잔량'], ','), format(put_quote['매도잔량'], ','))

        if item_txt != self.tableWidget_quote.item(0, 11).text():

            item = QTableWidgetItem(item_txt)
            item.setTextAlignment(Qt.AlignCenter)
            self.tableWidget_quote.setItem(0, 11, item)
        else:
            pass

        temp = (call_quote['매수건수'] + call_quote['매도건수']) - (put_quote['매수건수'] + put_quote['매도건수'])
        건수차 = format(temp, ',')

        temp = (call_quote['매수잔량'] + call_quote['매도잔량']) - (put_quote['매수잔량'] + put_quote['매도잔량'])
        잔량차 = format(temp, ',')

        item_txt = "{0:.2f}({1})\n{2:.2f}({3})".format(call_count_ratio - put_count_ratio, 건수차,
                                                         call_remainder_ratio - put_remainder_ratio, 잔량차)

        if item_txt != self.tableWidget_quote.item(0, 12).text():

            item = QTableWidgetItem(item_txt)
            item.setTextAlignment(Qt.AlignCenter)

            if call_count_ratio > put_count_ratio and call_remainder_ratio > put_remainder_ratio:
                item.setBackground(QBrush(적색))
                item.setForeground(QBrush(흰색))
            elif call_count_ratio < put_count_ratio and call_remainder_ratio < put_remainder_ratio:
                item.setBackground(QBrush(청색))
                item.setForeground(QBrush(흰색))
            else:
                item.setBackground(QBrush(흰색))
                item.setForeground(QBrush(검정색))

            self.tableWidget_quote.setItem(0, 12, item)                  
        else:
            pass        

    def oi_total_update(self):

        oi_txt = '{0}:{1}'.format(format(int(콜_수정미결합), ','), format(int(풋_수정미결합), ','))

        item = QTableWidgetItem(oi_txt)
        self.tableWidget_quote.setHorizontalHeaderItem(Quote_column.미결종합.value - 1, item)
        
        item_txt = '{0:.2f}({1:.2f})% \n {2:.2f}({3:.2f})% '.format(콜_수정미결퍼센트, call_oi_init_percent, 풋_수정미결퍼센트, put_oi_init_percent)

        item = QTableWidgetItem(item_txt)
        item.setTextAlignment(Qt.AlignCenter)

        if 콜_수정미결퍼센트 > call_oi_init_percent:

            item.setBackground(QBrush(적색))
            item.setForeground(QBrush(흰색))

        elif 풋_수정미결퍼센트 > put_oi_init_percent:

            item.setBackground(QBrush(청색))
            item.setForeground(QBrush(흰색))    
        else:
            pass

        self.tableWidget_quote.setItem(0, Quote_column.미결종합.value - 1, item)
        
    def RunCode(self):

        global pre_start
        global t2301_month_info
        global 진성맥점
        global df_futures_cm_graph, df_sp500_graph, df_dow_graph, df_nasdaq_graph, df_hsi_graph, df_wti_graph, df_gold_graph, df_euro_graph, df_yen_graph, df_adi_graph

        dt = datetime.now()
        '''
        if pre_start:
            jisu_txt = "KOSPI: {0}".format(KOSPI_PRICE)
                    
            self.label_5th_index.setStyleSheet('background-color: qlineargradient(spread:reflect, x1:1, y1:0, x2:0.995, y2:1, stop:0 rgba(218, 218, 218, 255), stop:0.305419 \
                                            rgba(0, 7, 11, 255), stop:0.935961 rgba(2, 11, 18, 255), stop:1 rgba(240, 240, 240, 255)); \
                                            color: lightskyblue; font-family: Consolas; font-size: 9pt; font: Bold; border-style: solid; border-width: 1px; border-color: lightskyblue; border-radius: 5px')
            self.label_5th_index.setText(jisu_txt)

            jisu_txt = "KOSDAQ: {0}".format(KOSDAQ_PRICE)
                    
            self.label_6th_index.setStyleSheet('background-color: qlineargradient(spread:reflect, x1:1, y1:0, x2:0.995, y2:1, stop:0 rgba(218, 218, 218, 255), stop:0.305419 \
                                            rgba(0, 7, 11, 255), stop:0.935961 rgba(2, 11, 18, 255), stop:1 rgba(240, 240, 240, 255)); \
                                            color: lightskyblue; font-family: Consolas; font-size: 9pt; font: Bold; border-style: solid; border-width: 1px; border-color: lightskyblue; border-radius: 5px')
            self.label_6th_index.setText(jisu_txt)
        else:
            pass
        '''
        # 백그라운드로 로그인해도 포어그라운드에서 TR조회 가능함(이유?)
        txt = '[{0:02d}:{1:02d}:{2:02d}] 코스피지수를 조회합니다.\r'.format(dt.hour, dt.minute, dt.second)
        self.parent.textBrowser.append(txt)
        self.XQ_t1514.Query(KOSPI) # 코스피지수 조회        
        
        QTest.qWait(1100)
        
        txt = '[{0:02d}:{1:02d}:{2:02d}] 코스닥지수를 조회합니다.\r'.format(dt.hour, dt.minute, dt.second)
        self.parent.textBrowser.append(txt)
        self.XQ_t1514.Query(KOSDAQ) # 코스닥지수 조회
        
        if service_terminate:

            if TARGET_MONTH == 'CM':
                self.capture_screenshot()
            else:
                pass 
        else:
            if not self.flag_refresh:
                
                if flag_search_moving_node:
                    self.pushButton_start.setStyleSheet('QPushButton {background-color: lawngreen; color: black; font-family: Consolas; font-size: 10pt; font: Bold; border-style: solid; border-width: 1px; border-color: black; border-radius: 5px} \
                                                        QPushButton:hover {background-color: black; color: white} \
                                                        QPushButton:pressed {background-color: gold}')
                else:
                    self.pushButton_start.setStyleSheet('QPushButton {background-color: black; color: lawngreen; font-family: Consolas; font-size: 10pt; font: Bold; border-style: solid; border-width: 1px; border-color: black; border-radius: 5px} \
                                                        QPushButton:hover {background-color: black; color: white} \
                                                        QPushButton:pressed {background-color: gold}')
                self.pushButton_start.setText(' Starting... ')

                txt = '[{0:02d}:{1:02d}:{2:02d}] 지수선물 마스터 데이타를 조회합니다.\r'.format(dt.hour, dt.minute, dt.second)
                self.parent.textBrowser.append(txt)
                
                # 지수선물 마스터조회 API용
                self.XQ_t8432.Query()
                
                txt = '[{0:02d}:{1:02d}:{2:02d}] 지수옵션 마스터 데이타를 조회합니다.\r'.format(dt.hour, dt.minute, dt.second)
                self.parent.textBrowser.append(txt)
                
                # 지수옵션 마스터조회 API용
                self.XQ_t8433.Query()                
                QTest.qWait(1000)                
            else:
                self.pushButton_start.setText(' Refreshing... ')

                txt = '[{0:02d}:{1:02d}:{2:02d}] OLD 진성맥점 = {3}\r'.format(dt.hour, dt.minute, dt.second, 진성맥점)
                self.textBrowser.append(txt)
                print(txt)

                if bms_node_list:

                    listsum = []

                    for i in range(len(bms_node_list)):

                        var1 = self.get_list_item(bms_node_list, i)
                        var2 = self.get_list_item(bms_node_frequency_list, i)
                        if var1 != None and var2 != None: # 유효한 것만 합친다 (결국 두 리스트중에서 작은 사이즈로)
                            listsum.append([var1, var2])

                    new_node = sorted(listsum, key=operator.itemgetter(0))

                    for i in range(len(new_node)):
                        
                        item = QTableWidgetItem("{0:.2f}\n({1})".format(new_node[i][0], new_node[i][1]))
                        item.setTextAlignment(Qt.AlignCenter)
                        item.setBackground(QBrush(lime))
                        item.setForeground(QBrush(검정색))

                        if NightTime:
                            self.tableWidget_fut.setItem(1, 2 + i, item)
                        else:
                            self.tableWidget_fut.setItem(0, 2 + i, item)
                else:
                    pass
                
                진성맥점 = 고정_진성맥점[:]

                txt = '[{0:02d}:{1:02d}:{2:02d}] 진성맥점을 초기화({3})합니다.\r'.format(dt.hour, dt.minute, dt.second, 진성맥점)
                self.textBrowser.append(txt)
                print(txt)

            if DayTime:

                if 9 <= dt.hour < 16:
                    pass
                else:
                    pre_start = True
            else:
                if 16 <= dt.hour < 18:
                    pre_start = True
                else:
                    pass
            
            # 주간 옵션전광판 요청(주간=FC0/OC0, 야간=NC0/EC0)
            print('t2301 요청...')

            if TARGET_MONTH == 'CM':

                if MANGI_YAGAN:
                    t2301_month_info = NEXT_MONTH
                else:
                    t2301_month_info = CURRENT_MONTH

                txt = '[{0:02d}:{1:02d}:{2:02d}] 근월물({3}) 주간옵션 전광판 데이타를 조회합니다.\r'.format(dt.hour, dt.minute, dt.second, t2301_month_info)
                self.textBrowser.append(txt)

            elif TARGET_MONTH == 'NM':

                if MANGI_YAGAN:
                    t2301_month_info = MONTH_AFTER_NEXT
                else:
                    t2301_month_info = NEXT_MONTH   

                txt = '[{0:02d}:{1:02d}:{2:02d}] 차월물({3}) 주간옵션 전광판 데이타를 조회합니다.\r'.format(dt.hour, dt.minute, dt.second, t2301_month_info)
                self.textBrowser.append(txt)
            else:
                pass

            self.XQ_t2301.Query(월물=t2301_month_info)
            self.t2301_event_loop.exec_()           

    def SaveResult(self):

        #global flag_offline
        global flag_logfile

        dt = datetime.now()
        now = time.localtime()

        times = "%04d-%02d-%02d-%02d-%02d-%02d" % \
                (now.tm_year, now.tm_mon, now.tm_mday, now.tm_hour, now.tm_min, now.tm_sec)

        # 저장전 전체 데이타를 다시 내려받음
        self.RunCode()

        self.high_low_list_save_to_file()

        txt = '[{0:02d}:{1:02d}:{2:02d}] High-Low 리스트파일을 갱신했습니다.\r'.format(dt.hour, dt.minute, dt.second)
        self.textBrowser.append(txt)
        
        if not flag_logfile:

            realdata_info_txt = '수신된 실시간데이타 통계 : ' + drop_txt + '\r'
            self.textBrowser.append(realdata_info_txt)

            txt = '[{0:02d}:{1:02d}:{2:02d}] 로그파일을 저장합니다.\r'.format(dt.hour, dt.minute, dt.second)
            self.textBrowser.append(txt)

            if NightTime:
                file = open('lastnight.log', 'w', encoding='UTF-8')
            else:
                file = open('today.log', 'w', encoding='UTF-8')

            text = self.textBrowser.toPlainText()
            file.write(text)
            file.close()

            flag_logfile = True
        else:
            pass              

    def RunTelegram(self):

        global flag_telegram_on
        global flag_telegram_listen_worker, flag_telegram_send_worker
        global telegram_command
        global flag_telegram_send_start, flag_telegram_listen_start

        dt = datetime.now()        

        flag_telegram_on = not flag_telegram_on
        
        chk_webhook = Check_Webhook()

        if chk_webhook.url != '':
            
            txt = '[{0:02d}:{1:02d}:{2:02d}] 텔레그램 Webhook = {3}\r'.format(dt.hour, dt.minute, dt.second, chk_webhook)
            self.textBrowser.append(txt)

            # Webhook을 삭제한다.
            Delete_Webhook()
            
            txt = '[{0:02d}:{1:02d}:{2:02d}] 텔레그램 Webhook을 삭제합니다.\r'.format(dt.hour, dt.minute, dt.second)
            self.textBrowser.append(txt)
        else:
            txt = '[{0:02d}:{1:02d}:{2:02d}] 텔레그램 Webhook이 없습니다.\r'.format(dt.hour, dt.minute, dt.second)
            self.textBrowser.append(txt) 
        
        if TELEGRAM_SERVICE and not flag_telegram_send_worker:

            # 가끔 send worker가 오동작함(쓰레드 재시작...)
            
            #self.telegram_send_worker.start()
            flag_telegram_send_start = True

            txt = '[{0:02d}:{1:02d}:{2:02d}] 텔레그램 Send Worker를 재시작합니다.\r'.format(dt.hour, dt.minute, dt.second)
            self.textBrowser.append(txt)

            flag_telegram_send_worker = True
        else:
            pass
        
        if TELEGRAM_SERVICE and not flag_telegram_listen_worker:

            flag_telegram_on = True
            
            #self.telegram_listen_worker.start()
            flag_telegram_listen_start = True

            txt = '[{0:02d}:{1:02d}:{2:02d}] 텔레그램 Polling이 시작됩니다.\r'.format(dt.hour, dt.minute, dt.second)
            self.textBrowser.append(txt)

            if TARGET_MONTH == 'CM':

                ToYourTelegram("CM 텔레그램 Polling이 시작됩니다.")

            elif TARGET_MONTH == 'NM':

                ToYourTelegram("NM 텔레그램 Polling이 시작됩니다.")

            else:
                pass
            
            self.pushButton_scrshot.setStyleSheet('QPushButton {background-color: lawngreen; color: black; font-family: Consolas; font-size: 10pt; font: Bold; border-style: solid; border-width: 1px; border-color: black; border-radius: 5px} \
                                                    QPushButton:hover {background-color: black; color: white} \
                                                    QPushButton:pressed {background-color: gold}')           
            flag_telegram_listen_worker = True                       
        else:
            pass               
        
        if TELEGRAM_SERVICE and flag_telegram_on:
            
            telegram_command = '/start'
            
            self.pushButton_scrshot.setStyleSheet('QPushButton {background-color: lawngreen; color: black; font-family: Consolas; font-size: 10pt; font: Bold; border-style: solid; border-width: 1px; border-color: black; border-radius: 5px} \
                                                    QPushButton:hover {background-color: black; color: white} \
                                                    QPushButton:pressed {background-color: gold}')
        else:
            telegram_command = ''

            if TARGET_MONTH == 'CM':

                txt = '[{0:02d}:{1:02d}:{2:02d}] CM 텔레그램 Polling을 중지합니다.\r'.format(dt.hour, dt.minute, dt.second)
                self.textBrowser.append(txt)

            elif TARGET_MONTH == 'NM':

                txt = '[{0:02d}:{1:02d}:{2:02d}] NM 텔레그램 Polling을 중지합니다.\r'.format(dt.hour, dt.minute, dt.second)
                self.textBrowser.append(txt)

            else:
                pass

            self.pushButton_scrshot.setStyleSheet('QPushButton {background-color: white; color: black; font-family: Consolas; font-size: 10pt; font: Bold; border-style: solid; border-width: 1px; border-color: black; border-radius: 5px} \
                                                    QPushButton:hover {background-color: black; color: white} \
                                                    QPushButton:pressed {background-color: gold}')
            
            if window.id == 'soojin65':
                flag_telegram_on = True
            else:
                pass

    def high_low_list_save_to_file(self):
        
        call_low_list_to_file = []
        call_high_list_to_file = []
        put_low_list_to_file = []
        put_high_list_to_file = []
        list_final_to_file = []

        for i in range(option_pairs_count):

            콜저가 = df_call.at[i, '저가']
            콜고가 = df_call.at[i, '고가']
            풋저가 = df_put.at[i, '저가']
            풋고가 = df_put.at[i, '고가']

            if 1.2 < 콜저가 < 10.0:
                call_low_list_to_file.append(콜저가)
            else:
                pass

            if 1.2 < 콜고가 < 10.0:
                call_high_list_to_file.append(콜고가)
            else:
                pass

            if 1.2 < 풋저가 < 10.0:
                put_low_list_to_file.append(풋저가)
            else:
                pass

            if 1.2 < 풋고가 < 10.0:
                put_high_list_to_file.append(풋고가)
            else:
                pass

        print('call_low_list =', call_low_list_to_file)
        print('call_high_list =', call_high_list_to_file)
        print('put_low_list =', put_low_list_to_file)
        print('put_high_list =', put_high_list_to_file)

        list_final_to_file = call_low_list_to_file + call_high_list_to_file + put_low_list_to_file + put_high_list_to_file
        list_final_to_file.sort()

        print('list_final =', list_final_to_file)

        self.list_to_file_write(list_final_to_file, "HL-List.txt", sep = ' ')

    def list_to_file_write(self, list, fname, sep):               
        
        if os.path.isfile('HL-List.txt'):

            #기존 파일에서 첫번째 라인 삭제후 임시파일에 저장
            ff = open("tmp.txt",'w')

            with open(fname, 'r') as f:
                lines = f.readlines()

                if hlfile_line_number > HL_Depth - 1:
                    lines.pop(0)
                else:
                    pass
                ff.writelines(lines)

            ff.close()  

            #새로운 저고리스트를 임시파일에 추가후 저장
            vstr = ''

            for a in list:
                vstr = vstr + str(a) + sep 

            file = open("tmp.txt", 'a')
            strr = '\n' + vstr
            
            file.write(strr)
            file.close()

            #기존 파일삭제후 임시파일명 변경
            os.remove('HL-List.txt')
            os.rename('tmp.txt', 'HL-List.txt')
        else:
            pass

    # 조회성 TR메시지 수신 콜백함수, OnReceiveMessage가 OnReceiveData보다 먼저 도착함
    def OnReceiveMessage(self, ClassName, systemError, messageCode, message):

        txt = '클래스이름 = {0} : systemError = {1}, messageCode = {2}, message = {3}'.format(ClassName, systemError, messageCode, message)
        print(txt)

        #dt = datetime.now()
        '''
        if ClassName == 't2835':

            global flag_t2835_eventloop

            if systemError == 0:

                # t2835 이벤트루프 해지                    
                flag_t2835_eventloop = True

                self.t2835_event_loop.exit()

                txt = 't2835_event_loop success exit...\r'
                print(txt)
            else:                   
                flag_t2835_eventloop = False

                self.t2835_event_loop.exit()

                txt = '[{0:02d}:{1:02d}:{2:02d}] t2835_event_loop fail exit...\r'.format(dt.hour, dt.minute, dt.second)
                self.textBrowser.append(txt)
                print(txt)
        '''    
        if ClassName == 't2301':

            global flag_t2301_eventloop

            if systemError == 0:

                # t2301 이벤트루프 해지                    
                flag_t2301_eventloop = True

                self.t2301_event_loop.exit()

                txt = 't2301_event_loop success exit...\r'
                print(txt)
            else:                   
                flag_t2301_eventloop = False

                self.t2301_event_loop.exit()

                txt = '[{0:02d}:{1:02d}:{2:02d}] t2301_event_loop fail exit...\r'.format(dt.hour, dt.minute, dt.second)
                self.textBrowser.append(txt)
                print(txt)
           
        elif ClassName == 't8416':
            
            global flag_t8416_eventloop

            if  not flag_t8416_call_done:
                self.t8416_call_event_loop.exit()
                print('{0}번째 t8416_call_event_loop exit...'.format(t8416_call_count + 1))
                QTest.qWait(1000)
            else:
                pass

            if  flag_t8416_call_done and not flag_t8416_put_done:
                self.t8416_put_event_loop.exit()
                print('{0}번째 t8416_put_event_loop exit...'.format(t8416_put_count + 1))
                QTest.qWait(1000)
            else:
                pass            
        else:
            pass

    # 조회성 TR데이타 수신 콜백함수
    #####################################################################################################################################################################
    def OnReceiveData(self, tickdata):

        global GMSHCODE, CMSHCODE, CCMSHCODE, fut_code
        global opt_actval
        global ATM_INDEX, old_atm_index
        global df_call_information_graph, df_put_information_graph
        global df_call_graph, df_put_graph
        global atm_txt, atm_val

        global call_ckbox
        global selected_call
        global df_call, df_call_quote

        global put_ckbox
        global selected_put
        global df_put, df_put_quote

        global df_call_volume, df_put_volume

        global call_행사가, put_행사가

        global call_기준가, call_월저, call_월고, call_전저, call_전고, call_종가, call_피봇, \
            call_시가, call_저가, call_고가, call_진폭
        global call_기준가_node_list, call_월저_node_list, call_월고_node_list, call_전저_node_list, call_전고_node_list, \
            call_종가_node_list, call_피봇_node_list, call_시가_node_list, call_저가_node_list, call_고가_node_list

        global put_기준가, put_월저, put_월고, put_전저, put_전고, put_종가, put_피봇, \
            put_시가, put_저가, put_고가, put_진폭
        global put_기준가_node_list, put_월저_node_list, put_월고_node_list, put_전저_node_list, put_전고_node_list, \
            put_종가_node_list, put_피봇_node_list, put_시가_node_list, put_저가_node_list, put_고가_node_list

        global option_pairs_count, real_option_pairs_count

        global 콜_순미결합, 풋_순미결합, 콜_순미결퍼센트, 풋_순미결퍼센트
        global 콜_수정미결합, 풋_수정미결합, 콜_수정미결퍼센트, 풋_수정미결퍼센트
        global call_atm_value, put_atm_value

        global df_fut

        global call_oi_init_percent, put_oi_init_percent
        global call_gap_percent, call_db_percent, put_gap_percent, put_db_percent
        global call_otm_cdb_percent, put_otm_cdb_percent

        global call_open
        global call_ol
        global call_oh

        global put_open
        global put_ol
        global put_oh

        global call_volume_power, put_volume_power
        global 콜시가리스트, 콜저가리스트, 콜고가리스트, 풋시가리스트, 풋저가리스트, 풋고가리스트

        global start_time_txt, end_time_txt

        global df_futures_cm_graph, df_futures_nm_graph, df_kp200_graph, df_demand_supply_graph
        global df_sp500_graph, df_dow_graph, df_nasdaq_graph, df_hsi_graph, df_wti_graph, df_gold_graph, df_euro_graph, df_yen_graph, df_adi_graph
        global df_futures_cm_ta_graph, df_futures_nm_ta_graph
        global df_sp500_ta_graph, df_dow_ta_graph, df_nasdaq_ta_graph, df_hsi_ta_graph, df_wti_ta_graph, df_gold_ta_graph, df_euro_ta_graph, df_yen_ta_graph, df_adi_ta_graph
        global view_actval
        
        global call_itm_count, call_max_actval
        global put_itm_count, put_max_actval
        global KP200_전일종가, KP200_당일시가, kp200_저가, kp200_현재가, kp200_고가, kp200_진폭
        global t2835_month_info
        global server_date, server_time, system_server_timegap, server_x_idx
        global CM_OPTCODE, NM_OPTCODE
        global call_otm_cdb_percent_mean, put_otm_cdb_percent_mean
        global atm_zero_sum, atm_zero_cha
        global 옵션_중심가, CENTER_VAL_PLUS5, CENTER_VAL_PLUS4, CENTER_VAL_PLUS3, CENTER_VAL_PLUS2, CENTER_VAL_PLUS1, CENTER_VAL_MINUS1, CENTER_VAL_MINUS2, CENTER_VAL_MINUS3, CENTER_VAL_MINUS4, CENTER_VAL_MINUS5
        
        global t8416_call_count, t8416_put_count
        global ui_start_time
        global df_fut_t8416
        global fut_avg_noise_ratio, k_value

        global CM_CALL_CODE, CM_PUT_CODE, NM_CALL_CODE, NM_PUT_CODE, CM_OPT_LENGTH, NM_OPT_LENGTH
        global t8416_option_pairs_count, t8416_loop_finish_time
        
        global flag_score_board_start, flag_telegram_send_start, flag_telegram_listen_start
        global 근월물_선물_전저, 근월물_선물_전고, 근월물_선물_종가, 근월물_선물_피봇, 근월물_선물_시가, 근월물_선물_저가, 근월물_선물_현재가, 근월물_선물_고가
        global 차월물_선물_전저, 차월물_선물_전고, 차월물_선물_종가, 차월물_선물_피봇, 차월물_선물_시가, 차월물_선물_저가, 차월물_선물_현재가, 차월물_선물_고가
        global 근월물_선물_시가등락율, 차월물_선물_시가등락율
        global FUT_당일종가
        global flag_call_open_in_fixed_coreval, flag_put_open_in_fixed_coreval

        dt = datetime.now()

        szTrCode = tickdata[0]

        if szTrCode == 't0167':
            
            global 서버시간, system_server_time_gap, flag_heartbeat
            global t0167_hour, t0167_minute, t0167_second, server_x_idx, plot_time_index, 시스템시간_분, 서버시간_분

            szTrCode, server_date, server_time = tickdata
            
            systemtime = dt.hour * 3600 + dt.minute * 60 + dt.second

            시스템시간_분 = dt.hour * 3600 + dt.minute * 60

            t0167_hour = int(server_time[0:2])
            t0167_minute = int(server_time[2:4])
            t0167_second = int(server_time[4:6])

            서버시간 = t0167_hour * 3600 + t0167_minute * 60 + t0167_second
            서버시간_분 = t0167_hour * 3600 + t0167_minute * 60

            system_server_time_gap = systemtime - 서버시간
            
            # X축 시간좌표 계산
            if NightTime:

                night_time = t0167_hour

                if SUMMER_TIME:
                    cme_close_hour = 6
                else:
                    cme_close_hour = 7

                if 0 <= night_time <= cme_close_hour:
                    night_time = night_time + 24
                else:
                    pass

                server_x_idx = (night_time - NightTime_PreStart_Hour) * 60 + t0167_minute + 1             
            else:
                server_x_idx = (t0167_hour - DayTime_PreStart_Hour) * 60 + t0167_minute + 1

            #plot_time_index = server_x_idx

            flag_heartbeat = True

        elif szTrCode == 't1514':

            szTrCode, CTS일자, df = tickdata
            
            if df.at[0, '업종코드'] == KOSPI:

                if df.at[0, '전일대비구분'] == '5':

                    jisu_txt = "KOSPI: {0} (-{1:.2f}, {2:0.1f}%)".format(format(df.at[0, '지수'], ','), df.at[0, '전일대비'], df.at[0, '등락율'])
                    
                    self.label_1st_index.setStyleSheet('background-color: qlineargradient(spread:reflect, x1:1, y1:0, x2:0.995, y2:1, stop:0 rgba(218, 218, 218, 255), stop:0.305419 \
                                                    rgba(0, 7, 11, 255), stop:0.935961 rgba(2, 11, 18, 255), stop:1 rgba(240, 240, 240, 255)); \
                                                    color: lightskyblue; font-family: Consolas; font-size: 9pt; font: Bold; border-style: solid; border-width: 1px; border-color: lightskyblue; border-radius: 5px')
                    self.label_1st_index.setText(jisu_txt)

                elif df.at[0, '전일대비구분'] == '2':

                    jisu_txt = "KOSPI: {0} ({1:.2f}, {2:0.1f}%)".format(format(df.at[0, '지수'], ','), df.at[0, '전일대비'], df.at[0, '등락율'])
                    
                    self.label_1st_index.setStyleSheet('background-color: qlineargradient(spread:reflect, x1:1, y1:0, x2:0.995, y2:1, stop:0 rgba(218, 218, 218, 255), stop:0.305419 \
                                                    rgba(0, 7, 11, 255), stop:0.935961 rgba(2, 11, 18, 255), stop:1 rgba(240, 240, 240, 255)); \
                                                    color: pink; font-family: Consolas; font-size: 9pt; font: Bold; border-style: solid; border-width: 1px; border-color: lightskyblue; border-radius: 5px')
                    self.label_1st_index.setText(jisu_txt)
                else:
                    pass

            elif df.at[0, '업종코드'] == KOSDAQ:

                if df.at[0, '전일대비구분'] == '5':

                    jisu_txt = "KOSDAQ: {0} (-{1:.2f}, {2:0.1f}%)".format(format(df.at[0, '지수'], ','), df.at[0, '전일대비'], df.at[0, '등락율'])
                    
                    self.label_2nd_index.setStyleSheet('background-color: qlineargradient(spread:reflect, x1:1, y1:0, x2:0.995, y2:1, stop:0 rgba(218, 218, 218, 255), stop:0.305419 \
                                                    rgba(0, 7, 11, 255), stop:0.935961 rgba(2, 11, 18, 255), stop:1 rgba(240, 240, 240, 255)); \
                                                    color: lightskyblue; font-family: Consolas; font-size: 9pt; font: Bold; border-style: solid; border-width: 1px; border-color: lightskyblue; border-radius: 5px')
                    self.label_2nd_index.setText(jisu_txt)

                elif df.at[0, '전일대비구분'] == '2':

                    jisu_txt = "KOSDAQ: {0} ({1:.2f}, {2:0.1f}%)".format(format(df.at[0, '지수'], ','), df.at[0, '전일대비'], df.at[0, '등락율'])
                    
                    self.label_2nd_index.setStyleSheet('background-color: qlineargradient(spread:reflect, x1:1, y1:0, x2:0.995, y2:1, stop:0 rgba(218, 218, 218, 255), stop:0.305419 \
                                                    rgba(0, 7, 11, 255), stop:0.935961 rgba(2, 11, 18, 255), stop:1 rgba(240, 240, 240, 255)); \
                                                    color: pink; font-family: Consolas; font-size: 9pt; font: Bold; border-style: solid; border-width: 1px; border-color: lightskyblue; border-radius: 5px')
                    self.label_2nd_index.setText(jisu_txt)
                else:
                    pass
            else:
                pass                    

        elif szTrCode == 't2101':

            szTrCode, df = tickdata

            if df['종목코드'] == GMSHCODE:

                print('근월물 선물 현재가 = {0}\r'.format(df['현재가']))

                self.fut_realdata['현재가'] = df['현재가']

                if NightTime:
                    FUT_당일종가 = df['현재가']
                else:
                    pass

                self.fut_realdata['KP200'] = df['KOSPI200지수']

                print('\r')
                print('************************************* t2101 kp200 전일종가 = {0}\r'.format(df['KOSPI200지수']))
                print('************************************* KP200_전일종가 = {0}\r'.format(KP200_전일종가))
                print('\r')

                atm_txt = self.get_atm_txt(self.fut_realdata['KP200'])

                if atm_txt[-1] == '2' or atm_txt[-1] == '7':

                    atm_val = float(atm_txt) + 0.5
                else:
                    atm_val = float(atm_txt)

                if atm_txt in opt_actval:

                    ATM_INDEX = opt_actval.index(atm_txt)

                    view_actval = opt_actval[ATM_INDEX-5:ATM_INDEX+6]

                    call_atm_value = df_call.at[ATM_INDEX, '현재가']
                    put_atm_value = df_put.at[ATM_INDEX, '현재가']

                    txt = '{0:.2f}({1:.2f}:{2:.2f})'.format(
                        self.fut_realdata['현재가'] - self.fut_realdata['KP200'],
                        call_atm_value + put_atm_value,
                        abs(call_atm_value - put_atm_value))
                    self.label_atm.setText(txt)                    

                    item_txt = '{0:0.2f}% \n {1:0.2f}% '.format(콜_수정미결퍼센트, 풋_수정미결퍼센트)

                    item = QTableWidgetItem(item_txt)
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_quote.setItem(0, Quote_column.미결종합.value - 1, item)
                else:
                    print("atm값({0})이 리스트에 없습니다.".format(atm_txt))

                txt = '[{0:02d}:{1:02d}:{2:02d}] 옵션 등가지수는 {3}(index = {4})입니다.\r'.format(dt.hour, dt.minute, dt.second, atm_txt, ATM_INDEX)
                self.parent.textBrowser.append(txt)

                if self.call_open_list:

                    for index in self.call_open_list:

                        if index > ATM_INDEX:
                            call_itm_count += 1
                        else:
                            pass
                        
                        if index == option_pairs_count - 1:
                            call_max_actval = True
                        else:
                            pass
                else:
                    pass

                if self.put_open_list:

                    for index in self.put_open_list:

                        if index > ATM_INDEX:
                            put_itm_count += 1
                        else:
                            pass
                        
                        if index == option_pairs_count - 1:
                            put_max_actval = True
                        else:
                            pass
                else:
                    pass

                # kp200 맥점 10개를 리스트로 만듬
                global KP200_COREVAL

                # KP200_COREVAL 리스트 기존데이타 삭제(초기화)
                del KP200_COREVAL[:]

                for i in range(6):

                    KP200_COREVAL.append(atm_val - 2.5 * i + 1.25) 

                for i in range(1, 5):

                    KP200_COREVAL.append(atm_val + 2.5 * i + 1.25)

                KP200_COREVAL.sort()
                print('t2101 KP200_COREVAL =', KP200_COREVAL)  

                self.tableWidget_call.item(ATM_INDEX, Option_column.행사가.value).setBackground(QBrush(노란색))
                self.tableWidget_call.item(ATM_INDEX, Option_column.행사가.value).setForeground(QBrush(검정색))
                self.tableWidget_put.item(ATM_INDEX, Option_column.행사가.value).setBackground(QBrush(노란색))
                self.tableWidget_put.item(ATM_INDEX, Option_column.행사가.value).setForeground(QBrush(검정색))            

                if not self.flag_refresh:

                    self.tableWidget_call.cellWidget(ATM_INDEX, 0).findChild(type(QCheckBox())).setChecked(Qt.Checked)
                    self.tableWidget_put.cellWidget(ATM_INDEX, 0).findChild(type(QCheckBox())).setChecked(Qt.Checked)
                    selected_call = [ATM_INDEX]
                    selected_put = [ATM_INDEX]
                else:
                    pass

                view_actval = opt_actval[ATM_INDEX-5:ATM_INDEX+6]

                call_atm_value = df_call.at[ATM_INDEX, '현재가']
                put_atm_value = df_put.at[ATM_INDEX, '현재가']

                txt = '{0:.2f}({1:.2f}:{2:.2f})'.format(
                    self.fut_realdata['현재가'] - self.fut_realdata['KP200'],
                    call_atm_value + put_atm_value,
                    abs(call_atm_value - put_atm_value))
                self.label_atm.setText(txt)           

                self.fut_realdata['종가'] = df['전일종가']
                근월물_선물_종가 = df['전일종가']

                item = QTableWidgetItem("{0:.2f}".format(df['전일종가']))
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(흰색))
                item.setForeground(QBrush(검정색))
                self.tableWidget_fut.setItem(1, Futures_column.종가.value, item)

                self.fut_realdata['시가'] = df['시가']
                근월물_선물_시가 = df['시가']
                근월물_선물_시가등락율 = ((근월물_선물_시가 - 근월물_선물_종가) / 근월물_선물_종가) * 100

                print('\r')
                print('<근월물_선물_시가등락율> =', 근월물_선물_시가등락율)
                print('\r')

                txt = '{0:.2f}\n({1:.2f})'.format(df['시가'], SP500_기준_예상시가)

                item = QTableWidgetItem(txt)
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(흰색))

                if df['시가'] > df['전일종가']:
                    item.setForeground(QBrush(적색))
                elif df['시가'] < df['전일종가']:
                    item.setForeground(QBrush(청색))
                else:
                    item.setForeground(QBrush(검정색))

                self.tableWidget_fut.setItem(1, Futures_column.시가.value, item)

                df_futures_cm_graph.at[0, 'Drate'] = 0
                df_futures_nm_graph.at[0, 'Drate'] = 0
                df_sp500_graph.at[0, 'Drate'] = 0
                df_dow_graph.at[0, 'Drate'] = 0
                df_nasdaq_graph.at[0, 'Drate'] = 0
                df_hsi_graph.at[0, 'Drate'] = 0
                df_wti_graph.at[0, 'Drate'] = 0
                df_gold_graph.at[0, 'Drate'] = 0
                df_euro_graph.at[0, 'Drate'] = 0
                df_yen_graph.at[0, 'Drate'] = 0
                df_adi_graph.at[0, 'Drate'] = 0

                df_call_information_graph.at[0, 'Drate'] = 0
                df_put_information_graph.at[0, 'Drate'] = 0

                df_call_information_graph.at[0, 'centerval'] = 장시작_중심가

                if SP500_전일종가 > 0:
                    df_sp500_graph.at[0, 'Price'] = SP500_전일종가
                    df_sp500_graph.at[1, 'Price'] = SP500_시가

                if DOW_전일종가 > 0:
                    df_dow_graph.at[0, 'Price'] = DOW_전일종가
                    df_dow_graph.at[1, 'Price'] = DOW_시가

                if NASDAQ_전일종가 > 0:
                    df_nasdaq_graph.at[0, 'Price'] = NASDAQ_전일종가
                    df_nasdaq_graph.at[1, 'Price'] = NASDAQ_시가

                if HANGSENG_전일종가 > 0:
                    df_hsi_graph.at[0, 'Price'] = HANGSENG_전일종가
                    df_hsi_graph.at[1, 'Price'] = HANGSENG_시가

                if WTI_전일종가 > 0:
                    df_wti_graph.at[0, 'Price'] = WTI_전일종가
                    df_wti_graph.at[1, 'Price'] = WTI_시가

                if GOLD_전일종가 > 0:
                    df_gold_graph.at[0, 'Price'] = GOLD_전일종가
                    df_gold_graph.at[1, 'Price'] = GOLD_시가

                if EURO_전일종가 > 0:
                    df_euro_graph.at[0, 'Price'] = EURO_전일종가
                    df_euro_graph.at[1, 'Price'] = EURO_시가

                if YEN_전일종가 > 0:
                    df_yen_graph.at[0, 'Price'] = YEN_전일종가
                    df_yen_graph.at[1, 'Price'] = YEN_시가

                if ADI_전일종가 > 0:
                    df_adi_graph.at[0, 'Price'] = ADI_전일종가
                    df_adi_graph.at[1, 'Price'] = ADI_시가

                if DayTime:                    

                    df_futures_cm_graph.at[0, 'Volume'] = 0
                    #df_futures_cm_graph.at[0, 'kp200'] = self.fut_realdata['KP200']
                    df_futures_cm_graph.at[0, 'Price'] = self.fut_realdata['종가']
                    df_kp200_graph.at[0, 'Price'] = KP200_전일종가
                    
                    df_demand_supply_graph.at[0, 'Program'] = 0
                    df_demand_supply_graph.at[0, 'kospi_total'] = 0
                    df_demand_supply_graph.at[0, 'kospi_foreigner'] = 0
                    df_demand_supply_graph.at[0, 'futures_foreigner'] = 0

                    if self.fut_realdata['시가'] > 0:
                        df_futures_cm_graph.at[GuardTime + 1, 'Open'] = self.fut_realdata['시가']
                    else:
                        pass                    
                else:
                    FUT_당일종가 = df['현재가']

                if self.fut_realdata['전저'] > 0 and self.fut_realdata['전고'] > 0:
                    self.fut_realdata['피봇'] = calc_pivot(self.fut_realdata['전저'], self.fut_realdata['전고'], self.fut_realdata['종가'], df['시가'], 2)
                    근월물_선물_피봇 = self.fut_realdata['피봇']

                    item = QTableWidgetItem("{0:.2f}".format(self.fut_realdata['피봇']))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_fut.setItem(1, Futures_column.피봇.value, item)
                else:
                    pass                

                self.fut_realdata['시가갭'] = self.fut_realdata['시가'] - self.fut_realdata['종가']

                item = QTableWidgetItem("{0:.2f}".format(self.fut_realdata['시가갭']))
                item.setTextAlignment(Qt.AlignCenter)

                if self.fut_realdata['시가'] > self.fut_realdata['종가']:
                    item.setBackground(QBrush(콜기준가색))
                    item.setForeground(QBrush(검정색))
                elif self.fut_realdata['시가'] < self.fut_realdata['종가']:
                    item.setBackground(QBrush(풋기준가색))
                    item.setForeground(QBrush(흰색))
                else:
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))  

                self.tableWidget_fut.setItem(1, Futures_column.시가갭.value, item)

                self.fut_realdata['현재가'] = df['현재가']
                근월물_선물_현재가 = df['현재가']

                item = QTableWidgetItem("{0:.2f}".format(self.fut_realdata['현재가']))
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(흰색))

                if df['현재가'] > df['시가']:
                    item.setForeground(QBrush(적색))
                elif df['현재가'] < df['시가']:
                    item.setForeground(QBrush(청색))
                else:
                    item.setForeground(QBrush(검정색))

                self.tableWidget_fut.setItem(1, Futures_column.현재가.value, item)

                if df['시가'] > 0:

                    self.fut_realdata['대비'] = round((df['현재가'] - df['시가']), 2)
                else:
                    self.fut_realdata['대비'] = 0

                item = QTableWidgetItem("{0:.2f}".format(self.fut_realdata['대비']))
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(흰색))
                item.setForeground(QBrush(검정색))
                self.tableWidget_fut.setItem(1, Futures_column.대비.value, item)

                self.fut_realdata['저가'] = df['저가']
                근월물_선물_저가 = df['저가']

                txt = '{0:.2f}'.format(self.fut_realdata['저가']) + '\n' + '({0:.2f})'.format(df['시가'] - k_value)

                item = QTableWidgetItem(txt)
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(흰색))
                item.setForeground(QBrush(검정색))
                self.tableWidget_fut.setItem(1, Futures_column.저가.value, item)

                self.fut_realdata['고가'] = df['고가']
                근월물_선물_고가 = df['고가']

                txt = '{0:.2f}'.format(self.fut_realdata['고가']) + '\n' + '({0:.2f})'.format(df['시가'] + k_value)

                item = QTableWidgetItem(txt)
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(흰색))
                item.setForeground(QBrush(검정색))
                self.tableWidget_fut.setItem(1, Futures_column.고가.value, item)

                self.fut_realdata['진폭'] = df['고가'] - df['저가']

                item = QTableWidgetItem("{0:.2f}".format(self.fut_realdata['진폭']))
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(흰색))
                item.setForeground(QBrush(검정색))
                self.tableWidget_fut.setItem(1, Futures_column.진폭.value, item)

                self.fut_realdata['거래량'] = df['거래량']
                #temp = format(self.fut_realdata['거래량'], ',')
                temp = '{0}k'.format(int(self.fut_realdata['거래량']/1000))

                item = QTableWidgetItem(temp)
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(흰색))
                item.setForeground(QBrush(검정색))
                self.tableWidget_fut.setItem(1, Futures_column.거래량.value, item)

                self.fut_realdata['미결'] = df['미결제량']
                #temp = format(self.fut_realdata['미결'], ',')
                temp = '{0}k'.format(int(self.fut_realdata['미결']/1000))

                item = QTableWidgetItem(temp)
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(흰색))
                item.setForeground(QBrush(검정색))
                self.tableWidget_fut.setItem(1, Futures_column.OI.value, item)

                self.fut_realdata['미결증감'] = df['미결제증감']
                temp = format(self.fut_realdata['미결증감'], ',')

                item = QTableWidgetItem(temp)
                item.setTextAlignment(Qt.AlignCenter)

                if self.fut_realdata['미결증감'] < 0:
                    item.setBackground(QBrush(라임))
                else:
                    item.setBackground(QBrush(흰색))

                item.setForeground(QBrush(검정색))
                self.tableWidget_fut.setItem(1, Futures_column.OID.value, item)
                
                item = QTableWidgetItem("{0}".format(plot_drate_scale_factor))
                item.setTextAlignment(Qt.AlignCenter)
                self.tableWidget_fut.setItem(2, Futures_column.OLOH.value, item)

                self.fut_cm_node_color_clear()
                self.fut_cm_oloh_check()
                self.fut_cm_node_coloring()

                self.kp200_node_color_clear()
                self.kp200_node_coloring()

                self.kp200_low_node_coloring()
                self.kp200_high_node_coloring()
                
                if ResizeRowsToContents:  
                    self.tableWidget_fut.resizeRowsToContents()
                else:
                    pass

                if self.flag_refresh:
            
                    # 옵션 맥점 컬러링                
                    txt = '[{0:02d}:{1:02d}:{2:02d}] 옵션맥점 Refresh 컬러링을 시작합니다.\r'.format(dt.hour, dt.minute, dt.second)
                    self.textBrowser.append(txt)

                    self.opt_all_node_coloring()
                else:
                    pass

            elif df['종목코드'] == CMSHCODE:

                print('차월물 선물 현재가 = {0}\r'.format(df['현재가']))

                차월물_선물_종가 = df['전일종가']

                df_futures_nm_graph.at[0, 'Price'] = 차월물_선물_종가

                item = QTableWidgetItem("{0:.2f}".format(df['전일종가']))
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(흰색))
                item.setForeground(QBrush(검정색))
                self.tableWidget_fut.setItem(0, Futures_column.종가.value, item)

                차월물_선물_시가 = df['시가']
                차월물_선물_시가등락율 = ((차월물_선물_시가 - 차월물_선물_종가) / 차월물_선물_종가) * 100

                print('\r')
                print('<차월물_선물_시가등락율> =', 차월물_선물_시가등락율)
                print('\r')

                df_futures_nm_graph.at[GuardTime + 1, 'Open'] = 차월물_선물_시가

                item = QTableWidgetItem("{0:.2f}".format(df['시가']))
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(흰색))

                if 차월물_선물_시가 > 차월물_선물_종가:
                    item.setForeground(QBrush(적색))
                elif 차월물_선물_시가 < 차월물_선물_종가:
                    item.setForeground(QBrush(청색))
                else:
                    item.setForeground(QBrush(검정색))

                self.tableWidget_fut.setItem(0, Futures_column.시가.value, item)

                if 차월물_선물_전저 > 0 and 차월물_선물_전고 > 0:
                    차월물_선물_피봇 = calc_pivot(차월물_선물_전저, 차월물_선물_전고, 차월물_선물_종가, 차월물_선물_시가, 2)

                    item = QTableWidgetItem("{0:.2f}".format(차월물_선물_피봇))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_fut.setItem(0, Futures_column.피봇.value, item)
                else:
                    pass

                if 차월물_선물_시가 > 0:
                    시가갭 = 차월물_선물_시가 - 차월물_선물_종가

                    item = QTableWidgetItem("{0:.2f}".format(시가갭))
                    item.setTextAlignment(Qt.AlignCenter)

                    if 차월물_선물_시가 > 차월물_선물_종가:
                        item.setBackground(QBrush(콜기준가색))
                        item.setForeground(QBrush(검정색))
                    elif 차월물_선물_시가 < 차월물_선물_종가:
                        item.setBackground(QBrush(풋기준가색))
                        item.setForeground(QBrush(흰색))
                    else:
                        item.setBackground(QBrush(흰색))
                        item.setForeground(QBrush(검정색))  

                    self.tableWidget_fut.setItem(0, Futures_column.시가갭.value, item)
                else:
                    pass

                차월물_선물_저가 = df['저가']

                item = QTableWidgetItem('{0:.2f}'.format(df['저가']))
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(흰색))
                item.setForeground(QBrush(검정색))
                self.tableWidget_fut.setItem(0, Futures_column.저가.value, item)

                차월물_선물_현재가 = df['현재가']

                item = QTableWidgetItem("{0:.2f}".format(df['현재가']))
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(흰색))

                if 차월물_선물_현재가 > 차월물_선물_시가:
                    item.setForeground(QBrush(적색))
                elif 차월물_선물_현재가 < 차월물_선물_시가:
                    item.setForeground(QBrush(청색))
                else:
                    item.setForeground(QBrush(검정색))

                self.tableWidget_fut.setItem(0, Futures_column.현재가.value, item)

                대비 = 차월물_선물_현재가 - 차월물_선물_시가

                item = QTableWidgetItem("{0:.2f}".format(대비))
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(흰색))
                item.setForeground(QBrush(검정색))
                self.tableWidget_fut.setItem(0, Futures_column.대비.value, item)

                차월물_선물_고가 = df['고가']

                item = QTableWidgetItem('{0:.2f}'.format(df['고가']))
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(흰색))
                item.setForeground(QBrush(검정색))
                self.tableWidget_fut.setItem(0, Futures_column.고가.value, item)

                진폭 = 차월물_선물_고가 - 차월물_선물_저가

                item = QTableWidgetItem("{0:.2f}".format(진폭))
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(흰색))
                item.setForeground(QBrush(검정색))
                self.tableWidget_fut.setItem(0, Futures_column.진폭.value, item)

                #if flag_market_service:
                if True:
                    self.fut_nm_node_color_clear()
                    self.fut_nm_oloh_check()
                    self.fut_nm_node_coloring()
                else:
                    pass

                self.tableWidget_fut.resizeColumnsToContents()
            else:
                pass            

        elif szTrCode == 't2301':

            szTrCode, block, df, df1 = tickdata

            global 옵션잔존일, t8416_option_pairs_count            

            if not self.flag_refresh:

                # 옵션 잔존일
                옵션잔존일 = block['옵션잔존일']

                # 옵션 행사가 갯수
                option_pairs_count = len(df)
                real_option_pairs_count = len(df)
                
                if DayTime:

                    call_open = [False] * option_pairs_count
                    put_open = [False] * option_pairs_count
                else:
                    pass
                
                t2301_call = []
                callho_result = []
                t2301_put = []
                putho_result = []

                callche_result = []
                putche_result = []
                
                # 콜처리
                for i in range(option_pairs_count):

                    행사가 = df['행사가'][i]
                    item = QTableWidgetItem("{0:0.1f}".format(df['float_행사가'][i]))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(검정색))
                    item.setForeground(QBrush(흰색))
                    self.tableWidget_call.setItem(i, Option_column.행사가.value, item)

                    self.call_code.append(df['콜옵션코드'][i])
                    opt_actval.append(df['콜옵션코드'][i][5:8])

                    OLOH = '-'
                    item = QTableWidgetItem(OLOH)
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(검정색))
                    item.setForeground(QBrush(흰색))
                    self.tableWidget_call.setItem(i, Option_column.OLOH.value, item)

                    시가 = round(df['시가'][i], 2)

                    현재가 = df['현재가'][i]
                    item = QTableWidgetItem("{0:.2f}".format(현재가))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))

                    if DayTime and pre_start:
                        item.setForeground(QBrush(검정색))
                    else:
                        if 시가 > 0:

                            if 현재가 > 시가:
                                item.setForeground(QBrush(적색))
                            elif 현재가 < 시가:
                                item.setForeground(QBrush(청색))
                            else:
                                item.setForeground(QBrush(검정색))
                        else:
                            item.setForeground(QBrush(검정색))

                    self.tableWidget_call.setItem(i, Option_column.현재가.value, item)

                    if df['전일대비구분'][i] == '2':

                        종가 = round((현재가 - df['전일대비'][i]), 2)

                    elif df['전일대비구분'][i] == '5':

                        종가 = round((현재가 + df['전일대비'][i]), 2)

                    else:
                        종가 = round(현재가, 2)

                    if 종가 >= 100:
                        item = QTableWidgetItem("{0:0.1f}".format(종가))
                    else:
                        item = QTableWidgetItem("{0:.2f}".format(종가))

                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_call.setItem(i, Option_column.종가.value, item)

                    df_call_graph[i].at[0, 'Open'] = 종가
                    df_call_graph[i].at[0, 'Price'] = 종가
                    '''
                    if df['저가'][i] < df['고가'][i]:
                        저가 = df['저가'][i]
                        고가 = df['고가'][i]                        
                    else:
                        저가 = 0.0
                        고가 = 0.0
                    '''
                    저가 = df['저가'][i]
                    고가 = df['고가'][i] 

                    item = QTableWidgetItem("{0:.2f}".format(저가))
                    item.setTextAlignment(Qt.AlignCenter)

                    if i == ATM_INDEX - 1 or i == ATM_INDEX or i == ATM_INDEX + 1:
                        item.setBackground(QBrush(옅은회색))
                    else:
                        item.setBackground(QBrush(흰색))

                    item.setForeground(QBrush(검정색))

                    self.tableWidget_call.setItem(i, Option_column.저가.value, item)

                    item = QTableWidgetItem("{0:.2f}".format(고가))
                    item.setTextAlignment(Qt.AlignCenter)

                    if i == ATM_INDEX - 1 or i == ATM_INDEX or i == ATM_INDEX + 1:
                        item.setBackground(QBrush(옅은회색))
                    else:
                        item.setBackground(QBrush(흰색))

                    item.setForeground(QBrush(검정색))

                    self.tableWidget_call.setItem(i, Option_column.고가.value, item)

                    if DayTime:

                        if df['저가'][i] < df['고가'][i]:
                            call_open[i] = True
                            self.tableWidget_call.item(i, Option_column.행사가.value).setBackground(QBrush(라임))
                            self.tableWidget_call.item(i, Option_column.행사가.value).setForeground(QBrush(검정색))
                        else:
                            pass
                    else:
                        pass

                    진폭 = 고가 - 저가
                    item = QTableWidgetItem("{0:.2f}".format(진폭))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_call.setItem(i, Option_column.진폭.value, item)
                    
                    if DayTime:

                        if 시가 > opt_search_start_value and df['저가'][i] < df['고가'][i]:
                            self.call_open_list.append(i)
                        else:
                            pass
                    else:
                        pass

                    if 시가 > 0:

                        item = QTableWidgetItem("{0:.2f}".format(시가))
                        item.setTextAlignment(Qt.AlignCenter)
                        item.setBackground(QBrush(흰색))

                        if 시가 > 종가:
                            item.setForeground(QBrush(적색))
                        elif 시가 < 종가:
                            item.setForeground(QBrush(청색))
                        else:
                            item.setForeground(QBrush(검정색))

                        self.tableWidget_call.setItem(i, Option_column.시가.value, item)

                        if 시가 in COREVAL:
                            self.tableWidget_call.item(i, Option_column.시가.value).setBackground(QBrush(대맥점색))
                            self.tableWidget_call.item(i, Option_column.시가.value).setForeground(QBrush(검정색))
                        else:
                            pass

                        if DayTime and 시가 in FIXED_COREVAL:
                            self.tableWidget_call.item(i, Option_column.시가.value).setBackground(QBrush(검정색))
                            self.tableWidget_call.item(i, Option_column.시가.value).setForeground(QBrush(노란색))
                            flag_call_open_in_fixed_coreval = True
                        else:
                            pass

                        if DayTime:
                            df_call_graph[i].at[GuardTime + 1, 'Open'] = 시가
                            df_call_graph[i].at[GuardTime + 1, 'Price'] = 시가
                        else:
                            pass

                        시가갭 = 시가 - 종가
                        대비 = int(round((현재가 - 시가) * 1, 2))

                        if 시가 > 0 and 저가 < 고가:

                            call_gap_percent[i] = (시가 / 종가 - 1) * 100

                            gap_txt = "{0:.2f}\n{1:.1f}%".format(시가갭, call_gap_percent[i])

                            item = QTableWidgetItem(gap_txt)
                            item.setTextAlignment(Qt.AlignCenter)
                            item.setBackground(QBrush(흰색))
                            item.setForeground(QBrush(검정색))
                            self.tableWidget_call.setItem(i, Option_column.시가갭.value, item)

                            call_db_percent[i] = (현재가 / 시가 - 1) * 100

                            gap_txt = "{0:.2f}\n{1:.1f}%".format(대비, call_db_percent[i])

                            item = QTableWidgetItem(gap_txt)
                            item.setTextAlignment(Qt.AlignCenter)
                            item.setBackground(QBrush(흰색))
                            item.setForeground(QBrush(검정색))
                            self.tableWidget_call.setItem(i, Option_column.대비.value, item)
                        else:
                            gap_txt = "{0:.2f}".format(시가갭)

                            item = QTableWidgetItem(gap_txt)
                            item.setTextAlignment(Qt.AlignCenter)
                            item.setBackground(QBrush(흰색))
                            item.setForeground(QBrush(검정색))
                            self.tableWidget_call.setItem(i, Option_column.시가갭.value, item)

                            gap_txt = "{0:.2f}".format(대비)

                            item = QTableWidgetItem(gap_txt)
                            item.setTextAlignment(Qt.AlignCenter)
                            item.setBackground(QBrush(흰색))
                            item.setForeground(QBrush(검정색))
                            self.tableWidget_call.setItem(i, Option_column.대비.value, item)
                    else:
                        시가 = 0.0
                        시가갭 = 0.0
                        대비 = 0.0
                        피봇 = 0.0

                        item = QTableWidgetItem("{0:.2f}".format(시가))
                        item.setTextAlignment(Qt.AlignCenter)
                        item.setBackground(QBrush(검정색))
                        item.setForeground(QBrush(흰색))
                        self.tableWidget_call.setItem(i, Option_column.시가.value, item)

                        item = QTableWidgetItem("{0:.2f}".format(시가갭))
                        item.setTextAlignment(Qt.AlignCenter)
                        item.setBackground(QBrush(검정색))
                        item.setForeground(QBrush(흰색))
                        self.tableWidget_call.setItem(i, Option_column.시가갭.value, item)

                        item = QTableWidgetItem("{0:.2f}".format(대비))
                        item.setTextAlignment(Qt.AlignCenter)
                        item.setBackground(QBrush(검정색))
                        item.setForeground(QBrush(흰색))
                        self.tableWidget_call.setItem(i, Option_column.대비.value, item)

                        item = QTableWidgetItem("{0:.2f}".format(피봇))
                        item.setTextAlignment(Qt.AlignCenter)
                        item.setBackground(QBrush(검정색))
                        item.setForeground(QBrush(흰색))
                        self.tableWidget_call.setItem(i, Option_column.피봇.value, item)

                    if NightTime:
                        전저 = 저가
                        종가 = 현재가
                        전고 = 고가
                        피봇 = 0.0
                    else:
                        전저 = 0.0
                        전고 = 0.0
                        피봇 = 0.0

                    if df['현재가'][i] <= 시가갭:

                        수정미결 = int(df['미결제약정'][i] * df['현재가'][i])
                        수정거래량 = int((df['매수잔량'][i] - df['매도잔량'][i]) * df['현재가'][i])
                    else:
                        수정미결 = int(df['미결제약정'][i] * (df['현재가'][i] - 시가갭))
                        수정거래량 = int((df['매수잔량'][i] - df['매도잔량'][i]) * (df['현재가'][i] - 시가갭))
                    
                    순미결 = df['미결제약정'][i]
                    순거래량 = df['매수잔량'][i] - df['매도잔량'][i]

                    temp = format(수정거래량, ',')
                    
                    item = QTableWidgetItem(temp)
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_call.setItem(i, Option_column.VP.value, item)

                    if DayTime and pre_start:

                        temp = format(순미결, ',')
                    else:
                        temp = format(수정미결, ',')               

                    item = QTableWidgetItem(temp)
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_call.setItem(i, Option_column.OI.value, item)

                    순미결증감 = df['미결제약정증감'][i]
                    수정미결증감 = int(round(df['미결제약정증감'][i] * df['현재가'][i]))
                    temp = format(수정미결증감, ',')

                    item = QTableWidgetItem(temp)
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_call.setItem(i, Option_column.OID.value, item)

                    단축코드 = 0
                    체결시간 = 0
                    기준가 = 0.0
                    월저 = 0.0
                    월고 = 0.0

                    lst = [단축코드, 체결시간, 행사가, OLOH, 기준가, 월저, 월고, 전저, 전고, 종가, 피봇, 시가, 시가갭, 저가, 현재가,
                           고가, 대비, 진폭, 순거래량, 수정거래량, 순미결, 수정미결, 순미결증감, 수정미결증감]
                    t2301_call.append(lst)

                    매도누적체결량 = 0
                    매도누적체결건수 = 0
                    매수누적체결량 = 0
                    매수누적체결건수 = 0

                    lst = [매도누적체결량, 매도누적체결건수, 매수누적체결량, 매수누적체결건수]
                    callche_result.append(lst)

                    매수건수 = 0
                    매도건수 = 0
                    매수잔량 = 0
                    매도잔량 = 0

                    lstho = [매수건수, 매도건수, 매수잔량, 매도잔량]
                    callho_result.append(lstho)

                columns = ['단축코드', '체결시간', '행사가', 'OLOH', '기준가', '월저', '월고', '전저', '전고', '종가', '피봇', '시가', '시가갭', '저가',
                           '현재가', '고가', '대비', '진폭', '순거래량', '수정거래량', '순미결', '수정미결', '순미결증감', '수정미결증감']

                df_call = DataFrame(data=t2301_call, columns=columns)

                columns = ['매도누적체결량', '매도누적체결건수', '매수누적체결량', '매수누적체결건수']
                df_call_volume = DataFrame(data=callche_result, columns=columns)

                columns = ['매수건수', '매도건수', '매수잔량', '매도잔량']
                df_call_quote = DataFrame(data=callho_result, columns=columns)

                temp = format(df_call['수정거래량'].sum(), ',')

                item = QTableWidgetItem(temp)
                self.tableWidget_call.setHorizontalHeaderItem(Option_column.VP.value, item)

                if DayTime and pre_start:

                    순미결합 = format(df_call['순미결'].sum(), ',')

                    item = QTableWidgetItem(순미결합)
                    self.tableWidget_call.setHorizontalHeaderItem(Option_column.OI.value, item)
                else:
                    temp = '{0}k'.format(format(int(df_call['수정미결'].sum()/1000), ','))                       
                    
                    item = QTableWidgetItem(temp)
                    self.tableWidget_call.setHorizontalHeaderItem(Option_column.OI.value, item)

                call_행사가 = df_call['행사가'].values.tolist()

                print('t2301 주간 전광판 콜 데이타 = \r', df_call)

                txt = '[{0:02d}:{1:02d}:{2:02d}] {3} 월물 Call 전광판 데이타 수신완료 !!!\r'.format(dt.hour, dt.minute, dt.second, t2301_month_info)
                self.textBrowser.append(txt)

                # 풋처리
                for i in range(option_pairs_count):

                    행사가 = df1['행사가'][i]
                    item = QTableWidgetItem("{0:0.1f}".format(df1['float_행사가'][i]))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(검정색))
                    item.setForeground(QBrush(흰색))
                    self.tableWidget_put.setItem(i, Option_column.행사가.value, item)

                    self.put_code.append(df1['풋옵션코드'][i])

                    OLOH = '-'
                    item = QTableWidgetItem(OLOH)
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(검정색))
                    item.setForeground(QBrush(흰색))
                    self.tableWidget_put.setItem(i, Option_column.OLOH.value, item)

                    시가 = round(df1['시가'][i], 2)

                    현재가 = df1['현재가'][i]
                    item = QTableWidgetItem("{0:.2f}".format(현재가))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))

                    if DayTime and pre_start:
                        item.setForeground(QBrush(검정색))
                    else:
                        if 시가 > 0:

                            if 현재가 > 시가:
                                item.setForeground(QBrush(적색))
                            elif 현재가 < 시가:
                                item.setForeground(QBrush(청색))
                            else:
                                item.setForeground(QBrush(검정색))
                        else:
                            item.setForeground(QBrush(검정색))

                    self.tableWidget_put.setItem(i, Option_column.현재가.value, item)

                    if df1['전일대비구분'][i] == '2':

                        종가 = round((현재가 - df1['전일대비'][i]), 2)

                    elif df['전일대비구분'][i] == '5':

                        종가 = round((현재가 + df1['전일대비'][i]), 2)

                    else:
                        종가 = round(현재가, 2)                                            

                    if 종가 >= 100:
                        item = QTableWidgetItem("{0:0.1f}".format(종가))
                    else:
                        item = QTableWidgetItem("{0:.2f}".format(종가))

                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_put.setItem(i, Option_column.종가.value, item)

                    df_put_graph[i].at[0, 'Open'] = 종가
                    df_put_graph[i].at[0, 'Price'] = 종가
                    '''
                    if df1['저가'][i] < df1['고가'][i]:
                        저가 = df1['저가'][i]
                        고가 = df1['고가'][i]                        
                    else:
                        저가 = 0.0
                        고가 = 0.0
                    '''
                    저가 = df1['저가'][i]
                    고가 = df1['고가'][i]  

                    item = QTableWidgetItem("{0:.2f}".format(저가))
                    item.setTextAlignment(Qt.AlignCenter)

                    if i == ATM_INDEX - 1 or i == ATM_INDEX or i == ATM_INDEX + 1:
                        item.setBackground(QBrush(옅은회색))
                    else:
                        item.setBackground(QBrush(흰색))

                    item.setForeground(QBrush(검정색))

                    self.tableWidget_put.setItem(i, Option_column.저가.value, item)

                    item = QTableWidgetItem("{0:.2f}".format(고가))
                    item.setTextAlignment(Qt.AlignCenter)

                    if i == ATM_INDEX - 1 or i == ATM_INDEX or i == ATM_INDEX + 1:
                        item.setBackground(QBrush(옅은회색))
                    else:
                        item.setBackground(QBrush(흰색))

                    item.setForeground(QBrush(검정색))

                    self.tableWidget_put.setItem(i, Option_column.고가.value, item)

                    if DayTime:

                        if df1['저가'][i] < df1['고가'][i]:
                            put_open[i] = True
                            self.tableWidget_put.item(i, Option_column.행사가.value).setBackground(QBrush(라임))
                            self.tableWidget_put.item(i, Option_column.행사가.value).setForeground(QBrush(검정색))
                        else:
                            pass
                    else:
                        pass

                    진폭 = 고가 - 저가
                    item = QTableWidgetItem("{0:.2f}".format(진폭))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_put.setItem(i, Option_column.진폭.value, item)
                    
                    if DayTime:

                        if 시가 > opt_search_start_value and df1['저가'][i] < df1['고가'][i]:
                            self.put_open_list.append(i)
                        else:
                            pass
                    else:
                        pass

                    if 시가 > 0:

                        item = QTableWidgetItem("{0:.2f}".format(시가))
                        item.setTextAlignment(Qt.AlignCenter)
                        item.setBackground(QBrush(흰색))

                        if 시가 > 종가:
                            item.setForeground(QBrush(적색))
                        elif 시가 < 종가:
                            item.setForeground(QBrush(청색))
                        else:
                            item.setForeground(QBrush(검정색))

                        self.tableWidget_put.setItem(i, Option_column.시가.value, item)

                        if 시가 in COREVAL:
                            self.tableWidget_put.item(i, Option_column.시가.value).setBackground(QBrush(대맥점색))
                            self.tableWidget_put.item(i, Option_column.시가.value).setForeground(QBrush(검정색))
                        else:
                            pass

                        if DayTime and 시가 in FIXED_COREVAL:
                            self.tableWidget_put.item(i, Option_column.시가.value).setBackground(QBrush(검정색))
                            self.tableWidget_put.item(i, Option_column.시가.value).setForeground(QBrush(노란색))
                            flag_put_open_in_fixed_coreval = True
                        else:
                            pass

                        if DayTime:
                            df_put_graph[i].at[GuardTime + 1, 'Open'] = 시가
                            df_put_graph[i].at[GuardTime + 1, 'Price'] = 시가
                        else:
                            pass

                        시가갭 = 시가 - 종가
                        대비 = int(round((현재가 - 시가) * 1, 2))

                        if 시가 > 0 and 저가 < 고가:

                            put_gap_percent[i] = (시가 / 종가 - 1) * 100

                            gap_txt = "{0:.2f}\n{1:.1f}%".format(시가갭, put_gap_percent[i])

                            item = QTableWidgetItem(gap_txt)
                            item.setTextAlignment(Qt.AlignCenter)
                            item.setBackground(QBrush(흰색))
                            item.setForeground(QBrush(검정색))
                            self.tableWidget_put.setItem(i, Option_column.시가갭.value, item)

                            put_db_percent[i] = (현재가 / 시가 - 1) * 100

                            gap_txt = "{0:.2f}\n{1:.1f}%".format(대비, put_db_percent[i])

                            item = QTableWidgetItem(gap_txt)
                            item.setTextAlignment(Qt.AlignCenter)
                            item.setBackground(QBrush(흰색))
                            item.setForeground(QBrush(검정색))
                            self.tableWidget_put.setItem(i, Option_column.대비.value, item)
                        else:
                            gap_txt = "{0:.2f}".format(시가갭)

                            item = QTableWidgetItem(gap_txt)
                            item.setTextAlignment(Qt.AlignCenter)
                            item.setBackground(QBrush(흰색))
                            item.setForeground(QBrush(검정색))
                            self.tableWidget_put.setItem(i, Option_column.시가갭.value, item)

                            gap_txt = "{0:.2f}".format(대비)

                            item = QTableWidgetItem(gap_txt)
                            item.setTextAlignment(Qt.AlignCenter)
                            item.setBackground(QBrush(흰색))
                            item.setForeground(QBrush(검정색))
                            self.tableWidget_put.setItem(i, Option_column.대비.value, item)
                    else:
                        시가 = 0.0
                        시가갭 = 0.0
                        대비 = 0.0
                        피봇 = 0.0

                        item = QTableWidgetItem("{0:.2f}".format(시가))
                        item.setTextAlignment(Qt.AlignCenter)
                        item.setBackground(QBrush(검정색))
                        item.setForeground(QBrush(흰색))
                        self.tableWidget_put.setItem(i, Option_column.시가.value, item)

                        item = QTableWidgetItem("{0:.2f}".format(시가갭))
                        item.setTextAlignment(Qt.AlignCenter)
                        item.setBackground(QBrush(검정색))
                        item.setForeground(QBrush(흰색))
                        self.tableWidget_put.setItem(i, Option_column.시가갭.value, item)

                        item = QTableWidgetItem("{0:.2f}".format(대비))
                        item.setTextAlignment(Qt.AlignCenter)
                        item.setBackground(QBrush(검정색))
                        item.setForeground(QBrush(흰색))
                        self.tableWidget_put.setItem(i, Option_column.대비.value, item)
                        
                        item = QTableWidgetItem("{0:.2f}".format(피봇))
                        item.setTextAlignment(Qt.AlignCenter)
                        item.setBackground(QBrush(검정색))
                        item.setForeground(QBrush(흰색))
                        self.tableWidget_put.setItem(i, Option_column.피봇.value, item)

                    if NightTime:
                        전저 = 저가
                        종가 = 현재가
                        전고 = 고가
                        피봇 = 0.0
                    else:
                        전저 = 0.0
                        전고 = 0.0
                        피봇 = 0.0

                    if df1['현재가'][i] <= 시가갭:

                        수정미결 = int(df1['미결제약정'][i] * df1['현재가'][i])
                        수정거래량 = int((df1['매수잔량'][i] - df1['매도잔량'][i]) * df1['현재가'][i])
                    else:
                        수정미결 = int(df1['미결제약정'][i] * (df1['현재가'][i] - 시가갭))
                        수정거래량 = int((df1['매수잔량'][i] - df1['매도잔량'][i]) * (df1['현재가'][i] - 시가갭))
                    
                    순미결 = df1['미결제약정'][i]
                    순거래량 = df1['매수잔량'][i] - df1['매도잔량'][i] 

                    temp = format(수정거래량, ',')

                    item = QTableWidgetItem(temp)
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_put.setItem(i, Option_column.VP.value, item)                   

                    if DayTime and pre_start:

                        temp = format(순미결, ',')
                    else:
                        temp = format(수정미결, ',')                                                

                    item = QTableWidgetItem(temp)
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_put.setItem(i, Option_column.OI.value, item)

                    순미결증감 = df1['미결제약정증감'][i]
                    수정미결증감 = int(round(df1['미결제약정증감'][i] * df1['현재가'][i]))
                    temp = format(수정미결증감, ',')

                    item = QTableWidgetItem(temp)
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_put.setItem(i, Option_column.OID.value, item)

                    단축코드 = 0
                    체결시간 = 0
                    기준가 = 0.0
                    월저 = 0.0
                    월고 = 0.0

                    lst = [단축코드, 체결시간, 행사가, OLOH, 기준가, 월저, 월고, 전저, 전고, 종가, 피봇, 시가, 시가갭, 저가, 현재가,
                           고가, 대비, 진폭, 순거래량, 수정거래량, 순미결, 수정미결, 순미결증감, 수정미결증감]
                    t2301_put.append(lst)

                    매도누적체결량 = 0
                    매도누적체결건수 = 0
                    매수누적체결량 = 0
                    매수누적체결건수 = 0

                    lst = [매도누적체결량, 매도누적체결건수, 매수누적체결량, 매수누적체결건수]
                    putche_result.append(lst)

                    매수건수 = 0
                    매도건수 = 0
                    매수잔량 = 0
                    매도잔량 = 0

                    lstho = [매수건수, 매도건수, 매수잔량, 매도잔량]
                    putho_result.append(lstho)

                columns = ['단축코드', '체결시간', '행사가', 'OLOH', '기준가', '월저', '월고', '전저', '전고', '종가', '피봇', '시가', '시가갭', '저가',
                           '현재가', '고가', '대비', '진폭', '순거래량', '수정거래량', '순미결', '수정미결', '순미결증감', '수정미결증감']

                df_put = DataFrame(data=t2301_put, columns=columns)

                columns = ['매도누적체결량', '매도누적체결건수', '매수누적체결량', '매수누적체결건수']
                df_put_volume = DataFrame(data=putche_result, columns=columns)

                columns = ['매수건수', '매도건수', '매수잔량', '매도잔량']
                df_put_quote = DataFrame(data=putho_result, columns=columns)

                temp = format(df_put['수정거래량'].sum(), ',')

                item = QTableWidgetItem(temp)
                self.tableWidget_put.setHorizontalHeaderItem(Option_column.VP.value, item)

                if DayTime and pre_start:

                    순미결합 = format(df_put['순미결'].sum(), ',')

                    item = QTableWidgetItem(순미결합)
                    self.tableWidget_put.setHorizontalHeaderItem(Option_column.OI.value, item)
                else:
                    temp = '{0}k'.format(format(int(df_put['수정미결'].sum()/1000), ','))                                   

                    item = QTableWidgetItem(temp)
                    self.tableWidget_put.setHorizontalHeaderItem(Option_column.OI.value, item)

                put_행사가 = df_put['행사가'].values.tolist()
                
                print('t2301 주간 전광판 풋 데이타 = \r', df_put)

                txt = '[{0:02d}:{1:02d}:{2:02d}] {3} 월물 Put 전광판 데이타 수신완료 !!!\r'.format(dt.hour, dt.minute, dt.second, t2301_month_info)
                self.textBrowser.append(txt)
                
                call_저가 = df_call['저가'].values.tolist()

                txt = '[{0:02d}:{1:02d}:{2:02d}] call_저가 list in t2301 = {3}\r'.format(dt.hour, dt.minute, dt.second, call_저가)
                print(txt)

                call_고가 = df_call['고가'].values.tolist()

                txt = '[{0:02d}:{1:02d}:{2:02d}] call_고가 list in t2301 = {3}\r'.format(dt.hour, dt.minute, dt.second, call_고가)
                print(txt)

                put_저가 = df_put['저가'].values.tolist()

                txt = '[{0:02d}:{1:02d}:{2:02d}] put_저가 list in t2301 = {3}\r'.format(dt.hour, dt.minute, dt.second, put_저가)
                print(txt)

                put_고가 = df_put['고가'].values.tolist()

                txt = '[{0:02d}:{1:02d}:{2:02d}] put_고가 list in t2301 = {3}\r'.format(dt.hour, dt.minute, dt.second, put_고가)
                print(txt)
                
                if not pre_start:

                    # 콜 컬러링 리스트 작성
                    call_시가 = df_call['시가'].values.tolist()
                    call_시가_node_list = self.make_node_list(call_시가)

                    call_피봇 = df_call['피봇'].values.tolist()
                    call_피봇_node_list = self.make_node_list(call_피봇)
                    
                    call_저가 = df_call['저가'].values.tolist()
                    call_저가_node_list = self.make_node_list(call_저가)

                    call_고가 = df_call['고가'].values.tolist()
                    call_고가_node_list = self.make_node_list(call_고가)
                    
                    call_진폭 = df_call['진폭'].values.tolist()
                    진폭최대값 = max(call_진폭)
                    max_txt = '{0:.2f}'.format(진폭최대값)

                    item = QTableWidgetItem(max_txt)
                    self.tableWidget_call.setHorizontalHeaderItem(Option_column.진폭.value, item)

                    # 풋 컬러링 리스트 작성
                    put_시가 = df_put['시가'].values.tolist()
                    put_시가_node_list = self.make_node_list(put_시가)

                    put_피봇 = df_put['피봇'].values.tolist()
                    put_피봇_node_list = self.make_node_list(put_피봇)
                    
                    put_저가 = df_put['저가'].values.tolist()
                    put_저가_node_list = self.make_node_list(put_저가)

                    put_고가 = df_put['고가'].values.tolist()
                    put_고가_node_list = self.make_node_list(put_고가)
                    
                    put_진폭 = df_put['진폭'].values.tolist()
                    진폭최대값 = max(put_진폭)
                    max_txt = '{0:.2f}'.format(진폭최대값)

                    item = QTableWidgetItem(max_txt)
                    self.tableWidget_put.setHorizontalHeaderItem(Option_column.진폭.value, item)
                else:
                    pass

                self.opt_high_low_list_update()

                txt = '[{0:02d}:{1:02d}:{2:02d}] high low list in t2301 = {3}\r'.format(dt.hour, dt.minute, dt.second, high_low_list)
                print(txt) 

                df_call_information_graph.at[0, 'Volume'] = 0
                df_put_information_graph.at[0, 'Volume'] = 0

                df_call_information_graph.at[0, 'Drate'] = 0
                df_put_information_graph.at[0, 'Drate'] = 0
                
                # 근월물 옵션 호가잔량비 초기화(초기값을 1.0으로 해야 장중 최소값을 구할수 있다.)
                df_call_information_graph.at[0, 'quote_remainder_ratio'] = 1.0
                df_put_information_graph.at[0, 'quote_remainder_ratio'] = 1.0

                # 근월물, 차월물 선물 호가잔량비 초기화
                df_futures_cm_graph.at[0, 'c_quote_remainder_ratio'] = 1.0
                df_futures_cm_graph.at[0, 'n_quote_remainder_ratio'] = 1.0

                df_futures_cm_graph.at[0, 'Drate'] = 0
                df_futures_nm_graph.at[0, 'Drate'] = 0

                # 해외선물 호가 초기화
                df_sp500_graph.at[0, 'quote_remainder_ratio'] = 1.0
                df_dow_graph.at[0, 'quote_remainder_ratio'] = 1.0
                df_nasdaq_graph.at[0, 'quote_remainder_ratio'] = 1.0
                df_wti_graph.at[0, 'quote_remainder_ratio'] = 1.0
                df_gold_graph.at[0, 'quote_remainder_ratio'] = 1.0
                df_euro_graph.at[0, 'quote_remainder_ratio'] = 1.0
                df_yen_graph.at[0, 'quote_remainder_ratio'] = 1.0
                df_adi_graph.at[0, 'quote_remainder_ratio'] = 1.0
                df_hsi_graph.at[0, 'quote_remainder_ratio'] = 1.0                

                df_sp500_graph.at[0, 'Drate'] = 0
                df_dow_graph.at[0, 'Drate'] = 0
                
                콜_순미결합 = df_call['순미결'].sum()
                풋_순미결합 = df_put['순미결'].sum()

                순미결합 = 콜_순미결합 + 풋_순미결합

                콜_수정미결합 = df_call['수정미결'].sum()
                풋_수정미결합 = df_put['수정미결'].sum()

                수정미결합 = 콜_수정미결합 + 풋_수정미결합

                if 순미결합 > 0:

                    콜_순미결퍼센트 = (콜_순미결합 / 순미결합) * 100
                    풋_순미결퍼센트 = 100 - 콜_순미결퍼센트
                    
                    txt = '[{0:02d}:{1:02d}:{2:02d}] Call/Put OI 순미결 초기값 : {3}/{4}\r'.format(dt.hour,
                                            dt.minute, dt.second, format(콜_순미결합, ','), format(풋_순미결합, ','))
                    self.textBrowser.append(txt)
                else:
                    pass

                if 수정미결합 > 0:

                    콜_수정미결퍼센트 = (콜_수정미결합 / 수정미결합) * 100
                    풋_수정미결퍼센트 = 100 - 콜_수정미결퍼센트

                    #call_oi_init_percent = 콜_수정미결합
                    #put_oi_init_percent = 풋_수정미결합
                    call_oi_init_percent = 콜_수정미결퍼센트
                    put_oi_init_percent = 풋_수정미결퍼센트

                    df_call_information_graph.at[0, 'open_interest'] = call_oi_init_percent
                    df_put_information_graph.at[0, 'open_interest'] = put_oi_init_percent

                    txt = '[{0:02d}:{1:02d}:{2:02d}] Call/Put OI 수정미결 초기값 : {3}/{4}\r'.format(dt.hour,
                                            dt.minute, dt.second, format(콜_수정미결합, ','), format(풋_수정미결합, ','))
                    self.textBrowser.append(txt)
                    
                    oi_txt = '{0}k:{1}k'.format(format(int(콜_수정미결합/1000), ','), format(int(풋_수정미결합/1000), ','))

                    item = QTableWidgetItem(oi_txt)
                    self.tableWidget_quote.setHorizontalHeaderItem(Quote_column.미결종합.value - 1, item)
                else:
                    pass

                # 행사가 갯수 표시
                item_txt = '{0:d}'.format(real_option_pairs_count)

                item = QTableWidgetItem(item_txt)
                item.setTextAlignment(Qt.AlignCenter)
                self.tableWidget_call.setHorizontalHeaderItem(0, item)
                
                item = QTableWidgetItem(item_txt)
                item.setTextAlignment(Qt.AlignCenter)
                self.tableWidget_put.setHorizontalHeaderItem(0, item)

                # t8416 선물요청
                QTest.qWait(1100)
                
                print('flag_t2301_eventloop =', flag_t2301_eventloop)                       

                if TARGET_MONTH == 'CM':
                    txt = '[{0:02d}:{1:02d}:{2:02d}] t8416 변동성지수 근월물 선물({3})을 조회합니다.\r'.format(dt.hour, dt.minute, dt.second, GMSHCODE)
                    self.textBrowser.append(txt)
                    #self.parent.textBrowser.append(txt)
                    print(txt)

                    self.t8416_fut_request(GMSHCODE)

                elif TARGET_MONTH == 'NM':
                    txt = '[{0:02d}:{1:02d}:{2:02d}] t8416 변동성지수 차월물 선물({3})을 조회합니다.\r'.format(dt.hour, dt.minute, dt.second, CMSHCODE)
                    self.textBrowser.append(txt)
                    #self.parent.textBrowser.append(txt)
                    print(txt)

                    self.t8416_fut_request(CMSHCODE)
                else:
                    pass

                # 주간 근월물 선물전광판 데이타요청
                self.XQ_t2101.Query(GMSHCODE)
                
                txt = '[{0:02d}:{1:02d}:{2:02d}] t2101 근월물 주간선물 데이타를 조회합니다.\r'.format(dt.hour, dt.minute, dt.second)
                self.textBrowser.append(txt)

                QTest.qWait(100)

                # 주간 차월물 선물전광판 데이타요청
                self.XQ_t2101.Query(CMSHCODE)
                
                txt = '[{0:02d}:{1:02d}:{2:02d}] t2101 차월물 주간선물 데이타를 조회합니다.\r'.format(dt.hour, dt.minute, dt.second)
                self.textBrowser.append(txt)

                QTest.qWait(100)

                # t8416 요청                
                print('t8416 call 요청시작...')                

                global flag_t8416_rerequest

                # 10분내에 200회 전송제약으로 인해 콜, 풋 각각 99개씩 만 요청함
                if option_pairs_count > 99:
                    t8416_option_pairs_count = 99
                    flag_t8416_rerequest = True
                else:
                    t8416_option_pairs_count = option_pairs_count
                
                for i in range(t8416_option_pairs_count):
                    t8416_call_count = i
                    self.t8416_opt_request(self.call_code[i])
                    self.t8416_call_event_loop.exec_()
            else:
                # Refresh
                if DayTime:

                    txt = '[{0:02d}:{1:02d}:{2:02d}] 주간옵션 전광판을 갱신합니다.\r'.format(dt.hour, dt.minute, dt.second)
                    self.textBrowser.append(txt)

                    del self.call_open_list[:]
                    del self.put_open_list[:]

                    del call_저가[:]
                    del call_고가[:]
                    del put_저가[:]
                    del put_고가[:]

                    for i in range(option_pairs_count):

                        # 콜 데이타 획득                        
                        시가 = df['시가'][i]
                        df_call.at[i, '시가'] = 시가

                        item = QTableWidgetItem("{0:.2f}".format(시가))
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_call.setItem(i, Option_column.시가.value, item)

                        if 시가 > 0 and df['저가'][i] < df['고가'][i]:

                            종가 = df_call.at[i, '종가']

                            시가갭 = 시가 - 종가
                            df_call.at[i, '시가갭'] = 시가갭

                            if 종가 > 0:

                                call_gap_percent[i] = (시가 / 종가 - 1) * 100
                                gap_txt = "{0:.2f}\n({1:.0f}%)".format(시가갭, call_gap_percent[i])
                            else:
                                call_gap_percent[i] = 0.0
                                gap_txt = "{0:.2f}".format(시가갭)

                            item = QTableWidgetItem(gap_txt)
                            item.setTextAlignment(Qt.AlignCenter)
                            self.tableWidget_call.setItem(i, Option_column.시가갭.value, item)

                            if df_call.at[i, '피봇'] == 0:

                                피봇 = calc_pivot(df_call.at[i, '전저'], df_call.at[i, '전고'], 종가, 시가, 2)

                                df_call.at[i, '피봇'] = 피봇

                                item = QTableWidgetItem("{0:.2f}".format(피봇))
                                item.setTextAlignment(Qt.AlignCenter)
                                self.tableWidget_call.setItem(i, Option_column.피봇.value, item)
                            else:
                                pass
                        else:
                            시가갭 = 0
                            df_call.at[i, '시가갭'] = 시가갭

                        현재가 = df['현재가'][i]
                        df_call.at[i, '현재가'] = 현재가

                        df_call_graph[i].at[plot_time_index, 'Price'] = 현재가

                        item = QTableWidgetItem("{0:.2f}".format(현재가))
                        item.setTextAlignment(Qt.AlignCenter)
                        item.setBackground(QBrush(흰색))

                        if 시가 > 0:

                            if 현재가 > 시가:
                                item.setForeground(QBrush(적색))
                            elif 현재가 < 시가:
                                item.setForeground(QBrush(청색))
                            else:
                                item.setForeground(QBrush(검정색))
                        else:
                            pass
                        
                        self.tableWidget_call.setItem(i, Option_column.현재가.value, item)
                        '''
                        if df['저가'][i] < df['고가'][i]:
                            저가 = df['저가'][i]
                            고가 = df['고가'][i]                        
                        else:
                            저가 = 0.0
                            고가 = 0.0
                        '''
                        저가 = df['저가'][i]
                        고가 = df['고가'][i]
                        
                        df_call.at[i, '저가'] = 저가

                        item = QTableWidgetItem("{0:.2f}".format(저가))
                        item.setTextAlignment(Qt.AlignCenter)

                        if i == ATM_INDEX - 1 or i == ATM_INDEX or i == ATM_INDEX + 1:
                            item.setBackground(QBrush(옅은회색))
                        else:
                            item.setBackground(QBrush(흰색))

                        self.tableWidget_call.setItem(i, Option_column.저가.value, item)

                        df_call.at[i, '고가'] = 고가

                        item = QTableWidgetItem("{0:.2f}".format(고가))
                        item.setTextAlignment(Qt.AlignCenter)

                        if i == ATM_INDEX - 1 or i == ATM_INDEX or i == ATM_INDEX + 1:
                            item.setBackground(QBrush(옅은회색))
                        else:
                            item.setBackground(QBrush(흰색))

                        self.tableWidget_call.setItem(i, Option_column.고가.value, item)
                        
                        if 시가 > opt_search_start_value and df['저가'][i] < df['고가'][i]:
                            self.call_open_list.append(i)
                        else:
                            pass

                        # 수정거래량, 수정미결 갱신
                        if df['현재가'][i] <= 시가갭:

                            수정미결 = int(df['미결제약정'][i] * df['현재가'][i])
                            수정거래량 = int((df['매수잔량'][i] - df['매도잔량'][i]) * df['현재가'][i])
                        else:
                            수정미결 = int(df['미결제약정'][i] * (df['현재가'][i] - 시가갭))
                            수정거래량 = int((df['매수잔량'][i] - df['매도잔량'][i]) * (df['현재가'][i] - 시가갭))

                        df_call.at[i, '수정미결'] = 수정미결
                        df_call.at[i, '수정거래량'] = 수정거래량

                        순미결 = df['미결제약정'][i]
                        순거래량 = df['매수잔량'][i] - df['매도잔량'][i]

                        temp = format(수정거래량, ',')

                        item = QTableWidgetItem(temp)
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_call.setItem(i, Option_column.VP.value, item)

                        temp = format(수정미결, ',')                                           

                        item = QTableWidgetItem(temp)
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_call.setItem(i, Option_column.OI.value, item)

                        순미결증감 = df['미결제약정증감'][i]
                        수정미결증감 = int(round(df['미결제약정증감'][i] * df['현재가'][i]))
                        temp = format(수정미결증감, ',')

                        item = QTableWidgetItem(temp)
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_call.setItem(i, Option_column.OID.value, item)

                        # 풋 데이타 획득                        
                        시가 = df1['시가'][i]
                        df_put.at[i, '시가'] = 시가

                        item = QTableWidgetItem("{0:.2f}".format(시가))
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_put.setItem(i, Option_column.시가.value, item)

                        if 시가 > 0 and df1['저가'][i] < df1['고가'][i]:

                            종가 = df_put.at[i, '종가']

                            시가갭 = 시가 - 종가
                            df_put.at[i, '시가갭'] = 시가갭

                            if 종가 > 0:

                                put_gap_percent[i] = (시가 / 종가 - 1) * 100
                                gap_txt = "{0:.2f}\n({1:.0f}%)".format(시가갭, put_gap_percent[i])
                            else:
                                put_gap_percent[i] = 0.0
                                gap_txt = "{0:.2f}".format(시가갭)

                            item = QTableWidgetItem(gap_txt)
                            item.setTextAlignment(Qt.AlignCenter)
                            self.tableWidget_put.setItem(i, Option_column.시가갭.value, item)

                            if df_put.at[i, '피봇'] == 0:

                                피봇 = calc_pivot(df_put.at[i, '전저'], df_put.at[i, '전고'], 종가, 시가, 2)

                                df_put.at[i, '피봇'] = 피봇                                         

                                item = QTableWidgetItem("{0:.2f}".format(피봇))
                                item.setTextAlignment(Qt.AlignCenter)
                                self.tableWidget_put.setItem(i, Option_column.피봇.value, item)
                            else:
                                pass
                        else:
                            시가갭 = 0
                            df_put.at[i, '시가갭'] = 시가갭

                        현재가 = df1['현재가'][i]
                        df_put.at[i, '현재가'] = 현재가

                        df_put_graph[i].at[plot_time_index, 'Price'] = 현재가

                        item = QTableWidgetItem("{0:.2f}".format(현재가))
                        item.setTextAlignment(Qt.AlignCenter)
                        item.setBackground(QBrush(흰색))

                        if 시가 > 0:

                            if 현재가 > 시가:
                                item.setForeground(QBrush(적색))
                            elif 현재가 < 시가:
                                item.setForeground(QBrush(청색))
                            else:
                                item.setForeground(QBrush(검정색))
                        else:
                            pass
                        
                        self.tableWidget_put.setItem(i, Option_column.현재가.value, item)
                        '''
                        if df1['저가'][i] < df1['고가'][i]:
                            저가 = df1['저가'][i]
                            고가 = df1['고가'][i]                        
                        else:
                            저가 = 0.0
                            고가 = 0.0
                        '''
                        저가 = df1['저가'][i]
                        고가 = df1['고가'][i]
                        
                        df_put.at[i, '저가'] = 저가

                        item = QTableWidgetItem("{0:.2f}".format(저가))
                        item.setTextAlignment(Qt.AlignCenter)

                        if i == ATM_INDEX - 1 or i == ATM_INDEX or i == ATM_INDEX + 1:
                            item.setBackground(QBrush(옅은회색))
                        else:
                            item.setBackground(QBrush(흰색))

                        self.tableWidget_put.setItem(i, Option_column.저가.value, item)

                        df_put.at[i, '고가'] = 고가

                        item = QTableWidgetItem("{0:.2f}".format(고가))
                        item.setTextAlignment(Qt.AlignCenter)

                        if i == ATM_INDEX - 1 or i == ATM_INDEX or i == ATM_INDEX + 1:
                            item.setBackground(QBrush(옅은회색))
                        else:
                            item.setBackground(QBrush(흰색))

                        self.tableWidget_put.setItem(i, Option_column.고가.value, item)
                        
                        if 시가 > opt_search_start_value and df1['저가'][i] < df1['고가'][i]:
                            self.put_open_list.append(i)
                        else:
                            pass

                        # 수정거래량, 수정미결 갱신
                        if df1['현재가'][i] <= 시가갭:

                            수정미결 = int(df1['미결제약정'][i] * df1['현재가'][i])
                            수정거래량 = int((df1['매수잔량'][i] - df1['매도잔량'][i]) * df1['현재가'][i])
                        else:
                            수정미결 = int(df1['미결제약정'][i] * (df1['현재가'][i] - 시가갭))
                            수정거래량 = int((df1['매수잔량'][i] - df1['매도잔량'][i]) * (df1['현재가'][i] - 시가갭))

                        df_put.at[i, '수정미결'] = 수정미결
                        df_put.at[i, '수정거래량'] = 수정거래량

                        순미결 = df1['미결제약정'][i]
                        순거래량 = df1['매수잔량'][i] - df1['매도잔량'][i]

                        temp = format(수정거래량, ',')

                        item = QTableWidgetItem(temp)
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_put.setItem(i, Option_column.VP.value, item)

                        temp = format(수정미결, ',')                                           

                        item = QTableWidgetItem(temp)
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_put.setItem(i, Option_column.OI.value, item)

                        순미결증감 = df1['미결제약정증감'][i]
                        수정미결증감 = int(round(df1['미결제약정증감'][i] * df1['현재가'][i]))
                        temp = format(수정미결증감, ',')

                        item = QTableWidgetItem(temp)
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_put.setItem(i, Option_column.OID.value, item)

                    
                    call_시가 = df_call['시가'].values.tolist()
                    call_시가_node_list = self.make_node_list(call_시가)

                    call_피봇 = df_call['피봇'].values.tolist()
                    call_피봇_node_list = self.make_node_list(call_피봇)
                    
                    call_저가 = df_call['저가'].values.tolist()
                    call_저가_node_list = self.make_node_list(call_저가)

                    call_고가 = df_call['고가'].values.tolist()
                    call_고가_node_list = self.make_node_list(call_고가)
                    
                    put_시가 = df_put['시가'].values.tolist()
                    put_시가_node_list = self.make_node_list(put_시가)

                    put_피봇 = df_put['피봇'].values.tolist()
                    put_피봇_node_list = self.make_node_list(put_피봇)
                    
                    put_저가 = df_put['저가'].values.tolist()
                    put_저가_node_list = self.make_node_list(put_저가)

                    put_고가 = df_put['고가'].values.tolist()
                    put_고가_node_list = self.make_node_list(put_고가)                    
                    
                    self.opt_high_low_list_update()                    

                    if True:

                        for i in range(option_pairs_count):
                            '''
                            if df['저가'][i] < df['고가'][i]:
                                저가 = df['저가'][i]
                                고가 = df['고가'][i]                        
                            else:
                                저가 = 0.0
                                고가 = 0.0
                            '''
                            저가 = df['저가'][i]
                            고가 = df['고가'][i]

                            df_call.at[i, '저가'] = 저가
                            빈도수 = moving_list.count(저가)

                            if SEARCH_MOVING_NODE_START_VALUE < 저가 < SEARCH_MOVING_NODE_END_VALUE:
                                item_txt = '{0:.2f}'.format(저가) + '\n(' + repr(빈도수) + ')'
                                item = QTableWidgetItem(item_txt)
                            else:
                                item = QTableWidgetItem("{0:.2f}".format(저가))

                            item.setTextAlignment(Qt.AlignCenter)

                            if i == ATM_INDEX - 1 or i == ATM_INDEX or i == ATM_INDEX + 1:
                                item.setBackground(QBrush(옅은회색))
                            else:
                                item.setBackground(QBrush(흰색))

                            self.tableWidget_call.setItem(i, Option_column.저가.value, item)

                            df_call.at[i, '고가'] = 고가
                            빈도수 = moving_list.count(고가)

                            if SEARCH_MOVING_NODE_START_VALUE < 고가 < SEARCH_MOVING_NODE_END_VALUE:
                                item_txt = '{0:.2f}'.format(고가) + '\n(' + repr(빈도수) + ')'
                                item = QTableWidgetItem(item_txt)
                            else:
                                item = QTableWidgetItem("{0:.2f}".format(고가))

                            item.setTextAlignment(Qt.AlignCenter)

                            if i == ATM_INDEX - 1 or i == ATM_INDEX or i == ATM_INDEX + 1:
                                item.setBackground(QBrush(옅은회색))
                            else:
                                item.setBackground(QBrush(흰색))

                            self.tableWidget_call.setItem(i, Option_column.고가.value, item)
                            '''
                            if df1['저가'][i] < df1['고가'][i]:
                                저가 = df1['저가'][i]
                                고가 = df1['고가'][i]                        
                            else:
                                저가 = 0.0
                                고가 = 0.0
                            '''
                            저가 = df1['저가'][i]
                            고가 = df1['고가'][i]

                            df_put.at[i, '저가'] = 저가
                            빈도수 = moving_list.count(저가)

                            if SEARCH_MOVING_NODE_START_VALUE < 저가 < SEARCH_MOVING_NODE_END_VALUE:
                                item_txt = '{0:.2f}'.format(저가) + '\n(' + repr(빈도수) + ')'
                                item = QTableWidgetItem(item_txt)
                            else:
                                item = QTableWidgetItem("{0:.2f}".format(저가))

                            item.setTextAlignment(Qt.AlignCenter)

                            if i == ATM_INDEX - 1 or i == ATM_INDEX or i == ATM_INDEX + 1:
                                item.setBackground(QBrush(옅은회색))
                            else:
                                item.setBackground(QBrush(흰색))

                            self.tableWidget_put.setItem(i, Option_column.저가.value, item)

                            df_put.at[i, '고가'] = 고가
                            빈도수 = moving_list.count(고가)

                            if SEARCH_MOVING_NODE_START_VALUE < 고가 < SEARCH_MOVING_NODE_END_VALUE:
                                item_txt = '{0:.2f}'.format(고가) + '\n(' + repr(빈도수) + ')'
                                item = QTableWidgetItem(item_txt)
                            else:
                                item = QTableWidgetItem("{0:.2f}".format(고가))

                            item.setTextAlignment(Qt.AlignCenter)

                            if i == ATM_INDEX - 1 or i == ATM_INDEX or i == ATM_INDEX + 1:
                                item.setBackground(QBrush(옅은회색))
                            else:
                                item.setBackground(QBrush(흰색))

                            self.tableWidget_put.setItem(i, Option_column.고가.value, item)
                    else:
                        pass

                    # 주간 근월물 선물전광판 데이타 요청
                    self.XQ_t2101.Query(종목코드=GMSHCODE)
                    
                    txt = '[{0:02d}:{1:02d}:{2:02d}] t2101 근월물 선물전광판을 갱신합니다.\r'.format(dt.hour, dt.minute, dt.second)
                    self.textBrowser.append(txt)

                    QTest.qWait(100)

                    # 주간 차월물 선물전광판 데이타요청
                    self.XQ_t2101.Query(CMSHCODE)

                    txt = '[{0:02d}:{1:02d}:{2:02d}] t2101 차월물 선물전광판을 갱신합니다.\r'.format(dt.hour, dt.minute, dt.second)
                    self.textBrowser.append(txt)

                    QTest.qWait(100)                                       
                else:                    
                    # EUREX 야간옵션 시세전광판 --> 갱신이 안되는 오류!!!
                    print('t2835 요청')
                    self.XQ_t2835.Query(월물=t2835_month_info)
                    
                    txt = '[{0:02d}:{1:02d}:{2:02d}] 야간옵션 전광판 갱신을 조회합니다.\r'.format(dt.hour, dt.minute, dt.second)
                    self.textBrowser.append(txt)

            if flag_search_moving_node:
                self.pushButton_start.setStyleSheet('QPushButton {background-color: lawngreen; color: black; font-family: Consolas; font-size: 10pt; font: Bold; border-style: solid; border-width: 1px; border-color: black; border-radius: 5px} \
                                                    QPushButton:hover {background-color: black; color: white} \
                                                    QPushButton:pressed {background-color: gold}')
            else:
                self.pushButton_start.setStyleSheet('QPushButton {background-color: black; color: lawngreen; font-family: Consolas; font-size: 10pt; font: Bold; border-style: solid; border-width: 1px; border-color: black; border-radius: 5px} \
                                                    QPushButton:hover {background-color: black; color: white} \
                                                    QPushButton:pressed {background-color: gold}')

            self.pushButton_start.setText(' Refresh ')                    
            
            if ResizeRowsToContents:
                self.tableWidget_call.resizeRowsToContents()
            else:
                pass
            self.tableWidget_call.resizeColumnsToContents()

            if ResizeRowsToContents:
                self.tableWidget_put.resizeRowsToContents()
            else:
                pass
            self.tableWidget_put.resizeColumnsToContents()            

        elif szTrCode == 't2801':

            szTrCode, df = tickdata

            if DayTime and pre_start:

                if df['종합지수전일대비구분'] == '5':

                    jisu_txt = "KOSPI: {0} (-{1:.2f}, {2:0.1f}%)".format(format(df['종합지수'], ','), df['종합지수전일대비'], df['종합지수등락율'])
                    
                    self.label_5th_index.setStyleSheet('background-color: black; color: lightskyblue; font-family: Consolas; font-size: 9pt; font: Bold; border-style: solid; border-width: 1px; border-color: lightskyblue; border-radius: 5px')
                    self.label_5th_index.setText(jisu_txt)

                elif df['종합지수전일대비구분'] == '2':

                    jisu_txt = "KOSPI: {0} ({1:.2f}, {2:0.1f}%)".format(format(df['종합지수'], ','), df['종합지수전일대비'], df['종합지수등락율'])
                    
                    self.label_5th_index.setStyleSheet('background-color: black; color: pink; font-family: Consolas; font-size: 9pt; font: Bold; border-style: solid; border-width: 1px; border-color: pink; border-radius: 5px')
                    self.label_5th_index.setText(jisu_txt)
                else:
                    pass
            else:
                pass

            # 주간 데이타를 가져옴
            kp200_현재가 = df['KOSPI200지수']           
            item = QTableWidgetItem("{0:.2f}".format(df['KOSPI200지수']))
            item.setTextAlignment(Qt.AlignCenter)
            item.setBackground(QBrush(흰색))
            item.setForeground(QBrush(검정색))
            self.tableWidget_fut.setItem(2, Futures_column.현재가.value, item)

            # kp200 COREVAL 리스트 만듬
            if KP200_전일종가 == 0:
                KP200_전일종가 = df['KOSPI200지수']
            else:
                pass
            
            self.kp200_realdata['종가'] = KP200_전일종가

            item = QTableWidgetItem("{0:.2f}".format(KP200_전일종가))
            item.setTextAlignment(Qt.AlignCenter)
            item.setBackground(QBrush(흰색))
            item.setForeground(QBrush(검정색))
            self.tableWidget_fut.setItem(2, Futures_column.종가.value, item)
            
            if DayTime:
                atm_txt = self.get_atm_txt(kp200_현재가)
            else:
                atm_txt = self.get_atm_txt(kp200_현재가)

            ATM_INDEX = opt_actval.index(atm_txt)
            old_atm_index = ATM_INDEX

            txt = '[{0:02d}:{1:02d}:{2:02d}] 등가지수는 {3}({4})입니다.\r'.format(dt.hour, dt.minute, dt.second, atm_txt, ATM_INDEX)
            self.parent.textBrowser.append(txt)
            
            if atm_txt[-1] == '2' or atm_txt[-1] == '7':

                atm_val = float(atm_txt) + 0.5
            else:
                atm_val = float(atm_txt)

            if self.call_open_list:

                for index in self.call_open_list:

                    if index > ATM_INDEX:
                        call_itm_count += 1
                    else:
                        pass
                    
                    if index == option_pairs_count - 1:
                        call_max_actval = True
                    else:
                        pass
            else:
                pass                

            if self.put_open_list:

                for index in self.put_open_list:

                    if index > ATM_INDEX:
                        put_itm_count += 1
                    else:
                        pass
                    
                    if index == option_pairs_count - 1:
                        put_max_actval = True
                    else:
                        pass
            else:
                pass                    

            # kp200 맥점 10개를 리스트로 만듬
            #global KP200_COREVAL

            # KP200_COREVAL 리스트 기존데이타 삭제(초기화)
            del KP200_COREVAL[:]

            for i in range(6):

                KP200_COREVAL.append(atm_val - 2.5 * i + 1.25) 

            for i in range(1, 5):

                KP200_COREVAL.append(atm_val + 2.5 * i + 1.25)

            KP200_COREVAL.sort()
            print('t2801 KP200_COREVAL =', KP200_COREVAL)

            if atm_txt[-1] == '2' or atm_txt[-1] == '7':

                atm_val = float(atm_txt) + 0.5
            else:
                atm_val = float(atm_txt)       
            
            self.tableWidget_call.item(ATM_INDEX, Option_column.행사가.value).setBackground(QBrush(노란색))
            self.tableWidget_call.item(ATM_INDEX, Option_column.행사가.value).setForeground(QBrush(검정색))
            self.tableWidget_put.item(ATM_INDEX, Option_column.행사가.value).setBackground(QBrush(노란색))
            self.tableWidget_put.item(ATM_INDEX, Option_column.행사가.value).setForeground(QBrush(검정색))            
            
            if not self.flag_refresh:

                self.tableWidget_call.cellWidget(ATM_INDEX, 0).findChild(type(QCheckBox())).setChecked(Qt.Checked)
                self.tableWidget_put.cellWidget(ATM_INDEX, 0).findChild(type(QCheckBox())).setChecked(Qt.Checked)
                selected_call = [ATM_INDEX]
                selected_put = [ATM_INDEX]
            else:
                pass

            view_actval = opt_actval[ATM_INDEX-5:ATM_INDEX+6]

            call_atm_value = df_call.at[ATM_INDEX, '현재가']
            put_atm_value = df_put.at[ATM_INDEX, '현재가']

            txt = '{0:.2f}({1:.2f}:{2:.2f})'.format(
                self.fut_realdata['현재가'] - self.fut_realdata['KP200'],
                call_atm_value + put_atm_value,
                abs(call_atm_value - put_atm_value))
            self.label_atm.setText(txt)
            
            if NightTime:
                
                item_txt = '{0:0.2f}% \n {1:0.2f}% '.format(콜_수정미결퍼센트, 풋_수정미결퍼센트)

                item = QTableWidgetItem(item_txt)
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(흰색))
                item.setForeground(QBrush(검정색))
                self.tableWidget_quote.setItem(0, Quote_column.미결종합.value - 1, item)

                #df_futures_cm_graph.at[0, 'kp200'] = KP200_전일종가
                df_kp200_graph.at[0, 'Price'] = KP200_전일종가
                df_demand_supply_graph.at[0, 'Program'] = 0
                df_demand_supply_graph.at[0, 'kospi_total'] = 0
                df_demand_supply_graph.at[0, 'kospi_foreigner'] = 0
                df_demand_supply_graph.at[0, 'futures_foreigner'] = 0

                # 주간 현재가가 야간 종가임
                df_futures_cm_graph.at[0, 'Price'] = self.fut_realdata['현재가']

                df_futures_cm_graph.at[0, 'Volume'] = 0

                if df['시가'] > 0:
                    df_futures_cm_graph.at[GuardTime + 1, 'Open'] = df['시가']
                else:
                    pass

                self.cme_realdata['전저'] = self.fut_realdata['저가']

                item = QTableWidgetItem("{0:.2f}".format(self.cme_realdata['전저']))
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(흰색))
                item.setForeground(QBrush(검정색))
                self.tableWidget_fut.setItem(0, Futures_column.전저.value, item)

                self.cme_realdata['전고'] = self.fut_realdata['고가']

                item = QTableWidgetItem("{0:.2f}".format(self.cme_realdata['전고']))
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(흰색))
                item.setForeground(QBrush(검정색))
                self.tableWidget_fut.setItem(0, Futures_column.전고.value, item)

                self.cme_realdata['종가'] = self.fut_realdata['현재가']

                item = QTableWidgetItem("{0:.2f}".format(self.cme_realdata['종가']))
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(흰색))
                item.setForeground(QBrush(검정색))
                self.tableWidget_fut.setItem(0, Futures_column.종가.value, item) 
            else:
                item = QTableWidgetItem("{0:.2f}".format(df['전일종가']))
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(흰색))
                item.setForeground(QBrush(검정색))
                self.tableWidget_fut.setItem(0, Futures_column.종가.value, item)

            if df['시가'] > 0:

                self.cme_realdata['시가'] = df['시가']

                item = QTableWidgetItem("{0:.2f}".format(df['시가']))
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(흰색))

                if df['시가'] > df['전일종가']:
                    item.setForeground(QBrush(적색))
                elif df['시가'] < df['전일종가']:
                    item.setForeground(QBrush(청색))
                else:
                    item.setForeground(QBrush(검정색))

                self.tableWidget_fut.setItem(0, Futures_column.시가.value, item)

                item = QTableWidgetItem("{0:.2f}".format(df['시가'] - df['전일종가']))
                item.setTextAlignment(Qt.AlignCenter)

                if df['시가'] > df['전일종가']:
                    item.setBackground(QBrush(콜기준가색))
                    item.setForeground(QBrush(검정색))
                elif df['시가'] < df['전일종가']:
                    item.setBackground(QBrush(풋기준가색))
                    item.setForeground(QBrush(흰색))
                else:
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))

                self.tableWidget_fut.setItem(0, Futures_column.시가갭.value, item)

                if self.cme_realdata['전저'] > 0 and self.cme_realdata['전고'] > 0:

                    self.cme_realdata['피봇'] = calc_pivot(self.cme_realdata['전저'], self.cme_realdata['전고'], df['전일종가'], self.cme_realdata['시가'], 2)

                    item = QTableWidgetItem("{0:.2f}".format(self.cme_realdata['피봇']))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_fut.setItem(0, Futures_column.피봇.value, item)
                else:
                    pass
            else:
                pass   

            self.cme_realdata['저가'] = df['저가']   

            if df['저가'] > 0:
                item = QTableWidgetItem("{0:.2f}".format(df['저가']))
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(흰색))
                item.setForeground(QBrush(검정색))
                self.tableWidget_fut.setItem(0, Futures_column.저가.value, item)
            else:
                pass

            if NightTime:
                self.cme_realdata['현재가'] = df['현재가']
            else:
                pass            

            item = QTableWidgetItem("{0:.2f}".format(df['현재가']))
            item.setTextAlignment(Qt.AlignCenter)
            item.setBackground(QBrush(흰색))

            if df['시가'] > 0:

                if df['현재가'] > df['시가']:
                    item.setForeground(QBrush(적색))
                elif df['현재가'] < df['시가']:
                    item.setForeground(QBrush(청색))
                else:
                    item.setForeground(QBrush(검정색))
            else:
                item.setForeground(QBrush(검정색))

            self.tableWidget_fut.setItem(0, Futures_column.현재가.value, item)

            if df['시가'] > 0:
                temp = (round((df['현재가'] - df['시가']), 2))

                item = QTableWidgetItem("{0:.2f}".format(temp))
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(흰색))
                item.setForeground(QBrush(검정색))
                self.tableWidget_fut.setItem(0, Futures_column.대비.value, item)
            else:
                pass
            
            if NightTime:

                근월물_선물_전저 = self.cme_realdata['전저']
                근월물_선물_전고 = self.cme_realdata['전고']

                # 주간 현재가가 야간종가 임
                근월물_선물_종가 = self.cme_realdata['종가']

                if self.cme_realdata['피봇'] > 0:
                    근월물_선물_피봇 = self.cme_realdata['피봇']
                else:
                    #근월물_선물_피봇 = self.cme_realdata['종가']
                    pass

                if df['시가'] > 0:
                    근월물_선물_시가 = df['시가']
                else:
                    근월물_선물_시가 = self.cme_realdata['종가']

                if df['저가'] > 0:
                    근월물_선물_저가 = df['저가']
                else:
                    #근월물_선물_저가 = self.cme_realdata['종가']
                    pass

                if df['현재가'] > 0:
                    근월물_선물_현재가 = df['현재가']
                else:
                    근월물_선물_현재가 = self.cme_realdata['종가']

                if df['고가'] > 0:
                    근월물_선물_고가 = df['고가']
                else:
                    #근월물_선물_고가 = self.cme_realdata['종가']
                    pass                
            else:
                pass    
            
            if NightTime:

                #df_futures_cm_graph.at[0, 'kp200'] = self.fut_realdata['KP200']
                df_futures_cm_graph.at[0, 'Price'] = self.cme_realdata['종가']

                if self.cme_realdata['시가'] > 0:
                    df_futures_cm_graph.at[GuardTime + 1, 'Open'] = self.cme_realdata['시가']
                else:
                    pass

                df_futures_cm_graph.at[0, 'Volume'] = 0
            else:
                pass

            self.cme_realdata['고가'] = df['고가']           

            if df['고가'] > 0:
                item = QTableWidgetItem("{0:.2f}".format(df['고가']))
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(흰색))
                item.setForeground(QBrush(검정색))
                self.tableWidget_fut.setItem(0, Futures_column.고가.value, item)
            else:
                pass

            self.cme_realdata['진폭'] = df['고가'] - df['저가']

            if self.cme_realdata['진폭'] > 0:
                item = QTableWidgetItem("{0:.2f}".format(self.cme_realdata['진폭']))
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(흰색))
                item.setForeground(QBrush(검정색))
                self.tableWidget_fut.setItem(0, Futures_column.진폭.value, item)
            else:
                pass

            if df['거래량'] > 0:
                temp = format(df['거래량'], ',')
                item = QTableWidgetItem(temp)
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(흰색))
                item.setForeground(QBrush(검정색))
                self.tableWidget_fut.setItem(0, Futures_column.거래량.value, item)
            else:
                pass

            temp = format(df['미결제량'], ',')
            item = QTableWidgetItem(temp)
            item.setTextAlignment(Qt.AlignCenter)
            item.setBackground(QBrush(흰색))
            item.setForeground(QBrush(검정색))
            self.tableWidget_fut.setItem(0, Futures_column.OI.value, item)

            temp = format(df['미결제증감'], ',')
            item = QTableWidgetItem(temp)
            item.setTextAlignment(Qt.AlignCenter)

            if df['미결제증감'] < 0:
                item.setBackground(QBrush(라임))
            else:
                item.setBackground(QBrush(흰색))

            item.setForeground(QBrush(검정색))    

            self.tableWidget_fut.setItem(0, Futures_column.OID.value, item)                        

            if ResizeRowsToContents:
                self.tableWidget_fut.resizeRowsToContents()
            else:
                pass
            self.tableWidget_fut.resizeColumnsToContents()

            columns = ['KP200', '전저', '전고', '종가', '피봇', '시가', '시가갭', '저가',
                       '현재가', '고가', '대비', '진폭', '거래량', '미결', '미결증감']

            df_fut = DataFrame(data=[self.cme_realdata, self.fut_realdata, self.kp200_realdata], columns=columns)

            print('df_fut', df_fut)

            # 선물 맥점 컬러 체크(실시간에서만 표시됨)
            #if flag_market_service:
            if True:
                self.fut_cm_node_color_clear()
                self.fut_cm_oloh_check()
                self.fut_cm_node_coloring()

                self.kp200_node_color_clear()
                self.kp200_node_coloring()

                self.kp200_low_node_coloring()
                self.kp200_high_node_coloring()
            else:
                pass
            
            if ResizeRowsToContents:  
                self.tableWidget_fut.resizeRowsToContents()
            else:
                pass                        
            self.tableWidget_fut.resizeColumnsToContents()             
            
            if self.flag_refresh:
            
                # 옵션 맥점 컬러링                
                txt = '[{0:02d}:{1:02d}:{2:02d}] 옵션맥점 Refresh 컬러링을 시작합니다.\r'.format(dt.hour, dt.minute, dt.second)
                self.textBrowser.append(txt)

                self.opt_all_node_coloring()
            else:
                pass
            
        elif szTrCode == 't2830':
            pass

        elif szTrCode == 't2835':

            # EUREX 야간옵션 시세전광판

            szTrCode, block, df, df1 = tickdata
            
            if not self.flag_refresh:

                # open, ol/oh 초기화
                if NightTime:
                    call_open = [False] * option_pairs_count
                    put_open = [False] * option_pairs_count
                else:
                    pass

                # gap percent 초기화
                call_gap_percent = [0] * option_pairs_count
                put_gap_percent = [0] * option_pairs_count

                # db percent 초기화
                call_db_percent = [0] * option_pairs_count
                put_db_percent = [0] * option_pairs_count

                call_otm_cdb_percent_mean = 0
                put_otm_cdb_percent_mean = 0

                item = QTableWidgetItem('행사가')
                self.tableWidget_call.setHorizontalHeaderItem(Option_column.행사가.value, item)

                item = QTableWidgetItem('▲:▼')
                self.tableWidget_call.setHorizontalHeaderItem(Option_column.OLOH.value, item)

                item = QTableWidgetItem('시가갭\n%')
                self.tableWidget_call.setHorizontalHeaderItem(Option_column.시가갭.value, item)

                item = QTableWidgetItem('시가대비\n%')
                self.tableWidget_call.setHorizontalHeaderItem(Option_column.대비.value, item)

                item = QTableWidgetItem('체결')
                self.tableWidget_call.setHorizontalHeaderItem(Option_column.VP.value, item)

                item = QTableWidgetItem('∑OI')
                self.tableWidget_call.setHorizontalHeaderItem(Option_column.OI.value, item)

                item = QTableWidgetItem('행사가')
                self.tableWidget_put.setHorizontalHeaderItem(Option_column.행사가.value, item)

                item = QTableWidgetItem('▲:▼')
                self.tableWidget_put.setHorizontalHeaderItem(Option_column.OLOH.value, item)

                item = QTableWidgetItem('시가갭\n%')
                self.tableWidget_put.setHorizontalHeaderItem(Option_column.시가갭.value, item)

                item = QTableWidgetItem('시가대비\n%')
                self.tableWidget_put.setHorizontalHeaderItem(Option_column.대비.value, item)

                item = QTableWidgetItem('체결')
                self.tableWidget_put.setHorizontalHeaderItem(Option_column.VP.value, item)

                item = QTableWidgetItem('∑OI')
                self.tableWidget_put.setHorizontalHeaderItem(Option_column.OI.value, item)

                수정거래량 = 0
                
                for i in range(option_pairs_count):

                    # 수정거래량 초기화
                    df_call.at[i, '시가갭'] = 0
                    df_call.at[i, '대비'] = 0

                    # Call 처리
                    self.tableWidget_call.item(i, Option_column.행사가.value).setBackground(QBrush(검정색))
                    self.tableWidget_call.item(i, Option_column.행사가.value).setForeground(QBrush(흰색))

                    oloh_txt = '-'
                    item = QTableWidgetItem(oloh_txt)
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(검정색))
                    item.setForeground(QBrush(흰색))
                    self.tableWidget_call.setItem(i, Option_column.OLOH.value, item)

                    전저 = df_call.at[i, '저가']
                    df_call.at[i, '전저'] = 전저

                    if 전저 >= 100:
                        item = QTableWidgetItem("{0:0.1f}".format(전저))
                    else:
                        item = QTableWidgetItem("{0:.2f}".format(전저))

                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(검정색))
                    item.setForeground(QBrush(흰색))
                    self.tableWidget_call.setItem(i, Option_column.전저.value, item)

                    전고 = df_call.at[i, '고가']
                    df_call.at[i, '전고'] = 전고

                    if 전고 >= 100:
                        item = QTableWidgetItem("{0:0.1f}".format(전고))
                    else:
                        item = QTableWidgetItem("{0:.2f}".format(전고))

                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(검정색))
                    item.setForeground(QBrush(흰색))
                    self.tableWidget_call.setItem(i, Option_column.전고.value, item)

                    # to be check !!!
                    '''
                    if 18 <= dt.hour < 24 or 0 <= dt.hour < 4:
                        
                        시가 = df['시가'][i]
                    else:
                        시가 = 0.0
                    '''
                    
                    시가 = df['시가'][i]
                    df_call.at[i, '시가'] = 시가

                    종가 = df_call.at[i, '현재가']
                    df_call.at[i, '종가'] = 종가

                    if 종가 >= 100:
                        item = QTableWidgetItem("{0:0.1f}".format(종가))
                    else:
                        item = QTableWidgetItem("{0:.2f}".format(종가))

                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_call.setItem(i, Option_column.종가.value, item)

                    df_call_graph[i].at[0, 'Open'] = 종가
                    df_call_graph[i].at[0, 'Price'] = 종가

                    현재가 = df['현재가'][i]
                    df_call.at[i, '현재가'] = 현재가

                    item = QTableWidgetItem("{0:.2f}".format(현재가))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))

                    if 시가 > 0:

                        if 시가 < 현재가:
                            item.setForeground(QBrush(적색))
                        elif 시가 > 현재가:
                            item.setForeground(QBrush(청색))
                        else:
                            item.setForeground(QBrush(검정색))
                    else:
                        item.setForeground(QBrush(검정색))

                    self.tableWidget_call.setItem(i, Option_column.현재가.value, item)
                    '''
                    if df['저가'][i] < df['고가'][i]:
                        저가 = df['저가'][i]
                        고가 = df['고가'][i]
                    else:
                        저가 = 0.0
                        고가 = 0.0
                    '''
                    저가 = df['저가'][i]
                    고가 = df['고가'][i]
                    
                    df_call.at[i, '저가'] = 저가
                    
                    item = QTableWidgetItem("{0:.2f}".format(저가))
                    item.setTextAlignment(Qt.AlignCenter)

                    if i == ATM_INDEX - 1 or i == ATM_INDEX or i == ATM_INDEX + 1:
                        item.setBackground(QBrush(옅은회색))
                    else:
                        item.setBackground(QBrush(흰색))

                    item.setForeground(QBrush(검정색))

                    self.tableWidget_call.setItem(i, Option_column.저가.value, item)

                    df_call.at[i, '고가'] = 고가
                    
                    item = QTableWidgetItem("{0:.2f}".format(고가))
                    item.setTextAlignment(Qt.AlignCenter)

                    if i == ATM_INDEX - 1 or i == ATM_INDEX or i == ATM_INDEX + 1:
                        item.setBackground(QBrush(옅은회색))
                    else:
                        item.setBackground(QBrush(흰색))

                    item.setForeground(QBrush(검정색))

                    self.tableWidget_call.setItem(i, Option_column.고가.value, item)

                    if NightTime:

                        if df['저가'][i] < df['고가'][i]:
                            call_open[i] = True
                            self.tableWidget_call.item(i, Option_column.행사가.value).setBackground(QBrush(라임))
                            self.tableWidget_call.item(i, Option_column.행사가.value).setForeground(QBrush(검정색))
                        else:
                            pass
                    else:
                        pass

                    진폭 = 고가 - 저가
                    df_call.at[i, '진폭'] = 진폭

                    item = QTableWidgetItem("{0:.2f}".format(진폭))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_call.setItem(i, Option_column.진폭.value, item)
                    
                    if 시가 > opt_search_start_value and df['저가'][i] < df['고가'][i]:
                        self.call_open_list.append(i)
                    else:
                        pass

                    if 시가 > 0:

                        item = QTableWidgetItem("{0:.2f}".format(시가))
                        item.setTextAlignment(Qt.AlignCenter)
                        item.setBackground(QBrush(흰색))

                        if 시가 > 종가:
                            item.setForeground(QBrush(적색))
                        elif 시가 < 종가:
                            item.setForeground(QBrush(청색))
                        else:
                            item.setForeground(QBrush(검정색))

                        self.tableWidget_call.setItem(i, Option_column.시가.value, item)

                        if 시가 in COREVAL:
                            self.tableWidget_call.item(i, Option_column.시가.value).setBackground(QBrush(대맥점색))
                            self.tableWidget_call.item(i, Option_column.시가.value).setForeground(QBrush(검정색))
                        else:
                            pass

                        if NightTime and 시가 in FIXED_COREVAL:
                            self.tableWidget_call.item(i, Option_column.시가.value).setBackground(QBrush(검정색))
                            self.tableWidget_call.item(i, Option_column.시가.value).setForeground(QBrush(노란색))
                            flag_call_open_in_fixed_coreval = True
                        else:
                            pass

                        df_call_graph[i].at[GuardTime + 1, 'Open'] = 시가
                        df_call_graph[i].at[GuardTime + 1, 'Price'] = 시가

                        시가갭 = 시가 - 종가
                        df_call.at[i, '시가갭'] = 시가갭

                        대비 = round((현재가 - 시가), 2)
                        df_call.at[i, '대비'] = 대비

                        if 시가 > 0 and df['저가'][i] < df['고가'][i]:

                            call_gap_percent[i] = (시가 / 종가 - 1) * 100

                            gap_txt = "{0:.2f}\n{1:.1f}%".format(시가갭, call_gap_percent[i])

                            item = QTableWidgetItem(gap_txt)
                            item.setTextAlignment(Qt.AlignCenter)
                            item.setBackground(QBrush(흰색))
                            item.setForeground(QBrush(검정색))
                            self.tableWidget_call.setItem(i, Option_column.시가갭.value, item)

                            call_db_percent[i] = (현재가 / 시가 - 1) * 100

                            gap_txt = "{0:.2f}\n{1:.1f}%".format(대비, call_db_percent[i])

                            item = QTableWidgetItem(gap_txt)
                            item.setTextAlignment(Qt.AlignCenter)
                            item.setBackground(QBrush(흰색))
                            item.setForeground(QBrush(검정색))
                            self.tableWidget_call.setItem(i, Option_column.대비.value, item)
                        else:
                            gap_txt = "{0:.2f}".format(시가갭)

                            item = QTableWidgetItem(gap_txt)
                            item.setTextAlignment(Qt.AlignCenter)
                            item.setBackground(QBrush(흰색))
                            item.setForeground(QBrush(검정색))
                            self.tableWidget_call.setItem(i, Option_column.시가갭.value, item)

                            gap_txt = "{0:.2f}".format(대비)

                            item = QTableWidgetItem(gap_txt)
                            item.setTextAlignment(Qt.AlignCenter)
                            item.setBackground(QBrush(흰색))
                            item.setForeground(QBrush(검정색))
                            self.tableWidget_call.setItem(i, Option_column.대비.value, item)

                        피봇 = calc_pivot(전저, 전고, 종가, 시가, 2)

                        item = QTableWidgetItem("{0:.2f}".format(피봇))
                        item.setTextAlignment(Qt.AlignCenter)
                        item.setBackground(QBrush(흰색))
                        item.setForeground(QBrush(검정색))
                        self.tableWidget_call.setItem(i, Option_column.피봇.value, item)
                    else:
                        시가 = 0.0
                        피봇 = 0.0
                        시가갭 = 0.0
                        대비 = 0.0
                        
                        self.tableWidget_call.item(i, Option_column.행사가.value).setBackground(QBrush(검정색))
                        self.tableWidget_call.item(i, Option_column.행사가.value).setForeground(QBrush(흰색))

                        item = QTableWidgetItem("{0:.2f}".format(시가))
                        item.setTextAlignment(Qt.AlignCenter)
                        item.setBackground(QBrush(검정색))
                        item.setForeground(QBrush(흰색))
                        self.tableWidget_call.setItem(i, Option_column.시가.value, item)

                        item = QTableWidgetItem("{0:.2f}".format(피봇))
                        item.setTextAlignment(Qt.AlignCenter)
                        item.setBackground(QBrush(검정색))
                        item.setForeground(QBrush(흰색))
                        self.tableWidget_call.setItem(i, Option_column.피봇.value, item)

                        item = QTableWidgetItem("{0:.2f}".format(시가갭))
                        item.setTextAlignment(Qt.AlignCenter)
                        item.setBackground(QBrush(검정색))
                        item.setForeground(QBrush(흰색))
                        self.tableWidget_call.setItem(i, Option_column.시가갭.value, item)

                        item = QTableWidgetItem("{0:.2f}".format(대비))
                        item.setTextAlignment(Qt.AlignCenter)
                        item.setBackground(QBrush(검정색))
                        item.setForeground(QBrush(흰색))
                        self.tableWidget_call.setItem(i, Option_column.대비.value, item)

                    df_call.at[i, '피봇'] = 피봇

                    if 시가 > 0 and df['저가'][i] < df['고가'][i]:
                        self.tableWidget_call.item(i, Option_column.행사가.value).setBackground(QBrush(라임))
                        self.tableWidget_call.item(i, Option_column.행사가.value).setForeground(QBrush(검정색))
                    else:
                        pass

                    if df['현재가'][i] <= 시가갭:

                        수정거래량 = int((df['매수잔량'][i] - df['매도잔량'][i]) * df['현재가'][i])
                    else:
                        수정거래량 = int((df['매수잔량'][i] - df['매도잔량'][i]) * (df['현재가'][i] - 시가갭))

                    # 수정거래량 초기화
                    df_call.at[i, '수정거래량'] = 0

                    # t2835에 미결항목이 없음
                    df_call.at[i, '순미결'] = 0
                    df_call.at[i, '수정미결'] = 0
                    df_call.at[i, '수정미결증감'] = 0

                    temp = format(0, ',')

                    item = QTableWidgetItem(temp)
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_call.setItem(i, Option_column.VP.value, item)
                    
                    temp = format(0, ',')

                    item = QTableWidgetItem(temp)
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_call.setItem(i, Option_column.OI.value, item)

                    item = QTableWidgetItem(temp)
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_call.setItem(i, Option_column.OID.value, item)

                    df_call_information_graph.at[0, 'Volume'] = 0

                    # Put 처리
                    df_put.at[i, '시가갭'] = 0
                    df_put.at[i, '대비'] = 0

                    self.tableWidget_put.item(i, Option_column.행사가.value).setBackground(QBrush(검정색))
                    self.tableWidget_put.item(i, Option_column.행사가.value).setForeground(QBrush(흰색))

                    item = QTableWidgetItem(oloh_txt)
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(검정색))
                    item.setForeground(QBrush(흰색))
                    self.tableWidget_put.setItem(i, Option_column.OLOH.value, item)

                    전저 = df_put.at[i, '저가']
                    df_put.at[i, '전저'] = 전저

                    if 전저 >= 100:
                        item = QTableWidgetItem("{0:0.1f}".format(전저))
                    else:
                        item = QTableWidgetItem("{0:.2f}".format(전저))

                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(검정색))
                    item.setForeground(QBrush(흰색))
                    self.tableWidget_put.setItem(i, Option_column.전저.value, item)

                    전고 = df_put.at[i, '고가']
                    df_put.at[i, '전고'] = 전고

                    if 전고 >= 100:
                        item = QTableWidgetItem("{0:0.1f}".format(전고))
                    else:
                        item = QTableWidgetItem("{0:.2f}".format(전고))

                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(검정색))
                    item.setForeground(QBrush(흰색))
                    self.tableWidget_put.setItem(i, Option_column.전고.value, item)

                    # to be check !!!
                    '''
                    if 18 <= dt.hour < 24 or 0 <= dt.hour < 4:
                        
                        시가 = df1['시가'][i]
                    else:
                        시가 = 0.0
                    '''

                    시가 = df1['시가'][i]
                    df_put.at[i, '시가'] = 시가

                    종가 = df_put.at[i, '현재가']
                    df_put.at[i, '종가'] = 종가

                    if 종가 >= 100:
                        item = QTableWidgetItem("{0:0.1f}".format(종가))
                    else:
                        item = QTableWidgetItem("{0:.2f}".format(종가))

                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_put.setItem(i, Option_column.종가.value, item)

                    df_put_graph[i].at[0, 'Price'] = 종가

                    현재가 = df1['현재가'][i]
                    df_put.at[i, '현재가'] = 현재가

                    item = QTableWidgetItem("{0:.2f}".format(현재가))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))

                    if 시가 > 0:

                        if 시가 < 현재가:
                            item.setForeground(QBrush(적색))
                        elif 시가 > 현재가:
                            item.setForeground(QBrush(청색))
                        else:
                            item.setForeground(QBrush(검정색))
                    else:
                        item.setForeground(QBrush(검정색))

                    self.tableWidget_put.setItem(i, Option_column.현재가.value, item)
                    '''
                    if df1['저가'][i] < df1['고가'][i]:
                        저가 = df1['저가'][i]
                        고가 = df1['고가'][i]
                    else:
                        저가 = 0.0
                        고가 = 0.0
                    '''
                    저가 = df1['저가'][i]
                    고가 = df1['고가'][i]
                    
                    df_put.at[i, '저가'] = 저가

                    item = QTableWidgetItem("{0:.2f}".format(저가))
                    item.setTextAlignment(Qt.AlignCenter)

                    if i == ATM_INDEX - 1 or i == ATM_INDEX or i == ATM_INDEX + 1:
                        item.setBackground(QBrush(옅은회색))
                    else:
                        item.setBackground(QBrush(흰색))

                    item.setForeground(QBrush(검정색))

                    self.tableWidget_put.setItem(i, Option_column.저가.value, item)

                    df_put.at[i, '고가'] = 고가
                    
                    item = QTableWidgetItem("{0:.2f}".format(고가))
                    item.setTextAlignment(Qt.AlignCenter)

                    if i == ATM_INDEX - 1 or i == ATM_INDEX or i == ATM_INDEX + 1:
                        item.setBackground(QBrush(옅은회색))
                    else:
                        item.setBackground(QBrush(흰색))

                    item.setForeground(QBrush(검정색))

                    self.tableWidget_put.setItem(i, Option_column.고가.value, item)

                    if NightTime:

                        if df1['저가'][i] < df1['고가'][i]:

                            put_open[i] = True
                            self.tableWidget_put.item(i, Option_column.행사가.value).setBackground(QBrush(라임))
                            self.tableWidget_put.item(i, Option_column.행사가.value).setForeground(QBrush(검정색))
                        else:
                            pass
                    else:
                        pass

                    진폭 = 고가 - 저가
                    df_put.at[i, '진폭'] = 진폭

                    item = QTableWidgetItem("{0:.2f}".format(진폭))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_put.setItem(i, Option_column.진폭.value, item)
                    
                    if 시가 > opt_search_start_value and df1['저가'][i] < df1['고가'][i]:
                        self.put_open_list.append(i)
                    else:
                        pass

                    if 시가 > 0:

                        item = QTableWidgetItem("{0:.2f}".format(시가))
                        item.setTextAlignment(Qt.AlignCenter)
                        item.setBackground(QBrush(흰색))

                        if 시가 > 종가:
                            item.setForeground(QBrush(적색))
                        elif 시가 < 종가:
                            item.setForeground(QBrush(청색))
                        else:
                            item.setForeground(QBrush(검정색))

                        self.tableWidget_put.setItem(i, Option_column.시가.value, item)

                        if 시가 in COREVAL:
                            self.tableWidget_put.item(i, Option_column.시가.value).setBackground(QBrush(대맥점색))
                            self.tableWidget_put.item(i, Option_column.시가.value).setForeground(QBrush(검정색))
                        else:
                            pass

                        if NightTime and 시가 in FIXED_COREVAL:
                            self.tableWidget_put.item(i, Option_column.시가.value).setBackground(QBrush(검정색))
                            self.tableWidget_put.item(i, Option_column.시가.value).setForeground(QBrush(노란색))
                            flag_put_open_in_fixed_coreval = True
                        else:
                            pass

                        df_put_graph[i].at[GuardTime + 1, 'Open'] = 시가
                        df_put_graph[i].at[GuardTime + 1, 'Price'] = 시가

                        시가갭 = 시가 - 종가
                        df_put.at[i, '시가갭'] = 시가갭

                        대비 = 현재가 - 시가
                        df_put.at[i, '대비'] = 대비

                        if 시가 > 0 and df1['저가'][i] < df1['고가'][i]:

                            put_gap_percent[i] = (시가 / 종가 - 1) * 100

                            gap_txt = "{0:.2f}\n{1:.1f}%".format(시가갭, put_gap_percent[i])

                            item = QTableWidgetItem(gap_txt)
                            item.setTextAlignment(Qt.AlignCenter)
                            item.setBackground(QBrush(흰색))
                            item.setForeground(QBrush(검정색))
                            self.tableWidget_put.setItem(i, Option_column.시가갭.value, item)

                            put_db_percent[i] = (현재가 / 시가 - 1) * 100

                            gap_txt = "{0:.2f}\n{1:.1f}%".format(대비, put_db_percent[i])

                            item = QTableWidgetItem(gap_txt)
                            item.setTextAlignment(Qt.AlignCenter)
                            item.setBackground(QBrush(흰색))
                            item.setForeground(QBrush(검정색))
                            self.tableWidget_put.setItem(i, Option_column.대비.value, item)
                        else:
                            gap_txt = "{0:.2f}".format(시가갭)

                            item = QTableWidgetItem(gap_txt)
                            item.setTextAlignment(Qt.AlignCenter)
                            item.setBackground(QBrush(흰색))
                            item.setForeground(QBrush(검정색))
                            self.tableWidget_put.setItem(i, Option_column.시가갭.value, item)

                            gap_txt = "{0:.2f}".format(대비)

                            item = QTableWidgetItem(gap_txt)
                            item.setTextAlignment(Qt.AlignCenter)
                            item.setBackground(QBrush(흰색))
                            item.setForeground(QBrush(검정색))
                            self.tableWidget_put.setItem(i, Option_column.대비.value, item)

                        피봇 = calc_pivot(전저, 전고, 종가, 시가, 2)

                        item = QTableWidgetItem("{0:.2f}".format(피봇))
                        item.setTextAlignment(Qt.AlignCenter)
                        item.setBackground(QBrush(흰색))
                        item.setForeground(QBrush(검정색))
                        self.tableWidget_put.setItem(i, Option_column.피봇.value, item)
                    else:
                        시가 = 0.0
                        피봇 = 0.0
                        시가갭 = 0.0
                        대비 = 0.0
                        
                        self.tableWidget_put.item(i, Option_column.행사가.value).setBackground(QBrush(검정색))
                        self.tableWidget_put.item(i, Option_column.행사가.value).setForeground(QBrush(흰색))

                        item = QTableWidgetItem("{0:.2f}".format(시가))
                        item.setTextAlignment(Qt.AlignCenter)
                        item.setBackground(QBrush(검정색))
                        item.setForeground(QBrush(흰색))
                        self.tableWidget_put.setItem(i, Option_column.시가.value, item)

                        item = QTableWidgetItem("{0:.2f}".format(피봇))
                        item.setTextAlignment(Qt.AlignCenter)
                        item.setBackground(QBrush(검정색))
                        item.setForeground(QBrush(흰색))
                        self.tableWidget_put.setItem(i, Option_column.피봇.value, item)

                        item = QTableWidgetItem("{0:.2f}".format(시가갭))
                        item.setTextAlignment(Qt.AlignCenter)
                        item.setBackground(QBrush(검정색))
                        item.setForeground(QBrush(흰색))
                        self.tableWidget_put.setItem(i, Option_column.시가갭.value, item)

                        item = QTableWidgetItem("{0:.2f}".format(대비))
                        item.setTextAlignment(Qt.AlignCenter)
                        item.setBackground(QBrush(검정색))
                        item.setForeground(QBrush(흰색))
                        self.tableWidget_put.setItem(i, Option_column.대비.value, item)

                    df_put.at[i, '피봇'] = 피봇

                    if 시가 > 0 and df1['저가'][i] < df1['고가'][i]:
                        self.tableWidget_put.item(i, Option_column.행사가.value).setBackground(QBrush(라임))
                        self.tableWidget_put.item(i, Option_column.행사가.value).setForeground(QBrush(검정색))
                    else:
                        pass

                    if df1['현재가'][i] <= 시가갭:

                        수정거래량 = int((df1['매수잔량'][i] - df1['매도잔량'][i]) * df1['현재가'][i])
                    else:
                        수정거래량 = int((df1['매수잔량'][i] - df1['매도잔량'][i]) * (df1['현재가'][i] - 시가갭))

                    # 수정거래량 초기화
                    df_put.at[i, '수정거래량'] = 0

                    # t2835에 미결항목이 없음
                    df_put.at[i, '순미결'] = 0
                    df_put.at[i, '수정미결'] = 0
                    df_put.at[i, '수정미결증감'] = 0

                    temp = format(0, ',')

                    item = QTableWidgetItem(temp)
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_put.setItem(i, Option_column.VP.value, item)

                    temp = format(0, ',')

                    item = QTableWidgetItem(temp)
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_put.setItem(i, Option_column.OI.value, item)

                    item = QTableWidgetItem(temp)
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_put.setItem(i, Option_column.OID.value, item)

                    df_put_information_graph.at[0, 'Volume'] = 0
                
                print('======================================================================================================================================================================')
                print('\r')
                print('t2835 야간 전광판 콜 데이타 = ', df_call)
                print('\r')
                print('t2835 야간 전광판 풋 데이타 = ', df_put)
                print('\r')
                print('t2835 call open list = ', self.call_open_list, len(self.call_open_list))
                print('\r')
                print('t2835 put open list = ', self.put_open_list, len(self.put_open_list))
                print('\r')
                print('======================================================================================================================================================================')
                
                call_atm_value = df_call.at[ATM_INDEX, '현재가']
                put_atm_value = df_put.at[ATM_INDEX, '현재가']

                txt = '{0:.2f}({1:.2f}:{2:.2f})'.format(
                    self.fut_realdata['현재가'] - self.fut_realdata['KP200'],
                    call_atm_value + put_atm_value,
                    abs(call_atm_value - put_atm_value))
                self.label_atm.setText(txt)             

                call_전저 = df_call['전저'].values.tolist()
                call_전저_node_list = self.make_node_list(call_전저)

                call_전고 = df_call['전고'].values.tolist()
                call_전고_node_list = self.make_node_list(call_전고)

                call_종가 = df_call['종가'].values.tolist()
                call_종가_node_list = self.make_node_list(call_종가)
                
                call_피봇 = df_call['피봇'].values.tolist()
                call_피봇_node_list = self.make_node_list(call_피봇)

                call_시가 = df_call['시가'].values.tolist()
                call_시가_node_list = self.make_node_list(call_시가)
                
                call_저가 = df_call['저가'].values.tolist()
                call_저가_node_list = self.make_node_list(call_저가)

                call_고가 = df_call['고가'].values.tolist()
                call_고가_node_list = self.make_node_list(call_고가)
                
                call_진폭 = df_call['진폭'].values.tolist()
                진폭최대값 = max(call_진폭)
                max_txt = '{0:.2f}'.format(진폭최대값)

                item = QTableWidgetItem(max_txt)
                self.tableWidget_call.setHorizontalHeaderItem(Option_column.진폭.value, item)

                put_전저 = df_put['전저'].values.tolist()
                put_전저_node_list = self.make_node_list(put_전저)

                put_전고 = df_put['전고'].values.tolist()
                put_전고_node_list = self.make_node_list(put_전고)

                put_종가 = df_put['종가'].values.tolist()
                put_종가_node_list = self.make_node_list(put_종가)
                
                put_피봇 = df_put['피봇'].values.tolist()
                put_피봇_node_list = self.make_node_list(put_피봇)

                put_시가 = df_put['시가'].values.tolist()
                put_시가_node_list = self.make_node_list(put_시가)
                
                put_저가 = df_put['저가'].values.tolist()
                put_저가_node_list = self.make_node_list(put_저가)

                put_고가 = df_put['고가'].values.tolist()
                put_고가_node_list = self.make_node_list(put_고가)
                
                put_진폭 = df_put['진폭'].values.tolist()
                진폭최대값 = max(put_진폭)
                max_txt = '{0:.2f}'.format(진폭최대값)

                item = QTableWidgetItem(max_txt)
                self.tableWidget_put.setHorizontalHeaderItem(Option_column.진폭.value, item)

                self.opt_high_low_list_update()

                txt = '[{0:02d}:{1:02d}:{2:02d}] high low list in t2835 = {3}\r'.format(dt.hour, dt.minute, dt.second, high_low_list)
                print(txt)

                #중심가 계산
                CENTER_VAL_PLUS5 = round((df_call.at[ATM_INDEX - 5, '종가'] + df_put.at[ATM_INDEX - 5, '종가'])/2, 2)
                CENTER_VAL_PLUS4 = round((df_call.at[ATM_INDEX - 4, '종가'] + df_put.at[ATM_INDEX - 4, '종가'])/2, 2)
                CENTER_VAL_PLUS3 = round((df_call.at[ATM_INDEX - 3, '종가'] + df_put.at[ATM_INDEX - 3, '종가'])/2, 2)
                CENTER_VAL_PLUS2 = round((df_call.at[ATM_INDEX - 2, '종가'] + df_put.at[ATM_INDEX - 2, '종가'])/2, 2)
                CENTER_VAL_PLUS1 = round((df_call.at[ATM_INDEX - 1, '종가'] + df_put.at[ATM_INDEX - 1, '종가'])/2 , 2)
                옵션_중심가 = round((df_call.at[ATM_INDEX, '종가'] + df_put.at[ATM_INDEX, '종가'])/2 , 2)
                CENTER_VAL_MINUS1 = round((df_call.at[ATM_INDEX + 1, '종가'] + df_put.at[ATM_INDEX + 1, '종가'])/2 , 2)
                CENTER_VAL_MINUS2 = round((df_call.at[ATM_INDEX + 2, '종가'] + df_put.at[ATM_INDEX + 2, '종가'])/2 , 2)
                CENTER_VAL_MINUS3 = round((df_call.at[ATM_INDEX + 3, '종가'] + df_put.at[ATM_INDEX + 3, '종가'])/2 , 2)
                CENTER_VAL_MINUS4 = round((df_call.at[ATM_INDEX + 4, '종가'] + df_put.at[ATM_INDEX + 4, '종가'])/2 , 2)
                CENTER_VAL_MINUS5 = round((df_call.at[ATM_INDEX + 5, '종가'] + df_put.at[ATM_INDEX + 5, '종가'])/2 , 2)
                
                # 옵션 양합표시
                atm_minus_5 = round((df_call.at[ATM_INDEX - 5, '현재가'] + df_put.at[ATM_INDEX - 5, '현재가']), 2)
                atm_minus_4 = round((df_call.at[ATM_INDEX - 4, '현재가'] + df_put.at[ATM_INDEX - 4, '현재가']), 2)
                atm_minus_3 = round((df_call.at[ATM_INDEX - 3, '현재가'] + df_put.at[ATM_INDEX - 3, '현재가']), 2)
                atm_minus_2 = round((df_call.at[ATM_INDEX - 2, '현재가'] + df_put.at[ATM_INDEX - 2, '현재가']), 2)
                atm_minus_1 = round((df_call.at[ATM_INDEX - 1, '현재가'] + df_put.at[ATM_INDEX - 1, '현재가']) , 2)
                atm_zero_sum = round((df_call.at[ATM_INDEX, '현재가'] + df_put.at[ATM_INDEX, '현재가']) , 2)
                atm_zero_cha = round((df_call.at[ATM_INDEX, '현재가'] - df_put.at[ATM_INDEX, '현재가']) , 2)
                atm_plus_1 = round((df_call.at[ATM_INDEX + 1, '현재가'] + df_put.at[ATM_INDEX + 1, '현재가']) , 2)
                atm_plus_2 = round((df_call.at[ATM_INDEX + 2, '현재가'] + df_put.at[ATM_INDEX + 2, '현재가']) , 2)
                atm_plus_3 = round((df_call.at[ATM_INDEX + 3, '현재가'] + df_put.at[ATM_INDEX + 3, '현재가']) , 2)
                atm_plus_4 = round((df_call.at[ATM_INDEX + 4, '현재가'] + df_put.at[ATM_INDEX + 4, '현재가']) , 2)
                atm_plus_5 = round((df_call.at[ATM_INDEX + 5, '현재가'] + df_put.at[ATM_INDEX + 5, '현재가']) , 2)
                
                atm_list = []
                atm_list.append(atm_minus_5)
                atm_list.append(atm_minus_4)
                atm_list.append(atm_minus_3)
                atm_list.append(atm_minus_2)
                atm_list.append(atm_minus_1)
                atm_list.append(atm_zero_sum)
                atm_list.append(atm_plus_1)
                atm_list.append(atm_plus_2)
                atm_list.append(atm_plus_3)
                atm_list.append(atm_plus_4) 
                atm_list.append(atm_plus_5)    

                min_index = atm_list.index(min(atm_list)) + ATM_INDEX - 5

                # 콜에 중심가 표시
                val = df_call.at[ATM_INDEX - 5, '기준가']
                item = QTableWidgetItem("{0:.2f}\n({1})".format(val, CENTER_VAL_PLUS5))
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(라임))
                item.setForeground(QBrush(검정색))
                self.tableWidget_call.setItem(ATM_INDEX - 5, Option_column.기준가.value, item) 

                val = df_call.at[ATM_INDEX - 4, '기준가']
                item = QTableWidgetItem("{0:.2f}\n({1})".format(val, CENTER_VAL_PLUS4))
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(라임))
                item.setForeground(QBrush(검정색))
                self.tableWidget_call.setItem(ATM_INDEX - 4, Option_column.기준가.value, item) 

                val = df_call.at[ATM_INDEX - 3, '기준가']
                item = QTableWidgetItem("{0:.2f}\n({1})".format(val, CENTER_VAL_PLUS3))
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(라임))
                item.setForeground(QBrush(검정색))
                self.tableWidget_call.setItem(ATM_INDEX - 3, Option_column.기준가.value, item) 

                val = df_call.at[ATM_INDEX - 2, '기준가']
                item = QTableWidgetItem("{0:.2f}\n({1})".format(val, CENTER_VAL_PLUS2))
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(라임))
                item.setForeground(QBrush(검정색))
                self.tableWidget_call.setItem(ATM_INDEX - 2, Option_column.기준가.value, item)  

                val = df_call.at[ATM_INDEX - 1, '기준가']
                item = QTableWidgetItem("{0:.2f}\n({1})".format(val, CENTER_VAL_PLUS1))
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(라임))
                item.setForeground(QBrush(검정색))
                self.tableWidget_call.setItem(ATM_INDEX - 1, Option_column.기준가.value, item)            

                val = df_call.at[ATM_INDEX, '기준가']
                item = QTableWidgetItem("{0:.2f}\n({1})".format(val, 옵션_중심가))
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(노란색))
                item.setForeground(QBrush(검정색))
                self.tableWidget_call.setItem(ATM_INDEX, Option_column.기준가.value, item)            

                val = df_call.at[ATM_INDEX + 1, '기준가']
                item = QTableWidgetItem("{0:.2f}\n({1})".format(val, CENTER_VAL_MINUS1))
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(라임))
                item.setForeground(QBrush(검정색))
                self.tableWidget_call.setItem(ATM_INDEX + 1, Option_column.기준가.value, item)

                val = df_call.at[ATM_INDEX + 2, '기준가']
                item = QTableWidgetItem("{0:.2f}\n({1})".format(val, CENTER_VAL_MINUS2))
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(라임))
                item.setForeground(QBrush(검정색))
                self.tableWidget_call.setItem(ATM_INDEX + 2, Option_column.기준가.value, item)

                val = df_call.at[ATM_INDEX + 3, '기준가']
                item = QTableWidgetItem("{0:.2f}\n({1})".format(val, CENTER_VAL_MINUS3))
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(라임))
                item.setForeground(QBrush(검정색))
                self.tableWidget_call.setItem(ATM_INDEX + 3, Option_column.기준가.value, item)

                val = df_call.at[ATM_INDEX + 4, '기준가']
                item = QTableWidgetItem("{0:.2f}\n({1})".format(val, CENTER_VAL_MINUS4))
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(라임))
                item.setForeground(QBrush(검정색))
                self.tableWidget_call.setItem(ATM_INDEX + 4, Option_column.기준가.value, item)

                val = df_call.at[ATM_INDEX + 5, '기준가']
                item = QTableWidgetItem("{0:.2f}\n({1})".format(val, CENTER_VAL_MINUS5))
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(라임))
                item.setForeground(QBrush(검정색))
                self.tableWidget_call.setItem(ATM_INDEX + 5, Option_column.기준가.value, item)

                # 풋 양합표시
                val = df_put.at[ATM_INDEX - 5, '기준가']
                item = QTableWidgetItem("{0:.2f}\n({1})".format(val, atm_minus_5))
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(라임))
                item.setForeground(QBrush(검정색))
                self.tableWidget_put.setItem(ATM_INDEX - 5, Option_column.기준가.value, item)

                val = df_put.at[ATM_INDEX - 4, '기준가']
                item = QTableWidgetItem("{0:.2f}\n({1})".format(val, atm_minus_4))
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(라임))
                item.setForeground(QBrush(검정색))
                self.tableWidget_put.setItem(ATM_INDEX - 4, Option_column.기준가.value, item)

                val = df_put.at[ATM_INDEX - 3, '기준가']
                item = QTableWidgetItem("{0:.2f}\n({1})".format(val, atm_minus_3))
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(라임))
                item.setForeground(QBrush(검정색))
                self.tableWidget_put.setItem(ATM_INDEX - 3, Option_column.기준가.value, item)

                val = df_put.at[ATM_INDEX - 2, '기준가']
                item = QTableWidgetItem("{0:.2f}\n({1})".format(val, atm_minus_2))
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(라임))
                item.setForeground(QBrush(검정색))
                self.tableWidget_put.setItem(ATM_INDEX - 2, Option_column.기준가.value, item)    

                val = df_put.at[ATM_INDEX - 1, '기준가']
                item = QTableWidgetItem("{0:.2f}\n({1})".format(val, atm_minus_1))
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(라임))
                item.setForeground(QBrush(검정색))
                self.tableWidget_put.setItem(ATM_INDEX - 1, Option_column.기준가.value, item)            

                val = df_put.at[ATM_INDEX, '기준가']
                item = QTableWidgetItem("{0:.2f}\n({1})".format(val, atm_zero_sum))
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(노란색))
                item.setForeground(QBrush(검정색))
                self.tableWidget_put.setItem(ATM_INDEX, Option_column.기준가.value, item)            

                val = df_put.at[ATM_INDEX + 1, '기준가']
                item = QTableWidgetItem("{0:.2f}\n({1})".format(val, atm_plus_1))
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(라임))
                item.setForeground(QBrush(검정색))
                self.tableWidget_put.setItem(ATM_INDEX + 1, Option_column.기준가.value, item)

                val = df_put.at[ATM_INDEX + 2, '기준가']
                item = QTableWidgetItem("{0:.2f}\n({1})".format(val, atm_plus_2))
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(라임))
                item.setForeground(QBrush(검정색))
                self.tableWidget_put.setItem(ATM_INDEX + 2, Option_column.기준가.value, item)

                val = df_put.at[ATM_INDEX + 3, '기준가']
                item = QTableWidgetItem("{0:.2f}\n({1})".format(val, atm_plus_3))
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(라임))
                item.setForeground(QBrush(검정색))
                self.tableWidget_put.setItem(ATM_INDEX + 3, Option_column.기준가.value, item)

                val = df_put.at[ATM_INDEX + 4, '기준가']
                item = QTableWidgetItem("{0:.2f}\n({1})".format(val, atm_plus_4))
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(라임))
                item.setForeground(QBrush(검정색))
                self.tableWidget_put.setItem(ATM_INDEX + 4, Option_column.기준가.value, item)

                val = df_put.at[ATM_INDEX + 5, '기준가']
                item = QTableWidgetItem("{0:.2f}\n({1})".format(val, atm_plus_5))
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(라임))
                item.setForeground(QBrush(검정색))
                self.tableWidget_put.setItem(ATM_INDEX + 5, Option_column.기준가.value, item)

                if min_index != ATM_INDEX:

                    self.tableWidget_put.item(min_index, Option_column.기준가.value).setBackground(QBrush(검정색))
                    self.tableWidget_put.item(min_index, Option_column.기준가.value).setForeground(QBrush(노란색))
                else:
                    pass

                flag_score_board_start = True               
                
                txt = '[{0:02d}:{1:02d}:{2:02d}] Score Board Update 쓰레드가 시작됩니다.\r'.format(dt.hour, dt.minute, dt.second)
                self.textBrowser.append(txt)
                print(txt)

                ui_start_time = dt.hour * 3600 + dt.minute * 60 + dt.second
                print('야간 ui_start_time =', ui_start_time)

                if ResizeRowsToContents:
                    self.tableWidget_call.resizeRowsToContents()
                else:
                    pass
                self.tableWidget_call.resizeColumnsToContents()

                if ResizeRowsToContents:
                    self.tableWidget_put.resizeRowsToContents()
                else:
                    pass
                self.tableWidget_put.resizeColumnsToContents()

                if ResizeRowsToContents:
                    self.tableWidget_fut.resizeRowsToContents()
                else:
                    pass  
                self.tableWidget_fut.resizeColumnsToContents()               
                
                self.flag_refresh = True

                if flag_search_moving_node:
                    self.pushButton_start.setStyleSheet('QPushButton {background-color: lawngreen; color: black; font-family: Consolas; font-size: 10pt; font: Bold; border-style: solid; border-width: 1px; border-color: black; border-radius: 5px} \
                                                        QPushButton:hover {background-color: black; color: white} \
                                                        QPushButton:pressed {background-color: gold}')
                else:
                    self.pushButton_start.setStyleSheet('QPushButton {background-color: black; color: lawngreen; font-family: Consolas; font-size: 10pt; font: Bold; border-style: solid; border-width: 1px; border-color: black; border-radius: 5px} \
                                                        QPushButton:hover {background-color: black; color: white} \
                                                        QPushButton:pressed {background-color: gold}')

                self.pushButton_start.setText(' Refresh ')                
            else:
                # Refresh
                txt = '[{0:02d}:{1:02d}:{2:02d}] 야간옵션 전광판을 갱신합니다.\r'.format(dt.hour, dt.minute, dt.second)
                self.textBrowser.append(txt)
                print(txt)

                del self.call_open_list[:]
                del self.put_open_list[:]

                for i in range(option_pairs_count):

                    # 콜 데이타 획득
                    종가 = df_call.at[i, '종가']

                    시가 = df['시가'][i]
                    df_call.at[i, '시가'] = 시가

                    item = QTableWidgetItem("{0:.2f}".format(시가))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_call.setItem(i, Option_column.시가.value, item)

                    if 시가 > 0:

                        시가갭 = 시가 - 종가
                        df_call.at[i, '시가갭'] = 시가갭

                        피봇 = calc_pivot(df_call.at[i, '전저'], df_call.at[i, '전고'], 종가, 시가, 2)
                        df_call.at[i, '피봇'] = 피봇

                        item = QTableWidgetItem("{0:.2f}".format(피봇))
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_call.setItem(i, Option_column.피봇.value, item)
                    else:
                        시가갭 = 0
                        df_call.at[i, '시가갭'] = 시가갭

                    현재가 = df['현재가'][i]
                    df_call.at[i, '현재가'] = 현재가

                    item = QTableWidgetItem("{0:.2f}".format(현재가))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))

                    if 시가 > 0:

                        if 시가 < 현재가:
                            item.setForeground(QBrush(적색))
                        elif 시가 > 현재가:
                            item.setForeground(QBrush(청색))
                        else:
                            item.setForeground(QBrush(검정색))
                    else:
                        item.setForeground(QBrush(검정색))

                    self.tableWidget_call.setItem(i, Option_column.현재가.value, item)
                    '''
                    if df['저가'][i] < df['고가'][i]:
                        저가 = df['저가'][i]
                        고가 = df['고가'][i]
                    else:
                        저가 = 0.0
                        고가 = 0.0
                    '''
                    저가 = df['저가'][i]
                    고가 = df['고가'][i]

                    df_call.at[i, '저가'] = 저가

                    item = QTableWidgetItem("{0:.2f}".format(저가))
                    item.setTextAlignment(Qt.AlignCenter)

                    if i == ATM_INDEX - 1 or i == ATM_INDEX or i == ATM_INDEX + 1:
                        item.setBackground(QBrush(옅은회색))
                    else:
                        item.setBackground(QBrush(흰색))

                    item.setForeground(QBrush(검정색))

                    self.tableWidget_call.setItem(i, Option_column.저가.value, item)

                    df_call.at[i, '고가'] = 고가

                    item = QTableWidgetItem("{0:.2f}".format(고가))
                    item.setTextAlignment(Qt.AlignCenter)

                    if i == ATM_INDEX - 1 or i == ATM_INDEX or i == ATM_INDEX + 1:
                        item.setBackground(QBrush(옅은회색))
                    else:
                        item.setBackground(QBrush(흰색))

                    item.setForeground(QBrush(검정색))

                    self.tableWidget_call.setItem(i, Option_column.고가.value, item)
                    
                    if 시가 > 0 and df['저가'][i] < df['고가'][i]:
                        self.call_open_list.append(i)
                    else:
                        pass

                    # 풋 데이타 획득
                    종가 = df_put.at[i, '종가']

                    시가 = df1['시가'][i]
                    df_put.at[i, '시가'] = 시가

                    item = QTableWidgetItem("{0:.2f}".format(시가))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_put.setItem(i, Option_column.시가.value, item)

                    if 시가 > 0:

                        시가갭 = 시가 - 종가
                        df_put.at[i, '시가갭'] = 시가갭

                        피봇 = calc_pivot(df_put.at[i, '전저'], df_put.at[i, '전고'], 종가, 시가, 2)
                        df_put.at[i, '피봇'] = 피봇

                        item = QTableWidgetItem("{0:.2f}".format(피봇))
                        item.setTextAlignment(Qt.AlignCenter)
                        item.setBackground(QBrush(흰색))
                        item.setForeground(QBrush(검정색))
                        self.tableWidget_put.setItem(i, Option_column.피봇.value, item)
                    else:
                        시가갭 = 0
                        df_put.at[i, '시가갭'] = 시가갭

                    현재가 = df1['현재가'][i]
                    df_put.at[i, '현재가'] = 현재가

                    item = QTableWidgetItem("{0:.2f}".format(현재가))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))

                    if 시가 > 0:

                        if 시가 < 현재가:
                            item.setForeground(QBrush(적색))
                        elif 시가 > 현재가:
                            item.setForeground(QBrush(청색))
                        else:
                            item.setForeground(QBrush(검정색))
                    else:
                        item.setForeground(QBrush(검정색))

                    self.tableWidget_put.setItem(i, Option_column.현재가.value, item)
                    '''
                    if df1['저가'][i] < df1['고가'][i]:
                        저가 = df1['저가'][i]
                        고가 = df1['고가'][i]
                    else:
                        저가 = 0.0
                        고가 = 0.0
                    '''
                    저가 = df1['저가'][i]
                    고가 = df1['고가'][i]
                    
                    df_put.at[i, '저가'] = 저가

                    item = QTableWidgetItem("{0:.2f}".format(저가))
                    item.setTextAlignment(Qt.AlignCenter)

                    if i == ATM_INDEX - 1 or i == ATM_INDEX or i == ATM_INDEX + 1:
                        item.setBackground(QBrush(옅은회색))
                    else:
                        item.setBackground(QBrush(흰색))

                    item.setForeground(QBrush(검정색))

                    self.tableWidget_put.setItem(i, Option_column.저가.value, item)

                    df_put.at[i, '고가'] = 고가

                    item = QTableWidgetItem("{0:.2f}".format(고가))
                    item.setTextAlignment(Qt.AlignCenter)

                    if i == ATM_INDEX - 1 or i == ATM_INDEX or i == ATM_INDEX + 1:
                        item.setBackground(QBrush(옅은회색))
                    else:
                        item.setBackground(QBrush(흰색))

                    item.setForeground(QBrush(검정색))

                    self.tableWidget_put.setItem(i, Option_column.고가.value, item)
                    
                    if 시가 > 0 and df1['저가'][i] < df1['고가'][i]:
                        self.put_open_list.append(i)
                    else:
                        pass

                # Node 리스트 갱신
                call_시가 = df_call['시가'].values.tolist()
                call_시가_node_list = self.make_node_list(call_시가)

                call_피봇 = df_call['피봇'].values.tolist()
                call_피봇_node_list = self.make_node_list(call_피봇)
                
                call_저가 = df_call['저가'].values.tolist()
                call_저가_node_list = self.make_node_list(call_저가)

                call_고가 = df_call['고가'].values.tolist()
                call_고가_node_list = self.make_node_list(call_고가)
                
                put_시가 = df_put['시가'].values.tolist()
                put_시가_node_list = self.make_node_list(put_시가)

                put_피봇 = df_put['피봇'].values.tolist()
                put_피봇_node_list = self.make_node_list(put_피봇)
                
                put_저가 = df_put['저가'].values.tolist()
                put_저가_node_list = self.make_node_list(put_저가)

                put_고가 = df_put['고가'].values.tolist()
                put_고가_node_list = self.make_node_list(put_고가)

                print('t2835 call low =', call_저가_node_list)
                print('t2835 call high =', call_고가_node_list)
                print('t2835 put low =', put_저가_node_list)
                print('t2835 put high =', put_고가_node_list)
                
                self.opt_high_low_list_update()

                if True:
                    
                    txt = '[{0:02d}:{1:02d}:{2:02d}] high low list in t2835 refresh = {3}\r'.format(dt.hour, dt.minute, dt.second, high_low_list)
                    print(txt)

                    for i in range(option_pairs_count):
                        '''
                        if df['저가'][i] < df['고가'][i]:
                            저가 = df['저가'][i]
                            고가 = df['고가'][i]
                        else:
                            저가 = 0.0
                            고가 = 0.0
                        '''
                        저가 = df['저가'][i]
                        고가 = df['고가'][i]

                        df_call.at[i, '저가'] = 저가
                        빈도수 = moving_list.count(저가)                    

                        if SEARCH_MOVING_NODE_START_VALUE < 저가 < SEARCH_MOVING_NODE_END_VALUE:
                            item_txt = '{0:.2f}'.format(저가) + '\n(' + repr(빈도수) + ')'
                            item = QTableWidgetItem(item_txt)
                        else:
                            item = QTableWidgetItem("{0:.2f}".format(저가))

                        item.setTextAlignment(Qt.AlignCenter)

                        if i == ATM_INDEX - 1 or i == ATM_INDEX or i == ATM_INDEX + 1:
                            item.setBackground(QBrush(옅은회색))
                        else:
                            item.setBackground(QBrush(흰색))

                        item.setForeground(QBrush(검정색))

                        self.tableWidget_call.setItem(i, Option_column.저가.value, item)

                        df_call.at[i, '고가'] = 고가
                        빈도수 = moving_list.count(고가)

                        if SEARCH_MOVING_NODE_START_VALUE < 고가 < SEARCH_MOVING_NODE_END_VALUE:
                            item_txt = '{0:.2f}'.format(고가) + '\n(' + repr(빈도수) + ')'
                            item = QTableWidgetItem(item_txt)
                        else:
                            item = QTableWidgetItem("{0:.2f}".format(고가))

                        item.setTextAlignment(Qt.AlignCenter)

                        if i == ATM_INDEX - 1 or i == ATM_INDEX or i == ATM_INDEX + 1:
                            item.setBackground(QBrush(옅은회색))
                        else:
                            item.setBackground(QBrush(흰색))

                        item.setForeground(QBrush(검정색))

                        self.tableWidget_call.setItem(i, Option_column.고가.value, item)
                        '''
                        if df1['저가'][i] < df1['고가'][i]:
                            저가 = df1['저가'][i]
                            고가 = df1['고가'][i]
                        else:
                            저가 = 0.0
                            고가 = 0.0
                        '''
                        저가 = df1['저가'][i]
                        고가 = df1['고가'][i]

                        df_put.at[i, '저가'] = 저가
                        빈도수 = moving_list.count(저가)                    

                        if SEARCH_MOVING_NODE_START_VALUE < 저가 < SEARCH_MOVING_NODE_END_VALUE:
                            item_txt = '{0:.2f}'.format(저가) + '\n(' + repr(빈도수) + ')'
                            item = QTableWidgetItem(item_txt)
                        else:
                            item = QTableWidgetItem("{0:.2f}".format(저가))

                        item.setTextAlignment(Qt.AlignCenter)

                        if i == ATM_INDEX - 1 or i == ATM_INDEX or i == ATM_INDEX + 1:
                            item.setBackground(QBrush(옅은회색))
                        else:
                            item.setBackground(QBrush(흰색))

                        item.setForeground(QBrush(검정색))

                        self.tableWidget_put.setItem(i, Option_column.저가.value, item)

                        df_put.at[i, '고가'] = 고가
                        빈도수 = moving_list.count(고가)                    

                        if SEARCH_MOVING_NODE_START_VALUE < 고가 < SEARCH_MOVING_NODE_END_VALUE:
                            item_txt = '{0:.2f}'.format(고가) + '\n(' + repr(빈도수) + ')'
                            item = QTableWidgetItem(item_txt)
                        else:
                            item = QTableWidgetItem("{0:.2f}".format(고가))

                        item.setTextAlignment(Qt.AlignCenter)

                        if i == ATM_INDEX - 1 or i == ATM_INDEX or i == ATM_INDEX + 1:
                            item.setBackground(QBrush(옅은회색))
                        else:
                            item.setBackground(QBrush(흰색))

                        item.setForeground(QBrush(검정색))

                        self.tableWidget_put.setItem(i, Option_column.고가.value, item)
                else:
                    pass

            if ResizeRowsToContents:
                self.tableWidget_call.resizeRowsToContents()
            else:
                pass        
            self.tableWidget_call.resizeColumnsToContents()

            if ResizeRowsToContents:
                self.tableWidget_put.resizeRowsToContents()
            else:
                pass
            
            self.tableWidget_put.resizeColumnsToContents()

            # 야간 근월물 선물전광판 데이타 요청
            print('t2101 근월물 선물전광판 데이타 요청...\r')
            self.XQ_t2101.Query(종목코드=GMSHCODE)
            
            QTest.qWait(100)

            # 야간 차월물 선물전광판 데이타 요청
            print('t2101 차월물 선물전광판 데이타 요청...\r')
            self.XQ_t2101.Query(종목코드=CMSHCODE)
            
            QTest.qWait(100)

        elif szTrCode == 't8408':

            szTrCode, df = tickdata

            print('\r')
            print('[t8408 cme data]')
            print('\r')
            print(df)
            print('\r')

            temp = df['현재가'].values.tolist()
            temp.reverse()
            temp1 = copy.deepcopy(temp)

            CME_전일종가 = temp1[1::2]
            
            print('[CME_전일종가] = \r', CME_전일종가)
            print('\r')

            txt = '[{0:02d}:{1:02d}:{2:02d}] 야간선물 전일데이타 수신완료 !!!\r'.format(dt.hour, dt.minute, dt.second)
            self.textBrowser.append(txt)           

        elif szTrCode == 't8415':

            szTrCode, block, df = tickdata

            if block['단축코드'][0:3] == '101':

                pass
                
            elif block['단축코드'][0:3] == '201':

                for i in range(len(selected_call)):

                    if tickdata['단축코드'][5:8] == df_call.at[selected_call[i], '행사가']:

                        pass
                    else:
                        pass

            elif block['단축코드'][0:3] == '301':

                for i in range(len(selected_put)):

                    if tickdata['단축코드'][5:8] == df_put.at[selected_put[i], '행사가']:

                        pass
                    else:
                        pass
            else:
                pass

        elif szTrCode == 't8416':

            szTrCode, block, df = tickdata

            global new_actval_up_count, new_actval_down_count, actval_increased            
            global flag_t8416_call_done, flag_t8416_put_done

            self.label_main_time.setStyleSheet('background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:0.857143, y2:0.857955, stop:0 rgba(10, 242, 251, 255), stop:1 rgba(224, 6, 159, 255)); \
                                                color: black; font-family: Consolas; font-size: 9pt; font: Bold; border-style: solid; border-width: 1px; border-color: lawngreen; border-radius: 5px')
            
            txt = '{0:02d}:{1:02d}:{2:02d}'.format(dt.hour, dt.minute, dt.second)
            self.label_main_time.setText(txt)
            '''
            if new_actval_up_count > 0 or new_actval_down_count > 0:
                logger.debug('t8416 단축코드 = %s' % block['단축코드'])
                logger.debug('t8416 call count = %d' % t8416_call_count)
                logger.debug('t8416 call new_actval_up_count = %d' % new_actval_up_count)
                logger.debug('t8416 put count = %d' % t8416_put_count)
                logger.debug('t8416 call new_actval_down_count = %d' % new_actval_down_count)
            else:
                pass
            '''
            if block['단축코드'] == '':

                actval_increased = True

                if t8416_call_count < int(t8416_option_pairs_count / 2):

                    new_actval_up_count += 1

                    txt = '[{0:02d}:{1:02d}:{2:02d}] 새로운 상방 행사가 {3}개 추가됨 !!!\r'.format(dt.hour, dt.minute, dt.second, new_actval_up_count)
                    print(txt)

                    #playsound( "Resources/doorbell.wav" )
                    winsound.PlaySound('Resources/doorbell.wav', winsound.SND_FILENAME)                    

                    # 추가된 행사가 갯수 표시
                    item_txt = '(+' + '{0:d})'.format(new_actval_up_count) + '\n' + '{0:d}'.format(real_option_pairs_count)
                    item = QTableWidgetItem(item_txt)
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_call.setHorizontalHeaderItem(0, item)

                    if ResizeRowsToContents:
                        self.tableWidget_call.resizeRowsToContents()
                    else:
                        pass
                    self.tableWidget_call.resizeColumnsToContents()

                    item_txt = '(+' + '{0:d})'.format(new_actval_up_count) + '\n' + '{0:d}'.format(real_option_pairs_count)
                    item = QTableWidgetItem(item_txt)
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_put.setHorizontalHeaderItem(0, item)

                    if ResizeRowsToContents:
                        self.tableWidget_put.resizeRowsToContents()
                    else:
                        pass
                    self.tableWidget_put.resizeColumnsToContents()
                else:
                    
                    if not flag_t8416_put_done and new_actval_up_count == 0:
                        
                        new_actval_down_count = t8416_option_pairs_count - t8416_call_count

                        txt = '[{0:02d}:{1:02d}:{2:02d}] 새로운 하방 행사가 {3}개 추가됨 !!!\r'.format(dt.hour, dt.minute, dt.second, new_actval_down_count)
                        print(txt)

                        #playsound( "Resources/doorbell.wav" )  
                        winsound.PlaySound('Resources/doorbell.wav', winsound.SND_FILENAME)

                        # 추가된 행사가 갯수 표시
                        item_txt =  '{0:d}'.format(real_option_pairs_count) + '\n' + '(+' + '{0:d})'.format(new_actval_down_count)
                        item = QTableWidgetItem(item_txt)
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_call.setHorizontalHeaderItem(0, item)

                        if ResizeRowsToContents:
                            self.tableWidget_call.resizeRowsToContents()
                        else:
                            pass
                        self.tableWidget_call.resizeColumnsToContents()

                        item_txt = '{0:d}'.format(real_option_pairs_count) + '\n' + '(+' + '{0:d})'.format(new_actval_down_count)
                        item = QTableWidgetItem(item_txt)
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_put.setHorizontalHeaderItem(0, item) 

                        if ResizeRowsToContents:
                            self.tableWidget_put.resizeRowsToContents()
                        else:
                            pass                   
                        self.tableWidget_put.resizeColumnsToContents()                 

                        if t8416_call_count == t8416_option_pairs_count - new_actval_down_count:

                            call_기준가 = df_call['기준가'].values.tolist()
                            call_월저 = df_call['월저'].values.tolist()
                            call_월고 = df_call['월고'].values.tolist()
                            call_전저 = df_call['전저'].values.tolist()
                            call_전고 = df_call['전고'].values.tolist()
                            call_종가 = df_call['종가'].values.tolist()
                            call_피봇 = df_call['피봇'].values.tolist()
                            call_시가 = df_call['시가'].values.tolist()
                            call_저가 = df_call['저가'].values.tolist()
                            call_고가 = df_call['고가'].values.tolist()

                            call_기준가_node_list = self.make_node_list(call_기준가)
                            call_월저_node_list = self.make_node_list(call_월저)
                            call_월고_node_list = self.make_node_list(call_월고)
                            call_전저_node_list = self.make_node_list(call_전저)
                            call_전고_node_list = self.make_node_list(call_전고)
                            call_종가_node_list = self.make_node_list(call_종가)
                            call_피봇_node_list = self.make_node_list(call_피봇)
                            call_시가_node_list = self.make_node_list(call_시가)
                            call_저가_node_list = self.make_node_list(call_저가)
                            call_고가_node_list = self.make_node_list(call_고가)

                            txt = '[{0:02d}:{1:02d}:{2:02d}] Call 전체 행사가 수신완료 !!!\r'.format(dt.hour, dt.minute, dt.second)
                            self.textBrowser.append(txt)
                            print(txt)

                            flag_t8416_call_done = True
                            print('flag_t8416_call_done =', flag_t8416_call_done)                           

                            call_positionCell = self.tableWidget_call.item(ATM_INDEX + 9, 1)
                            self.tableWidget_call.scrollToItem(call_positionCell)

                            print('t8416 put 요청시작...')
                            QTest.qWait(1000)

                            # 10분내에 200회 전송제약으로 인해 콜, 풋 각각 99개씩 만 요청함
                            if option_pairs_count > 99:
                                t8416_option_pairs_count = 99
                            else:
                                t8416_option_pairs_count = option_pairs_count

                            for i in range(t8416_option_pairs_count):
                                t8416_put_count = i
                                self.t8416_opt_request(self.put_code[i])
                                self.t8416_put_event_loop.exec_()
                        else:
                            pass
                    else:
                        pass                
            
            elif block['단축코드'][0:3] == '101':

                df_fut_t8416 = df           

                for i in range(len(df)):

                    noise_ratio = 1 - (abs(df['시가'][i] - df['종가'][i]) / (df['고가'][i] - df['저가'][i]))
                    df_fut_t8416.at[i, 'noise_ratio'] = noise_ratio

                fut_avg_noise_ratio = df_fut_t8416['noise_ratio'].sum() / len(df_fut_t8416)
                k_value = (근월물_선물_전고 - 근월물_선물_전저) * fut_avg_noise_ratio

                txt = '[{0:02d}:{1:02d}:{2:02d}] 변동성지수 Noise Ratio 평균 = {3:.2f}, K value = {4:.2f}\r'.format(dt.hour, dt.minute, dt.second, fut_avg_noise_ratio, k_value)
                self.textBrowser.append(txt)
                self.parent.textBrowser.append(txt)
                print(txt)
                
                item = QTableWidgetItem("{0}\n({1:.2f})".format('근월물', k_value))
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(검정색))
                item.setForeground(QBrush(녹색))
                self.tableWidget_fut.setItem(1, 0, item)

                self.tableWidget_fut.resizeColumnsToContents()

            elif block['단축코드'][0:3] == '201':

                if new_actval_up_count > 0:
                    txt = '[{0:02d}:{1:02d}:{2:02d}] 새로운 상방 행사가 {3}개 추가됨 !!!\r'.format(dt.hour, dt.minute, dt.second, new_actval_up_count)
                    print(txt)
                else:
                    pass

                if today_txt != MONTH_FIRSTDAY:

                    df_call.at[t8416_call_count, '기준가'] = df['저가'][0]

                    if df['저가'][0] >= 100:

                        item = QTableWidgetItem("{0:0.1f}".format(df['저가'][0]))
                        item.setTextAlignment(Qt.AlignCenter)
                        item.setBackground(QBrush(검정색))
                        item.setForeground(QBrush(흰색))
                        self.tableWidget_call.setItem(t8416_call_count, Option_column.기준가.value, item)
                    else:
                        item = QTableWidgetItem("{0:.2f}".format(df['저가'][0]))
                        item.setTextAlignment(Qt.AlignCenter)
                        item.setBackground(QBrush(검정색))
                        item.setForeground(QBrush(흰색))
                        self.tableWidget_call.setItem(t8416_call_count, Option_column.기준가.value, item)

                    df_call.at[t8416_call_count, '월저'] = min(df['저가'])

                    if min(df['저가']) >= 100:

                        item = QTableWidgetItem("{0:0.1f}".format(min(df['저가'])))
                        item.setTextAlignment(Qt.AlignCenter)
                        item.setBackground(QBrush(검정색))
                        item.setForeground(QBrush(흰색))
                        self.tableWidget_call.setItem(t8416_call_count, Option_column.월저.value, item)
                    else:
                        item = QTableWidgetItem("{0:.2f}".format(min(df['저가'])))
                        item.setTextAlignment(Qt.AlignCenter)
                        item.setBackground(QBrush(검정색))
                        item.setForeground(QBrush(흰색))
                        self.tableWidget_call.setItem(t8416_call_count, Option_column.월저.value, item)

                    df_call.at[t8416_call_count, '월고'] = max(df['고가'])

                    if max(df['고가']) >= 100:

                        item = QTableWidgetItem("{0:0.1f}".format(max(df['고가'])))
                        item.setTextAlignment(Qt.AlignCenter)
                        item.setBackground(QBrush(검정색))
                        item.setForeground(QBrush(흰색))
                        self.tableWidget_call.setItem(t8416_call_count, Option_column.월고.value, item)
                    else:
                        item = QTableWidgetItem("{0:.2f}".format(max(df['고가'])))
                        item.setTextAlignment(Qt.AlignCenter)
                        item.setBackground(QBrush(검정색))
                        item.setForeground(QBrush(흰색))
                        self.tableWidget_call.setItem(t8416_call_count, Option_column.월고.value, item)
                else:
                    pass

                df_call.at[t8416_call_count, '전저'] = block['전일저가']

                if block['전일저가'] >= 100:

                    item = QTableWidgetItem("{0:0.1f}".format(block['전일저가']))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(검정색))
                    item.setForeground(QBrush(흰색))
                    self.tableWidget_call.setItem(t8416_call_count, Option_column.전저.value, item)
                else:
                    item = QTableWidgetItem("{0:.2f}".format(block['전일저가']))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(검정색))
                    item.setForeground(QBrush(흰색))
                    self.tableWidget_call.setItem(t8416_call_count, Option_column.전저.value, item)

                df_call.at[t8416_call_count, '전고'] = block['전일고가']

                if block['전일고가'] >= 100:

                    item = QTableWidgetItem("{0:0.1f}".format(block['전일고가']))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(검정색))
                    item.setForeground(QBrush(흰색))
                    self.tableWidget_call.setItem(t8416_call_count, Option_column.전고.value, item)
                else:
                    item = QTableWidgetItem("{0:.2f}".format(block['전일고가']))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(검정색))
                    item.setForeground(QBrush(흰색))
                    self.tableWidget_call.setItem(t8416_call_count, Option_column.전고.value, item)
                
                if block['전일종가'] != df_call.at[t8416_call_count, '종가']:

                    df_call.at[t8416_call_count, '종가'] = block['전일종가']

                    if block['전일종가'] >= 100:

                        item = QTableWidgetItem("{0:0.1f}".format(block['전일종가']))
                        item.setTextAlignment(Qt.AlignCenter)
                        item.setBackground(QBrush(검정색))
                        item.setForeground(QBrush(흰색))
                        self.tableWidget_call.setItem(t8416_call_count, Option_column.종가.value, item)
                    else:
                        item = QTableWidgetItem("{0:.2f}".format(block['전일종가']))
                        item.setTextAlignment(Qt.AlignCenter)
                        item.setBackground(QBrush(검정색))
                        item.setForeground(QBrush(흰색))
                        self.tableWidget_call.setItem(t8416_call_count, Option_column.종가.value, item)

                    if t8416_call_count < option_pairs_count:
                        df_call_graph[t8416_call_count].at[0, 'Price'] = block['전일종가']
                    else:
                        pass
                else:
                    pass                

                if not pre_start:

                    전저 = df_call.at[t8416_call_count, '전저']
                    전고 = df_call.at[t8416_call_count, '전고']
                    종가 = df_call.at[t8416_call_count, '종가']
                    시가 = df_call.at[t8416_call_count, '시가']
                    저가 = df_call.at[t8416_call_count, '저가']
                    고가 = df_call.at[t8416_call_count, '고가']
                    현재가 = df_call.at[t8416_call_count, '현재가']

                    if 시가 > 0: 

                        피봇 = calc_pivot(전저, 전고, 종가, 시가, 2)
                        df_call.at[t8416_call_count, '피봇'] = 피봇

                        item = QTableWidgetItem("{0:.2f}".format(피봇))
                        item.setTextAlignment(Qt.AlignCenter)
                        item.setBackground(QBrush(검정색))
                        item.setForeground(QBrush(흰색))
                        self.tableWidget_call.setItem(t8416_call_count, Option_column.피봇.value, item)

                        시가갭 = 시가 - 종가
                        df_call.at[t8416_call_count, '시가갭'] = 시가갭

                        if 종가 > 0:

                            gap_percent = int((시가 / 종가 - 1) * 100)

                            item = QTableWidgetItem("{0:.2f}\n({1}%)".format(시가갭, gap_percent))
                            item.setTextAlignment(Qt.AlignCenter)
                            item.setBackground(QBrush(검정색))
                            item.setForeground(QBrush(흰색))
                            self.tableWidget_call.setItem(t8416_call_count, Option_column.시가갭.value, item)
                        else:
                            pass

                        대비 = 현재가 - 시가
                        df_call.at[t8416_call_count, '대비'] = 대비

                        item = QTableWidgetItem("{0:.2f}".format(대비))
                        item.setTextAlignment(Qt.AlignCenter)
                        item.setBackground(QBrush(검정색))
                        item.setForeground(QBrush(흰색))
                        self.tableWidget_call.setItem(t8416_call_count, Option_column.대비.value, item)

                        진폭 = 고가 - 저가
                        df_call.at[t8416_call_count, '진폭'] = 진폭

                        item = QTableWidgetItem("{0:.2f}".format(진폭))
                        item.setTextAlignment(Qt.AlignCenter)
                        item.setBackground(QBrush(검정색))
                        item.setForeground(QBrush(흰색))
                        self.tableWidget_call.setItem(t8416_call_count, Option_column.진폭.value, item)
                    else:
                        pass
                else:
                    pass

                txt = '[{0:02d}:{1:02d}:{2:02d}] Call 행사가 {3}개중 {4}개를 수신했습니다.\r'.format(dt.hour, dt.minute, dt.second, option_pairs_count, t8416_call_count + 1)

                self.textBrowser.append(txt)
                print(txt)
                print('======================================================================================================================================================================\r')

                if flag_t8416_rerequest:
                    count = t8416_option_pairs_count 
                else:
                    count = option_pairs_count

                if flag_t8416_re_request_start:
                    count = option_pairs_count
                else:
                    pass
                
                # to be checked !!!
                if t8416_call_count == count - 1:

                    call_기준가 = df_call['기준가'].values.tolist()
                    call_월저 = df_call['월저'].values.tolist()
                    call_월고 = df_call['월고'].values.tolist()
                    call_전저 = df_call['전저'].values.tolist()
                    call_전고 = df_call['전고'].values.tolist()
                    call_종가 = df_call['종가'].values.tolist()
                    call_피봇 = df_call['피봇'].values.tolist()
                    call_시가 = df_call['시가'].values.tolist()
                    call_저가 = df_call['저가'].values.tolist()
                    call_고가 = df_call['고가'].values.tolist()

                    call_기준가_node_list = self.make_node_list(call_기준가)
                    call_월저_node_list = self.make_node_list(call_월저)
                    call_월고_node_list = self.make_node_list(call_월고)
                    call_전저_node_list = self.make_node_list(call_전저)
                    call_전고_node_list = self.make_node_list(call_전고)
                    call_종가_node_list = self.make_node_list(call_종가)
                    call_피봇_node_list = self.make_node_list(call_피봇)
                    call_시가_node_list = self.make_node_list(call_시가)
                    call_저가_node_list = self.make_node_list(call_저가)
                    call_고가_node_list = self.make_node_list(call_고가)

                    print('======================================================================================================================================================================\r')
                    txt = '[{0:02d}:{1:02d}:{2:02d}] Call 전체 행사가 수신완료 !!!\r'.format(dt.hour, dt.minute, dt.second)
                    self.textBrowser.append(txt)
                    print(txt)
                    print('======================================================================================================================================================================\r')
                        
                    flag_t8416_call_done = True
                    print('flag_t8416_call_done =', flag_t8416_call_done) 

                    call_positionCell = self.tableWidget_call.item(ATM_INDEX + 9, 1)
                    self.tableWidget_call.scrollToItem(call_positionCell)

                    if not flag_t8416_re_request_start:
                        print('* t8416 put 요청시작......')
                        QTest.qWait(1000)

                        # 10분내에 200회 전송제약으로 인해 콜, 풋 각각 99개씩 만 요청함
                        if option_pairs_count > 99:
                            t8416_option_pairs_count = 99
                        else:
                            t8416_option_pairs_count = option_pairs_count

                        for i in range(t8416_option_pairs_count):
                                t8416_put_count = i
                                self.t8416_opt_request(self.put_code[i])
                                self.t8416_put_event_loop.exec_()
                    else:
                        pass
                else:
                    pass
                
            elif block['단축코드'][0:3] == '301':

                if new_actval_down_count > 0:
                    txt = '[{0:02d}:{1:02d}:{2:02d}] 새로운 하방 행사가 {3}개 추가됨 !!!\r'.format(dt.hour, dt.minute, dt.second, new_actval_down_count)
                    print(txt)
                else:
                    pass

                if today_txt != MONTH_FIRSTDAY:

                    df_put.at[t8416_put_count, '기준가'] = df['저가'][0]

                    if df['저가'][0] >= 100:

                        item = QTableWidgetItem("{0:0.1f}".format(df['저가'][0]))
                        item.setTextAlignment(Qt.AlignCenter)
                        item.setBackground(QBrush(검정색))
                        item.setForeground(QBrush(흰색))
                        self.tableWidget_put.setItem(t8416_put_count, Option_column.기준가.value, item)
                    else:
                        item = QTableWidgetItem("{0:.2f}".format(df['저가'][0]))
                        item.setTextAlignment(Qt.AlignCenter)
                        item.setBackground(QBrush(검정색))
                        item.setForeground(QBrush(흰색))
                        self.tableWidget_put.setItem(t8416_put_count, Option_column.기준가.value, item)                    

                    df_put.at[t8416_put_count, '월저'] = min(df['저가'])

                    if min(df['저가']) >= 100:
                        
                        item = QTableWidgetItem("{0:0.1f}".format(min(df['저가'])))
                        item.setTextAlignment(Qt.AlignCenter)
                        item.setBackground(QBrush(검정색))
                        item.setForeground(QBrush(흰색))
                        self.tableWidget_put.setItem(t8416_put_count, Option_column.월저.value, item)
                    else:
                        item = QTableWidgetItem("{0:.2f}".format(min(df['저가'])))
                        item.setTextAlignment(Qt.AlignCenter)
                        item.setBackground(QBrush(검정색))
                        item.setForeground(QBrush(흰색))
                        self.tableWidget_put.setItem(t8416_put_count, Option_column.월저.value, item)

                    df_put.at[t8416_put_count, '월고'] = max(df['고가'])

                    if max(df['고가']) >= 100:

                        item = QTableWidgetItem("{0:0.1f}".format(max(df['고가'])))
                        item.setTextAlignment(Qt.AlignCenter)
                        item.setBackground(QBrush(검정색))
                        item.setForeground(QBrush(흰색))
                        self.tableWidget_put.setItem(t8416_put_count, Option_column.월고.value, item)
                    else:
                        item = QTableWidgetItem("{0:.2f}".format(max(df['고가'])))
                        item.setTextAlignment(Qt.AlignCenter)
                        item.setBackground(QBrush(검정색))
                        item.setForeground(QBrush(흰색))
                        self.tableWidget_put.setItem(t8416_put_count, Option_column.월고.value, item)
                else:
                    pass                

                df_put.at[t8416_put_count, '전저'] = block['전일저가']

                if block['전일저가'] >= 100:

                    item = QTableWidgetItem("{0:0.1f}".format(block['전일저가']))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(검정색))
                    item.setForeground(QBrush(흰색))
                    self.tableWidget_put.setItem(t8416_put_count, Option_column.전저.value, item)
                else:
                    item = QTableWidgetItem("{0:.2f}".format(block['전일저가']))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(검정색))
                    item.setForeground(QBrush(흰색))
                    self.tableWidget_put.setItem(t8416_put_count, Option_column.전저.value, item)

                df_put.at[t8416_put_count, '전고'] = block['전일고가']

                if block['전일고가'] >= 100:

                    item = QTableWidgetItem("{0:0.1f}".format(block['전일고가']))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(검정색))
                    item.setForeground(QBrush(흰색))
                    self.tableWidget_put.setItem(t8416_put_count, Option_column.전고.value, item)
                else:
                    item = QTableWidgetItem("{0:.2f}".format(block['전일고가']))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(검정색))
                    item.setForeground(QBrush(흰색))
                    self.tableWidget_put.setItem(t8416_put_count, Option_column.전고.value, item)
                
                if block['전일종가'] != df_put.at[t8416_put_count, '종가']:

                    df_put.at[t8416_put_count, '종가'] = block['전일종가']

                    if block['전일종가'] >= 100:

                        item = QTableWidgetItem("{0:0.1f}".format(block['전일종가']))
                        item.setTextAlignment(Qt.AlignCenter)
                        item.setBackground(QBrush(검정색))
                        item.setForeground(QBrush(흰색))
                        self.tableWidget_put.setItem(t8416_put_count, Option_column.종가.value, item)
                    else:
                        item = QTableWidgetItem("{0:.2f}".format(block['전일종가']))
                        item.setTextAlignment(Qt.AlignCenter)
                        item.setBackground(QBrush(검정색))
                        item.setForeground(QBrush(흰색))
                        self.tableWidget_put.setItem(t8416_put_count, Option_column.종가.value, item)

                    if t8416_put_count < option_pairs_count:
                        df_put_graph[t8416_put_count].at[0, 'Price'] = block['전일종가']
                    else:
                        pass
                else:
                    pass                

                if not pre_start:

                    전저 = df_put.at[t8416_put_count, '전저']
                    전고 = df_put.at[t8416_put_count, '전고']
                    종가 = df_put.at[t8416_put_count, '종가']
                    시가 = df_put.at[t8416_put_count, '시가']
                    저가 = df_put.at[t8416_put_count, '저가']
                    고가 = df_put.at[t8416_put_count, '고가']
                    현재가 = df_put.at[t8416_put_count, '현재가']

                    if 시가 > 0:

                        피봇 = calc_pivot(전저, 전고, 종가, 시가, 2)
                        df_put.at[t8416_put_count, '피봇'] = 피봇

                        item = QTableWidgetItem("{0:.2f}".format(피봇))
                        item.setTextAlignment(Qt.AlignCenter)
                        item.setBackground(QBrush(검정색))
                        item.setForeground(QBrush(흰색))
                        self.tableWidget_put.setItem(t8416_put_count, Option_column.피봇.value, item)

                        시가갭 = 시가 - 종가
                        df_put.at[t8416_put_count, '시가갭'] = 시가갭

                        if 종가 > 0:

                            gap_percent = int((시가 / 종가 - 1) * 100)

                            item = QTableWidgetItem("{0:.2f}\n({1}%)".format(시가갭, gap_percent))
                            item.setTextAlignment(Qt.AlignCenter)
                            item.setBackground(QBrush(검정색))
                            item.setForeground(QBrush(흰색))
                            self.tableWidget_put.setItem(t8416_put_count, Option_column.시가갭.value, item)
                        else:
                            pass

                        대비 = 현재가 - 시가
                        df_put.at[t8416_put_count, '대비'] = 대비

                        item = QTableWidgetItem("{0:.2f}".format(대비))
                        item.setTextAlignment(Qt.AlignCenter)
                        item.setBackground(QBrush(검정색))
                        item.setForeground(QBrush(흰색))
                        self.tableWidget_put.setItem(t8416_put_count, Option_column.대비.value, item)

                        진폭 = 고가 - 저가
                        df_put.at[t8416_put_count, '진폭'] = 진폭

                        item = QTableWidgetItem("{0:.2f}".format(진폭))
                        item.setTextAlignment(Qt.AlignCenter)
                        item.setBackground(QBrush(검정색))
                        item.setForeground(QBrush(흰색))
                        self.tableWidget_put.setItem(t8416_put_count, Option_column.진폭.value, item)
                    else:
                        pass
                else:
                    pass

                txt = '[{0:02d}:{1:02d}:{2:02d}] Put 행사가 {3}개중 {4}개를 수신했습니다.\r'.format(dt.hour, dt.minute, dt.second, option_pairs_count, t8416_put_count + 1)
                self.textBrowser.append(txt)
                print(txt)
                print('======================================================================================================================================================================\r')                

                if flag_t8416_rerequest:
                    count = t8416_option_pairs_count 
                else:
                    count = option_pairs_count

                if flag_t8416_re_request_start:
                    count = option_pairs_count
                else:
                    pass

                #print('t8416 put count =', t8416_put_count, count)

                if t8416_put_count == (count - 1) - new_actval_down_count:
                    
                    print('======================================================================================================================================================================\r')
                    txt = '[{0:02d}:{1:02d}:{2:02d}] Put 전체 행사가 수신완료 !!!\r'.format(dt.hour, dt.minute, dt.second)
                    self.textBrowser.append(txt)
                    print(txt)
                    print('======================================================================================================================================================================\r')

                    global flag_t8416_data_receive_done

                    flag_t8416_data_receive_done = True

                    if new_actval_up_count > 0 and flag_tts:
                        txt = '새로운 상방 행사가가 {0}개 추가되었습니다.'.format(new_actval_up_count)
                        self.parent.speaker.setText(txt)
                        QTest.qWait(1500)
                    else:
                        pass

                    if new_actval_down_count > 0 and flag_tts:
                        txt = '새로운 하방 행사가가 {0}개 추가되었습니다.'.format(new_actval_down_count)
                        self.parent.speaker.setText(txt)
                        QTest.qWait(1500)
                    else:
                        pass

                    if flag_t8416_rerequest:

                        global schedule_hour, schedule_min, schedule_sec

                        t8416_loop_finish_time = dt.hour * 3600 + dt.minute * 60 + dt.second

                        schedule_time = t8416_loop_finish_time + 10 * 60

                        schedule_hour = int(schedule_time / 3600)
                        schedule_min = int((schedule_time - schedule_hour * 3600) / 60)
                        schedule_sec = schedule_time - (schedule_hour * 3600 + schedule_min * 60)
                        
                        txt = '[{0:02d}:{1:02d}:{2:02d}] t8416 나머지 데이타를 {3}시 {4}분 {5}초에 재요청 합니다.\r'.format(dt.hour, dt.minute, dt.second, schedule_hour, schedule_min, schedule_sec)
                        self.parent.textBrowser.append(txt)
                        print(txt)

                        if flag_tts:
                            speak_txt = '나머지 데이타를 10분후에 요청합니다'
                            self.parent.speaker.setText(speak_txt)
                            QTest.qWait(1500)
                        else:
                            pass
                    else:
                        pass

                    print('======================================================================================================================================================================\r')

                    flag_t8416_put_done = True
                    print('flag_t8416_put_done =', flag_t8416_put_done)
                    '''
                    print('\r')
                    print('t8416 Call 전광판\r')
                    print(df_call)
                    print('\r')
                    print('t8416 Put 전광판\r')
                    print(df_put)
                    print('\r')
                    '''
                    put_기준가 = df_put['기준가'].values.tolist()
                    put_월저 = df_put['월저'].values.tolist()
                    put_월고 = df_put['월고'].values.tolist()
                    put_전저 = df_put['전저'].values.tolist()
                    put_전고 = df_put['전고'].values.tolist()
                    put_종가 = df_put['종가'].values.tolist()
                    put_피봇 = df_put['피봇'].values.tolist()
                    put_시가 = df_put['시가'].values.tolist()
                    put_저가 = df_put['저가'].values.tolist()
                    put_고가 = df_put['고가'].values.tolist()

                    put_기준가_node_list = self.make_node_list(put_기준가)
                    put_월저_node_list = self.make_node_list(put_월저)
                    put_월고_node_list = self.make_node_list(put_월고)
                    put_전저_node_list = self.make_node_list(put_전저)
                    put_전고_node_list = self.make_node_list(put_전고)
                    put_종가_node_list = self.make_node_list(put_종가)
                    put_피봇_node_list = self.make_node_list(put_피봇)
                    put_시가_node_list = self.make_node_list(put_시가)
                    put_저가_node_list = self.make_node_list(put_저가)
                    put_고가_node_list = self.make_node_list(put_고가)
                    
                    if ResizeRowsToContents:
                        self.tableWidget_put.resizeRowsToContents()
                    else:
                        pass
                    self.tableWidget_put.resizeColumnsToContents()
                                                
                    put_positionCell = self.tableWidget_put.item(ATM_INDEX + 20, 1)
                    self.tableWidget_put.scrollToItem(put_positionCell)
                    
                    if new_actval_up_count > 0:
                        txt = '[{0:02d}:{1:02d}:{2:02d}] 새로운 상방 행사가 {3}개 추가됨 !!!\r'.format(dt.hour, dt.minute, dt.second, new_actval_up_count)
                        self.textBrowser.append(txt)
                        print(txt)
                    else:
                        pass

                    if new_actval_down_count > 0:
                        txt = '[{0:02d}:{1:02d}:{2:02d}] 새로운 하방 행사가 {3}개 추가됨 !!!\r'.format(dt.hour, dt.minute, dt.second, new_actval_down_count)
                        self.textBrowser.append(txt)
                        print(txt)
                    else:
                        pass                                    
                    
                    txt = '[{0:02d}:{1:02d}:{2:02d}] 옵션 만기일은 {3}일 남았습니다.\r'.format(dt.hour, dt.minute, dt.second, 옵션잔존일)
                    self.textBrowser.append(txt)
                    print(txt)

                    #중심가 계산
                    CENTER_VAL_PLUS5 = round((df_call.at[ATM_INDEX - 5, '종가'] + df_put.at[ATM_INDEX - 5, '종가'])/2, 2)
                    CENTER_VAL_PLUS4 = round((df_call.at[ATM_INDEX - 4, '종가'] + df_put.at[ATM_INDEX - 4, '종가'])/2, 2)
                    CENTER_VAL_PLUS3 = round((df_call.at[ATM_INDEX - 3, '종가'] + df_put.at[ATM_INDEX - 3, '종가'])/2, 2)
                    CENTER_VAL_PLUS2 = round((df_call.at[ATM_INDEX - 2, '종가'] + df_put.at[ATM_INDEX - 2, '종가'])/2, 2)
                    CENTER_VAL_PLUS1 = round((df_call.at[ATM_INDEX - 1, '종가'] + df_put.at[ATM_INDEX - 1, '종가'])/2 , 2)
                    옵션_중심가 = round((df_call.at[ATM_INDEX, '종가'] + df_put.at[ATM_INDEX, '종가'])/2 , 2)
                    CENTER_VAL_MINUS1 = round((df_call.at[ATM_INDEX + 1, '종가'] + df_put.at[ATM_INDEX + 1, '종가'])/2 , 2)
                    CENTER_VAL_MINUS2 = round((df_call.at[ATM_INDEX + 2, '종가'] + df_put.at[ATM_INDEX + 2, '종가'])/2 , 2)
                    CENTER_VAL_MINUS3 = round((df_call.at[ATM_INDEX + 3, '종가'] + df_put.at[ATM_INDEX + 3, '종가'])/2 , 2)
                    CENTER_VAL_MINUS4 = round((df_call.at[ATM_INDEX + 4, '종가'] + df_put.at[ATM_INDEX + 4, '종가'])/2 , 2)
                    CENTER_VAL_MINUS5 = round((df_call.at[ATM_INDEX + 5, '종가'] + df_put.at[ATM_INDEX + 5, '종가'])/2 , 2)
                    
                    # 옵션 양합표시
                    atm_minus_5 = round((df_call.at[ATM_INDEX - 5, '현재가'] + df_put.at[ATM_INDEX - 5, '현재가']), 2)
                    atm_minus_4 = round((df_call.at[ATM_INDEX - 4, '현재가'] + df_put.at[ATM_INDEX - 4, '현재가']), 2)
                    atm_minus_3 = round((df_call.at[ATM_INDEX - 3, '현재가'] + df_put.at[ATM_INDEX - 3, '현재가']), 2)
                    atm_minus_2 = round((df_call.at[ATM_INDEX - 2, '현재가'] + df_put.at[ATM_INDEX - 2, '현재가']), 2)
                    atm_minus_1 = round((df_call.at[ATM_INDEX - 1, '현재가'] + df_put.at[ATM_INDEX - 1, '현재가']) , 2)
                    atm_zero_sum = round((df_call.at[ATM_INDEX, '현재가'] + df_put.at[ATM_INDEX, '현재가']) , 2)
                    atm_zero_cha = round((df_call.at[ATM_INDEX, '현재가'] - df_put.at[ATM_INDEX, '현재가']) , 2)
                    atm_plus_1 = round((df_call.at[ATM_INDEX + 1, '현재가'] + df_put.at[ATM_INDEX + 1, '현재가']) , 2)
                    atm_plus_2 = round((df_call.at[ATM_INDEX + 2, '현재가'] + df_put.at[ATM_INDEX + 2, '현재가']) , 2)
                    atm_plus_3 = round((df_call.at[ATM_INDEX + 3, '현재가'] + df_put.at[ATM_INDEX + 3, '현재가']) , 2)
                    atm_plus_4 = round((df_call.at[ATM_INDEX + 4, '현재가'] + df_put.at[ATM_INDEX + 4, '현재가']) , 2)
                    atm_plus_5 = round((df_call.at[ATM_INDEX + 5, '현재가'] + df_put.at[ATM_INDEX + 5, '현재가']) , 2)
                    
                    atm_list = []
                    atm_list.append(atm_minus_5)
                    atm_list.append(atm_minus_4)
                    atm_list.append(atm_minus_3)
                    atm_list.append(atm_minus_2)
                    atm_list.append(atm_minus_1)
                    atm_list.append(atm_zero_sum)
                    atm_list.append(atm_plus_1)
                    atm_list.append(atm_plus_2)
                    atm_list.append(atm_plus_3)
                    atm_list.append(atm_plus_4)
                    atm_list.append(atm_plus_5)   

                    min_index = atm_list.index(min(atm_list)) + ATM_INDEX - 5

                    # 콜에 중심가 표시
                    val = df_call.at[ATM_INDEX - 5, '기준가']
                    item = QTableWidgetItem("{0:.2f}\n({1})".format(val, CENTER_VAL_PLUS5))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(라임))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_call.setItem(ATM_INDEX - 5, Option_column.기준가.value, item) 

                    val = df_call.at[ATM_INDEX - 4, '기준가']
                    item = QTableWidgetItem("{0:.2f}\n({1})".format(val, CENTER_VAL_PLUS4))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(라임))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_call.setItem(ATM_INDEX - 4, Option_column.기준가.value, item) 

                    val = df_call.at[ATM_INDEX - 3, '기준가']
                    item = QTableWidgetItem("{0:.2f}\n({1})".format(val, CENTER_VAL_PLUS3))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(라임))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_call.setItem(ATM_INDEX - 3, Option_column.기준가.value, item) 

                    val = df_call.at[ATM_INDEX - 2, '기준가']
                    item = QTableWidgetItem("{0:.2f}\n({1})".format(val, CENTER_VAL_PLUS2))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(라임))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_call.setItem(ATM_INDEX - 2, Option_column.기준가.value, item)  

                    val = df_call.at[ATM_INDEX - 1, '기준가']
                    item = QTableWidgetItem("{0:.2f}\n({1})".format(val, CENTER_VAL_PLUS1))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(라임))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_call.setItem(ATM_INDEX - 1, Option_column.기준가.value, item)            

                    val = df_call.at[ATM_INDEX, '기준가']
                    item = QTableWidgetItem("{0:.2f}\n({1})".format(val, 옵션_중심가))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(노란색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_call.setItem(ATM_INDEX, Option_column.기준가.value, item)            

                    val = df_call.at[ATM_INDEX + 1, '기준가']
                    item = QTableWidgetItem("{0:.2f}\n({1})".format(val, CENTER_VAL_MINUS1))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(라임))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_call.setItem(ATM_INDEX + 1, Option_column.기준가.value, item)

                    val = df_call.at[ATM_INDEX + 2, '기준가']
                    item = QTableWidgetItem("{0:.2f}\n({1})".format(val, CENTER_VAL_MINUS2))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(라임))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_call.setItem(ATM_INDEX + 2, Option_column.기준가.value, item)

                    val = df_call.at[ATM_INDEX + 3, '기준가']
                    item = QTableWidgetItem("{0:.2f}\n({1})".format(val, CENTER_VAL_MINUS3))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(라임))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_call.setItem(ATM_INDEX + 3, Option_column.기준가.value, item)

                    val = df_call.at[ATM_INDEX + 4, '기준가']
                    item = QTableWidgetItem("{0:.2f}\n({1})".format(val, CENTER_VAL_MINUS4))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(라임))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_call.setItem(ATM_INDEX + 4, Option_column.기준가.value, item)

                    val = df_call.at[ATM_INDEX + 5, '기준가']
                    item = QTableWidgetItem("{0:.2f}\n({1})".format(val, CENTER_VAL_MINUS5))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(라임))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_call.setItem(ATM_INDEX + 5, Option_column.기준가.value, item)

                    # 풋 양합표시
                    val = df_put.at[ATM_INDEX - 5, '기준가']
                    item = QTableWidgetItem("{0:.2f}\n({1})".format(val, atm_minus_5))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(라임))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_put.setItem(ATM_INDEX - 5, Option_column.기준가.value, item)

                    val = df_put.at[ATM_INDEX - 4, '기준가']
                    item = QTableWidgetItem("{0:.2f}\n({1})".format(val, atm_minus_4))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(라임))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_put.setItem(ATM_INDEX - 4, Option_column.기준가.value, item)

                    val = df_put.at[ATM_INDEX - 3, '기준가']
                    item = QTableWidgetItem("{0:.2f}\n({1})".format(val, atm_minus_3))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(라임))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_put.setItem(ATM_INDEX - 3, Option_column.기준가.value, item)

                    val = df_put.at[ATM_INDEX - 2, '기준가']
                    item = QTableWidgetItem("{0:.2f}\n({1})".format(val, atm_minus_2))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(라임))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_put.setItem(ATM_INDEX - 2, Option_column.기준가.value, item)    

                    val = df_put.at[ATM_INDEX - 1, '기준가']
                    item = QTableWidgetItem("{0:.2f}\n({1})".format(val, atm_minus_1))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(라임))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_put.setItem(ATM_INDEX - 1, Option_column.기준가.value, item)            

                    val = df_put.at[ATM_INDEX, '기준가']
                    item = QTableWidgetItem("{0:.2f}\n({1})".format(val, atm_zero_sum))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(노란색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_put.setItem(ATM_INDEX, Option_column.기준가.value, item)            

                    val = df_put.at[ATM_INDEX + 1, '기준가']
                    item = QTableWidgetItem("{0:.2f}\n({1})".format(val, atm_plus_1))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(라임))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_put.setItem(ATM_INDEX + 1, Option_column.기준가.value, item)

                    val = df_put.at[ATM_INDEX + 2, '기준가']
                    item = QTableWidgetItem("{0:.2f}\n({1})".format(val, atm_plus_2))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(라임))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_put.setItem(ATM_INDEX + 2, Option_column.기준가.value, item)

                    val = df_put.at[ATM_INDEX + 3, '기준가']
                    item = QTableWidgetItem("{0:.2f}\n({1})".format(val, atm_plus_3))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(라임))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_put.setItem(ATM_INDEX + 3, Option_column.기준가.value, item)

                    val = df_put.at[ATM_INDEX + 4, '기준가']
                    item = QTableWidgetItem("{0:.2f}\n({1})".format(val, atm_plus_4))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(라임))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_put.setItem(ATM_INDEX + 4, Option_column.기준가.value, item)

                    val = df_put.at[ATM_INDEX + 5, '기준가']
                    item = QTableWidgetItem("{0:.2f}\n({1})".format(val, atm_plus_5))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(라임))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_put.setItem(ATM_INDEX + 5, Option_column.기준가.value, item)

                    if min_index != ATM_INDEX:
                        self.tableWidget_put.item(min_index, Option_column.기준가.value).setBackground(QBrush(검정색))
                        self.tableWidget_put.item(min_index, Option_column.기준가.value).setForeground(QBrush(노란색))
                    else:
                        pass
                    
                    if NightTime:                     

                        # EUREX 야간옵션 시세전광판
                        if TARGET_MONTH == 'CM':

                            if MANGI_YAGAN:
                                t2835_month_info = NEXT_MONTH
                            else:
                                t2835_month_info = CURRENT_MONTH

                            txt = '[{0:02d}:{1:02d}:{2:02d}] EUREX(t2835) 근월물 야간옵션 데이타를 조회합니다.\r'.format(dt.hour, dt.minute, dt.second)
                            self.textBrowser.append(txt)
                            print(txt)

                        elif TARGET_MONTH == 'NM':

                            if MANGI_YAGAN:
                                t2835_month_info = MONTH_AFTER_NEXT
                            else:
                                t2835_month_info = NEXT_MONTH

                            txt = '[{0:02d}:{1:02d}:{2:02d}] EUREX(t2835) 차월물 야간옵션 데이타를 조회합니다.\r'.format(dt.hour, dt.minute, dt.second)
                            self.textBrowser.append(txt)
                            print(txt)
                        else:
                            pass
                        
                        self.XQ_t2835.Query(월물=t2835_month_info)                        
                    else:
                            
                        수정거래량 = 0
                        수정미결 = 0
                        수정미결증감 = 0

                        for i in range(option_pairs_count):

                            df_call.at[i, '수정거래량'] = 수정거래량
                            df_put.at[i, '수정거래량'] = 수정거래량

                            temp = format(수정거래량, ',')

                            item = QTableWidgetItem(temp)
                            item.setTextAlignment(Qt.AlignCenter)
                            self.tableWidget_call.setItem(i, Option_column.VP.value, item)

                            item = QTableWidgetItem(temp)
                            item.setTextAlignment(Qt.AlignCenter)
                            self.tableWidget_put.setItem(i, Option_column.VP.value, item)

                            df_call.at[i, '수정미결'] = 수정미결
                            df_put.at[i, '수정미결'] = 수정미결

                            temp = format(수정미결, ',')

                            item = QTableWidgetItem(temp)
                            item.setTextAlignment(Qt.AlignCenter)
                            self.tableWidget_call.setItem(i, Option_column.OI.value, item)

                            item = QTableWidgetItem(temp)
                            item.setTextAlignment(Qt.AlignCenter)
                            self.tableWidget_put.setItem(i, Option_column.OI.value, item)

                            df_call.at[i, '수정미결증감'] = 수정미결증감
                            df_put.at[i, '수정미결증감'] = 수정미결증감

                            temp = format(수정미결증감, ',')

                            item = QTableWidgetItem(temp)
                            item.setTextAlignment(Qt.AlignCenter)
                            self.tableWidget_call.setItem(i, Option_column.OID.value, item)

                            item = QTableWidgetItem(temp)
                            item.setTextAlignment(Qt.AlignCenter)
                            self.tableWidget_put.setItem(i, Option_column.OID.value, item)                        
                        
                        if ResizeRowsToContents:
                            self.tableWidget_call.resizeRowsToContents()
                        else:
                            pass
                        self.tableWidget_call.resizeColumnsToContents()

                        if ResizeRowsToContents:
                            self.tableWidget_put.resizeRowsToContents()
                        else:
                            pass
                        self.tableWidget_put.resizeColumnsToContents()

                        if ResizeRowsToContents:
                            self.tableWidget_fut.resizeRowsToContents()
                        else:
                            pass
                        self.tableWidget_fut.resizeColumnsToContents()
                        
                        flag_score_board_start = True

                        txt = '[{0:02d}:{1:02d}:{2:02d}] Score Board Update 쓰레드가 시작됩니다...\r'.format(dt.hour, dt.minute, dt.second)
                        self.textBrowser.append(txt)

                        #self.screen_update_worker.start()

                        ui_start_time = dt.hour * 3600 + dt.minute * 60 + dt.second

                        self.flag_refresh = True

                        if flag_search_moving_node:
                            self.pushButton_start.setStyleSheet('QPushButton {background-color: lawngreen; color: black; font-family: Consolas; font-size: 10pt; font: Bold; border-style: solid; border-width: 1px; border-color: black; border-radius: 5px} \
                                                                QPushButton:hover {background-color: black; color: white} \
                                                                QPushButton:pressed {background-color: gold}') 
                        else:
                            self.pushButton_start.setStyleSheet('QPushButton {background-color: black; color: lawngreen; font-family: Consolas; font-size: 10pt; font: Bold; border-style: solid; border-width: 1px; border-color: black; border-radius: 5px} \
                                                                QPushButton:hover {background-color: black; color: white} \
                                                                QPushButton:pressed {background-color: gold}') 

                        self.pushButton_start.setText(' Refresh ')
                                        
                    # 실시간데이타 요청
                    if not self.parent.mp_mode:
                        self.request_realdata()
                    else:
                        pass                              
                else:
                    pass
            else:
                pass

        elif szTrCode == 't8432':

            szTrCode, df = tickdata

            근월물_선물코드 = df.at[0, '단축코드']
            차월물_선물코드 = df.at[1, '단축코드']
            차차월물_선물코드 = df.at[2, '단축코드']

            if MANGI_YAGAN:

                if current_month == 3 or current_month == 6 or current_month == 9 or current_month == 12:
                    GMSHCODE = 차월물_선물코드
                    CMSHCODE = 차차월물_선물코드
                else:
                    GMSHCODE = 근월물_선물코드
                    CMSHCODE = 차월물_선물코드
                    CCMSHCODE = 차차월물_선물코드
            else:
                GMSHCODE = 근월물_선물코드
                CMSHCODE = 차월물_선물코드
                CCMSHCODE = 차차월물_선물코드

            fut_code = GMSHCODE
            txt = '[{0:02d}:{1:02d}:{2:02d}] 근월물({3}) 선물 데이타를 조회합니다.\r'.format(dt.hour, dt.minute, dt.second, GMSHCODE)
            self.textBrowser.append(txt)
            print(txt)
            
            self.fut_realdata['전저'] = df.at[0, '전일저가']
            근월물_선물_전저 = df.at[0, '전일저가']

            item = QTableWidgetItem("{0:.2f}".format(df.at[0, '전일저가']))
            item.setTextAlignment(Qt.AlignCenter)
            self.tableWidget_fut.setItem(1, Futures_column.전저.value, item)

            self.fut_realdata['전고'] = df.at[0, '전일고가']
            근월물_선물_전고 = df.at[0, '전일고가']

            item = QTableWidgetItem("{0:.2f}".format(df.at[0, '전일고가']))
            item.setTextAlignment(Qt.AlignCenter)
            self.tableWidget_fut.setItem(1, Futures_column.전고.value, item)

            self.fut_realdata['종가'] = df.at[0, '전일종가']
            근월물_선물_종가 = df.at[0, '전일종가']

            item = QTableWidgetItem("{0:.2f}".format(df.at[0, '전일종가']))
            item.setTextAlignment(Qt.AlignCenter)
            self.tableWidget_fut.setItem(1, Futures_column.종가.value, item)
            
            txt = '[{0:02d}:{1:02d}:{2:02d}] 차월물({3}) 선물 데이타를 조회합니다.\r'.format(dt.hour, dt.minute, dt.second, CMSHCODE)
            self.textBrowser.append(txt)
            print(txt)

            #self.fut_realdata['전저'] = df.at[1, '전일저가']
            차월물_선물_전저 = df.at[1, '전일저가']

            item = QTableWidgetItem("{0:.2f}".format(df.at[1, '전일저가']))
            item.setTextAlignment(Qt.AlignCenter)
            self.tableWidget_fut.setItem(0, Futures_column.전저.value, item)

            #self.fut_realdata['전고'] = df.at[1, '전일고가']
            차월물_선물_전고 = df.at[1, '전일고가']

            item = QTableWidgetItem("{0:.2f}".format(df.at[1, '전일고가']))
            item.setTextAlignment(Qt.AlignCenter)
            self.tableWidget_fut.setItem(0, Futures_column.전고.value, item)

            #self.fut_realdata['종가'] = df.at[1, '전일종가']
            차월물_선물_종가 = df.at[1, '전일종가']

            item = QTableWidgetItem("{0:.2f}".format(df.at[1, '전일종가']))
            item.setTextAlignment(Qt.AlignCenter)
            self.tableWidget_fut.setItem(0, Futures_column.종가.value, item)

            if os.path.isfile('daytime.txt'):

                item = QTableWidgetItem("{0:.2f}".format(KP200_전일종가))
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(흰색))
                item.setForeground(QBrush(검정색))
                self.tableWidget_fut.setItem(2, Futures_column.종가.value, item)

                if DayTime:
                    item = QTableWidgetItem("{0:.2f}".format(KP200_전저))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_fut.setItem(2, Futures_column.전저.value, item)

                    item = QTableWidgetItem("{0:.2f}".format(KP200_전고))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_fut.setItem(2, Futures_column.전고.value, item)
                else:
                    item = QTableWidgetItem("{0:.2f}".format(KP200_전일시가))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_fut.setItem(2, Futures_column.시가.value, item)

                    item = QTableWidgetItem("{0:.2f}".format(KP200_전저))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_fut.setItem(2, Futures_column.저가.value, item)

                    item = QTableWidgetItem("{0:.2f}".format(KP200_전고))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_fut.setItem(2, Futures_column.고가.value, item)

                    item = QTableWidgetItem("{0:.2f}".format(KP200_Day_종가))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_fut.setItem(2, Futures_column.현재가.value, item)
            else:
                pass            

            if ResizeRowsToContents:
                self.tableWidget_fut.resizeRowsToContents()
            else:
                pass
            self.tableWidget_fut.resizeColumnsToContents()

        elif szTrCode == 't8433':            

            szTrCode, df = tickdata
            
            global df_cm_call, df_cm_put, df_nm_call, df_nm_put
            global flag_t8433_response_ok

            first_cm_call = False
            first_cm_put = False
            first_nm_call = False
            first_nm_put = False

            for i in range(len(df)):

                if df['종목명'][i][2:6] == CURRENT_MONTH[2:6] and df['종목명'][i][0] == 'C':                

                    CM_CALL_CODE.append(df['단축코드'][i])

                    if not first_cm_call:
                        first_cm_call = True
                        cm_call_count = i
                    else:
                        pass

                    df_cm_call.at[i - cm_call_count, '종목명'] = df['종목명'][i]
                    df_cm_call.at[i - cm_call_count, '단축코드'] = df['단축코드'][i]
                    df_cm_call.at[i - cm_call_count, '전일종가'] = df['전일종가'][i]
                    df_cm_call.at[i - cm_call_count, '전일고가'] = df['전일고가'][i]
                    df_cm_call.at[i - cm_call_count, '전일저가'] = df['전일저가'][i]                    

                elif df['종목명'][i][2:6] == CURRENT_MONTH[2:6] and df['종목명'][i][0] == 'P': 

                    CM_PUT_CODE.append(df['단축코드'][i])

                    if not first_cm_put:
                        first_cm_put = True
                        cm_put_count = i
                    else:
                        pass

                    df_cm_put.at[i - cm_put_count, '종목명'] = df['종목명'][i]
                    df_cm_put.at[i - cm_put_count, '단축코드'] = df['단축코드'][i]
                    df_cm_put.at[i - cm_put_count, '전일종가'] = df['전일종가'][i]
                    df_cm_put.at[i - cm_put_count, '전일고가'] = df['전일고가'][i]
                    df_cm_put.at[i - cm_put_count, '전일저가'] = df['전일저가'][i]

                elif df['종목명'][i][2:6] == NEXT_MONTH[2:6] and df['종목명'][i][0] == 'C':                

                    NM_CALL_CODE.append(df['단축코드'][i])

                    if not first_nm_call:
                        first_nm_call = True
                        nm_call_count = i
                    else:
                        pass

                    df_nm_call.at[i - nm_call_count, '종목명'] = df['종목명'][i]
                    df_nm_call.at[i - nm_call_count, '단축코드'] = df['단축코드'][i]
                    df_nm_call.at[i - nm_call_count, '전일종가'] = df['전일종가'][i]
                    df_nm_call.at[i - nm_call_count, '전일고가'] = df['전일고가'][i]
                    df_nm_call.at[i - nm_call_count, '전일저가'] = df['전일저가'][i]

                elif df['종목명'][i][2:6] == NEXT_MONTH[2:6] and df['종목명'][i][0] == 'P': 

                    NM_PUT_CODE.append(df['단축코드'][i])

                    if not first_nm_put:
                        first_nm_put = True
                        nm_put_count = i
                    else:
                        pass

                    df_nm_put.at[i - nm_put_count, '종목명'] = df['종목명'][i]
                    df_nm_put.at[i - nm_put_count, '단축코드'] = df['단축코드'][i]
                    df_nm_put.at[i - nm_put_count, '전일종가'] = df['전일종가'][i]
                    df_nm_put.at[i - nm_put_count, '전일고가'] = df['전일고가'][i]
                    df_nm_put.at[i - nm_put_count, '전일저가'] = df['전일저가'][i]
                else:
                    pass

            CM_CALL_CODE.reverse()
            CM_PUT_CODE.reverse()
            NM_CALL_CODE.reverse()
            NM_PUT_CODE.reverse()

            CM_OPT_LENGTH = len(CM_CALL_CODE)
            NM_OPT_LENGTH = len(NM_CALL_CODE)

            CM_OPTCODE = CM_CALL_CODE[0][3:5]
            NM_OPTCODE = NM_CALL_CODE[0][3:5]
            
            txt = '[{0:02d}:{1:02d}:{2:02d}] 근월물({3}) 옵션갯수 = {4}\r'.format(dt.hour, dt.minute, dt.second, CM_OPTCODE, CM_OPT_LENGTH)
            self.textBrowser.append(txt)
            print(txt)

            txt = '[{0:02d}:{1:02d}:{2:02d}] 차월물({3}) 옵션갯수 = {4}\r'.format(dt.hour, dt.minute, dt.second, NM_OPTCODE, NM_OPT_LENGTH)
            self.textBrowser.append(txt)
            print(txt)

            if 0:
                txt = '근월물 옵션갯수는 콜 {0}개, 풋 {1}개, 차월물 옵션갯수는 콜 {2}개, 풋 {3}개 입니다.'.format(CM_OPT_LENGTH, CM_OPT_LENGTH, NM_OPT_LENGTH, NM_OPT_LENGTH)
                self.parent.speaker.setText(txt)
            else:
                pass

            # 그래프를 위한 데이타프레임 생성
            if NightTime:
                timespan = yagan_timespan + BASE_LINE_PERIOD
            else:
                timespan = jugan_timespan + BASE_LINE_PERIOD

            if TARGET_MONTH == 'CM':
                option_pairs_count = CM_OPT_LENGTH
            elif TARGET_MONTH == 'NM':
                option_pairs_count = NM_OPT_LENGTH

            if MANGI_YAGAN:
                option_pairs_count = NM_OPT_LENGTH
            else:
                pass
            
            for i in range(option_pairs_count):

                self.opt_total_actval_list.append(i)

                df_call_graph[i] = DataFrame(index=range(0, timespan), columns=['Time', 'Price', 'Open', 'High', 'Low', 'Close', 'Volume', 'ms_quote', 'md_quote', 'open_interest', 'oi_delta'])
                df_put_graph[i] = DataFrame(index=range(0, timespan), columns=['Time', 'Price', 'Open', 'High', 'Low', 'Close', 'Volume', 'ms_quote', 'md_quote', 'open_interest', 'oi_delta'])
            
            df_call_information_graph = DataFrame(index=range(0, timespan), columns=['Time', 'Volume', 'open_interest', 'ms_quote', 'md_quote', 'quote_remainder_ratio', 'Drate', 'centerval'])
            df_put_information_graph = DataFrame(index=range(0, timespan), columns=['Time', 'Volume', 'open_interest', 'ms_quote', 'md_quote', 'quote_remainder_ratio', 'Drate', 'yanghap'])

            df_kp200_graph = DataFrame(index=range(0, timespan), columns=['Time', 'Price', 'Open', 'High', 'Low', 'Close'])
            df_demand_supply_graph = DataFrame(index=range(0, timespan), columns=['Time', 'Program', 'kospi_total', 'kospi_foreigner', 'futures_foreigner'])

            df_futures_cm_graph = DataFrame(index=range(0, timespan), columns=['Time', 'Price', 'Open', 'High', 'Low', 'Close', 'Volume', 'c_ms_quote', 'c_md_quote', 'c_quote_remainder_ratio', 'n_ms_quote', 'n_md_quote', 'n_quote_remainder_ratio', 'Drate'])            
            df_futures_nm_graph = DataFrame(index=range(0, timespan), columns=['Time', 'Price', 'Open', 'High', 'Low', 'Close', 'Volume', 'c_ms_quote', 'c_md_quote', 'c_quote_remainder_ratio', 'n_ms_quote', 'n_md_quote', 'n_quote_remainder_ratio', 'Drate'])

            df_sp500_graph = DataFrame(index=range(0, timespan), columns=['Time', 'Price', 'Open', 'High', 'Low', 'Close', 'Volume', 'quote_remainder_ratio', 'Drate'])
            df_dow_graph = DataFrame(index=range(0, timespan), columns=['Time', 'Price', 'Open', 'High', 'Low', 'Close', 'Volume', 'quote_remainder_ratio', 'Drate'])
            df_nasdaq_graph = DataFrame(index=range(0, timespan), columns=['Time', 'Price', 'Open', 'High', 'Low', 'Close', 'Volume', 'quote_remainder_ratio', 'Drate'])
            df_hsi_graph = DataFrame(index=range(0, timespan), columns=['Time', 'Price', 'Open', 'High', 'Low', 'Close', 'Volume', 'quote_remainder_ratio', 'Drate'])
            df_wti_graph = DataFrame(index=range(0, timespan), columns=['Time', 'Price', 'Open', 'High', 'Low', 'Close', 'Volume', 'quote_remainder_ratio', 'Drate'])
            df_gold_graph = DataFrame(index=range(0, timespan), columns=['Time', 'Price', 'Open', 'High', 'Low', 'Close', 'Volume', 'quote_remainder_ratio', 'Drate'])
            df_euro_graph = DataFrame(index=range(0, timespan), columns=['Time', 'Price', 'Open', 'High', 'Low', 'Close', 'Volume', 'quote_remainder_ratio', 'Drate'])
            df_yen_graph = DataFrame(index=range(0, timespan), columns=['Time', 'Price', 'Open', 'High', 'Low', 'Close', 'Volume', 'quote_remainder_ratio', 'Drate'])
            df_adi_graph = DataFrame(index=range(0, timespan), columns=['Time', 'Price', 'Open', 'High', 'Low', 'Close', 'Volume', 'quote_remainder_ratio', 'Drate'])

            df_futures_cm_ta_graph = DataFrame(index=range(0, timespan), columns=['Time', 'Price', 'Open', 'High', 'Low', 'Close', 'Volume', 'RSI', 'PSAR', 'BBUpper_1st', 'BBMiddle_1st', 'BBLower_1st', \
                'BBUpper_2nd', 'BBMiddle_2nd', 'BBLower_2nd', 'MAMA', 'FAMA', 'CCI1', 'CCI2', 'SPAN_A', 'SPAN_B', 'OE_BASE', 'OE_CONV', 'LAGGING_SPAN', 'SSLDown', 'SSLUp'])           
            df_futures_nm_ta_graph = DataFrame(index=range(0, timespan), columns=['Time', 'Price', 'Open', 'High', 'Low', 'Close', 'Volume', 'RSI', 'PSAR', 'BBUpper_1st', 'BBMiddle_1st', 'BBLower_1st', \
                'BBUpper_2nd', 'BBMiddle_2nd', 'BBLower_2nd', 'MAMA', 'FAMA', 'CCI1', 'CCI2', 'SPAN_A', 'SPAN_B', 'OE_BASE', 'OE_CONV', 'LAGGING_SPAN', 'SSLDown', 'SSLUp'])

            df_sp500_ta_graph = DataFrame(index=range(0, timespan), columns=['Time', 'Price', 'Open', 'High', 'Low', 'Close', 'Volume', 'RSI', 'PSAR', 'BBUpper_1st', 'BBMiddle_1st', 'BBLower_1st', \
                'BBUpper_2nd', 'BBMiddle_2nd', 'BBLower_2nd', 'MAMA', 'FAMA', 'CCI1', 'CCI2', 'SPAN_A', 'SPAN_B', 'OE_BASE', 'OE_CONV', 'LAGGING_SPAN', 'SSLDown', 'SSLUp'])
            df_dow_ta_graph = DataFrame(index=range(0, timespan), columns=['Time', 'Price', 'Open', 'High', 'Low', 'Close', 'Volume', 'RSI', 'PSAR', 'BBUpper_1st', 'BBMiddle_1st', 'BBLower_1st', \
                'BBUpper_2nd', 'BBMiddle_2nd', 'BBLower_2nd', 'MAMA', 'FAMA', 'CCI1', 'CCI2', 'SPAN_A', 'SPAN_B', 'OE_BASE', 'OE_CONV', 'LAGGING_SPAN', 'SSLDown', 'SSLUp'])
            df_nasdaq_ta_graph = DataFrame(index=range(0, timespan), columns=['Time', 'Price', 'Open', 'High', 'Low', 'Close', 'Volume', 'RSI', 'PSAR', 'BBUpper_1st', 'BBMiddle_1st', 'BBLower_1st', \
                'BBUpper_2nd', 'BBMiddle_2nd', 'BBLower_2nd', 'MAMA', 'FAMA', 'CCI1', 'CCI2', 'SPAN_A', 'SPAN_B', 'OE_BASE', 'OE_CONV', 'LAGGING_SPAN', 'SSLDown', 'SSLUp'])
            df_hsi_ta_graph = DataFrame(index=range(0, timespan), columns=['Time', 'Price', 'Open', 'High', 'Low', 'Close', 'Volume', 'RSI', 'PSAR', 'BBUpper_1st', 'BBMiddle_1st', 'BBLower_1st', \
                'BBUpper_2nd', 'BBMiddle_2nd', 'BBLower_2nd', 'MAMA', 'FAMA', 'CCI1', 'CCI2', 'SPAN_A', 'SPAN_B', 'OE_BASE', 'OE_CONV', 'LAGGING_SPAN', 'SSLDown', 'SSLUp'])
            df_wti_ta_graph = DataFrame(index=range(0, timespan), columns=['Time', 'Price', 'Open', 'High', 'Low', 'Close', 'Volume', 'RSI', 'PSAR', 'BBUpper_1st', 'BBMiddle_1st', 'BBLower_1st', \
                'BBUpper_2nd', 'BBMiddle_2nd', 'BBLower_2nd', 'MAMA', 'FAMA', 'CCI1', 'CCI2', 'SPAN_A', 'SPAN_B', 'OE_BASE', 'OE_CONV', 'LAGGING_SPAN', 'SSLDown', 'SSLUp'])
            df_gold_ta_graph = DataFrame(index=range(0, timespan), columns=['Time', 'Price', 'Open', 'High', 'Low', 'Close', 'Volume', 'RSI', 'PSAR', 'BBUpper_1st', 'BBMiddle_1st', 'BBLower_1st', \
                'BBUpper_2nd', 'BBMiddle_2nd', 'BBLower_2nd', 'MAMA', 'FAMA', 'CCI1', 'CCI2', 'SPAN_A', 'SPAN_B', 'OE_BASE', 'OE_CONV', 'LAGGING_SPAN', 'SSLDown', 'SSLUp'])
            df_euro_ta_graph = DataFrame(index=range(0, timespan), columns=['Time', 'Price', 'Open', 'High', 'Low', 'Close', 'Volume', 'RSI', 'PSAR', 'BBUpper_1st', 'BBMiddle_1st', 'BBLower_1st', \
                'BBUpper_2nd', 'BBMiddle_2nd', 'BBLower_2nd', 'MAMA', 'FAMA', 'CCI1', 'CCI2', 'SPAN_A', 'SPAN_B', 'OE_BASE', 'OE_CONV', 'LAGGING_SPAN', 'SSLDown', 'SSLUp'])
            df_yen_ta_graph = DataFrame(index=range(0, timespan), columns=['Time', 'Price', 'Open', 'High', 'Low', 'Close', 'Volume', 'RSI', 'PSAR', 'BBUpper_1st', 'BBMiddle_1st', 'BBLower_1st', \
                'BBUpper_2nd', 'BBMiddle_2nd', 'BBLower_2nd', 'MAMA', 'FAMA', 'CCI1', 'CCI2', 'SPAN_A', 'SPAN_B', 'OE_BASE', 'OE_CONV', 'LAGGING_SPAN', 'SSLDown', 'SSLUp'])
            df_adi_ta_graph = DataFrame(index=range(0, timespan), columns=['Time', 'Price', 'Open', 'High', 'Low', 'Close', 'Volume', 'RSI', 'PSAR', 'BBUpper_1st', 'BBMiddle_1st', 'BBLower_1st', \
                'BBUpper_2nd', 'BBMiddle_2nd', 'BBLower_2nd', 'MAMA', 'FAMA', 'CCI1', 'CCI2', 'SPAN_A', 'SPAN_B', 'OE_BASE', 'OE_CONV', 'LAGGING_SPAN', 'SSLDown', 'SSLUp'])

            flag_t8433_response_ok = True
        else:
            pass

    #####################################################################################################################################################################
    # t8416 재요청 함수, 콜/풋 행사가가 전체 200개 이상인 경우 처리목적
    #####################################################################################################################################################################
    def t8416_additive_request(self):

        global flag_t8416_re_request_start, flag_t8416_call_done, flag_t8416_put_done
        global t8416_call_count, t8416_put_count, flag_t8416_rerequest

        dt = datetime.now() 

        flag_t8416_re_request_start = True
        flag_t8416_call_done = False
        flag_t8416_put_done = False

        flag_t8416_rerequest = False

        txt = '[{0:02d}:{1:02d}:{2:02d}] t8416 잔여데이타를 조회합니다.\r'.format(dt.hour, dt.minute, dt.second)
        self.parent.statusbar.showMessage(txt)

        for i in range(t8416_option_pairs_count, option_pairs_count):
            t8416_call_count = i
            self.t8416_opt_request(self.call_code[i])
            self.t8416_call_event_loop.exec_()        

        for i in range(t8416_option_pairs_count, option_pairs_count):
            t8416_put_count = i
            self.t8416_opt_request(self.put_code[i])
            self.t8416_put_event_loop.exec_()

        txt = '[{0:02d}:{1:02d}:{2:02d}] t8416 잔여데이타를 모두 수신하였습니다.\r'.format(dt.hour, dt.minute, dt.second)
        self.parent.statusbar.showMessage(txt)        

    #####################################################################################################################################################################
    # 실시간 정보요청
    #####################################################################################################################################################################
    def request_realdata(self):

        # 장운영 정보 요청
        txt = '[{0:02d}:{1:02d}:{2:02d}] 실시간 장운영 정보를 조회합니다.\r'.format(dt.hour, dt.minute, dt.second)
        self.textBrowser.append(txt)
        print(txt)

        self.parent.realtime_thread_dataworker.RequestRealData('JIF')

        self.realdata_request_number += 1               

        # KOSPI200 지수요청
        if DayTime:
            txt = '[{0:02d}:{1:02d}:{2:02d}] KOSPI200 지수를 조회합니다.\r'.format(dt.hour, dt.minute, dt.second)
            self.textBrowser.append(txt)
            print(txt)

            txt = '[{0:02d}:{1:02d}:{2:02d}] 선물 지수를 조회합니다.\r'.format(dt.hour, dt.minute, dt.second)
            self.textBrowser.append(txt)
            print(txt)

            self.parent.realtime_thread_dataworker.RequestRealData('IJ', KOSPI200)
            self.parent.realtime_thread_dataworker.RequestRealData('IJ', FUTURES)

            self.realdata_request_number += 1
        else:
            pass

        if DayTime and pre_start:

            # KOSPI200/FUTURES 예상지수 요청
            txt = '[{0:02d}:{1:02d}:{2:02d}] KOSPI200, KOSDAQ 예상체결을 조회합니다.\r'.format(dt.hour, dt.minute, dt.second)
            self.textBrowser.append(txt)
            print(txt)

            self.parent.realtime_thread_dataworker.RequestRealData('YJ', KOSPI200)
            self.parent.realtime_thread_dataworker.RequestRealData('YJ', KOSDAQ)                   

            # 지수선물 예상체결 요청
            txt = '[{0:02d}:{1:02d}:{2:02d}] 실시간 선물 예상체결을 조회합니다.\r'.format(dt.hour, dt.minute, dt.second)
            self.textBrowser.append(txt)
            print(txt)

            self.parent.realtime_thread_dataworker.RequestRealData('YFC', GMSHCODE)                    

            # KOSPI 예상체결 요청
            txt = '[{0:02d}:{1:02d}:{2:02d}] 삼성,현대 예상체결을 조회합니다.\r'.format(dt.hour, dt.minute, dt.second)
            self.textBrowser.append(txt)
            print(txt)

            self.parent.realtime_thread_dataworker.RequestRealData('YS3', SAMSUNG)
            self.parent.realtime_thread_dataworker.RequestRealData('YS3', HYUNDAI)                   
        else:
            pass

        # 실시간 근월물 선물 가격요청
        if CM_FUT_PRICE:

            if DayTime:
                
                txt = '[{0:02d}:{1:02d}:{2:02d}] 실시간 근월물 선물 가격을 조회합니다.\r'.format(dt.hour, dt.minute, dt.second)
                self.textBrowser.append(txt)
                print(txt)

                self.parent.realtime_thread_dataworker.RequestRealData(FUT_REAL, GMSHCODE)

                self.realdata_request_number += 1
            else:
                pass                    
        else:
            pass

        # 실시간 근월물 선물 호가요청
        if CM_FUT_QUOTE:            

            if DayTime:

                txt = '[{0:02d}:{1:02d}:{2:02d}] 실시간 근월물 선물 호가를 조회합니다.\r'.format(dt.hour, dt.minute, dt.second)
                self.textBrowser.append(txt)
                print(txt)

                self.parent.realtime_thread_dataworker.RequestRealData(FUT_HO, GMSHCODE)

                self.realdata_request_number += 1
            else:
                pass                    
        else:
            pass

        # 실시간 근월물 옵션 가격요청
        if CM_OPT_PRICE:

            txt = '[{0:02d}:{1:02d}:{2:02d}] 실시간 근월물 옵션 가격을 조회합니다.\r'.format(dt.hour, dt.minute, dt.second)
            self.textBrowser.append(txt)
            print(txt)

            if DayTime and pre_start:
                txt = '[{0:02d}:{1:02d}:{2:02d}] 실시간 근월물 옵션 예상가격을 조회합니다.\r'.format(dt.hour, dt.minute, dt.second)
                self.textBrowser.append(txt)
                print(txt)
            else:
                pass                     

            for i in range(CM_OPT_LENGTH):
                self.parent.realtime_thread_dataworker.RequestRealData(OPT_REAL, CM_CALL_CODE[i])
                self.parent.realtime_thread_dataworker.RequestRealData(OPT_REAL, CM_PUT_CODE[i])

                # 지수옵션 예상체결 요청
                if DayTime and pre_start:
                    self.parent.realtime_thread_dataworker.RequestRealData('YOC', CM_CALL_CODE[i])
                    self.parent.realtime_thread_dataworker.RequestRealData('YOC', CM_PUT_CODE[i])
                else:
                    pass

            self.realdata_request_number += CM_OPT_LENGTH * 2                                     
        else:
            pass

        if CM_OPT_PRICE1:

            txt = '[{0:02d}:{1:02d}:{2:02d}] 실시간 근월물 옵션 가격(내가 {3}개, 외가 {4}개)을 조회합니다.\r'.format(dt.hour, dt.minute, dt.second, put_itm_number, put_otm_number)
            self.textBrowser.append(txt)
            print(txt)

            if DayTime and pre_start:
                txt = '[{0:02d}:{1:02d}:{2:02d}] 실시간 근월물 옵션 예상가격(내가 {3}개, 외가 {4}개)을 조회합니다.\r'.format(dt.hour, dt.minute, dt.second, put_itm_number, put_otm_number)
                self.textBrowser.append(txt)
                print(txt)
            else:
                pass

            for i in range(ATM_INDEX - call_otm_number, ATM_INDEX + call_itm_number + 1):

                if i >= 0:
                    self.parent.realtime_thread_dataworker.RequestRealData(OPT_REAL, CM_CALL_CODE[i])

                    txt = '[{0:02d}:{1:02d}:{2:02d}] 요청 콜 행사가는 {3} 입니다.\r'.format(dt.hour, dt.minute, dt.second, CM_CALL_CODE[i])
                    self.parent.textBrowser.append(txt)
                    print(txt)

                    if DayTime and pre_start:                            
                        self.parent.realtime_thread_dataworker.RequestRealData('YOC', CM_CALL_CODE[i])
                    else:
                        pass
                else:
                    pass

            for i in range(ATM_INDEX - put_itm_number, ATM_INDEX + put_otm_number + 1):

                if i >= 0:
                    self.parent.realtime_thread_dataworker.RequestRealData(OPT_REAL, CM_PUT_CODE[i])

                    txt = '[{0:02d}:{1:02d}:{2:02d}] 요청 풋 행사가는 {3} 입니다.\r'.format(dt.hour, dt.minute, dt.second, CM_PUT_CODE[i])
                    self.parent.textBrowser.append(txt)
                    print(txt)

                    if DayTime and pre_start:
                        self.parent.realtime_thread_dataworker.RequestRealData('YOC', CM_PUT_CODE[i])
                    else:
                        pass
                else:
                    pass            
            
            self.realdata_request_number += (call_otm_number + call_itm_number + 1) + (put_otm_number + put_itm_number + 1)                                       
        else:
            pass

        # 실시간 근월물 옵션 호가요청
        if CM_OPT_QUOTE:

            txt = '[{0:02d}:{1:02d}:{2:02d}] 실시간 근월물 옵션 호가를 조회합니다.\r'.format(dt.hour, dt.minute, dt.second)
            self.textBrowser.append(txt)
            print(txt)

            for i in range(CM_OPT_LENGTH):
                self.parent.realtime_thread_dataworker.RequestRealData(OPT_HO, CM_CALL_CODE[i])
                self.parent.realtime_thread_dataworker.RequestRealData(OPT_HO, CM_PUT_CODE[i])

            self.realdata_request_number += CM_OPT_LENGTH * 2                      
        else:
            pass

        # 실시간 근월물 옵션 호가요청(등가근처 10개)
        if CM_OPT_QUOTE1:

            txt = '[{0:02d}:{1:02d}:{2:02d}] 실시간 근월물 옵션 호가(내가 {3}개, 외가 {4}개)를 조회합니다.\r'.format(dt.hour, dt.minute, dt.second, put_itm_number, put_otm_number)
            self.textBrowser.append(txt)
            print(txt)

            for i in range(ATM_INDEX - call_otm_number, ATM_INDEX + call_itm_number + 1):

                if i >= 0:
                    self.parent.realtime_thread_dataworker.RequestRealData(OPT_HO, CM_CALL_CODE[i])

                    txt = '[{0:02d}:{1:02d}:{2:02d}] 요청 콜호가 행사가는 {3} 입니다.\r'.format(dt.hour, dt.minute, dt.second, CM_CALL_CODE[i])
                    self.parent.textBrowser.append(txt)
                    print(txt)
                else:
                    pass

            for i in range(ATM_INDEX - put_itm_number, ATM_INDEX + put_otm_number + 1):

                if i >= 0:
                    self.parent.realtime_thread_dataworker.RequestRealData(OPT_HO, CM_PUT_CODE[i])

                    txt = '[{0:02d}:{1:02d}:{2:02d}] 요청 풋호가 행사가는 {3} 입니다.\r'.format(dt.hour, dt.minute, dt.second, CM_PUT_CODE[i])
                    self.parent.textBrowser.append(txt)
                    print(txt)
                else:
                    pass
            
            self.realdata_request_number += (call_otm_number + call_itm_number + 1) + (put_otm_number + put_itm_number + 1)                   
        else:
            pass

        # 실시간 차월물 선물 가격요청
        if NM_FUT_PRICE:

            if DayTime:

                txt = '[{0:02d}:{1:02d}:{2:02d}] 실시간 차월물 선물 가격을 조회합니다.\r'.format(dt.hour, dt.minute, dt.second)
                self.textBrowser.append(txt)
                print(txt)

                self.parent.realtime_thread_dataworker.RequestRealData(FUT_REAL, CMSHCODE)

                self.realdata_request_number += 1
            else:
                pass                    
        else:
            pass

        # 실시간 차월물,차차월물 선물 호가요청
        if NM_FUT_QUOTE:

            if DayTime:

                txt = '[{0:02d}:{1:02d}:{2:02d}] 실시간 차월물 선물 호가를 조회합니다.\r'.format(dt.hour, dt.minute, dt.second)
                self.textBrowser.append(txt)
                print(txt)

                self.parent.realtime_thread_dataworker.RequestRealData(FUT_HO, CMSHCODE)
                self.parent.realtime_thread_dataworker.RequestRealData(FUT_HO, CCMSHCODE)

                self.realdata_request_number += 2
            else:
                pass                   
        else:
            pass

        # 실시간 차월물 옵션 가격요청
        if NM_OPT_PRICE:

            txt = '[{0:02d}:{1:02d}:{2:02d}] 실시간 차월물 옵션 가격을 조회합니다.\r'.format(dt.hour, dt.minute, dt.second)
            self.textBrowser.append(txt)
            print(txt)

            if DayTime and pre_start:
                txt = '[{0:02d}:{1:02d}:{2:02d}] 실시간 차월물 옵션 예상가격을 조회합니다.\r'.format(dt.hour, dt.minute, dt.second)
                self.textBrowser.append(txt)
                print(txt)
            else:
                pass

            for i in range(NM_OPT_LENGTH):
                self.parent.realtime_thread_dataworker.RequestRealData(OPT_REAL, NM_CALL_CODE[i])
                self.parent.realtime_thread_dataworker.RequestRealData(OPT_REAL, NM_PUT_CODE[i])

                # 지수옵션 예상체결 요청
                if DayTime and pre_start:
                    self.parent.realtime_thread_dataworker.RequestRealData('YOC', NM_CALL_CODE[i])
                    self.parent.realtime_thread_dataworker.RequestRealData('YOC', NM_PUT_CODE[i])
                else:
                    pass

            self.realdata_request_number += NM_OPT_LENGTH * 2                                                           
        else:
            pass

        if NM_OPT_PRICE1:

            txt = '[{0:02d}:{1:02d}:{2:02d}] 실시간 차월물 옵션 가격(내가 {3}개, 외가 {4}개)을 조회합니다.\r'.format(dt.hour, dt.minute, dt.second, put_itm_number, put_otm_number)
            self.textBrowser.append(txt)
            print(txt)

            if DayTime and pre_start:
                txt = '[{0:02d}:{1:02d}:{2:02d}] 실시간 차월물 옵션 예상가격(내가 {3}개, 외가 {4}개)을 조회합니다.\r'.format(dt.hour, dt.minute, dt.second, put_itm_number, put_otm_number)
                self.textBrowser.append(txt)
                print(txt)
            else:
                pass

            for i in range(ATM_INDEX - call_otm_number, ATM_INDEX + call_itm_number + 1):

                if i >= 0:
                    self.parent.realtime_thread_dataworker.RequestRealData(OPT_REAL, NM_CALL_CODE[i])

                    txt = '[{0:02d}:{1:02d}:{2:02d}] 요청 콜 행사가는 {3} 입니다.\r'.format(dt.hour, dt.minute, dt.second, NM_CALL_CODE[i])
                    self.parent.textBrowser.append(txt)
                    print(txt)

                    if DayTime and pre_start:                            
                        self.parent.realtime_thread_dataworker.RequestRealData('YOC', NM_CALL_CODE[i])
                    else:
                        pass
                else:
                    pass

            for i in range(ATM_INDEX - put_itm_number, ATM_INDEX + put_otm_number + 1):

                if i >= 0:
                    self.parent.realtime_thread_dataworker.RequestRealData(OPT_REAL, NM_PUT_CODE[i])

                    txt = '[{0:02d}:{1:02d}:{2:02d}] 요청 풋 행사가는 {3} 입니다.\r'.format(dt.hour, dt.minute, dt.second, NM_PUT_CODE[i])
                    self.parent.textBrowser.append(txt)
                    print(txt)

                    if DayTime and pre_start:
                        self.parent.realtime_thread_dataworker.RequestRealData('YOC', NM_PUT_CODE[i])
                    else:
                        pass
                else:
                    pass            
            
            self.realdata_request_number += (call_otm_number + call_itm_number + 1) + (put_otm_number + put_itm_number + 1)                                       
        else:
            pass

        # 실시간 차월물 옵션 호가요청
        if NM_OPT_QUOTE:

            txt = '[{0:02d}:{1:02d}:{2:02d}] 실시간 차월물 옵션 호가를 조회합니다.\r'.format(dt.hour, dt.minute, dt.second)
            self.textBrowser.append(txt)
            print(txt)

            for i in range(NM_OPT_LENGTH):
                self.parent.realtime_thread_dataworker.RequestRealData(OPT_HO, NM_CALL_CODE[i])
                self.parent.realtime_thread_dataworker.RequestRealData(OPT_HO, NM_PUT_CODE[i])            

            self.realdata_request_number += NM_OPT_LENGTH * 2                    
        else:
            pass

        # 실시간 차월물 옵션 호가요청(등가근처 10개)
        if NM_OPT_QUOTE1:

            txt = '[{0:02d}:{1:02d}:{2:02d}] 실시간 차월물 옵션 호가(내가 {3}개, 외가 {4}개)를 조회합니다.\r'.format(dt.hour, dt.minute, dt.second, put_itm_number, put_otm_number)
            self.textBrowser.append(txt)
            print(txt)

            for i in range(ATM_INDEX - call_otm_number, ATM_INDEX + call_itm_number + 1):

                if i >= 0:
                    self.parent.realtime_thread_dataworker.RequestRealData(OPT_HO, NM_CALL_CODE[i])

                    txt = '[{0:02d}:{1:02d}:{2:02d}] 요청 콜호가 행사가는 {3} 입니다.\r'.format(dt.hour, dt.minute, dt.second, CM_CALL_CODE[i])
                    self.parent.textBrowser.append(txt)
                    print(txt)

                else:
                    pass

            for i in range(ATM_INDEX - put_itm_number, ATM_INDEX + put_otm_number + 1):

                if i >= 0:
                    self.parent.realtime_thread_dataworker.RequestRealData(OPT_HO, NM_PUT_CODE[i])

                    txt = '[{0:02d}:{1:02d}:{2:02d}] 요청 풋호가 행사가는 {3} 입니다.\r'.format(dt.hour, dt.minute, dt.second, CM_PUT_CODE[i])
                    self.parent.textBrowser.append(txt)
                    print(txt)
                else:
                    pass            

            self.realdata_request_number += (call_otm_number + call_itm_number + 1) + (put_otm_number + put_itm_number + 1)                   
        else:
            pass
        
        if KOSPI_KOSDAQ and DayTime:

            txt = '[{0:02d}:{1:02d}:{2:02d}] KOSPI/KOSDAQ 지수를 조회합니다.\r'.format(dt.hour, dt.minute, dt.second)
            self.textBrowser.append(txt)
            print(txt)

            self.parent.realtime_thread_dataworker.RequestRealData('IJ', KOSPI)
            self.parent.realtime_thread_dataworker.RequestRealData('IJ', KOSDAQ)

            self.realdata_request_number += 2                    
        else:
            pass

        # SAMSUNG 체결지수 요청
        if DayTime:
            txt = '[{0:02d}:{1:02d}:{2:02d}] SAMSUNG 지수를 조회합니다.\r'.format(dt.hour, dt.minute, dt.second)
            self.textBrowser.append(txt)
            print(txt)

            self.parent.realtime_thread_dataworker.RequestRealData('S3', SAMSUNG)

            self.realdata_request_number += 1
        else:
            pass

        # 실시간 업종별 투자자별 & 프로그램 매매현황 요청
        if SUPPLY_DEMAND and DayTime:

            txt = '[{0:02d}:{1:02d}:{2:02d}] 실시간 업종별 투자자별 & 프로그램 매매현황을 조회합니다.\r'.format(dt.hour, dt.minute, dt.second)
            self.textBrowser.append(txt)
            print(txt)
            
            self.parent.realtime_thread_dataworker.RequestRealData('BM', FUTURES)
            self.parent.realtime_thread_dataworker.RequestRealData('BM', KOSPI)
            self.parent.realtime_thread_dataworker.RequestRealData('PM', KOSPI)

            self.realdata_request_number += 3                    
        else:
            pass

        # 실시간 해외선물 DOW 요청
        if DOW_CHK:

            txt = '[{0:02d}:{1:02d}:{2:02d}] 실시간 DOW를 조회합니다.\r'.format(dt.hour, dt.minute, dt.second)
            self.textBrowser.append(txt)
            print(txt)

            self.parent.realtime_thread_dataworker.RequestRealData('OVC', DOW)

            self.realdata_request_number += 1                    
        else:
            pass

        # 실시간 해외선물 SP500 요청
        if SP500_CHK:

            txt = '[{0:02d}:{1:02d}:{2:02d}] 실시간 S&P 500을 조회합니다.\r'.format(dt.hour, dt.minute, dt.second)
            self.textBrowser.append(txt)
            print(txt)

            self.parent.realtime_thread_dataworker.RequestRealData('OVC', SP500)

            self.realdata_request_number += 1                    
        else:
            pass

        # 실시간 해외선물 NASDAQ 요청
        if NASDAQ_CHK:

            txt = '[{0:02d}:{1:02d}:{2:02d}] 실시간 NASDAQ을 조회합니다.\r'.format(dt.hour, dt.minute, dt.second)
            self.textBrowser.append(txt)
            print(txt)

            self.parent.realtime_thread_dataworker.RequestRealData('OVC', NASDAQ)

            self.realdata_request_number += 1                    
        else:
            pass

        # 실시간 해외선물 WTI OIL 요청
        if WTI_CHK:

            txt = '[{0:02d}:{1:02d}:{2:02d}] 실시간 WTI OIL을 조회합니다.\r'.format(dt.hour, dt.minute, dt.second)
            self.textBrowser.append(txt)
            print(txt)

            self.parent.realtime_thread_dataworker.RequestRealData('OVC', WTI)

            self.realdata_request_number += 1                    
        else:
            pass

        # 실시간 해외선물 EURO 요청
        if EURO_CHK:

            txt = '[{0:02d}:{1:02d}:{2:02d}] 실시간 EURO을 조회합니다.\r'.format(dt.hour, dt.minute, dt.second)
            self.textBrowser.append(txt)
            print(txt)

            self.parent.realtime_thread_dataworker.RequestRealData('OVC', EURO)

            self.realdata_request_number += 1                    
        else:
            pass

        # 실시간 해외선물 HANGSENG 요청
        if HANGSENG_CHK:

            txt = '[{0:02d}:{1:02d}:{2:02d}] 실시간 HANGSENG을 조회합니다.\r'.format(dt.hour, dt.minute, dt.second)
            self.textBrowser.append(txt)
            print(txt)

            self.parent.realtime_thread_dataworker.RequestRealData('OVC', HANGSENG)

            self.realdata_request_number += 1                    
        else:
            pass

        # 실시간 해외선물 GOLD 요청
        if GOLD_CHK:

            txt = '[{0:02d}:{1:02d}:{2:02d}] 실시간 GOLD를 조회합니다.\r'.format(dt.hour, dt.minute, dt.second)
            self.textBrowser.append(txt)
            print(txt)

            self.parent.realtime_thread_dataworker.RequestRealData('OVC', GOLD)

            self.realdata_request_number += 1                    
        else:
            pass

        # 실시간 NEWS 요청
        if NEWS_CHK:
            '''
            txt = '[{0:02d}:{1:02d}:{2:02d}] 실시간 NEWS를 조회합니다.\r'.format(dt.hour, dt.minute, dt.second)
            self.parent.textBrowser.append(txt)
            print(txt)

            self.parent.realtime_thread_dataworker.RequestRealData('NWS')

            self.realdata_request_number += 1
            '''                  
        else:
            pass

        txt = '[{0:02d}:{1:02d}:{2:02d}] 실시간 요청 항목의 총수는 {3}개 입니다.\r'.format(dt.hour, dt.minute, dt.second, self.realdata_request_number)
        self.parent.textBrowser.append(txt)
        print(txt)

        if flag_tts and not flag_t8416_rerequest:
            QTest.qWait(1000)
            #playsound( "Resources/doorbell.wav" )
            winsound.PlaySound('Resources/doorbell.wav', winsound.SND_FILENAME)
            QTest.qWait(1000)
        else:
            pass
        
        if flag_tts:
            txt = '총 {0}개 항목이 실시간 요청되었습니다.'.format(self.realdata_request_number)
            self.parent.speaker.setText(txt)
        else:
            pass

        item_txt = '{0}'.format(self.realdata_request_number)
        item = QTableWidgetItem(item_txt)
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_fut.setHorizontalHeaderItem(1, item)

        self.tableWidget_fut.resizeColumnToContents(1)

    #####################################################################################################################################################################
    # 오리지날 실시간 콜백수신 함수
    #####################################################################################################################################################################
    def OnReceiveRealData(self, tickdata):
        pass

    #####################################################################################################################################################################
    def KillScoreBoardAllThread(self):

        global flag_score_board_start, flag_telegram_send_start, flag_telegram_listen_start

        dt = datetime.now()

        txt = '[{0:02d}:{1:02d}:{2:02d}] Score Board의 모든 쓰레드를 종료합니다.\r'.format(dt.hour, dt.minute, dt.second)
        self.textBrowser.append(txt)
        self.parent.textBrowser.append(txt)

        flag_score_board_start = False
        flag_telegram_send_start = False
        flag_telegram_listen_start = False

        '''
        if self.screen_update_worker.isRunning():
            self.screen_update_worker.terminate()
            print('screen_update_worker is terminated at KillScoreBoardAllThread...')
        else:
            pass
        
        if self.telegram_send_worker.isRunning():
            self.telegram_send_worker.terminate()
            print('telegram_send_worker is terminated at KillScoreBoardAllThread...')
        else:
            pass

        if self.telegram_listen_worker.isRunning():
            self.telegram_listen_worker.terminate()
            print('telegram_listen_worker is terminated at KillScoreBoardAllThread...')
        else:
            pass
        '''    

    def closeEvent(self,event):

        dt = datetime.now()        

        if main_close_event is None:
            result = QMessageBox.question(self,"전광판 다이얼로그 종료"," 전광판을 종료하시겠습니까 ? ", QMessageBox.Yes | QMessageBox.No)
        else:
            result = main_close_event

        if result == QMessageBox.Yes:

            event.accept()

            self.flag_score_board_open = False

            self.KillScoreBoardAllThread()
            '''
            if not MULTIPROCESS:

                if self.parent.realtime_thread_dataworker.isRunning():
                    print('Score Board의 모든 쓰레드를 종료합니다.')
                    self.KillScoreBoardAllThread()
                    #print('모든 실시간요청 취소...')
                    #self.parent.realtime_thread_dataworker.CancelAllRealData()
                else:
                    pass
            else:
                pass
            '''
            txt = '[{0:02d}:{1:02d}:{2:02d}] Score Board Dialog를 종료합니다.\r'.format(dt.hour, dt.minute, dt.second)
            self.parent.textBrowser.append(txt)
            print(txt)   

            self.close()
        else:
            event.ignore()
#####################################################################################################################################################################
# RealTime Item UI Class
#####################################################################################################################################################################
if UI_HIDE:
        import realtimeitem_ui
        Ui_RealTimeItem = realtimeitem_ui.Ui_Dialog   
else:
    Ui_RealTimeItem, QtBaseClass_RealTimeItem = uic.loadUiType(UI_DIR + realtimeitem_ui_type)
#####################################################################################################################################################################
class 화면_RealTimeItem(QDialog, Ui_RealTimeItem):

    def __init__(self, parent=None):

        super(화면_RealTimeItem, self).__init__(parent, flags = Qt.WindowTitleHint | Qt.WindowMinMaxButtonsHint | Qt.WindowCloseButtonHint)
        self.setAttribute(Qt.WA_DeleteOnClose)
        
        self.setupUi(self)
        self.parent = parent

        self.flag_realtimeitem_open = True
        '''
        if TARGET_MONTH == 'CM':

            cm_price_all_txt = '근월물 옵션가격(전체)'
            cm_price_part_txt = '근월물 옵션가격(P내가:{0}, P외가:{1})'.format(put_itm_number, put_otm_number)
            cm_quote_all_txt = '근월물 옵션호가(전체)'
            cm_quote_part_txt = '근월물 옵션호가(P내가:{0}, P외가:{1})'.format(put_itm_number, put_otm_number)

            nm_price_all_txt = '차월물 옵션가격(전체)'
            nm_price_part_txt = '차월물 옵션가격(P내가:{0}, P외가:{1})'.format(put_itm_number, put_otm_number)
            nm_quote_all_txt = '차월물 옵션호가(전체)'
            nm_quote_part_txt = '차월물 옵션호가(P내가:{0}, P외가:{1})'.format(put_itm_number, put_otm_number)

        elif TARGET_MONTH == 'NM':

            cm_price_all_txt = '차월물 옵션가격(전체)'
            cm_price_part_txt = '차월물 옵션가격(P내가:{0}, P외가:{1})'.format(put_itm_number, put_otm_number)
            cm_quote_all_txt = '차월물 옵션호가(전체)'
            cm_quote_part_txt = '차월물 옵션호가(P내가:{0}, P외가:{1})'.format(put_itm_number, put_otm_number)

            nm_price_all_txt = '차차월물 옵션가격(전체)'
            nm_price_part_txt = '차차월물 옵션가격(P내가:{0}, P외가:{1})'.format(put_itm_number, put_otm_number)
            nm_quote_all_txt = '차차월물 옵션호가(전체)'
            nm_quote_part_txt = '차차월물 옵션호가(P내가:{0}, P외가:{1})'.format(put_itm_number, put_otm_number)
        else:
            pass
        '''
        cm_price_all_txt = '근월물 옵션가격(전체)'
        cm_price_part_txt = '근월물 옵션가격(P내가:{0}, P외가:{1})'.format(put_itm_number, put_otm_number)
        cm_quote_all_txt = '근월물 옵션호가(전체)'
        cm_quote_part_txt = '근월물 옵션호가(P내가:{0}, P외가:{1})'.format(put_itm_number, put_otm_number)

        nm_price_all_txt = '차월물 옵션가격(전체)'
        nm_price_part_txt = '차월물 옵션가격(P내가:{0}, P외가:{1})'.format(put_itm_number, put_otm_number)
        nm_quote_all_txt = '차월물 옵션호가(전체)'
        nm_quote_part_txt = '차월물 옵션호가(P내가:{0}, P외가:{1})'.format(put_itm_number, put_otm_number)

        self.checkBox_cm_opt_price.setText(cm_price_all_txt)
        self.checkBox_cm_opt_price_1.setText(cm_price_part_txt)
        self.checkBox_cm_opt_quote.setText(cm_quote_all_txt)
        self.checkBox_cm_opt_quote_1.setText(cm_quote_part_txt)

        self.checkBox_nm_opt_price.setText(nm_price_all_txt)
        self.checkBox_nm_opt_price_1.setText(nm_price_part_txt)
        self.checkBox_nm_opt_quote.setText(nm_quote_all_txt)
        self.checkBox_nm_opt_quote_1.setText(nm_quote_part_txt)

        self.checkBox_cm_fut_price.setChecked(CM_FUT_PRICE)
        self.checkBox_cm_fut_quote.setChecked(CM_FUT_QUOTE)
        self.checkBox_cm_opt_price.setChecked(CM_OPT_PRICE)
        self.checkBox_cm_opt_price_1.setChecked(CM_OPT_PRICE1)
        self.checkBox_cm_opt_quote.setChecked(CM_OPT_QUOTE)
        self.checkBox_cm_opt_quote_1.setChecked(CM_OPT_QUOTE1)
        self.checkBox_nm_fut_price.setChecked(NM_FUT_PRICE)
        self.checkBox_nm_fut_quote.setChecked(NM_FUT_QUOTE)
        self.checkBox_nm_opt_price.setChecked(NM_OPT_PRICE)
        self.checkBox_nm_opt_price_1.setChecked(NM_OPT_PRICE1)
        self.checkBox_nm_opt_quote.setChecked(NM_OPT_QUOTE)
        self.checkBox_nm_opt_quote_1.setChecked(NM_OPT_QUOTE1)
        self.checkBox_kospi_kosdaq.setChecked(KOSPI_KOSDAQ)
        self.checkBox_supply_demand.setChecked(SUPPLY_DEMAND)

        self.checkBox_news.setChecked(NEWS_CHK)
        
        self.checkBox_sp500.setChecked(SP500_CHK)
        self.checkBox_dow.setChecked(DOW_CHK)
        self.checkBox_nasdaq.setChecked(NASDAQ_CHK)
        self.checkBox_hangseng.setChecked(HANGSENG_CHK)
        self.checkBox_oil.setChecked(WTI_CHK)
        self.checkBox_gold.setChecked(GOLD_CHK)
        self.checkBox_eurofx.setChecked(EURO_CHK)
        self.checkBox_yen.setChecked(YEN_CHK)
        self.checkBox_adi.setChecked(ADI_CHK)        

        self.checkBox_lagging_span.setChecked(flag_one_eye_lagging_span)
        self.checkBox_periodic_plot.setChecked(flag_option_periodic_update_mode)
        self.checkBox_tts.setChecked(flag_tts)
        self.checkBox_plot_sync.setChecked(flag_plot_sync_mode)
        self.checkBox_telegram.setChecked(flag_telegram_service)
        self.checkBox_search_moving_node.setChecked(flag_search_moving_node)

        self.spinBox_call_itm.setValue(call_itm_number)
        self.spinBox_call_otm.setValue(call_otm_number)
        self.spinBox_put_itm.setValue(put_itm_number)
        self.spinBox_put_otm.setValue(put_otm_number)

        txt = str(BB_PERIOD)
        self.lineEdit_bb_period.setText(txt)

        txt = str(BB_1ST_STD)
        self.lineEdit_bb_1st_std.setText(txt)

        txt = str(BB_2ND_STD)
        self.lineEdit_bb_2nd_std.setText(txt)

        txt = str(RSI_PERIOD)
        self.lineEdit_rsi_period.setText(txt)

        txt = str(RSI_OFFSET)
        self.lineEdit_rsi_offset.setText(txt)

        txt = str(RSI_SCALE_FACTOR)
        self.lineEdit_rsi_scale_factor.setText(txt)

        txt = str(CCI1_PERIOD)
        self.lineEdit_cci1_period.setText(txt)

        txt = str(CCI2_PERIOD)
        self.lineEdit_cci2_period.setText(txt)

        txt = str(SSL_PERIOD)
        self.lineEdit_ssl_period.setText(txt)

        txt = str(BASE_LINE_PERIOD)
        self.lineEdit_ichimoku_baseline_period.setText(txt)

        txt = str(CONVERSION_LINE_PERIOD)
        self.lineEdit_ichimoku_conversionline_period.setText(txt)

        txt = str(SPAN_B_PERIOD)
        self.lineEdit_ichimoku_span_period.setText(txt)

        txt = str(view_time_tolerance)
        self.lineEdit_tolerance.setText(txt)

        txt = str(chart_update_interval)
        self.lineEdit_plot.setText(txt)

        txt = str(SP500_FUT_시가_등락율비)
        self.lineEdit_drate_ratio.setText(txt)

        txt = str(DRATE_OFFSET)
        self.lineEdit_drate_offset.setText(txt)

        # 종료 버튼으로 종료할 때 실행시킨다. __del__ 실행을 보장하기 위해서 사용
        atexit.register(self.__del__) 
        
        # 현재화면의 중앙에 표시
        qr = self.frameGeometry()
        qr.moveCenter(self.parent.centerPoint)
        self.move(qr.topLeft())     
        self.showNormal()

        self.checkBox_cm_fut_price.stateChanged.connect(self.checkBox_cm_fut_price_checkState)
        self.checkBox_cm_fut_quote.stateChanged.connect(self.checkBox_cm_fut_quote_checkState)
        self.checkBox_cm_opt_price.stateChanged.connect(self.checkBox_cm_opt_price_checkState)
        self.checkBox_cm_opt_price_1.stateChanged.connect(self.checkBox_cm_opt_price_1_checkState)
        self.checkBox_cm_opt_quote.stateChanged.connect(self.checkBox_cm_opt_quote_checkState)
        self.checkBox_cm_opt_quote_1.stateChanged.connect(self.checkBox_cm_opt_quote_1_checkState)
        self.checkBox_nm_fut_price.stateChanged.connect(self.checkBox_nm_fut_price_checkState)
        self.checkBox_nm_fut_quote.stateChanged.connect(self.checkBox_nm_fut_quote_checkState)
        self.checkBox_nm_opt_price.stateChanged.connect(self.checkBox_nm_opt_price_checkState)
        self.checkBox_nm_opt_price_1.stateChanged.connect(self.checkBox_nm_opt_price_1_checkState)
        self.checkBox_nm_opt_quote.stateChanged.connect(self.checkBox_nm_opt_quote_checkState)
        self.checkBox_nm_opt_quote_1.stateChanged.connect(self.checkBox_nm_opt_quote_1_checkState)
        self.checkBox_kospi_kosdaq.stateChanged.connect(self.checkBox_kospi_kosdaq_checkState)
        self.checkBox_supply_demand.stateChanged.connect(self.checkBox_supply_demand_checkState)
        self.checkBox_dow.stateChanged.connect(self.checkBox_dow_checkState)
        self.checkBox_sp500.stateChanged.connect(self.checkBox_sp500_checkState)
        self.checkBox_nasdaq.stateChanged.connect(self.checkBox_nasdaq_checkState)
        self.checkBox_hangseng.stateChanged.connect(self.checkBox_hsi_checkState)
        self.checkBox_oil.stateChanged.connect(self.checkBox_oil_checkState)
        self.checkBox_gold.stateChanged.connect(self.checkBox_gold_checkState)
        self.checkBox_eurofx.stateChanged.connect(self.checkBox_euro_checkState)
        self.checkBox_yen.stateChanged.connect(self.checkBox_yen_checkState)
        self.checkBox_adi.stateChanged.connect(self.checkBox_adi_checkState)
        
        self.checkBox_news.stateChanged.connect(self.checkBox_news_checkState)

        self.checkBox_periodic_plot.stateChanged.connect(self.checkBox_periodic_plot_state_change)
        self.checkBox_tts.stateChanged.connect(self.checkBox_tts_state_change)
        self.checkBox_plot_sync.stateChanged.connect(self.checkBox_plot_sync_state_change)
        self.checkBox_telegram.stateChanged.connect(self.checkBox_telegram_state_change)
        self.checkBox_search_moving_node.stateChanged.connect(self.checkBox_search_moving_node_change)

        self.spinBox_call_itm.valueChanged.connect(self.change_call_itm)
        self.spinBox_call_otm.valueChanged.connect(self.change_call_otm)
        self.spinBox_put_itm.valueChanged.connect(self.change_put_itm)
        self.spinBox_put_otm.valueChanged.connect(self.change_put_otm)

        self.lineEdit_bb_period.returnPressed.connect(self.change_bb_period)
        self.lineEdit_bb_1st_std.returnPressed.connect(self.change_bb_1st_std)
        self.lineEdit_bb_2nd_std.returnPressed.connect(self.change_bb_2nd_std)

        self.lineEdit_rsi_period.returnPressed.connect(self.change_rsi_period)
        self.lineEdit_rsi_offset.returnPressed.connect(self.change_rsi_offset)
        self.lineEdit_rsi_scale_factor.returnPressed.connect(self.change_rsi_scale_factor)

        self.lineEdit_cci1_period.returnPressed.connect(self.change_cci1_period)
        self.lineEdit_cci2_period.returnPressed.connect(self.change_cci2_period)
        self.lineEdit_ssl_period.returnPressed.connect(self.change_ssl_period)
        self.lineEdit_ichimoku_baseline_period.returnPressed.connect(self.change_ichimoku_baseline_period)
        self.lineEdit_ichimoku_conversionline_period.returnPressed.connect(self.change_ichimoku_conversionline_period)
        self.lineEdit_ichimoku_span_period.returnPressed.connect(self.change_ichimoku_span_period)
        self.checkBox_lagging_span.stateChanged.connect(self.checkBox_lagging_span_state_change)

        self.lineEdit_tolerance.returnPressed.connect(self.change_view_time_interval)
        self.lineEdit_plot.returnPressed.connect(self.change_plot_interval)
        self.lineEdit_drate_ratio.returnPressed.connect(self.change_drate_ratio)
        self.lineEdit_drate_offset.returnPressed.connect(self.change_drate_offset)

    def change_call_itm(self):

        global call_itm_number, flag_call_itm_number_changed

        dt = datetime.now()

        call_itm_number = self.spinBox_call_itm.value()

        flag_call_itm_number_changed = True

        txt = '[{0:02d}:{1:02d}:{2:02d}] 콜내가를 {3}개로 설정합니다.\r'.format(dt.hour, dt.minute, dt.second, call_itm_number)
        self.parent.textBrowser.append(txt)

        if TARGET_MONTH == 'CM':

            cm_price_part_txt = '근월물 옵션가격(C내가:{0}, C외가:{1})'.format(call_itm_number, call_otm_number)
            cm_quote_part_txt = '근월물 옵션호가(C내가:{0}, C외가:{1})'.format(call_itm_number, call_otm_number)

            nm_price_part_txt = '차월물 옵션가격(C내가:{0}, C외가:{1})'.format(call_itm_number, call_otm_number)
            nm_quote_part_txt = '차월물 옵션호가(C내가:{0}, C외가:{1})'.format(call_itm_number, call_otm_number)

        elif TARGET_MONTH == 'NM':

            cm_price_part_txt = '차월물 옵션가격(C내가:{0}, C외가:{1})'.format(call_itm_number, call_otm_number)
            cm_quote_part_txt = '차월물 옵션호가(C내가:{0}, C외가:{1})'.format(call_itm_number, call_otm_number)

            nm_price_part_txt = '차차월물 옵션가격(C내가:{0}, C외가:{1})'.format(call_itm_number, call_otm_number)
            nm_quote_part_txt = '차차월물 옵션호가(C내가:{0}, C외가:{1})'.format(call_itm_number, call_otm_number)
        else:
            pass

        self.checkBox_cm_opt_price_1.setText(cm_price_part_txt)
        self.checkBox_cm_opt_quote_1.setText(cm_quote_part_txt)

        self.checkBox_nm_opt_price_1.setText(nm_price_part_txt)
        self.checkBox_nm_opt_quote_1.setText(nm_quote_part_txt)

    def change_call_otm(self):

        global call_otm_number, flag_call_otm_number_changed

        dt = datetime.now()

        call_otm_number = self.spinBox_call_otm.value()

        flag_call_otm_number_changed = True

        txt = '[{0:02d}:{1:02d}:{2:02d}] 콜외가를 {3}개로 설정합니다.\r'.format(dt.hour, dt.minute, dt.second, call_otm_number)
        self.parent.textBrowser.append(txt)

        if TARGET_MONTH == 'CM':

            cm_price_part_txt = '근월물 옵션가격(C내가:{0}, C외가:{1})'.format(call_itm_number, call_otm_number)
            cm_quote_part_txt = '근월물 옵션호가(C내가:{0}, C외가:{1})'.format(call_itm_number, call_otm_number)

            nm_price_part_txt = '차월물 옵션가격(C내가:{0}, C외가:{1})'.format(call_itm_number, call_otm_number)
            nm_quote_part_txt = '차월물 옵션호가(C내가:{0}, C외가:{1})'.format(call_itm_number, call_otm_number)

        elif TARGET_MONTH == 'NM':

            cm_price_part_txt = '차월물 옵션가격(C내가:{0}, C외가:{1})'.format(call_itm_number, call_otm_number)
            cm_quote_part_txt = '차월물 옵션호가(C내가:{0}, C외가:{1})'.format(call_itm_number, call_otm_number)

            nm_price_part_txt = '차차월물 옵션가격(C내가:{0}, C외가:{1})'.format(call_itm_number, call_otm_number)
            nm_quote_part_txt = '차차월물 옵션호가(C내가:{0}, C외가:{1})'.format(call_itm_number, call_otm_number)
        else:
            pass

        self.checkBox_cm_opt_price_1.setText(cm_price_part_txt)
        self.checkBox_cm_opt_quote_1.setText(cm_quote_part_txt)

        self.checkBox_nm_opt_price_1.setText(nm_price_part_txt)
        self.checkBox_nm_opt_quote_1.setText(nm_quote_part_txt)

    def change_put_itm(self):

        global put_itm_number, flag_put_itm_number_changed

        dt = datetime.now()

        put_itm_number = self.spinBox_put_itm.value()

        flag_put_itm_number_changed = True

        txt = '[{0:02d}:{1:02d}:{2:02d}] 풋내가를 {3}개로 설정합니다.\r'.format(dt.hour, dt.minute, dt.second, put_itm_number)
        self.parent.textBrowser.append(txt)

        if TARGET_MONTH == 'CM':

            cm_price_part_txt = '근월물 옵션가격(P내가:{0}, P외가:{1})'.format(put_itm_number, put_otm_number)
            cm_quote_part_txt = '근월물 옵션호가(P내가:{0}, P외가:{1})'.format(put_itm_number, put_otm_number)

            nm_price_part_txt = '차월물 옵션가격(P내가:{0}, P외가:{1})'.format(put_itm_number, put_otm_number)
            nm_quote_part_txt = '차월물 옵션호가(P내가:{0}, P외가:{1})'.format(put_itm_number, put_otm_number)

        elif TARGET_MONTH == 'NM':

            cm_price_part_txt = '차월물 옵션가격(P내가:{0}, P외가:{1})'.format(put_itm_number, put_otm_number)
            cm_quote_part_txt = '차월물 옵션호가(P내가:{0}, P외가:{1})'.format(put_itm_number, put_otm_number)

            nm_price_part_txt = '차차월물 옵션가격(P내가:{0}, P외가:{1})'.format(put_itm_number, put_otm_number)
            nm_quote_part_txt = '차차월물 옵션호가(P내가:{0}, P외가:{1})'.format(put_itm_number, put_otm_number)
        else:
            pass

        self.checkBox_cm_opt_price_1.setText(cm_price_part_txt)
        self.checkBox_cm_opt_quote_1.setText(cm_quote_part_txt)

        self.checkBox_nm_opt_price_1.setText(nm_price_part_txt)
        self.checkBox_nm_opt_quote_1.setText(nm_quote_part_txt)

    def change_put_otm(self):

        global put_otm_number, flag_put_otm_number_changed

        dt = datetime.now()

        put_otm_number = self.spinBox_put_otm.value()

        flag_put_otm_number_changed = True

        txt = '[{0:02d}:{1:02d}:{2:02d}] 풋외가를 {3}개로 설정합니다.\r'.format(dt.hour, dt.minute, dt.second, put_otm_number)
        self.parent.textBrowser.append(txt)

        if TARGET_MONTH == 'CM':

            cm_price_part_txt = '근월물 옵션가격(P내가:{0}, P외가:{1})'.format(put_itm_number, put_otm_number)
            cm_quote_part_txt = '근월물 옵션호가(P내가:{0}, P외가:{1})'.format(put_itm_number, put_otm_number)

            nm_price_part_txt = '차월물 옵션가격(P내가:{0}, P외가:{1})'.format(put_itm_number, put_otm_number)
            nm_quote_part_txt = '차월물 옵션호가(P내가:{0}, P외가:{1})'.format(put_itm_number, put_otm_number)

        elif TARGET_MONTH == 'NM':

            cm_price_part_txt = '차월물 옵션가격(P내가:{0}, P외가:{1})'.format(put_itm_number, put_otm_number)
            cm_quote_part_txt = '차월물 옵션호가(P내가:{0}, P외가:{1})'.format(put_itm_number, put_otm_number)

            nm_price_part_txt = '차차월물 옵션가격(P내가:{0}, P외가:{1})'.format(put_itm_number, put_otm_number)
            nm_quote_part_txt = '차차월물 옵션호가(P내가:{0}, P외가:{1})'.format(put_itm_number, put_otm_number)
        else:
            pass

        self.checkBox_cm_opt_price_1.setText(cm_price_part_txt)
        self.checkBox_cm_opt_quote_1.setText(cm_quote_part_txt)

        self.checkBox_nm_opt_price_1.setText(nm_price_part_txt)
        self.checkBox_nm_opt_quote_1.setText(nm_quote_part_txt)

    def change_bb_period(self):

        global BB_PERIOD

        dt = datetime.now()

        txt = self.lineEdit_bb_period.text()
        BB_PERIOD = int(txt)

        txt = '[{0:02d}:{1:02d}:{2:02d}] BB EMA 이평주기를 {3}(으)로 수정합니다.\r'.format(dt.hour, dt.minute, dt.second, BB_PERIOD)
        self.parent.textBrowser.append(txt)

    def change_bb_1st_std(self):

        global BB_1ST_STD

        dt = datetime.now()

        txt = self.lineEdit_bb_1st_std.text()
        BB_1ST_STD = int(txt)

        txt = '[{0:02d}:{1:02d}:{2:02d}] 1st BB STD를 {3}(으)로 수정합니다.\r'.format(dt.hour, dt.minute, dt.second, BB_1ST_STD)
        self.parent.textBrowser.append(txt)

    def change_bb_2nd_std(self):

        global BB_2ND_STD

        dt = datetime.now()

        txt = self.lineEdit_bb_2nd_std.text()
        BB_2ND_STD = int(txt)

        txt = '[{0:02d}:{1:02d}:{2:02d}] 2nd BB STD를 {3}(으)로 수정합니다.\r'.format(dt.hour, dt.minute, dt.second, BB_2ND_STD)
        self.parent.textBrowser.append(txt)

    def change_rsi_period(self):

        global RSI_PERIOD

        dt = datetime.now()

        txt = self.lineEdit_rsi_period.text()
        RSI_PERIOD = int(txt)

        txt = '[{0:02d}:{1:02d}:{2:02d}] RSI 이평주기를 {3}(으)로 수정합니다.\r'.format(dt.hour, dt.minute, dt.second, RSI_PERIOD)
        self.parent.textBrowser.append(txt)

    def change_rsi_offset(self):

        global RSI_OFFSET

        dt = datetime.now()

        txt = self.lineEdit_rsi_offset.text()
        RSI_OFFSET = int(txt)

        txt = '[{0:02d}:{1:02d}:{2:02d}] RSI OFFSET을 {3}(으)로 수정합니다.\r'.format(dt.hour, dt.minute, dt.second, RSI_OFFSET)
        self.parent.textBrowser.append(txt)

    def change_rsi_scale_factor(self):

        global RSI_SCALE_FACTOR

        dt = datetime.now()

        txt = self.lineEdit_rsi_scale_factor.text()
        RSI_SCALE_FACTOR = int(txt)

        txt = '[{0:02d}:{1:02d}:{2:02d}] RSI SCALE FACTOR를 {3}(으)로 수정합니다.\r'.format(dt.hour, dt.minute, dt.second, RSI_SCALE_FACTOR)
        self.parent.textBrowser.append(txt)

    def change_cci1_period(self):

        global CCI1_PERIOD

        dt = datetime.now()

        txt = self.lineEdit_cci1_period.text()
        CCI1_PERIOD = int(txt)

        txt = '[{0:02d}:{1:02d}:{2:02d}] CCI1 이평주기를 {3}(으)로 수정합니다.\r'.format(dt.hour, dt.minute, dt.second, CCI1_PERIOD)
        self.parent.textBrowser.append(txt)

    def change_cci2_period(self):

        global CCI2_PERIOD

        dt = datetime.now()

        txt = self.lineEdit_cci2_period.text()
        CCI2_PERIOD = int(txt)

        txt = '[{0:02d}:{1:02d}:{2:02d}] CCI2 이평주기를 {3}(으)로 수정합니다.\r'.format(dt.hour, dt.minute, dt.second, CCI2_PERIOD)
        self.parent.textBrowser.append(txt)

    def change_ssl_period(self):

        global SSL_PERIOD

        dt = datetime.now()

        txt = self.lineEdit_ssl_period.text()
        SSL_PERIOD = int(txt)

        txt = '[{0:02d}:{1:02d}:{2:02d}] SSL PERIOD 이평주기를 {3}(으)로 수정합니다.\r'.format(dt.hour, dt.minute, dt.second, SSL_PERIOD)
        self.parent.textBrowser.append(txt)

    def change_ichimoku_baseline_period(self):

        global BASE_LINE_PERIOD

        dt = datetime.now()

        txt = self.lineEdit_ichimoku_baseline_period.text()
        BASE_LINE_PERIOD = int(txt)

        txt = '[{0:02d}:{1:02d}:{2:02d}] 일목균형 기준선 주기를 {3}(으)로 수정합니다.\r'.format(dt.hour, dt.minute, dt.second, BASE_LINE_PERIOD)
        self.parent.textBrowser.append(txt)

    def change_ichimoku_conversionline_period(self):

        global CONVERSION_LINE_PERIOD

        dt = datetime.now()

        txt = self.lineEdit_ichimoku_conversionline_period.text()
        CONVERSION_LINE_PERIOD = int(txt)

        txt = '[{0:02d}:{1:02d}:{2:02d}] 일목균형 전환선 주기를 {3}(으)로 수정합니다.\r'.format(dt.hour, dt.minute, dt.second, CONVERSION_LINE_PERIOD)
        self.parent.textBrowser.append(txt)

    def change_ichimoku_span_period(self):

        global SPAN_B_PERIOD

        dt = datetime.now()

        txt = self.lineEdit_ichimoku_span_period.text()
        SPAN_B_PERIOD = int(txt)

        txt = '[{0:02d}:{1:02d}:{2:02d}] 일목균형 SPAN 주기를 {3}(으)로 수정합니다.\r'.format(dt.hour, dt.minute, dt.second, SPAN_B_PERIOD)
        self.parent.textBrowser.append(txt)

    def change_view_time_interval(self):

        global view_time_tolerance

        dt = datetime.now()

        txt = self.lineEdit_tolerance.text()
        view_time_tolerance = int(txt)
        
        txt = '[{0:02d}:{1:02d}:{2:02d}] 데이타보기 허용시간을 {3}sec로 수정합니다.\r'.format(dt.hour, dt.minute, dt.second, view_time_tolerance)
        self.parent.textBrowser.append(txt)

    def change_plot_interval(self):

        global chart_update_interval, flag_plot_update_interval_changed

        dt = datetime.now()

        txt = self.lineEdit_plot.text()
        chart_update_interval = int(txt)

        flag_plot_update_interval_changed = True

        txt = '[{0:02d}:{1:02d}:{2:02d}] Plot 갱신주기를 {3} msec로 수정합니다.\r'.format(dt.hour, dt.minute, dt.second, chart_update_interval)
        self.parent.textBrowser.append(txt)

    def change_drate_ratio(self):

        global SP500_FUT_시가_등락율비

        dt = datetime.now()

        txt = self.lineEdit_drate_ratio.text()
        SP500_FUT_시가_등락율비 = int(txt)

        txt = '[{0:02d}:{1:02d}:{2:02d}] FUT vs SP500 등락율비를 {3} (으)로 수정합니다.\r'.format(dt.hour, dt.minute, dt.second, SP500_FUT_시가_등락율비)
        self.parent.textBrowser.append(txt)

    def change_drate_offset(self):

        global DRATE_OFFSET

        dt = datetime.now()

        txt = self.lineEdit_drate_offset.text()
        DRATE_OFFSET = float(txt)

        txt = '[{0:02d}:{1:02d}:{2:02d}] DRATE OFFSET을 {3} (으)로 수정합니다.\r'.format(dt.hour, dt.minute, dt.second, DRATE_OFFSET)
        self.parent.textBrowser.append(txt)

    def checkBox_cm_fut_price_checkState(self):

        dt = datetime.now()

        global CM_FUT_PRICE

        if self.checkBox_cm_fut_price.isChecked() == True:

            CM_FUT_PRICE = True

            if self.parent.dialog['선물옵션전광판'] is not None and self.parent.dialog['선물옵션전광판'].flag_score_board_open:

                self.parent.realtime_thread_dataworker.RequestRealData(FUT_REAL, GMSHCODE)

                txt = '[{0:02d}:{1:02d}:{2:02d}] 실시간 근월물 선물 가격을 조회합니다.\r'.format(dt.hour, dt.minute, dt.second)
                self.parent.textBrowser.append(txt)
            else:
                pass
        else:
            CM_FUT_PRICE = False

            if self.parent.dialog['선물옵션전광판'] is not None and self.parent.dialog['선물옵션전광판'].flag_score_board_open:

                self.parent.realtime_thread_dataworker.CancelRealData(FUT_REAL, GMSHCODE)

                txt = '[{0:02d}:{1:02d}:{2:02d}] 실시간 근월물 선물 가격요청을 취소합니다.\r'.format(dt.hour, dt.minute, dt.second)
                self.parent.textBrowser.append(txt)
            else:
                pass

    def checkBox_cm_fut_quote_checkState(self):

        dt = datetime.now()

        global CM_FUT_QUOTE

        if self.checkBox_cm_fut_quote.isChecked() == True:

            CM_FUT_QUOTE = True

            if self.parent.dialog['선물옵션전광판'] is not None and self.parent.dialog['선물옵션전광판'].flag_score_board_open:

                self.parent.realtime_thread_dataworker.RequestRealData(FUT_HO, GMSHCODE)

                txt = '[{0:02d}:{1:02d}:{2:02d}] 실시간 근월물 선물 호가를 조회합니다.\r'.format(dt.hour, dt.minute, dt.second)
                self.parent.textBrowser.append(txt)
            else:
                pass
        else:
            CM_FUT_QUOTE = False

            if self.parent.dialog['선물옵션전광판'] is not None and self.parent.dialog['선물옵션전광판'].flag_score_board_open:

                self.parent.realtime_thread_dataworker.CancelRealData(FUT_HO, GMSHCODE)

                txt = '[{0:02d}:{1:02d}:{2:02d}] 실시간 근월물 선물 호가요청을 취소합니다.\r'.format(dt.hour, dt.minute, dt.second)
                self.parent.textBrowser.append(txt)
            else:
                pass

    def checkBox_cm_opt_price_checkState(self):

        dt = datetime.now()

        global CM_OPT_PRICE

        if self.checkBox_cm_opt_price.isChecked() == True:

            CM_OPT_PRICE = True

            if self.parent.dialog['선물옵션전광판'] is not None and self.parent.dialog['선물옵션전광판'].flag_score_board_open:

                for i in range(CM_OPT_LENGTH):
                    self.parent.realtime_thread_dataworker.RequestRealData(OPT_REAL, CM_CALL_CODE[i])
                    self.parent.realtime_thread_dataworker.RequestRealData(OPT_REAL, CM_PUT_CODE[i])

                txt = '[{0:02d}:{1:02d}:{2:02d}] 실시간 근월물 옵션 가격을 조회합니다.\r'.format(dt.hour, dt.minute, dt.second)
                self.parent.textBrowser.append(txt)
            else:
                pass
        else:
            CM_OPT_PRICE = False

            if self.parent.dialog['선물옵션전광판'] is not None and self.parent.dialog['선물옵션전광판'].flag_score_board_open:

                self.parent.realtime_thread_dataworker.CancelRealData(OPT_REAL)

                txt = '[{0:02d}:{1:02d}:{2:02d}] 실시간 근월물 옵션 가격요청 전체를 취소합니다.\r'.format(dt.hour, dt.minute, dt.second)
                self.parent.textBrowser.append(txt)
            else:
                pass

    def checkBox_cm_opt_price_1_checkState(self):

        dt = datetime.now()

        global CM_OPT_PRICE1

        if self.checkBox_cm_opt_price_1.isChecked() == True:

            CM_OPT_PRICE1 = True

            if self.parent.dialog['선물옵션전광판'] is not None and self.parent.dialog['선물옵션전광판'].flag_score_board_open:

                for i in range(ATM_INDEX - call_otm_number, ATM_INDEX + call_itm_number + 1):

                    if i >= 0:
                        self.parent.realtime_thread_dataworker.RequestRealData(OPT_REAL, CM_CALL_CODE[i])

                        txt = '[{0:02d}:{1:02d}:{2:02d}] 재요청된 콜 행사가는 {3} 입니다.\r'.format(dt.hour, dt.minute, dt.second, CM_CALL_CODE[i])
                        self.parent.textBrowser.append(txt)
                        print(txt)
                    else:
                        pass

                for i in range(ATM_INDEX - put_itm_number, ATM_INDEX + put_otm_number + 1):

                    if i >= 0:
                        self.parent.realtime_thread_dataworker.RequestRealData(OPT_REAL, CM_PUT_CODE[i])

                        txt = '[{0:02d}:{1:02d}:{2:02d}] 재요청된 풋 행사가는 {3} 입니다.\r'.format(dt.hour, dt.minute, dt.second, CM_PUT_CODE[i])
                        self.parent.textBrowser.append(txt)
                        print(txt)
                    else:
                        pass                

                txt = '[{0:02d}:{1:02d}:{2:02d}] 실시간 근월물 옵션 가격(내가 {3}개, 외가 {4}개)을 조회합니다.\r'.format(dt.hour, dt.minute, dt.second, put_itm_number, put_otm_number)
                self.parent.textBrowser.append(txt)
            else:
                pass
        else:
            CM_OPT_PRICE1 = False

            if self.parent.dialog['선물옵션전광판'] is not None and self.parent.dialog['선물옵션전광판'].flag_score_board_open:

                self.parent.realtime_thread_dataworker.CancelRealData(OPT_REAL)

                txt = '[{0:02d}:{1:02d}:{2:02d}] 실시간 근월물 옵션 가격요청(풋내가 {3}개, 풋외가 {4}개)을 취소합니다.\r'.format(dt.hour, dt.minute, dt.second, put_itm_number, put_otm_number)
                self.parent.textBrowser.append(txt)
            else:
                pass

    def checkBox_cm_opt_quote_checkState(self):

        dt = datetime.now()

        global CM_OPT_QUOTE

        if self.checkBox_cm_opt_quote.isChecked() == True:

            CM_OPT_QUOTE = True

            if self.parent.dialog['선물옵션전광판'] is not None and self.parent.dialog['선물옵션전광판'].flag_score_board_open:

                for i in range(CM_OPT_LENGTH):
                    self.parent.realtime_thread_dataworker.RequestRealData(OPT_HO, CM_CALL_CODE[i])
                    self.parent.realtime_thread_dataworker.RequestRealData(OPT_HO, CM_PUT_CODE[i])

                txt = '[{0:02d}:{1:02d}:{2:02d}] 실시간 근월물 옵션 호가를 조회합니다.\r'.format(dt.hour, dt.minute, dt.second)
                self.parent.textBrowser.append(txt)
            else:
                pass
        else:
            CM_OPT_QUOTE = False

            if self.parent.dialog['선물옵션전광판'] is not None and self.parent.dialog['선물옵션전광판'].flag_score_board_open:

                self.parent.realtime_thread_dataworker.CancelRealData(OPT_HO)

                txt = '[{0:02d}:{1:02d}:{2:02d}] 실시간 근월물 옵션 호가요청 전체를 취소합니다.\r'.format(dt.hour, dt.minute, dt.second)
                self.parent.textBrowser.append(txt)
            else:
                pass

    def checkBox_cm_opt_quote_1_checkState(self):

        dt = datetime.now()

        global CM_OPT_QUOTE1

        if self.checkBox_cm_opt_quote_1.isChecked() == True:

            CM_OPT_QUOTE1 = True

            if self.parent.dialog['선물옵션전광판'] is not None and self.parent.dialog['선물옵션전광판'].flag_score_board_open:

                for i in range(ATM_INDEX - call_otm_number, ATM_INDEX + call_itm_number + 1):

                    if i >= 0:
                        self.parent.realtime_thread_dataworker.RequestRealData(OPT_HO, CM_CALL_CODE[i])

                        txt = '[{0:02d}:{1:02d}:{2:02d}] 재요청된 콜 행사가는 {3} 입니다.\r'.format(dt.hour, dt.minute, dt.second, CM_CALL_CODE[i])
                        self.parent.textBrowser.append(txt)
                        print(txt)
                    else:
                        pass

                for i in range(ATM_INDEX - put_itm_number, ATM_INDEX + put_otm_number + 1):

                    if i >= 0:
                        self.parent.realtime_thread_dataworker.RequestRealData(OPT_HO, CM_PUT_CODE[i])

                        txt = '[{0:02d}:{1:02d}:{2:02d}] 재요청된 풋 행사가는 {3} 입니다.\r'.format(dt.hour, dt.minute, dt.second, CM_PUT_CODE[i])
                        self.parent.textBrowser.append(txt)
                        print(txt)
                    else:
                        pass                

                txt = '[{0:02d}:{1:02d}:{2:02d}] 실시간 근월물 옵션 호가(내가 {3}개, 외가 {4}개)를 조회합니다.\r'.format(dt.hour, dt.minute, dt.second, put_itm_number, put_otm_number)
                self.parent.textBrowser.append(txt)
            else:
                pass
        else:
            CM_OPT_QUOTE1 = False

            if self.parent.dialog['선물옵션전광판'] is not None and self.parent.dialog['선물옵션전광판'].flag_score_board_open:

                self.parent.realtime_thread_dataworker.CancelRealData(OPT_HO)

                txt = '[{0:02d}:{1:02d}:{2:02d}] 실시간 근월물 옵션 호가요청(풋내가 {3}개, 풋외가 {4}개)을 취소합니다.\r'.format(dt.hour, dt.minute, dt.second, put_itm_number, put_otm_number)
                self.parent.textBrowser.append(txt)
            else:
                pass

    def checkBox_nm_fut_price_checkState(self):

        dt = datetime.now()

        global NM_FUT_PRICE

        if self.checkBox_nm_fut_price.isChecked() == True:

            NM_FUT_PRICE = True

            if self.parent.dialog['선물옵션전광판'] is not None and self.parent.dialog['선물옵션전광판'].flag_score_board_open:
                
                self.parent.realtime_thread_dataworker.RequestRealData(FUT_REAL, CMSHCODE)

                txt = '[{0:02d}:{1:02d}:{2:02d}] 실시간 차월물 선물 가격을 조회합니다.\r'.format(dt.hour, dt.minute, dt.second)
                self.parent.textBrowser.append(txt)
            else:
                pass
        else:
            NM_FUT_PRICE = False

            if self.parent.dialog['선물옵션전광판'] is not None and self.parent.dialog['선물옵션전광판'].flag_score_board_open:

                self.parent.realtime_thread_dataworker.CancelRealData(FUT_REAL, CMSHCODE)

                txt = '[{0:02d}:{1:02d}:{2:02d}] 실시간 차월물 선물 가격요청을 취소합니다.\r'.format(dt.hour, dt.minute, dt.second)
                self.parent.textBrowser.append(txt)
            else:
                pass

    def checkBox_nm_fut_quote_checkState(self):

        dt = datetime.now()

        global NM_FUT_QUOTE

        if self.checkBox_nm_fut_quote.isChecked() == True:

            NM_FUT_QUOTE = True

            if self.parent.dialog['선물옵션전광판'] is not None and self.parent.dialog['선물옵션전광판'].flag_score_board_open:

                self.parent.realtime_thread_dataworker.RequestRealData(FUT_HO, CMSHCODE)

                txt = '[{0:02d}:{1:02d}:{2:02d}] 실시간 차월물 선물 호가를 조회합니다.\r'.format(dt.hour, dt.minute, dt.second)
                self.parent.textBrowser.append(txt)
            else:
                pass
        else:
            NM_FUT_QUOTE = False

            if self.parent.dialog['선물옵션전광판'] is not None and self.parent.dialog['선물옵션전광판'].flag_score_board_open:

                self.parent.realtime_thread_dataworker.CancelRealData(FUT_HO, CMSHCODE)

                txt = '[{0:02d}:{1:02d}:{2:02d}] 실시간 차월물 선물 호가요청을 취소합니다.\r'.format(dt.hour, dt.minute, dt.second)
                self.parent.textBrowser.append(txt)
            else:
                pass

    def checkBox_nm_opt_price_checkState(self):

        dt = datetime.now()

        global NM_OPT_PRICE

        if self.checkBox_nm_opt_price.isChecked() == True:

            NM_OPT_PRICE = True

            if self.parent.dialog['선물옵션전광판'] is not None and self.parent.dialog['선물옵션전광판'].flag_score_board_open:

                for i in range(NM_OPT_LENGTH):
                    self.parent.realtime_thread_dataworker.RequestRealData(OPT_REAL, NM_CALL_CODE[i])
                    self.parent.realtime_thread_dataworker.RequestRealData(OPT_REAL, NM_PUT_CODE[i])

                txt = '[{0:02d}:{1:02d}:{2:02d}] 실시간 차월물 옵션 가격을 조회합니다.\r'.format(dt.hour, dt.minute, dt.second)
                self.parent.textBrowser.append(txt)
            else:
                pass
        else:
            NM_OPT_PRICE = False

            if self.parent.dialog['선물옵션전광판'] is not None and self.parent.dialog['선물옵션전광판'].flag_score_board_open:

                self.parent.realtime_thread_dataworker.CancelRealData(OPT_REAL)

                txt = '[{0:02d}:{1:02d}:{2:02d}] 실시간 차월물 옵션 가격요청 전체를 취소합니다.\r'.format(dt.hour, dt.minute, dt.second)
                self.parent.textBrowser.append(txt)
            else:
                pass

    def checkBox_nm_opt_price_1_checkState(self):

        dt = datetime.now()

        global NM_OPT_PRICE1

        if self.checkBox_nm_opt_price_1.isChecked() == True:

            NM_OPT_PRICE1 = True

            if self.parent.dialog['선물옵션전광판'] is not None and self.parent.dialog['선물옵션전광판'].flag_score_board_open:

                for i in range(ATM_INDEX - call_otm_number, ATM_INDEX + call_itm_number + 1):

                    if i >= 0:
                        self.parent.realtime_thread_dataworker.RequestRealData(OPT_REAL, NM_CALL_CODE[i])

                        txt = '[{0:02d}:{1:02d}:{2:02d}] 재요청된 콜 행사가는 {3} 입니다.\r'.format(dt.hour, dt.minute, dt.second, NM_CALL_CODE[i])
                        self.parent.textBrowser.append(txt)
                        print(txt)
                    else:
                        pass

                for i in range(ATM_INDEX - put_itm_number, ATM_INDEX + put_otm_number + 1):

                    if i >= 0:
                        self.parent.realtime_thread_dataworker.RequestRealData(OPT_REAL, NM_PUT_CODE[i])

                        txt = '[{0:02d}:{1:02d}:{2:02d}] 재요청된 풋 행사가는 {3} 입니다.\r'.format(dt.hour, dt.minute, dt.second, NM_PUT_CODE[i])
                        self.parent.textBrowser.append(txt)
                        print(txt)
                    else:
                        pass                

                txt = '[{0:02d}:{1:02d}:{2:02d}] 실시간 근월물 옵션 가격(내가 {3}개, 외가 {4}개)을 조회합니다.\r'.format(dt.hour, dt.minute, dt.second, put_itm_number, put_otm_number)
                self.parent.textBrowser.append(txt)
            else:
                pass
        else:
            NM_OPT_PRICE1 = False

            if self.parent.dialog['선물옵션전광판'] is not None and self.parent.dialog['선물옵션전광판'].flag_score_board_open:

                self.parent.realtime_thread_dataworker.CancelRealData(OPT_REAL)

                txt = '[{0:02d}:{1:02d}:{2:02d}] 실시간 근월물 옵션 가격요청(풋내가 {3}개, 풋외가 {4}개)을 취소합니다.\r'.format(dt.hour, dt.minute, dt.second, put_itm_number, put_otm_number)
                self.parent.textBrowser.append(txt)
            else:
                pass

    def checkBox_nm_opt_quote_checkState(self):

        dt = datetime.now()

        global NM_OPT_QUOTE

        if self.checkBox_nm_opt_quote.isChecked() == True:

            NM_OPT_QUOTE = True

            if self.parent.dialog['선물옵션전광판'] is not None and self.parent.dialog['선물옵션전광판'].flag_score_board_open:

                for i in range(NM_OPT_LENGTH):
                    self.parent.realtime_thread_dataworker.RequestRealData(OPT_HO, NM_CALL_CODE[i])
                    self.parent.realtime_thread_dataworker.RequestRealData(OPT_HO, NM_PUT_CODE[i])

                txt = '[{0:02d}:{1:02d}:{2:02d}] 실시간 차월물 옵션 호가를 조회합니다.\r'.format(dt.hour, dt.minute, dt.second)
                self.parent.textBrowser.append(txt)
            else:
                pass
        else:
            NM_OPT_QUOTE = False

            if self.parent.dialog['선물옵션전광판'] is not None and self.parent.dialog['선물옵션전광판'].flag_score_board_open:

                self.parent.realtime_thread_dataworker.CancelRealData(OPT_HO)                   

                txt = '[{0:02d}:{1:02d}:{2:02d}] 실시간 차월물 옵션 호가요청 전체를 취소합니다.\r'.format(dt.hour, dt.minute, dt.second)
                self.parent.textBrowser.append(txt)
            else:
                pass

    def checkBox_nm_opt_quote_1_checkState(self):

        dt = datetime.now()

        global NM_OPT_QUOTE1

        if self.checkBox_nm_opt_quote_1.isChecked() == True:

            NM_OPT_QUOTE1 = True

            if self.parent.dialog['선물옵션전광판'] is not None and self.parent.dialog['선물옵션전광판'].flag_score_board_open:

                for i in range(ATM_INDEX - call_otm_number, ATM_INDEX + call_itm_number + 1):

                    if i >= 0:
                        self.parent.realtime_thread_dataworker.RequestRealData(OPT_HO, NM_CALL_CODE[i])

                        txt = '[{0:02d}:{1:02d}:{2:02d}] 재요청된 콜 행사가는 {3} 입니다.\r'.format(dt.hour, dt.minute, dt.second, CM_CALL_CODE[i])
                        self.parent.textBrowser.append(txt)
                        print(txt)
                    else:
                        pass

                for i in range(ATM_INDEX - put_itm_number, ATM_INDEX + put_otm_number + 1):

                    if i >= 0:
                        self.parent.realtime_thread_dataworker.RequestRealData(OPT_HO, NM_PUT_CODE[i])

                        txt = '[{0:02d}:{1:02d}:{2:02d}] 재요청된 풋 행사가는 {3} 입니다.\r'.format(dt.hour, dt.minute, dt.second, CM_PUT_CODE[i])
                        self.parent.textBrowser.append(txt)
                        print(txt)
                    else:
                        pass                

                txt = '[{0:02d}:{1:02d}:{2:02d}] 실시간 차월물 옵션 호가(내가 {3}개, 외가 {4}개)를 조회합니다.\r'.format(dt.hour, dt.minute, dt.second, put_itm_number, put_otm_number)
                self.parent.textBrowser.append(txt)
            else:
                pass
        else:
            NM_OPT_QUOTE1 = False

            if self.parent.dialog['선물옵션전광판'] is not None and self.parent.dialog['선물옵션전광판'].flag_score_board_open:

                self.parent.realtime_thread_dataworker.CancelRealData(OPT_HO)                    

                txt = '[{0:02d}:{1:02d}:{2:02d}] 실시간 차월물 옵션 호가요청(풋내가 {3}개, 풋외가 {4}개)을 취소합니다.\r'.format(dt.hour, dt.minute, dt.second, put_itm_number, put_otm_number)
                self.parent.textBrowser.append(txt)
            else:
                pass

    def checkBox_kospi_kosdaq_checkState(self):

        dt = datetime.now()

        global KOSPI_KOSDAQ

        if self.checkBox_kospi_kosdaq.isChecked() == True:

            KOSPI_KOSDAQ = True

            if self.parent.dialog['선물옵션전광판'] is not None and self.parent.dialog['선물옵션전광판'].flag_score_board_open:

                self.parent.realtime_thread_dataworker.RequestRealData('IJ', KOSPI)
                self.parent.realtime_thread_dataworker.RequestRealData('IJ', KOSDAQ)
                self.parent.realtime_thread_dataworker.RequestRealData('S3', SAMSUNG)

                txt = '[{0:02d}:{1:02d}:{2:02d}] KOSPI, KOSDAQ, SAMSUNG 지수를 조회합니다.\r'.format(dt.hour, dt.minute, dt.second)
                self.parent.textBrowser.append(txt)
            else:
                pass
        else:
            KOSPI_KOSDAQ = False

            if self.parent.dialog['선물옵션전광판'] is not None and self.parent.dialog['선물옵션전광판'].flag_score_board_open:

                self.parent.realtime_thread_dataworker.CancelRealData('IJ', KOSPI)
                self.parent.realtime_thread_dataworker.CancelRealData('IJ', KOSDAQ)
                self.parent.realtime_thread_dataworker.CancelRealData('S3', SAMSUNG)

                txt = '[{0:02d}:{1:02d}:{2:02d}] KOSPI, KOSDAQ, SAMSUNG 지수 요청을 취소합니다.\r'.format(dt.hour, dt.minute, dt.second)
                self.parent.textBrowser.append(txt)
            else:
                pass

    def checkBox_supply_demand_checkState(self):

        dt = datetime.now()

        global SUPPLY_DEMAND

        if self.checkBox_supply_demand.isChecked() == True:

            SUPPLY_DEMAND = True

            if self.parent.dialog['선물옵션전광판'] is not None and self.parent.dialog['선물옵션전광판'].flag_score_board_open:

                self.parent.realtime_thread_dataworker.RequestRealData('BM', FUTURES)
                self.parent.realtime_thread_dataworker.RequestRealData('BM', KOSPI)
                self.parent.realtime_thread_dataworker.RequestRealData('PM', KOSPI)

                txt = '[{0:02d}:{1:02d}:{2:02d}] 실시간 투자자별 매매현황을 조회합니다.\r'.format(dt.hour, dt.minute, dt.second)
                self.parent.textBrowser.append(txt)
            else:
                pass
        else:
            SUPPLY_DEMAND = False

            if self.parent.dialog['선물옵션전광판'] is not None and self.parent.dialog['선물옵션전광판'].flag_score_board_open:

                self.parent.realtime_thread_dataworker.CancelRealData('BM')
                self.parent.realtime_thread_dataworker.CancelRealData('PM')

                txt = '[{0:02d}:{1:02d}:{2:02d}] 실시간 투자자별 매매현황 요청을 취소합니다.\r'.format(dt.hour, dt.minute, dt.second)
                self.parent.textBrowser.append(txt)
            else:
                pass

    def checkBox_dow_checkState(self):

        dt = datetime.now()

        global DOW_CHK

        if self.checkBox_dow.isChecked() == True:

            DOW_CHK = True

            if self.parent.dialog['선물옵션전광판'] is not None and self.parent.dialog['선물옵션전광판'].flag_score_board_open:

                self.parent.realtime_thread_dataworker.RequestRealData('OVC', DOW)

                txt = '[{0:02d}:{1:02d}:{2:02d}] 실시간 DOW를 조회합니다.\r'.format(dt.hour, dt.minute, dt.second)
                self.parent.textBrowser.append(txt)
            else:
                pass
        else:
            DOW_CHK = False

            if self.parent.dialog['선물옵션전광판'] is not None and self.parent.dialog['선물옵션전광판'].flag_score_board_open:

                dow_ljust = DOW.ljust(8)

                self.parent.realtime_thread_dataworker.CancelRealData('OVC', dow_ljust)

                txt = '[{0:02d}:{1:02d}:{2:02d}] 실시간 DOW 요청을 취소합니다.\r'.format(dt.hour, dt.minute, dt.second)
                self.parent.textBrowser.append(txt)
            else:
                pass

    def checkBox_sp500_checkState(self):

        dt = datetime.now()

        global SP500_CHK

        if self.checkBox_sp500.isChecked() == True:

            SP500_CHK = True

            if self.parent.dialog['선물옵션전광판'] is not None and self.parent.dialog['선물옵션전광판'].flag_score_board_open:

                self.parent.realtime_thread_dataworker.RequestRealData('OVC', SP500)

                txt = '[{0:02d}:{1:02d}:{2:02d}] 실시간 S&P 500을 조회합니다.\r'.format(dt.hour, dt.minute, dt.second)
                self.parent.textBrowser.append(txt)
            else:
                pass
        else:
            SP500_CHK = False

            if self.parent.dialog['선물옵션전광판'] is not None and self.parent.dialog['선물옵션전광판'].flag_score_board_open:

                sp500_ljust = SP500.ljust(8)

                self.parent.realtime_thread_dataworker.CancelRealData('OVC', sp500_ljust)

                txt = '[{0:02d}:{1:02d}:{2:02d}] 실시간 S&P 500 요청을 취소합니다.\r'.format(dt.hour, dt.minute, dt.second)
                self.parent.textBrowser.append(txt)
            else:
                pass

    def checkBox_nasdaq_checkState(self):

        dt = datetime.now()

        global NASDAQ_CHK

        if self.checkBox_nasdaq.isChecked() == True:

            NASDAQ_CHK = True

            if self.parent.dialog['선물옵션전광판'] is not None and self.parent.dialog['선물옵션전광판'].flag_score_board_open:

                self.parent.realtime_thread_dataworker.RequestRealData('OVC', NASDAQ)

                txt = '[{0:02d}:{1:02d}:{2:02d}] 실시간 NASDAQ을 조회합니다.\r'.format(dt.hour, dt.minute, dt.second)
                self.parent.textBrowser.append(txt)
            else:
                pass
        else:
            NASDAQ_CHK = False

            if self.parent.dialog['선물옵션전광판'] is not None and self.parent.dialog['선물옵션전광판'].flag_score_board_open:

                nasdaq_ljust = NASDAQ.ljust(8)

                self.parent.realtime_thread_dataworker.CancelRealData('OVC', nasdaq_ljust)

                txt = '[{0:02d}:{1:02d}:{2:02d}] 실시간 NASDAQ 요청을 취소합니다.\r'.format(dt.hour, dt.minute, dt.second)
                self.parent.textBrowser.append(txt)
            else:
                pass

    def checkBox_oil_checkState(self):

        dt = datetime.now()

        global WTI_CHK

        if self.checkBox_oil.isChecked() == True:

            WTI_CHK = True

            if self.parent.dialog['선물옵션전광판'] is not None and self.parent.dialog['선물옵션전광판'].flag_score_board_open:

                self.parent.realtime_thread_dataworker.RequestRealData('OVC', WTI)

                txt = '[{0:02d}:{1:02d}:{2:02d}] 실시간 WTI OIL을 조회합니다.\r'.format(dt.hour, dt.minute, dt.second)
                self.parent.textBrowser.append(txt)
            else:
                pass
        else:
            WTI_CHK = False

            if self.parent.dialog['선물옵션전광판'] is not None and self.parent.dialog['선물옵션전광판'].flag_score_board_open:

                wti_ljust = WTI.ljust(8)

                self.parent.realtime_thread_dataworker.CancelRealData('OVC', wti_ljust)

                txt = '[{0:02d}:{1:02d}:{2:02d}] 실시간 WTI OIL 요청을 취소합니다.\r'.format(dt.hour, dt.minute, dt.second)
                self.parent.textBrowser.append(txt)
            else:
                pass

    def checkBox_euro_checkState(self):

        dt = datetime.now()

        global EURO_CHK

        if self.checkBox_eurofx.isChecked() == True:

            EURO_CHK = True

            if self.parent.dialog['선물옵션전광판'] is not None and self.parent.dialog['선물옵션전광판'].flag_score_board_open:

                self.parent.realtime_thread_dataworker.RequestRealData('OVC', EURO)

                txt = '[{0:02d}:{1:02d}:{2:02d}] 실시간 EURO을 조회합니다.\r'.format(dt.hour, dt.minute, dt.second)
                self.parent.textBrowser.append(txt)
            else:
                pass
        else:
            EURO_CHK = False

            if self.parent.dialog['선물옵션전광판'] is not None and self.parent.dialog['선물옵션전광판'].flag_score_board_open:

                euro_ljust = EURO.ljust(8)

                self.parent.realtime_thread_dataworker.CancelRealData('OVC', euro_ljust)

                txt = '[{0:02d}:{1:02d}:{2:02d}] 실시간 EURO 요청을 취소합니다.\r'.format(dt.hour, dt.minute, dt.second)
                self.parent.textBrowser.append(txt)
            else:
                pass

    def checkBox_yen_checkState(self):

        pass

    def checkBox_adi_checkState(self):

        pass

    def checkBox_hsi_checkState(self):

        dt = datetime.now()

        global HANGSENG_CHK

        if self.checkBox_hangseng.isChecked() == True:
            
            HANGSENG_CHK = True

            if self.parent.dialog['선물옵션전광판'] is not None and self.parent.dialog['선물옵션전광판'].flag_score_board_open:

                self.parent.realtime_thread_dataworker.RequestRealData('OVC', HANGSENG)

                txt = '[{0:02d}:{1:02d}:{2:02d}] 실시간 HANGSENG을 조회합니다.\r'.format(dt.hour, dt.minute, dt.second)
                self.parent.textBrowser.append(txt)
            else:
                pass
        else:
            HANGSENG_CHK = False

            if self.parent.dialog['선물옵션전광판'] is not None and self.parent.dialog['선물옵션전광판'].flag_score_board_open:

                hsi_ljust = HANGSENG.ljust(8)

                self.parent.realtime_thread_dataworker.CancelRealData('OVC', hsi_ljust)

                txt = '[{0:02d}:{1:02d}:{2:02d}] 실시간 HANGSENG 요청을 취소합니다.\r'.format(dt.hour, dt.minute, dt.second)
                self.parent.textBrowser.append(txt)
            else:
                pass

    def checkBox_gold_checkState(self):

        dt = datetime.now()

        global GOLD_CHK

        if self.checkBox_gold.isChecked() == True:

            GOLD_CHK = True

            if self.parent.dialog['선물옵션전광판'] is not None and self.parent.dialog['선물옵션전광판'].flag_score_board_open:

                self.parent.realtime_thread_dataworker.RequestRealData('OVC', GOLD)

                txt = '[{0:02d}:{1:02d}:{2:02d}] 실시간 GOLD를 조회합니다.\r'.format(dt.hour, dt.minute, dt.second)
                self.parent.textBrowser.append(txt)
            else:
                pass
        else:
            GOLD_CHK = False

            if self.parent.dialog['선물옵션전광판'] is not None and self.parent.dialog['선물옵션전광판'].flag_score_board_open:

                gold_ljust = GOLD.ljust(8)

                self.parent.realtime_thread_dataworker.CancelRealData('OVC', gold_ljust)

                txt = '[{0:02d}:{1:02d}:{2:02d}] 실시간 GOLD 요청을 취소합니다.\r'.format(dt.hour, dt.minute, dt.second)
                self.parent.textBrowser.append(txt)
            else:
                pass

    def checkBox_news_checkState(self):

        dt = datetime.now()

        global NEWS_CHK

        if self.checkBox_news.isChecked() == True:

            NEWS_CHK = True
            '''
            if self.parent.dialog['선물옵션전광판'] is not None and self.parent.dialog['선물옵션전광판'].flag_score_board_open:

                self.parent.realtime_thread_dataworker.RequestRealData('NWS')

                txt = '[{0:02d}:{1:02d}:{2:02d}] 실시간 NEWS를 조회합니다.\r'.format(dt.hour, dt.minute, dt.second)
                self.parent.textBrowser.append(txt)
            else:
                pass
            '''
        else:
            NEWS_CHK = False
            '''
            if self.parent.dialog['선물옵션전광판'] is not None and self.parent.dialog['선물옵션전광판'].flag_score_board_open:

                self.parent.realtime_thread_dataworker.CancelRealData('NWS')

                txt = '[{0:02d}:{1:02d}:{2:02d}] 실시간 NEWS 요청을 취소합니다.\r'.format(dt.hour, dt.minute, dt.second)
                self.parent.textBrowser.append(txt)
            else:
                pass
            '''

    def checkBox_periodic_plot_state_change(self):

        dt = datetime.now()

        global flag_option_periodic_update_mode

        if self.checkBox_periodic_plot.isChecked() == True:

            flag_option_periodic_update_mode = True

            txt = '[{0:02d}:{1:02d}:{2:02d}] 옵션전관판을 주기적 갱신모드로 설정합니다.\r'.format(dt.hour, dt.minute, dt.second)
            self.parent.textBrowser.append(txt)
            print(txt)
        else:
            flag_option_periodic_update_mode = False

            txt = '[{0:02d}:{1:02d}:{2:02d}] 옵션전관판의 주기적 갱신모드를 해지합니다.\r'.format(dt.hour, dt.minute, dt.second)
            self.parent.textBrowser.append(txt)
            print(txt)

    def checkBox_tts_state_change(self):

        dt = datetime.now()

        global flag_tts

        if self.checkBox_tts.isChecked() == True:

            flag_tts = True

            txt = '[{0:02d}:{1:02d}:{2:02d}] TTS ON (으)로 설정합니다.\r'.format(dt.hour, dt.minute, dt.second)
            self.parent.textBrowser.append(txt)
            print(txt)
        else:
            flag_tts = False

            txt = '[{0:02d}:{1:02d}:{2:02d}] TTS OFF (으)로 설정합니다.\r'.format(dt.hour, dt.minute, dt.second)
            self.parent.textBrowser.append(txt)
            print(txt)

    def checkBox_lagging_span_state_change(self):

        dt = datetime.now()

        global flag_one_eye_lagging_span

        if self.checkBox_lagging_span.isChecked() == True:

            flag_one_eye_lagging_span = True

            txt = '[{0:02d}:{1:02d}:{2:02d}] 일목균형지표 후행 SPAN을 표시합니다.\r'.format(dt.hour, dt.minute, dt.second)
            self.parent.textBrowser.append(txt)
            print(txt)
        else:
            flag_one_eye_lagging_span = False

            self.parent.dialog['SkyChart'].plot1_lagging_span_curve.clear()
            self.parent.dialog['SkyChart'].plot2_lagging_span_curve.clear()
            self.parent.dialog['SkyChart'].plot3_lagging_span_curve.clear()
            self.parent.dialog['SkyChart'].plot4_lagging_span_curve.clear()
            self.parent.dialog['SkyChart'].plot5_lagging_span_curve.clear()
            self.parent.dialog['SkyChart'].plot6_lagging_span_curve.clear()

            txt = '[{0:02d}:{1:02d}:{2:02d}] 일목균형지표 후행 SPAN 표시설정을 해지합니다.\r'.format(dt.hour, dt.minute, dt.second)
            self.parent.textBrowser.append(txt)
            print(txt)

    def checkBox_plot_sync_state_change(self):

        dt = datetime.now()

        global flag_plot_sync_mode
        #global flag_score_board_start, flag_telegram_send_start, flag_telegram_listen_start

        if self.checkBox_plot_sync.isChecked() == True:

            flag_plot_sync_mode = True

            #flag_score_board_start = False
            #flag_telegram_send_start = False
            #flag_telegram_listen_start = False

            if self.parent.dialog['SkyChart'] is not None:
                self.parent.dialog['SkyChart'].plot2.setXLink(self.parent.dialog['SkyChart'].plot1)
                self.parent.dialog['SkyChart'].plot3.setXLink(self.parent.dialog['SkyChart'].plot1)
                self.parent.dialog['SkyChart'].plot5.setXLink(self.parent.dialog['SkyChart'].plot4)
                self.parent.dialog['SkyChart'].plot6.setXLink(self.parent.dialog['SkyChart'].plot4)

                txt = '[{0:02d}:{1:02d}:{2:02d}] Plot Sync 모드로 설정합니다.\r'.format(dt.hour, dt.minute, dt.second)
                self.parent.textBrowser.append(txt)
                print(txt)
            else:
                txt = '[{0:02d}:{1:02d}:{2:02d}] Sky Chart를 열어주세요.\r'.format(dt.hour, dt.minute, dt.second)
                self.parent.textBrowser.append(txt)
                print(txt)            
        else:
            flag_plot_sync_mode = False

            #flag_score_board_start = True
            #flag_telegram_send_start = True
            #flag_telegram_listen_start = True

            if self.parent.dialog['SkyChart'] is not None:
                self.parent.dialog['SkyChart'].plot2.setXLink(self.parent.dialog['SkyChart'].plot2)
                self.parent.dialog['SkyChart'].plot3.setXLink(self.parent.dialog['SkyChart'].plot3)
                self.parent.dialog['SkyChart'].plot5.setXLink(self.parent.dialog['SkyChart'].plot5)
                self.parent.dialog['SkyChart'].plot6.setXLink(self.parent.dialog['SkyChart'].plot6)
                txt = '[{0:02d}:{1:02d}:{2:02d}] Plot Sync 모드를 해지합니다.\r'.format(dt.hour, dt.minute, dt.second)
                self.parent.textBrowser.append(txt)
                print(txt)
            else:
                txt = '[{0:02d}:{1:02d}:{2:02d}] Sky Chart를 열어주세요.\r'.format(dt.hour, dt.minute, dt.second)
                self.parent.textBrowser.append(txt)
                print(txt) 

    def checkBox_telegram_state_change(self):

        dt = datetime.now()

        global flag_telegram_service

        if self.checkBox_telegram.isChecked() == True:

            flag_telegram_service = True
            
            txt = '[{0:02d}:{1:02d}:{2:02d}] Telegram Service 모드로 설정합니다.\r'.format(dt.hour, dt.minute, dt.second)
            self.parent.textBrowser.append(txt)
            print(txt)
        else:
            flag_telegram_service = False

            txt = '[{0:02d}:{1:02d}:{2:02d}] Telegram Service 모드를 해지합니다.\r'.format(dt.hour, dt.minute, dt.second)
            self.parent.textBrowser.append(txt)
            print(txt)

    def checkBox_search_moving_node_change(self):

        dt = datetime.now()

        global flag_search_moving_node

        if self.checkBox_search_moving_node.isChecked() == True:

            flag_search_moving_node = True
            
            txt = '[{0:02d}:{1:02d}:{2:02d}] 동적노드 탐색을 활설화합니다.\r'.format(dt.hour, dt.minute, dt.second)
            self.parent.textBrowser.append(txt)
            print(txt)
        else:
            flag_search_moving_node = False

            txt = '[{0:02d}:{1:02d}:{2:02d}] 동적노드 탐색을 비활설화합니다.\r'.format(dt.hour, dt.minute, dt.second)
            self.parent.textBrowser.append(txt)
            print(txt)

    def closeEvent(self,event):

        self.flag_realtimeitem_open = False

        print('설정 Diaglog를 닫습니다.')
        self.close()

    def __del__(self):

        print('설정 Diaglog객체가 소멸됩니다.')

#####################################################################################################################################################################
# Sky Chart UI Class
#####################################################################################################################################################################
if UI_HIDE:
        import skychart_ui
        Ui_SkyChart = skychart_ui.Ui_Dialog   
else:
    Ui_SkyChart, QtBaseClass_SkyChart = uic.loadUiType(UI_DIR + chart_ui_type)
#####################################################################################################################################################################
class 화면_SkyChart(QDialog, Ui_SkyChart):

    exceptionOccurred = pyqtSignal(Exception, str)
    
    def __init__(self, parent=None):

        super(화면_SkyChart, self).__init__(parent, flags = Qt.WindowTitleHint | Qt.WindowMinMaxButtonsHint | Qt.WindowCloseButtonHint)
        #super(화면_SkyChart, self).__init__()
        #self.setWindowFlags(Qt.WindowTitleHint | Qt.WindowMinMaxButtonsHint | Qt.WindowCloseButtonHint)
        self.setAttribute(Qt.WA_DeleteOnClose)
        #self.setAttribute(Qt.WA_DeleteOnClose, True)
        
        self.setupUi(self)
        self.parent = parent

        dt = datetime.now()
        start_time = timeit.default_timer()
        
        self.flag_big_chart_open = True

        self.bc_ui_update_time = 0

        # 종료 버튼으로 종료할 때 실행시킨다. __del__ 실행을 보장하기 위해서 사용
        atexit.register(self.__del__) 
        
        # 현재화면의 중앙에 표시
        qr = self.frameGeometry()
        qr.moveCenter(self.parent.centerPoint)
        self.move(qr.topLeft())     
        self.showNormal()

        txt = '[{0:02d}:{1:02d}:{2:02d}] Sky Chart 초기화중...\r'.format(dt.hour, dt.minute, dt.second)
        self.parent.textBrowser.append(txt)
        
        self.comboBox1.setStyleSheet('background-color: lightgreen; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.comboBox2.setStyleSheet('background-color: lightgreen; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.comboBox3.setStyleSheet('background-color: lightgreen; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.comboBox4.setStyleSheet('background-color: lightgreen; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.comboBox5.setStyleSheet('background-color: lightgreen; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.comboBox6.setStyleSheet('background-color: lightgreen; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

        self.checkBox_plot1_bband.stateChanged.connect(self.checkBox_plot1_bband_checkState)
        self.checkBox_plot2_bband.stateChanged.connect(self.checkBox_plot2_bband_checkState)
        self.checkBox_plot3_bband.stateChanged.connect(self.checkBox_plot3_bband_checkState)
        self.checkBox_plot4_bband.stateChanged.connect(self.checkBox_plot4_bband_checkState)
        self.checkBox_plot5_bband.stateChanged.connect(self.checkBox_plot5_bband_checkState)
        self.checkBox_plot6_bband.stateChanged.connect(self.checkBox_plot6_bband_checkState)

        self.checkBox_plot1_one_eye.stateChanged.connect(self.checkBox_plot1_one_eye_checkState)
        self.checkBox_plot2_one_eye.stateChanged.connect(self.checkBox_plot2_one_eye_checkState)
        self.checkBox_plot3_one_eye.stateChanged.connect(self.checkBox_plot3_one_eye_checkState)
        self.checkBox_plot4_one_eye.stateChanged.connect(self.checkBox_plot4_one_eye_checkState)
        self.checkBox_plot5_one_eye.stateChanged.connect(self.checkBox_plot5_one_eye_checkState)
        self.checkBox_plot6_one_eye.stateChanged.connect(self.checkBox_plot6_one_eye_checkState)

        self.checkBox_plot1_psar.stateChanged.connect(self.checkBox_plot1_psar_checkState)
        self.checkBox_plot2_psar.stateChanged.connect(self.checkBox_plot2_psar_checkState)
        self.checkBox_plot3_psar.stateChanged.connect(self.checkBox_plot3_psar_checkState)
        self.checkBox_plot4_psar.stateChanged.connect(self.checkBox_plot4_psar_checkState)
        self.checkBox_plot5_psar.stateChanged.connect(self.checkBox_plot5_psar_checkState)
        self.checkBox_plot6_psar.stateChanged.connect(self.checkBox_plot6_psar_checkState)
        
        if DayTime:

            if TARGET_MONTH == 'CM':

                widget_title = repr(current_month) + '월 만기 주간 Sky Chart'

            elif TARGET_MONTH == 'NM':

                widget_title = repr(next_month) + '월 만기 주간 Sky Chart'
            else:
                pass
        else:
            if MANGI_YAGAN:

                if TARGET_MONTH == 'CM':

                    widget_title = repr(next_month) + '월 만기 야간 Sky Chart'

                elif TARGET_MONTH == 'NM':

                    widget_title = repr(month_after_next) + '월 만기 야간 Sky Chart'
                else:
                    pass
            else:
                if TARGET_MONTH == 'CM':

                    widget_title = repr(current_month) + '월 만기 야간 Sky Chart'

                elif TARGET_MONTH == 'NM':

                    widget_title = repr(next_month) + '월 만기 야간 Sky Chart'

                else:
                    pass

        self.setWindowTitle(widget_title)

        # 시간표시
        self.label_time_1.setStyleSheet('background-color: lawngreen; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_time_1.setText("🕘")

        self.label_time_2.setStyleSheet('background-color: lawngreen; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_time_2.setText("🕘")

        self.label_time_3.setStyleSheet('background-color: lawngreen; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_time_3.setText("🕘")

        self.label_time_4.setStyleSheet('background-color: lawngreen; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_time_4.setText("🕘")

        self.label_time_5.setStyleSheet('background-color: lawngreen; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_time_5.setText("🕘")

        self.label_time_6.setStyleSheet('background-color: lawngreen; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_time_6.setText("🕘")

        # Plot1 가격표시
        self.label_p1_1.setStyleSheet('background-color: lime; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_p1_1.setText(" 좌표 ")
        
        self.label_p1_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_p1_2.setText(" BB Upper\n BB Middle\n BB Lower ")
        
        self.label_p1_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_p1_3.setText(" PSAR\n MAMA ")
        
        self.label_p1_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_p1_4.setText(" ONE EYE ")
        
        self.label_11.setStyleSheet('background-color: goldenrod; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_11.setText(" 전저 ")
        
        self.label_12.setStyleSheet('background-color: gold; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_12.setText(" 전고 ")
        
        self.label_13.setStyleSheet('background-color: lime; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_13.setText(" 종가 ")
        
        self.label_14.setStyleSheet('background-color: magenta; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_14.setText(" 피봇 ")
        
        self.label_15.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_15.setText(" 시가 ")
        
        self.label_16.setStyleSheet('background-color: skyblue; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_16.setText(" 저가 ")
        
        self.label_17.setStyleSheet('background-color: black; color: yellow; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_17.setText(" 0.0 (전일대비, 등락율, 진폭) ")
        
        self.label_18.setStyleSheet('background-color: pink; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_18.setText(" 고가 ")

        # Plot2 가격표시        
        self.label_p2_1.setStyleSheet('background-color: lime; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_p2_1.setText(" 좌표 ")
        
        self.label_p2_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_p2_2.setText(" BB Upper\n BB Middle\n BB Lower ")
        
        self.label_p2_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_p2_3.setText(" PSAR\n MAMA ")
        
        self.label_p2_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_p2_4.setText(" ONE EYE ")
        
        self.label_21.setStyleSheet('background-color: goldenrod; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_21.setText(" 전저 ")
        
        self.label_22.setStyleSheet('background-color: gold; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_22.setText(" 전고 ")
        
        self.label_23.setStyleSheet('background-color: lime; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_23.setText(" 종가 ")
        
        self.label_24.setStyleSheet('background-color: magenta; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_24.setText(" 피봇 ")
        
        self.label_25.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_25.setText(" 시가 ")
        
        self.label_26.setStyleSheet('background-color: skyblue; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_26.setText(" 저가 ")
        
        self.label_27.setStyleSheet('background-color: black; color: yellow; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_27.setText(" 0.0 (전일대비, 등락율, 진폭) ")
        
        self.label_28.setStyleSheet('background-color: pink; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_28.setText(" 고가 ")

        # Plot3 가격표시        
        self.label_p3_1.setStyleSheet('background-color: lime; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_p3_1.setText(" 좌표 ")
        
        self.label_p3_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_p3_2.setText(" BB Upper\n BB Middle\n BB Lower ")
        
        self.label_p3_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_p3_3.setText(" PSAR\n MAMA ")
        
        self.label_p3_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_p3_4.setText(" ONE EYE ")
        
        self.label_31.setStyleSheet('background-color: goldenrod; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_31.setText(" 전저 ")
        
        self.label_32.setStyleSheet('background-color: gold; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_32.setText(" 전고 ")
        
        self.label_33.setStyleSheet('background-color: lime; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_33.setText(" 종가 ")
        
        self.label_34.setStyleSheet('background-color: magenta; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_34.setText(" 피봇 ")
        
        self.label_35.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_35.setText(" 시가 ")
        
        self.label_36.setStyleSheet('background-color: skyblue; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_36.setText(" 저가 ")
        
        self.label_37.setStyleSheet('background-color: black; color: yellow; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_37.setText(" 0.0 (전일대비, 등락율, 진폭) ")
        
        self.label_38.setStyleSheet('background-color: pink; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_38.setText(" 고가 ")

        # Plot4 가격표시        
        self.label_p4_1.setStyleSheet('background-color: lime; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_p4_1.setText(" 좌표 ")
        
        self.label_p4_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_p4_2.setText(" BB Upper\n BB Middle\n BB Lower ")
        
        self.label_p4_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_p4_3.setText(" PSAR\n MAMA ")
        
        self.label_p4_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_p4_4.setText(" ONE EYE ")
        
        self.label_41.setStyleSheet('background-color: goldenrod; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_41.setText(" 전저 ")
        
        self.label_42.setStyleSheet('background-color: gold; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_42.setText(" 전고 ")
        
        self.label_43.setStyleSheet('background-color: lime; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_43.setText(" 종가 ")
        
        self.label_44.setStyleSheet('background-color: magenta; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_44.setText(" 피봇 ")
        
        self.label_45.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_45.setText(" 시가 ")
        
        self.label_46.setStyleSheet('background-color: skyblue; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_46.setText(" 저가 ")
        
        self.label_47.setStyleSheet('background-color: black; color: yellow; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_47.setText(" 0.0 (전일대비, 등락율, 진폭) ")
        
        self.label_48.setStyleSheet('background-color: pink; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_48.setText(" 고가 ")

        # Plot5 가격표시        
        self.label_p5_1.setStyleSheet('background-color: lime; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_p5_1.setText(" 좌표 ")
        
        self.label_p5_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_p5_2.setText(" BB Upper\n BB Middle\n BB Lower ")
        
        self.label_p5_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_p5_3.setText(" PSAR\n MAMA ")
        
        self.label_p5_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_p5_4.setText(" ONE EYE ")
        
        self.label_51.setStyleSheet('background-color: goldenrod; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_51.setText(" 전저 ")
        
        self.label_52.setStyleSheet('background-color: gold; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_52.setText(" 전고 ")
        
        self.label_53.setStyleSheet('background-color: lime; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_53.setText(" 종가 ")
        
        self.label_54.setStyleSheet('background-color: magenta; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_54.setText(" 피봇 ")
        
        self.label_55.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_55.setText(" 시가 ")
        
        self.label_56.setStyleSheet('background-color: skyblue; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_56.setText(" 저가 ")
        
        self.label_57.setStyleSheet('background-color: black; color: yellow; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_57.setText(" 0.0 (전일대비, 등락율, 진폭) ")
        
        self.label_58.setStyleSheet('background-color: pink; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_58.setText(" 고가 ")

        # Plot6 가격표시        
        self.label_p6_1.setStyleSheet('background-color: lime; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_p6_1.setText(" 좌표 ")
        
        self.label_p6_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_p6_2.setText(" BB Upper\n BB Middle\n BB Lower ")
        
        self.label_p6_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_p6_3.setText(" PSAR\n MAMA ")
        
        self.label_p6_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_p6_4.setText(" ONE EYE ")
        
        self.label_61.setStyleSheet('background-color: goldenrod; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_61.setText(" 전저 ")
        
        self.label_62.setStyleSheet('background-color: gold; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_62.setText(" 전고 ")
        
        self.label_63.setStyleSheet('background-color: lime; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_63.setText(" 종가 ")
        
        self.label_64.setStyleSheet('background-color: magenta; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_64.setText(" 피봇 ")
        
        self.label_65.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_65.setText(" 시가 ")
        
        self.label_66.setStyleSheet('background-color: skyblue; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_66.setText(" 저가 ")
        
        self.label_67.setStyleSheet('background-color: black; color: yellow; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_67.setText(" 0.0 (전일대비, 등락율, 진폭) ")
        
        self.label_68.setStyleSheet('background-color: pink; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_68.setText(" 고가 ")

        self.comboBox1.addItems(['Clear', '선물가격', '선옵잔량비', '선옵체결', '옵션가격', '옵션잔량비', '옵션미결', '등락율비', '수급종합', 'Reserved', \
            'S&P 500', 'DOW', 'NASDAQ', 'HSI', 'WTI Oil', 'GOLD', 'EURO', 'YEN', 'ADI', '선물 보조지표', 'S&P 500 보조지표', 'DOW 보조지표', 'NASDAQ 보조지표', 'HSI 보조지표', 'WTI Oil 보조지표', 'GOLD 보조지표', 'EURO 보조지표', 'YEN 보조지표', 'ADI 보조지표'])
        self.comboBox1.insertSeparator(1)
        self.comboBox1.insertSeparator(9)
        self.comboBox1.insertSeparator(12)
        self.comboBox1.insertSeparator(22)
        self.comboBox1.currentIndexChanged.connect(self.cb1_selectionChanged)

        self.comboBox2.addItems(['Clear', '선물가격', '선옵잔량비', '선옵체결', '옵션가격', '옵션잔량비', '옵션미결', '등락율비', '수급종합', 'Reserved', \
            'S&P 500', 'DOW', 'NASDAQ', 'HSI', 'WTI Oil', 'GOLD', 'EURO', 'YEN', 'ADI', '선물 보조지표', 'S&P 500 보조지표', 'DOW 보조지표', 'NASDAQ 보조지표', 'HSI 보조지표', 'WTI Oil 보조지표', 'GOLD 보조지표', 'EURO 보조지표', 'YEN 보조지표', 'ADI 보조지표'])
        self.comboBox2.insertSeparator(1)
        self.comboBox2.insertSeparator(9)
        self.comboBox2.insertSeparator(12)
        self.comboBox2.insertSeparator(22)
        self.comboBox2.currentIndexChanged.connect(self.cb2_selectionChanged)

        self.comboBox3.addItems(['Clear', '선물가격', '선옵잔량비', '선옵체결', '옵션가격', '옵션잔량비', '옵션미결', '등락율비', '수급종합', 'Reserved', \
            'S&P 500', 'DOW', 'NASDAQ', 'HSI', 'WTI Oil', 'GOLD', 'EURO', 'YEN', 'ADI', '선물 보조지표', 'S&P 500 보조지표', 'DOW 보조지표', 'NASDAQ 보조지표', 'HSI 보조지표', 'WTI Oil 보조지표', 'GOLD 보조지표', 'EURO 보조지표', 'YEN 보조지표', 'ADI 보조지표'])
        self.comboBox3.insertSeparator(1)
        self.comboBox3.insertSeparator(9)
        self.comboBox3.insertSeparator(12)
        self.comboBox3.insertSeparator(22)
        self.comboBox3.currentIndexChanged.connect(self.cb3_selectionChanged)

        self.comboBox4.addItems(['Clear', '선물가격', '선옵잔량비', '선옵체결', '옵션가격', '옵션잔량비', '옵션미결', '등락율비', '수급종합', 'Reserved', \
            'S&P 500', 'DOW', 'NASDAQ', 'HSI', 'WTI Oil', 'GOLD', 'EURO', 'YEN', 'ADI', '선물 보조지표', 'S&P 500 보조지표', 'DOW 보조지표', 'NASDAQ 보조지표', 'HSI 보조지표', 'WTI Oil 보조지표', 'GOLD 보조지표', 'EURO 보조지표', 'YEN 보조지표', 'ADI 보조지표'])
        self.comboBox4.insertSeparator(1)
        self.comboBox4.insertSeparator(9)
        self.comboBox4.insertSeparator(12)
        self.comboBox4.insertSeparator(22)
        self.comboBox4.currentIndexChanged.connect(self.cb4_selectionChanged)

        self.comboBox5.addItems(['Clear', '선물가격', '선옵잔량비', '선옵체결', '옵션가격', '옵션잔량비', '옵션미결', '등락율비', '수급종합', 'Reserved', \
            'S&P 500', 'DOW', 'NASDAQ', 'HSI', 'WTI Oil', 'GOLD', 'EURO', 'YEN', 'ADI', '선물 보조지표', 'S&P 500 보조지표', 'DOW 보조지표', 'NASDAQ 보조지표', 'HSI 보조지표', 'WTI Oil 보조지표', 'GOLD 보조지표', 'EURO 보조지표', 'YEN 보조지표', 'ADI 보조지표'])
        self.comboBox5.insertSeparator(1)
        self.comboBox5.insertSeparator(9)
        self.comboBox5.insertSeparator(12)
        self.comboBox5.insertSeparator(22)
        self.comboBox5.currentIndexChanged.connect(self.cb5_selectionChanged)

        self.comboBox6.addItems(['Clear', '선물가격', '선옵잔량비', '선옵체결', '옵션가격', '옵션잔량비', '옵션미결', '등락율비', '수급종합', 'Reserved', \
            'S&P 500', 'DOW', 'NASDAQ', 'HSI', 'WTI Oil', 'GOLD', 'EURO', 'YEN', 'ADI', '선물 보조지표', 'S&P 500 보조지표', 'DOW 보조지표', 'NASDAQ 보조지표', 'HSI 보조지표', 'WTI Oil 보조지표', 'GOLD 보조지표', 'EURO 보조지표', 'YEN 보조지표', 'ADI 보조지표'])
        self.comboBox6.insertSeparator(1)
        self.comboBox6.insertSeparator(9)
        self.comboBox6.insertSeparator(12)
        self.comboBox6.insertSeparator(22)
        self.comboBox6.currentIndexChanged.connect(self.cb6_selectionChanged)

        self.exceptionOccurred.connect(self.on_exceptionOccurred)

        # 그래프관련 초기화
        # Enable antialiasing for prettier plots
        pg.setConfigOptions(antialias=True)

        self.plot1.enableAutoRange('y', True)
        self.plot1.showGrid(True, True, 0.5)        
        #self.plot1_legend = self.plot1.addLegend()
        self.plot1_legend = None

        self.plot2.enableAutoRange('y', True)
        self.plot2.showGrid(True, True, 0.5)
        self.plot2_legend = None

        self.plot3.enableAutoRange('y', True)
        self.plot3.showGrid(True, True, 0.5)
        self.plot3_legend = None 

        self.plot4.enableAutoRange('y', True)
        self.plot4.showGrid(True, True, 0.5)
        self.plot4_legend = None

        self.plot5.enableAutoRange('y', True)
        self.plot5.showGrid(True, True, 0.5)
        self.plot5_legend = None

        self.plot6.enableAutoRange('y', True)
        self.plot6.showGrid(True, True, 0.5)
        self.plot6_legend = None

        if flag_plot_sync_mode:
            self.plot2.setXLink(self.plot1)
            self.plot3.setXLink(self.plot1)
            self.plot5.setXLink(self.plot4)
            self.plot6.setXLink(self.plot4)
        else:
            pass

        # Line & Curve of the Plot1 옵션가격(new)
        self.plot1_time_line_jugan_start = self.plot1.addLine(x=0, y=None, pen=jugan_x_start_pen)
        self.plot1_time_line_yagan_start = self.plot1.addLine(x=0, y=None, pen=yagan_x_start_pen)
        self.plot1_time_line = self.plot1.addLine(x=0, y=None, pen=moving_x_pen)
        
        # 선물가격
        self.plot1_fut_jl_line = self.plot1.addLine(x=None, pen=goldenrod_pen)
        self.plot1_fut_jh_line = self.plot1.addLine(x=None, pen=gold_pen)  
        self.plot1_fut_open_line = self.plot1.addLine(x=None, pen=red_dot_pen)
        self.plot1_fut_close_line = self.plot1.addLine(x=None, pen=lime_pen)
        self.plot1_fut_pivot_line = self.plot1.addLine(x=None, pen=fut_pvt_pen)
        self.plot1_fut_low_line = self.plot1.addLine(x=None, pen=skyblue_pen)
        self.plot1_fut_high_line = self.plot1.addLine(x=None, pen=pink_pen)

        self.plot1_fut_cm_price_curve = self.plot1.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        self.plot1_fut_nm_price_curve = self.plot1.plot(pen=gpen, symbolBrush=lime, symbolPen='w', symbol='o', symbolSize=3)
        self.plot1_kp200_curve = self.plot1.plot(pen=ypen, symbolBrush=gold, symbolPen='w', symbol='h', symbolSize=3)

        # 선옵잔량비
        self.plot1_quote_remainder_ratio_base_line = self.plot1.addLine(x=None, pen=ypen1)
        self.plot1_nm_futures_quote_remainder_ratio_bottom_line = self.plot1.addLine(x=None, pen=gpen1)
        self.plot1_nm_futures_quote_remainder_ratio_upper_line = self.plot1.addLine(x=None, pen=red_dot_pen)
        
        self.plot1_fut_cm_quote_remainder_ratio_curve = self.plot1.plot(pen=gpen, symbolBrush=lime, symbolPen='w', symbol='o', symbolSize=3)
        self.plot1_fut_nm_quote_remainder_ratio_curve = self.plot1.plot(pen=ypen, symbolBrush=gold, symbolPen='w', symbol='o', symbolSize=3)

        # 선옵체결
        self.plot1_fut_volume_curve = self.plot1.plot(pen=gpen, symbolBrush=lime, symbolPen='w', symbol='o', symbolSize=3)
        self.plot1_call_volume_curve = self.plot1.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        self.plot1_put_volume_curve = self.plot1.plot(pen=bpen, symbolBrush=cyan, symbolPen='w', symbol='h', symbolSize=3)           

        self.plot1_center_val_lower_line = self.plot1.addLine(x=None, pen=skyblue_pen)
        self.plot1_center_val_line = self.plot1.addLine(x=None, pen=gold_pen)
        self.plot1_center_val_upper_line = self.plot1.addLine(x=None, pen=pink_pen)

        self.plot1_center_val_curve = self.plot1.plot(pen=gpen, symbolBrush=lime, symbolPen='w', symbol='h', symbolSize=3)
        
        # 옵션잔량비
        self.plot1_call_quote_curve = self.plot1.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        self.plot1_put_quote_curve = self.plot1.plot(pen=bpen, symbolBrush=cyan, symbolPen='w', symbol='h', symbolSize=3)
        self.plot1_option_quote_remainder_ratio_bottom_line = self.plot1.addLine(x=None, pen=gpen1)
        self.plot1_option_quote_remainder_ratio_upper_line = self.plot1.addLine(x=None, pen=red_dot_pen)

        # 옵션미결
        self.plot1_call_oi_curve = self.plot1.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        self.plot1_put_oi_curve = self.plot1.plot(pen=bpen, symbolBrush=cyan, symbolPen='w', symbol='h', symbolSize=3)

        # 등락율비
        self.plot1_fut_cm_drate_curve = self.plot1.plot(pen=ypen, symbolBrush=gold, symbolPen='w', symbol='o', symbolSize=3)
        self.plot1_fut_nm_drate_curve = self.plot1.plot(pen=wpen, symbolBrush='w', symbolPen='w', symbol='o', symbolSize=3)
        self.plot1_cme_drate_curve = self.plot1.plot(pen=gpen, symbolBrush=lime, symbolPen='w', symbol='h', symbolSize=3)
        self.plot1_call_drate_curve = self.plot1.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        self.plot1_put_drate_curve = self.plot1.plot(pen=bpen, symbolBrush=cyan, symbolPen='w', symbol='h', symbolSize=3)

        # 해외선물        
        self.plot1_ovc_jl_line = self.plot1.addLine(x=None, pen=goldenrod_pen)
        self.plot1_ovc_jh_line = self.plot1.addLine(x=None, pen=gold_pen)  
        self.plot1_ovc_close_line = self.plot1.addLine(x=None, pen=lime_pen)
        self.plot1_ovc_open_line = self.plot1.addLine(x=None, pen=red_dot_pen)
        self.plot1_ovc_pivot_line = self.plot1.addLine(x=None, pen=fut_pvt_pen)
        self.plot1_ovc_low_line = self.plot1.addLine(x=None, pen=skyblue_pen)
        self.plot1_ovc_high_line = self.plot1.addLine(x=None, pen=pink_pen)

        self.plot1_sp500_curve = self.plot1.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        self.plot1_dow_curve = self.plot1.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        self.plot1_nasdaq_curve = self.plot1.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        self.plot1_hsi_curve = self.plot1.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        self.plot1_wti_curve = self.plot1.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        self.plot1_gold_curve = self.plot1.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        self.plot1_euro_curve = self.plot1.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        self.plot1_yen_curve = self.plot1.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        self.plot1_adi_curve = self.plot1.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)

        self.plot1_bollinger_1st_upper_curve = self.plot1.plot(pen=bb_1st_pen)
        self.plot1_bollinger_1st_middle_curve = self.plot1.plot(pen=bb_middle_pen)
        self.plot1_bollinger_1st_lower_curve = self.plot1.plot(pen=bb_1st_pen)
        self.plot1_bollinger_2nd_upper_curve = self.plot1.plot(pen=bb_2nd_pen)
        self.plot1_bollinger_2nd_middle_curve = self.plot1.plot(pen=bb_middle_pen)
        self.plot1_bollinger_2nd_lower_curve = self.plot1.plot(pen=bb_2nd_pen)

        self.plot1_psar_curve = self.plot1.plot(pen=psar_pen)

        self.plot1_mama_curve = self.plot1.plot(pen=mama_pen)
        self.plot1_fama_curve = self.plot1.plot(pen=fama_pen)

        #self.plot1_sslup_curve = self.plot1.plot(pen=sslup_pen)
        #self.plot1_ssldown_curve = self.plot1.plot(pen=ssldown_pen)

        self.plot1_oe_conv_curve = self.plot1.plot(pen=conv_pen)
        self.plot1_oe_base_curve = self.plot1.plot(pen=base_pen)
        self.plot1_span_a_curve = self.plot1.plot(pen=span_a_pen)
        self.plot1_span_b_curve = self.plot1.plot(pen=span_b_pen)
        self.plot1_lagging_span_curve = self.plot1.plot(pen=lagging_span_pen)

        # 수급종합
        self.plot1_program_curve = self.plot1.plot(pen=magenta_pen3)
        self.plot1_kospi_total_curve = self.plot1.plot(pen=yellow_pen3)

        # 외인수급
        self.plot1_futures_foreigner_curve = self.plot1.plot(pen=ypen, symbolBrush=gold, symbolPen='w', symbol='h', symbolSize=3)
        self.plot1_kospi_foreigner_curve = self.plot1.plot(pen=magenta_pen1, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)

        # Fibonacci Retracements Line
        self.plot1_fibonacci_line1 = self.plot1.addLine(x=None, pen=lime_pen)
        self.plot1_fibonacci_line2 = self.plot1.addLine(x=None, pen=lime_pen)
        self.plot1_fibonacci_line3 = self.plot1.addLine(x=None, pen=yellow_pen)
        self.plot1_fibonacci_line4 = self.plot1.addLine(x=None, pen=lime_pen)
        self.plot1_fibonacci_line5 = self.plot1.addLine(x=None, pen=lime_pen)

        # Alligator Curve
        self.plot1_futures_alligator_lip_curve = self.plot1.plot(pen=lime_pen)
        self.plot1_futures_alligator_teeth_curve = self.plot1.plot(pen=magenta_pen)
        self.plot1_futures_alligator_jaw_curve = self.plot1.plot(pen=aqua_pen)

        self.plot1_sp500_alligator_lip_curve = self.plot1.plot(pen=lime_pen)
        self.plot1_sp500_alligator_teeth_curve = self.plot1.plot(pen=magenta_pen)
        self.plot1_sp500_alligator_jaw_curve = self.plot1.plot(pen=aqua_pen)

        self.plot1_dow_alligator_lip_curve = self.plot1.plot(pen=lime_pen)
        self.plot1_dow_alligator_teeth_curve = self.plot1.plot(pen=magenta_pen)
        self.plot1_dow_alligator_jaw_curve = self.plot1.plot(pen=aqua_pen)

        self.plot1_nasdaq_alligator_lip_curve = self.plot1.plot(pen=lime_pen)
        self.plot1_nasdaq_alligator_teeth_curve = self.plot1.plot(pen=magenta_pen)
        self.plot1_nasdaq_alligator_jaw_curve = self.plot1.plot(pen=aqua_pen)

        self.plot1_hti_alligator_lip_curve = self.plot1.plot(pen=lime_pen)
        self.plot1_hti_alligator_teeth_curve = self.plot1.plot(pen=magenta_pen)
        self.plot1_hti_alligator_jaw_curve = self.plot1.plot(pen=aqua_pen)

        self.plot1_wti_alligator_lip_curve = self.plot1.plot(pen=lime_pen)
        self.plot1_wti_alligator_teeth_curve = self.plot1.plot(pen=magenta_pen)
        self.plot1_wti_alligator_jaw_curve = self.plot1.plot(pen=aqua_pen)

        self.plot1_gold_alligator_lip_curve = self.plot1.plot(pen=lime_pen)
        self.plot1_gold_alligator_teeth_curve = self.plot1.plot(pen=magenta_pen)
        self.plot1_gold_alligator_jaw_curve = self.plot1.plot(pen=aqua_pen)

        self.plot1_euro_alligator_lip_curve = self.plot1.plot(pen=lime_pen)
        self.plot1_euro_alligator_teeth_curve = self.plot1.plot(pen=magenta_pen)
        self.plot1_euro_alligator_jaw_curve = self.plot1.plot(pen=aqua_pen)

        self.plot1_yen_alligator_lip_curve = self.plot1.plot(pen=lime_pen)
        self.plot1_yen_alligator_teeth_curve = self.plot1.plot(pen=magenta_pen)
        self.plot1_yen_alligator_jaw_curve = self.plot1.plot(pen=aqua_pen)

        self.plot1_adi_alligator_lip_curve = self.plot1.plot(pen=lime_pen)
        self.plot1_adi_alligator_teeth_curve = self.plot1.plot(pen=magenta_pen)
        self.plot1_adi_alligator_jaw_curve = self.plot1.plot(pen=aqua_pen)

        # RSI Curve
        self.plot1_futures_rsi_curve = self.plot1.plot(pen=rsi_pen)
        self.plot1_sp500_rsi_curve = self.plot1.plot(pen=rsi_pen)
        self.plot1_dow_rsi_curve = self.plot1.plot(pen=rsi_pen)
        self.plot1_nasdaq_rsi_curve = self.plot1.plot(pen=rsi_pen)
        self.plot1_hsi_rsi_curve = self.plot1.plot(pen=rsi_pen)
        self.plot1_wti_rsi_curve = self.plot1.plot(pen=rsi_pen)
        self.plot1_gold_rsi_curve = self.plot1.plot(pen=rsi_pen)
        self.plot1_euro_rsi_curve = self.plot1.plot(pen=rsi_pen)
        self.plot1_yen_rsi_curve = self.plot1.plot(pen=rsi_pen)
        self.plot1_adi_rsi_curve = self.plot1.plot(pen=rsi_pen)

        # CCI Curve
        self.plot1_futures_cci1_curve = self.plot1.plot(pen=cci1_pen)
        self.plot1_sp500_cci1_curve = self.plot1.plot(pen=cci1_pen)
        self.plot1_dow_cci1_curve = self.plot1.plot(pen=cci1_pen)
        self.plot1_nasdaq_cci1_curve = self.plot1.plot(pen=cci1_pen)
        self.plot1_hsi_cci1_curve = self.plot1.plot(pen=cci1_pen)
        self.plot1_wti_cci1_curve = self.plot1.plot(pen=cci1_pen)
        self.plot1_gold_cci1_curve = self.plot1.plot(pen=cci1_pen)
        self.plot1_euro_cci1_curve = self.plot1.plot(pen=cci1_pen)
        self.plot1_yen_cci1_curve = self.plot1.plot(pen=cci1_pen)
        self.plot1_adi_cci1_curve = self.plot1.plot(pen=cci1_pen)

        self.plot1_futures_cci2_curve = self.plot1.plot(pen=cci2_pen)
        self.plot1_sp500_cci2_curve = self.plot1.plot(pen=cci2_pen)
        self.plot1_dow_cci2_curve = self.plot1.plot(pen=cci2_pen)
        self.plot1_nasdaq_cci2_curve = self.plot1.plot(pen=cci2_pen)
        self.plot1_hsi_cci2_curve = self.plot1.plot(pen=cci2_pen)
        self.plot1_wti_cci2_curve = self.plot1.plot(pen=cci2_pen)
        self.plot1_gold_cci2_curve = self.plot1.plot(pen=cci2_pen)
        self.plot1_euro_cci2_curve = self.plot1.plot(pen=cci2_pen)
        self.plot1_yen_cci2_curve = self.plot1.plot(pen=cci2_pen)
        self.plot1_adi_cci2_curve = self.plot1.plot(pen=cci2_pen)

        self.plot1_cci_plus_100_line = self.plot1.addLine(x=None, pen=red_dot_pen)
        self.plot1_cci_minus_100_line = self.plot1.addLine(x=None, pen=red_dot_pen)
        
        #cross hair
        if CROSS_HAIR_LINE:
            self.plot1_vLine = pg.InfiniteLine(angle=90, movable=False)
            self.plot1_hLine = pg.InfiniteLine(angle=0, movable=False)
            self.plot1.addItem(self.plot1_vLine, ignoreBounds=True)
            self.plot1.addItem(self.plot1_hLine, ignoreBounds=True)
            #self.cursorlabel1 = TextItem(anchor=(0,0), border=pg.mkPen(200, 200, 200))
            #self.plot1.addItem(self.cursorlabel1)
            self.plot1.setMouseTracking(True)            
            self.plot1.scene().sigMouseClicked.connect(self.plot1_mouseClicked)
            #self.plot1.scene().sigMouseMoved.connect(self.plot1_mouseMoved)            
        else:
            pass

        # Line & Curve of the Plot2 선물가격(new)
        self.plot2_time_line_jugan_start = self.plot2.addLine(x=0, y=None, pen=jugan_x_start_pen)
        self.plot2_time_line_yagan_start = self.plot2.addLine(x=0, y=None, pen=yagan_x_start_pen)
        self.plot2_time_line = self.plot2.addLine(x=0, y=None, pen=moving_x_pen)
        
        # 선물가격
        self.plot2_fut_jl_line = self.plot2.addLine(x=None, pen=goldenrod_pen)
        self.plot2_fut_jh_line = self.plot2.addLine(x=None, pen=gold_pen)  
        self.plot2_fut_open_line = self.plot2.addLine(x=None, pen=red_dot_pen)
        self.plot2_fut_close_line = self.plot2.addLine(x=None, pen=lime_pen)
        self.plot2_fut_pivot_line = self.plot2.addLine(x=None, pen=fut_pvt_pen)
        self.plot2_fut_low_line = self.plot2.addLine(x=None, pen=skyblue_pen)
        self.plot2_fut_high_line = self.plot2.addLine(x=None, pen=pink_pen)

        self.plot2_fut_cm_price_curve = self.plot2.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        self.plot2_fut_nm_price_curve = self.plot2.plot(pen=gpen, symbolBrush=lime, symbolPen='w', symbol='o', symbolSize=3)
        self.plot2_kp200_curve = self.plot2.plot(pen=ypen, symbolBrush=gold, symbolPen='w', symbol='h', symbolSize=3)

        # 선옵잔량비
        self.plot2_quote_remainder_ratio_base_line = self.plot2.addLine(x=None, pen=ypen1)
        self.plot2_nm_futures_quote_remainder_ratio_bottom_line = self.plot2.addLine(x=None, pen=gpen1)
        self.plot2_nm_futures_quote_remainder_ratio_upper_line = self.plot2.addLine(x=None, pen=red_dot_pen)
        
        self.plot2_fut_cm_quote_remainder_ratio_curve = self.plot2.plot(pen=gpen, symbolBrush=lime, symbolPen='w', symbol='o', symbolSize=3)
        self.plot2_fut_nm_quote_remainder_ratio_curve = self.plot2.plot(pen=ypen, symbolBrush=gold, symbolPen='w', symbol='o', symbolSize=3)

        # 선옵체결
        self.plot2_fut_volume_curve = self.plot2.plot(pen=gpen, symbolBrush=lime, symbolPen='w', symbol='o', symbolSize=3)
        self.plot2_call_volume_curve = self.plot2.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        self.plot2_put_volume_curve = self.plot2.plot(pen=bpen, symbolBrush=cyan, symbolPen='w', symbol='h', symbolSize=3)        

        self.plot2_center_val_lower_line = self.plot2.addLine(x=None, pen=skyblue_pen)
        self.plot2_center_val_line = self.plot2.addLine(x=None, pen=gold_pen)
        self.plot2_center_val_upper_line = self.plot2.addLine(x=None, pen=pink_pen)

        self.plot2_center_val_curve = self.plot2.plot(pen=gpen, symbolBrush=lime, symbolPen='w', symbol='h', symbolSize=3)
        
        # 옵션잔량비
        self.plot2_call_quote_curve = self.plot2.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        self.plot2_put_quote_curve = self.plot2.plot(pen=bpen, symbolBrush=cyan, symbolPen='w', symbol='h', symbolSize=3)
        self.plot2_option_quote_remainder_ratio_bottom_line = self.plot2.addLine(x=None, pen=gpen1)
        self.plot2_option_quote_remainder_ratio_upper_line = self.plot2.addLine(x=None, pen=red_dot_pen)

        # 옵션미결
        self.plot2_call_oi_curve = self.plot2.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        self.plot2_put_oi_curve = self.plot2.plot(pen=bpen, symbolBrush=cyan, symbolPen='w', symbol='h', symbolSize=3)

        # 등락율비
        self.plot2_fut_cm_drate_curve = self.plot2.plot(pen=ypen, symbolBrush=gold, symbolPen='w', symbol='o', symbolSize=3)
        self.plot2_fut_nm_drate_curve = self.plot2.plot(pen=wpen, symbolBrush='w', symbolPen='w', symbol='o', symbolSize=3)
        self.plot2_cme_drate_curve = self.plot2.plot(pen=gpen, symbolBrush=lime, symbolPen='w', symbol='h', symbolSize=3)
        self.plot2_call_drate_curve = self.plot2.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        self.plot2_put_drate_curve = self.plot2.plot(pen=bpen, symbolBrush=cyan, symbolPen='w', symbol='h', symbolSize=3)

        # 해외선물        
        self.plot2_ovc_jl_line = self.plot2.addLine(x=None, pen=goldenrod_pen)
        self.plot2_ovc_jh_line = self.plot2.addLine(x=None, pen=gold_pen)  
        self.plot2_ovc_close_line = self.plot2.addLine(x=None, pen=lime_pen)
        self.plot2_ovc_open_line = self.plot2.addLine(x=None, pen=red_dot_pen)
        self.plot2_ovc_pivot_line = self.plot2.addLine(x=None, pen=fut_pvt_pen)
        self.plot2_ovc_low_line = self.plot2.addLine(x=None, pen=skyblue_pen)
        self.plot2_ovc_high_line = self.plot2.addLine(x=None, pen=pink_pen)

        self.plot2_sp500_curve = self.plot2.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        self.plot2_dow_curve = self.plot2.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        self.plot2_nasdaq_curve = self.plot2.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        self.plot2_hsi_curve = self.plot2.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        self.plot2_wti_curve = self.plot2.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        self.plot2_gold_curve = self.plot2.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        self.plot2_euro_curve = self.plot2.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        self.plot2_yen_curve = self.plot2.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        self.plot2_adi_curve = self.plot2.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)

        self.plot2_bollinger_1st_upper_curve = self.plot2.plot(pen=bb_1st_pen)
        self.plot2_bollinger_1st_middle_curve = self.plot2.plot(pen=bb_middle_pen)
        self.plot2_bollinger_1st_lower_curve = self.plot2.plot(pen=bb_1st_pen)
        self.plot2_bollinger_2nd_upper_curve = self.plot2.plot(pen=bb_2nd_pen)
        self.plot2_bollinger_2nd_middle_curve = self.plot2.plot(pen=bb_middle_pen)
        self.plot2_bollinger_2nd_lower_curve = self.plot2.plot(pen=bb_2nd_pen)

        self.plot2_psar_curve = self.plot2.plot(pen=psar_pen)

        self.plot2_mama_curve = self.plot2.plot(pen=mama_pen)
        self.plot2_fama_curve = self.plot2.plot(pen=fama_pen)

        #self.plot2_sslup_curve = self.plot2.plot(pen=sslup_pen)
        #self.plot2_ssldown_curve = self.plot2.plot(pen=ssldown_pen)

        self.plot2_oe_conv_curve = self.plot2.plot(pen=conv_pen)
        self.plot2_oe_base_curve = self.plot2.plot(pen=base_pen)
        self.plot2_span_a_curve = self.plot2.plot(pen=span_a_pen)
        self.plot2_span_b_curve = self.plot2.plot(pen=span_b_pen)
        self.plot2_lagging_span_curve = self.plot2.plot(pen=lagging_span_pen)

        # 수급종합
        self.plot2_program_curve = self.plot2.plot(pen=magenta_pen3)
        self.plot2_kospi_total_curve = self.plot2.plot(pen=yellow_pen3)

        # 외인수급
        self.plot2_futures_foreigner_curve = self.plot2.plot(pen=ypen, symbolBrush=gold, symbolPen='w', symbol='h', symbolSize=3)
        self.plot2_kospi_foreigner_curve = self.plot2.plot(pen=magenta_pen1, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)

        # Fibonacci Retracements Line
        self.plot2_fibonacci_line1 = self.plot2.addLine(x=None, pen=lime_pen)
        self.plot2_fibonacci_line2 = self.plot2.addLine(x=None, pen=lime_pen)
        self.plot2_fibonacci_line3 = self.plot2.addLine(x=None, pen=yellow_pen)
        self.plot2_fibonacci_line4 = self.plot2.addLine(x=None, pen=lime_pen)
        self.plot2_fibonacci_line5 = self.plot2.addLine(x=None, pen=lime_pen)

        # Alligator Curve
        self.plot2_futures_alligator_lip_curve = self.plot2.plot(pen=lime_pen)
        self.plot2_futures_alligator_teeth_curve = self.plot2.plot(pen=magenta_pen)
        self.plot2_futures_alligator_jaw_curve = self.plot2.plot(pen=aqua_pen)

        self.plot2_sp500_alligator_lip_curve = self.plot2.plot(pen=lime_pen)
        self.plot2_sp500_alligator_teeth_curve = self.plot2.plot(pen=magenta_pen)
        self.plot2_sp500_alligator_jaw_curve = self.plot2.plot(pen=aqua_pen)

        self.plot2_dow_alligator_lip_curve = self.plot2.plot(pen=lime_pen)
        self.plot2_dow_alligator_teeth_curve = self.plot2.plot(pen=magenta_pen)
        self.plot2_dow_alligator_jaw_curve = self.plot2.plot(pen=aqua_pen)

        self.plot2_nasdaq_alligator_lip_curve = self.plot2.plot(pen=lime_pen)
        self.plot2_nasdaq_alligator_teeth_curve = self.plot2.plot(pen=magenta_pen)
        self.plot2_nasdaq_alligator_jaw_curve = self.plot2.plot(pen=aqua_pen)

        self.plot2_hti_alligator_lip_curve = self.plot2.plot(pen=lime_pen)
        self.plot2_hti_alligator_teeth_curve = self.plot2.plot(pen=magenta_pen)
        self.plot2_hti_alligator_jaw_curve = self.plot2.plot(pen=aqua_pen)

        self.plot2_wti_alligator_lip_curve = self.plot2.plot(pen=lime_pen)
        self.plot2_wti_alligator_teeth_curve = self.plot2.plot(pen=magenta_pen)
        self.plot2_wti_alligator_jaw_curve = self.plot2.plot(pen=aqua_pen)

        self.plot2_gold_alligator_lip_curve = self.plot2.plot(pen=lime_pen)
        self.plot2_gold_alligator_teeth_curve = self.plot2.plot(pen=magenta_pen)
        self.plot2_gold_alligator_jaw_curve = self.plot2.plot(pen=aqua_pen)

        self.plot2_euro_alligator_lip_curve = self.plot2.plot(pen=lime_pen)
        self.plot2_euro_alligator_teeth_curve = self.plot2.plot(pen=magenta_pen)
        self.plot2_euro_alligator_jaw_curve = self.plot2.plot(pen=aqua_pen)

        self.plot2_yen_alligator_lip_curve = self.plot2.plot(pen=lime_pen)
        self.plot2_yen_alligator_teeth_curve = self.plot2.plot(pen=magenta_pen)
        self.plot2_yen_alligator_jaw_curve = self.plot2.plot(pen=aqua_pen)

        self.plot2_adi_alligator_lip_curve = self.plot2.plot(pen=lime_pen)
        self.plot2_adi_alligator_teeth_curve = self.plot2.plot(pen=magenta_pen)
        self.plot2_adi_alligator_jaw_curve = self.plot2.plot(pen=aqua_pen)

        # RSI Curve
        self.plot2_futures_rsi_curve = self.plot2.plot(pen=rsi_pen)
        self.plot2_sp500_rsi_curve = self.plot2.plot(pen=rsi_pen)
        self.plot2_dow_rsi_curve = self.plot2.plot(pen=rsi_pen)
        self.plot2_nasdaq_rsi_curve = self.plot2.plot(pen=rsi_pen)
        self.plot2_hsi_rsi_curve = self.plot2.plot(pen=rsi_pen)
        self.plot2_wti_rsi_curve = self.plot2.plot(pen=rsi_pen)
        self.plot2_gold_rsi_curve = self.plot2.plot(pen=rsi_pen)
        self.plot2_euro_rsi_curve = self.plot2.plot(pen=rsi_pen)
        self.plot2_yen_rsi_curve = self.plot2.plot(pen=rsi_pen)
        self.plot2_adi_rsi_curve = self.plot2.plot(pen=rsi_pen)

        # CCI Curve
        self.plot2_futures_cci1_curve = self.plot2.plot(pen=cci1_pen)
        self.plot2_sp500_cci1_curve = self.plot2.plot(pen=cci1_pen)
        self.plot2_dow_cci1_curve = self.plot2.plot(pen=cci1_pen)
        self.plot2_nasdaq_cci1_curve = self.plot2.plot(pen=cci1_pen)
        self.plot2_hsi_cci1_curve = self.plot2.plot(pen=cci1_pen)
        self.plot2_wti_cci1_curve = self.plot2.plot(pen=cci1_pen)
        self.plot2_gold_cci1_curve = self.plot2.plot(pen=cci1_pen)
        self.plot2_euro_cci1_curve = self.plot2.plot(pen=cci1_pen)
        self.plot2_yen_cci1_curve = self.plot2.plot(pen=cci1_pen)
        self.plot2_adi_cci1_curve = self.plot2.plot(pen=cci1_pen)

        self.plot2_futures_cci2_curve = self.plot2.plot(pen=cci2_pen)
        self.plot2_sp500_cci2_curve = self.plot2.plot(pen=cci2_pen)
        self.plot2_dow_cci2_curve = self.plot2.plot(pen=cci2_pen)
        self.plot2_nasdaq_cci2_curve = self.plot2.plot(pen=cci2_pen)
        self.plot2_hsi_cci2_curve = self.plot2.plot(pen=cci2_pen)
        self.plot2_wti_cci2_curve = self.plot2.plot(pen=cci2_pen)
        self.plot2_gold_cci2_curve = self.plot2.plot(pen=cci2_pen)
        self.plot2_euro_cci2_curve = self.plot2.plot(pen=cci2_pen)
        self.plot2_yen_cci2_curve = self.plot2.plot(pen=cci2_pen)
        self.plot2_adi_cci2_curve = self.plot2.plot(pen=cci2_pen)

        self.plot2_cci_plus_100_line = self.plot2.addLine(x=None, pen=red_dot_pen)
        self.plot2_cci_minus_100_line = self.plot2.addLine(x=None, pen=red_dot_pen)

        #cross hair
        if CROSS_HAIR_LINE:
            self.plot2_vLine = pg.InfiniteLine(angle=90, movable=False)
            self.plot2_hLine = pg.InfiniteLine(angle=0, movable=False)
            self.plot2.addItem(self.plot2_vLine, ignoreBounds=True)
            self.plot2.addItem(self.plot2_hLine, ignoreBounds=True)
            self.plot2.setMouseTracking(True)            
            self.plot2.scene().sigMouseClicked.connect(self.plot2_mouseClicked)
            #self.plot2.scene().sigMouseMoved.connect(self.plot2_mouseMoved)
        else:
            pass 

        # Line & Curve of the Plot3 선물가격(new)
        self.plot3_time_line_jugan_start = self.plot3.addLine(x=0, y=None, pen=jugan_x_start_pen)
        self.plot3_time_line_yagan_start = self.plot3.addLine(x=0, y=None, pen=yagan_x_start_pen)
        self.plot3_time_line = self.plot3.addLine(x=0, y=None, pen=moving_x_pen)
        
        # 선물가격
        self.plot3_fut_jl_line = self.plot3.addLine(x=None, pen=goldenrod_pen)
        self.plot3_fut_jh_line = self.plot3.addLine(x=None, pen=gold_pen)  
        self.plot3_fut_open_line = self.plot3.addLine(x=None, pen=red_dot_pen)
        self.plot3_fut_close_line = self.plot3.addLine(x=None, pen=lime_pen)
        self.plot3_fut_pivot_line = self.plot3.addLine(x=None, pen=fut_pvt_pen)
        self.plot3_fut_low_line = self.plot3.addLine(x=None, pen=skyblue_pen)
        self.plot3_fut_high_line = self.plot3.addLine(x=None, pen=pink_pen)

        self.plot3_fut_cm_price_curve = self.plot3.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        self.plot3_fut_nm_price_curve = self.plot3.plot(pen=gpen, symbolBrush=lime, symbolPen='w', symbol='o', symbolSize=3)
        self.plot3_kp200_curve = self.plot3.plot(pen=ypen, symbolBrush=gold, symbolPen='w', symbol='h', symbolSize=3)

        # 선옵잔량비
        self.plot3_quote_remainder_ratio_base_line = self.plot3.addLine(x=None, pen=ypen1)
        self.plot3_nm_futures_quote_remainder_ratio_bottom_line = self.plot3.addLine(x=None, pen=gpen1)
        self.plot3_nm_futures_quote_remainder_ratio_upper_line = self.plot3.addLine(x=None, pen=red_dot_pen)
        
        self.plot3_fut_cm_quote_remainder_ratio_curve = self.plot3.plot(pen=gpen, symbolBrush=lime, symbolPen='w', symbol='o', symbolSize=3)
        self.plot3_fut_nm_quote_remainder_ratio_curve = self.plot3.plot(pen=ypen, symbolBrush=gold, symbolPen='w', symbol='o', symbolSize=3)

        # 선옵체결
        self.plot3_fut_volume_curve = self.plot3.plot(pen=gpen, symbolBrush=lime, symbolPen='w', symbol='o', symbolSize=3)
        self.plot3_call_volume_curve = self.plot3.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        self.plot3_put_volume_curve = self.plot3.plot(pen=bpen, symbolBrush=cyan, symbolPen='w', symbol='h', symbolSize=3)

        self.plot3_center_val_lower_line = self.plot3.addLine(x=None, pen=skyblue_pen)
        self.plot3_center_val_line = self.plot3.addLine(x=None, pen=gold_pen)
        self.plot3_center_val_upper_line = self.plot3.addLine(x=None, pen=pink_pen)

        self.plot3_center_val_curve = self.plot3.plot(pen=gpen, symbolBrush=lime, symbolPen='w', symbol='h', symbolSize=3)
        
        # 옵션잔량비
        self.plot3_call_quote_curve = self.plot3.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        self.plot3_put_quote_curve = self.plot3.plot(pen=bpen, symbolBrush=cyan, symbolPen='w', symbol='h', symbolSize=3)
        self.plot3_option_quote_remainder_ratio_bottom_line = self.plot3.addLine(x=None, pen=gpen1)
        self.plot3_option_quote_remainder_ratio_upper_line = self.plot3.addLine(x=None, pen=red_dot_pen)

        # 옵션미결
        self.plot3_call_oi_curve = self.plot3.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        self.plot3_put_oi_curve = self.plot3.plot(pen=bpen, symbolBrush=cyan, symbolPen='w', symbol='h', symbolSize=3)

        # 등락율비
        self.plot3_fut_cm_drate_curve = self.plot3.plot(pen=ypen, symbolBrush=gold, symbolPen='w', symbol='o', symbolSize=3)
        self.plot3_fut_nm_drate_curve = self.plot3.plot(pen=wpen, symbolBrush='w', symbolPen='w', symbol='o', symbolSize=3)
        self.plot3_cme_drate_curve = self.plot3.plot(pen=gpen, symbolBrush=lime, symbolPen='w', symbol='h', symbolSize=3)
        self.plot3_call_drate_curve = self.plot3.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        self.plot3_put_drate_curve = self.plot3.plot(pen=bpen, symbolBrush=cyan, symbolPen='w', symbol='h', symbolSize=3)

        # 해외선물        
        self.plot3_ovc_jl_line = self.plot3.addLine(x=None, pen=goldenrod_pen)
        self.plot3_ovc_jh_line = self.plot3.addLine(x=None, pen=gold_pen)  
        self.plot3_ovc_close_line = self.plot3.addLine(x=None, pen=lime_pen)
        self.plot3_ovc_open_line = self.plot3.addLine(x=None, pen=red_dot_pen)
        self.plot3_ovc_pivot_line = self.plot3.addLine(x=None, pen=fut_pvt_pen)
        self.plot3_ovc_low_line = self.plot3.addLine(x=None, pen=skyblue_pen)
        self.plot3_ovc_high_line = self.plot3.addLine(x=None, pen=pink_pen)

        self.plot3_sp500_curve = self.plot3.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        self.plot3_dow_curve = self.plot3.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        self.plot3_nasdaq_curve = self.plot3.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        self.plot3_hsi_curve = self.plot3.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        self.plot3_wti_curve = self.plot3.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        self.plot3_gold_curve = self.plot3.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        self.plot3_euro_curve = self.plot3.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        self.plot3_yen_curve = self.plot3.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        self.plot3_adi_curve = self.plot3.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)

        self.plot3_bollinger_1st_upper_curve = self.plot3.plot(pen=bb_1st_pen)
        self.plot3_bollinger_1st_middle_curve = self.plot3.plot(pen=bb_middle_pen)
        self.plot3_bollinger_1st_lower_curve = self.plot3.plot(pen=bb_1st_pen)
        self.plot3_bollinger_2nd_upper_curve = self.plot3.plot(pen=bb_2nd_pen)
        self.plot3_bollinger_2nd_middle_curve = self.plot3.plot(pen=bb_middle_pen)
        self.plot3_bollinger_2nd_lower_curve = self.plot3.plot(pen=bb_2nd_pen)

        self.plot3_psar_curve = self.plot3.plot(pen=psar_pen)

        self.plot3_mama_curve = self.plot3.plot(pen=mama_pen)
        self.plot3_fama_curve = self.plot3.plot(pen=fama_pen)

        #self.plot3_sslup_curve = self.plot3.plot(pen=sslup_pen)
        #self.plot3_ssldown_curve = self.plot3.plot(pen=ssldown_pen)

        self.plot3_oe_conv_curve = self.plot3.plot(pen=conv_pen)
        self.plot3_oe_base_curve = self.plot3.plot(pen=base_pen)
        self.plot3_span_a_curve = self.plot3.plot(pen=span_a_pen)
        self.plot3_span_b_curve = self.plot3.plot(pen=span_b_pen)
        self.plot3_lagging_span_curve = self.plot3.plot(pen=lagging_span_pen)

        # 수급종합
        self.plot3_program_curve = self.plot3.plot(pen=magenta_pen3)
        self.plot3_kospi_total_curve = self.plot3.plot(pen=yellow_pen3)

        # 외인수급
        self.plot3_futures_foreigner_curve = self.plot3.plot(pen=ypen, symbolBrush=gold, symbolPen='w', symbol='h', symbolSize=3)
        self.plot3_kospi_foreigner_curve = self.plot3.plot(pen=magenta_pen1, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)

        # Fibonacci Retracements Line
        self.plot3_fibonacci_line1 = self.plot3.addLine(x=None, pen=lime_pen)
        self.plot3_fibonacci_line2 = self.plot3.addLine(x=None, pen=lime_pen)
        self.plot3_fibonacci_line3 = self.plot3.addLine(x=None, pen=yellow_pen)
        self.plot3_fibonacci_line4 = self.plot3.addLine(x=None, pen=lime_pen)
        self.plot3_fibonacci_line5 = self.plot3.addLine(x=None, pen=lime_pen)

        # Alligator Curve
        self.plot3_futures_alligator_lip_curve = self.plot3.plot(pen=lime_pen)
        self.plot3_futures_alligator_teeth_curve = self.plot3.plot(pen=magenta_pen)
        self.plot3_futures_alligator_jaw_curve = self.plot3.plot(pen=aqua_pen)

        self.plot3_sp500_alligator_lip_curve = self.plot3.plot(pen=lime_pen)
        self.plot3_sp500_alligator_teeth_curve = self.plot3.plot(pen=magenta_pen)
        self.plot3_sp500_alligator_jaw_curve = self.plot3.plot(pen=aqua_pen)

        self.plot3_dow_alligator_lip_curve = self.plot3.plot(pen=lime_pen)
        self.plot3_dow_alligator_teeth_curve = self.plot3.plot(pen=magenta_pen)
        self.plot3_dow_alligator_jaw_curve = self.plot3.plot(pen=aqua_pen)

        self.plot3_nasdaq_alligator_lip_curve = self.plot3.plot(pen=lime_pen)
        self.plot3_nasdaq_alligator_teeth_curve = self.plot3.plot(pen=magenta_pen)
        self.plot3_nasdaq_alligator_jaw_curve = self.plot3.plot(pen=aqua_pen)

        self.plot3_hti_alligator_lip_curve = self.plot3.plot(pen=lime_pen)
        self.plot3_hti_alligator_teeth_curve = self.plot3.plot(pen=magenta_pen)
        self.plot3_hti_alligator_jaw_curve = self.plot3.plot(pen=aqua_pen)

        self.plot3_wti_alligator_lip_curve = self.plot3.plot(pen=lime_pen)
        self.plot3_wti_alligator_teeth_curve = self.plot3.plot(pen=magenta_pen)
        self.plot3_wti_alligator_jaw_curve = self.plot3.plot(pen=aqua_pen)

        self.plot3_gold_alligator_lip_curve = self.plot3.plot(pen=lime_pen)
        self.plot3_gold_alligator_teeth_curve = self.plot3.plot(pen=magenta_pen)
        self.plot3_gold_alligator_jaw_curve = self.plot3.plot(pen=aqua_pen)

        self.plot3_euro_alligator_lip_curve = self.plot3.plot(pen=lime_pen)
        self.plot3_euro_alligator_teeth_curve = self.plot3.plot(pen=magenta_pen)
        self.plot3_euro_alligator_jaw_curve = self.plot3.plot(pen=aqua_pen)

        self.plot3_yen_alligator_lip_curve = self.plot3.plot(pen=lime_pen)
        self.plot3_yen_alligator_teeth_curve = self.plot3.plot(pen=magenta_pen)
        self.plot3_yen_alligator_jaw_curve = self.plot3.plot(pen=aqua_pen)

        self.plot3_adi_alligator_lip_curve = self.plot3.plot(pen=lime_pen)
        self.plot3_adi_alligator_teeth_curve = self.plot3.plot(pen=magenta_pen)
        self.plot3_adi_alligator_jaw_curve = self.plot3.plot(pen=aqua_pen)

        # RSI Curve
        self.plot3_futures_rsi_curve = self.plot3.plot(pen=rsi_pen)
        self.plot3_sp500_rsi_curve = self.plot3.plot(pen=rsi_pen)
        self.plot3_dow_rsi_curve = self.plot3.plot(pen=rsi_pen)
        self.plot3_nasdaq_rsi_curve = self.plot3.plot(pen=rsi_pen)
        self.plot3_hsi_rsi_curve = self.plot3.plot(pen=rsi_pen)
        self.plot3_wti_rsi_curve = self.plot3.plot(pen=rsi_pen)
        self.plot3_gold_rsi_curve = self.plot3.plot(pen=rsi_pen)
        self.plot3_euro_rsi_curve = self.plot3.plot(pen=rsi_pen)
        self.plot3_yen_rsi_curve = self.plot3.plot(pen=rsi_pen)
        self.plot3_adi_rsi_curve = self.plot3.plot(pen=rsi_pen)

        # CCI Curve
        self.plot3_futures_cci1_curve = self.plot3.plot(pen=cci1_pen)
        self.plot3_sp500_cci1_curve = self.plot3.plot(pen=cci1_pen)
        self.plot3_dow_cci1_curve = self.plot3.plot(pen=cci1_pen)
        self.plot3_nasdaq_cci1_curve = self.plot3.plot(pen=cci1_pen)
        self.plot3_hsi_cci1_curve = self.plot3.plot(pen=cci1_pen)
        self.plot3_wti_cci1_curve = self.plot3.plot(pen=cci1_pen)
        self.plot3_gold_cci1_curve = self.plot3.plot(pen=cci1_pen)
        self.plot3_euro_cci1_curve = self.plot3.plot(pen=cci1_pen)
        self.plot3_yen_cci1_curve = self.plot3.plot(pen=cci1_pen)
        self.plot3_adi_cci1_curve = self.plot3.plot(pen=cci1_pen)

        self.plot3_futures_cci2_curve = self.plot3.plot(pen=cci2_pen)
        self.plot3_sp500_cci2_curve = self.plot3.plot(pen=cci2_pen)
        self.plot3_dow_cci2_curve = self.plot3.plot(pen=cci2_pen)
        self.plot3_nasdaq_cci2_curve = self.plot3.plot(pen=cci2_pen)
        self.plot3_hsi_cci2_curve = self.plot3.plot(pen=cci2_pen)
        self.plot3_wti_cci2_curve = self.plot3.plot(pen=cci2_pen)
        self.plot3_gold_cci2_curve = self.plot3.plot(pen=cci2_pen)
        self.plot3_euro_cci2_curve = self.plot3.plot(pen=cci2_pen)
        self.plot3_yen_cci2_curve = self.plot3.plot(pen=cci2_pen)
        self.plot3_adi_cci2_curve = self.plot3.plot(pen=cci2_pen)

        self.plot3_cci_plus_100_line = self.plot3.addLine(x=None, pen=red_dot_pen)
        self.plot3_cci_minus_100_line = self.plot3.addLine(x=None, pen=red_dot_pen)

        #cross hair
        if CROSS_HAIR_LINE:
            self.plot3_vLine = pg.InfiniteLine(angle=90, movable=False)
            self.plot3_hLine = pg.InfiniteLine(angle=0, movable=False)
            self.plot3.addItem(self.plot3_vLine, ignoreBounds=True)
            self.plot3.addItem(self.plot3_hLine, ignoreBounds=True)
            self.plot3.setMouseTracking(True)            
            self.plot3.scene().sigMouseClicked.connect(self.plot3_mouseClicked)
            #self.plot3.scene().sigMouseMoved.connect(self.plot3_mouseMoved)
        else:
            pass

        # Line & Curve of the Plot4 옵션가격(new)
        self.plot4_time_line_jugan_start = self.plot4.addLine(x=0, y=None, pen=jugan_x_start_pen)
        self.plot4_time_line_yagan_start = self.plot4.addLine(x=0, y=None, pen=yagan_x_start_pen)
        self.plot4_time_line = self.plot4.addLine(x=0, y=None, pen=moving_x_pen)
        
        # 선물가격
        self.plot4_fut_jl_line = self.plot4.addLine(x=None, pen=goldenrod_pen)
        self.plot4_fut_jh_line = self.plot4.addLine(x=None, pen=gold_pen)  
        self.plot4_fut_open_line = self.plot4.addLine(x=None, pen=red_dot_pen)
        self.plot4_fut_close_line = self.plot4.addLine(x=None, pen=lime_pen)
        self.plot4_fut_pivot_line = self.plot4.addLine(x=None, pen=fut_pvt_pen)
        self.plot4_fut_low_line = self.plot4.addLine(x=None, pen=skyblue_pen)
        self.plot4_fut_high_line = self.plot4.addLine(x=None, pen=pink_pen)

        self.plot4_fut_cm_price_curve = self.plot4.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        self.plot4_fut_nm_price_curve = self.plot4.plot(pen=gpen, symbolBrush=lime, symbolPen='w', symbol='o', symbolSize=3)
        self.plot4_kp200_curve = self.plot4.plot(pen=ypen, symbolBrush=gold, symbolPen='w', symbol='h', symbolSize=3)

        # 선옵잔량비
        self.plot4_quote_remainder_ratio_base_line = self.plot4.addLine(x=None, pen=ypen1)
        self.plot4_nm_futures_quote_remainder_ratio_bottom_line = self.plot4.addLine(x=None, pen=gpen1)
        self.plot4_nm_futures_quote_remainder_ratio_upper_line = self.plot4.addLine(x=None, pen=red_dot_pen)
        
        self.plot4_fut_cm_quote_remainder_ratio_curve = self.plot4.plot(pen=gpen, symbolBrush=lime, symbolPen='w', symbol='o', symbolSize=3)
        self.plot4_fut_nm_quote_remainder_ratio_curve = self.plot4.plot(pen=ypen, symbolBrush=gold, symbolPen='w', symbol='o', symbolSize=3)

        # 선옵체결
        self.plot4_fut_volume_curve = self.plot4.plot(pen=gpen, symbolBrush=lime, symbolPen='w', symbol='o', symbolSize=3)
        self.plot4_call_volume_curve = self.plot4.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        self.plot4_put_volume_curve = self.plot4.plot(pen=bpen, symbolBrush=cyan, symbolPen='w', symbol='h', symbolSize=3)        

        self.plot4_center_val_lower_line = self.plot4.addLine(x=None, pen=skyblue_pen)
        self.plot4_center_val_line = self.plot4.addLine(x=None, pen=gold_pen)
        self.plot4_center_val_upper_line = self.plot4.addLine(x=None, pen=pink_pen)

        self.plot4_center_val_curve = self.plot4.plot(pen=gpen, symbolBrush=lime, symbolPen='w', symbol='h', symbolSize=3)
        
        # 옵션잔량비
        self.plot4_call_quote_curve = self.plot4.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        self.plot4_put_quote_curve = self.plot4.plot(pen=bpen, symbolBrush=cyan, symbolPen='w', symbol='h', symbolSize=3)
        self.plot4_option_quote_remainder_ratio_bottom_line = self.plot4.addLine(x=None, pen=gpen1)
        self.plot4_option_quote_remainder_ratio_upper_line = self.plot4.addLine(x=None, pen=red_dot_pen)

        # 옵션미결
        self.plot4_call_oi_curve = self.plot4.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        self.plot4_put_oi_curve = self.plot4.plot(pen=bpen, symbolBrush=cyan, symbolPen='w', symbol='h', symbolSize=3)

        # 등락율비
        self.plot4_fut_cm_drate_curve = self.plot4.plot(pen=ypen, symbolBrush=gold, symbolPen='w', symbol='o', symbolSize=3)
        self.plot4_fut_nm_drate_curve = self.plot4.plot(pen=wpen, symbolBrush='w', symbolPen='w', symbol='o', symbolSize=3)
        self.plot4_cme_drate_curve = self.plot4.plot(pen=gpen, symbolBrush=lime, symbolPen='w', symbol='h', symbolSize=3)
        self.plot4_call_drate_curve = self.plot4.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        self.plot4_put_drate_curve = self.plot4.plot(pen=bpen, symbolBrush=cyan, symbolPen='w', symbol='h', symbolSize=3)

        # 해외선물        
        self.plot4_ovc_jl_line = self.plot4.addLine(x=None, pen=goldenrod_pen)
        self.plot4_ovc_jh_line = self.plot4.addLine(x=None, pen=gold_pen)  
        self.plot4_ovc_close_line = self.plot4.addLine(x=None, pen=lime_pen)
        self.plot4_ovc_open_line = self.plot4.addLine(x=None, pen=red_dot_pen)
        self.plot4_ovc_pivot_line = self.plot4.addLine(x=None, pen=fut_pvt_pen)
        self.plot4_ovc_low_line = self.plot4.addLine(x=None, pen=skyblue_pen)
        self.plot4_ovc_high_line = self.plot4.addLine(x=None, pen=pink_pen)

        self.plot4_sp500_curve = self.plot4.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        self.plot4_dow_curve = self.plot4.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        self.plot4_nasdaq_curve = self.plot4.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        self.plot4_hsi_curve = self.plot4.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3) 
        self.plot4_wti_curve = self.plot4.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        self.plot4_gold_curve = self.plot4.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        self.plot4_euro_curve = self.plot4.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        self.plot4_yen_curve = self.plot4.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        self.plot4_adi_curve = self.plot4.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)

        self.plot4_bollinger_1st_upper_curve = self.plot4.plot(pen=bb_1st_pen)
        self.plot4_bollinger_1st_middle_curve = self.plot4.plot(pen=bb_middle_pen)
        self.plot4_bollinger_1st_lower_curve = self.plot4.plot(pen=bb_1st_pen)
        self.plot4_bollinger_2nd_upper_curve = self.plot4.plot(pen=bb_2nd_pen)
        self.plot4_bollinger_2nd_middle_curve = self.plot4.plot(pen=bb_middle_pen)
        self.plot4_bollinger_2nd_lower_curve = self.plot4.plot(pen=bb_2nd_pen)

        self.plot4_psar_curve = self.plot4.plot(pen=psar_pen)

        self.plot4_mama_curve = self.plot4.plot(pen=mama_pen)
        self.plot4_fama_curve = self.plot4.plot(pen=fama_pen)

        #self.plot4_sslup_curve = self.plot4.plot(pen=sslup_pen)
        #self.plot4_ssldown_curve = self.plot4.plot(pen=ssldown_pen)

        self.plot4_oe_conv_curve = self.plot4.plot(pen=conv_pen)
        self.plot4_oe_base_curve = self.plot4.plot(pen=base_pen)
        self.plot4_span_a_curve = self.plot4.plot(pen=span_a_pen)
        self.plot4_span_b_curve = self.plot4.plot(pen=span_b_pen)
        self.plot4_lagging_span_curve = self.plot4.plot(pen=lagging_span_pen)

        # 수급종합
        self.plot4_program_curve = self.plot4.plot(pen=magenta_pen3)
        self.plot4_kospi_total_curve = self.plot4.plot(pen=yellow_pen3)

        # 외인수급
        self.plot4_futures_foreigner_curve = self.plot4.plot(pen=ypen, symbolBrush=gold, symbolPen='w', symbol='h', symbolSize=3)
        self.plot4_kospi_foreigner_curve = self.plot4.plot(pen=magenta_pen1, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)

        # Fibonacci Retracements Line
        self.plot4_fibonacci_line1 = self.plot4.addLine(x=None, pen=lime_pen)
        self.plot4_fibonacci_line2 = self.plot4.addLine(x=None, pen=lime_pen)
        self.plot4_fibonacci_line3 = self.plot4.addLine(x=None, pen=yellow_pen)
        self.plot4_fibonacci_line4 = self.plot4.addLine(x=None, pen=lime_pen)
        self.plot4_fibonacci_line5 = self.plot4.addLine(x=None, pen=lime_pen)

        # Alligator Curve
        self.plot4_futures_alligator_lip_curve = self.plot4.plot(pen=lime_pen)
        self.plot4_futures_alligator_teeth_curve = self.plot4.plot(pen=magenta_pen)
        self.plot4_futures_alligator_jaw_curve = self.plot4.plot(pen=aqua_pen)

        self.plot4_sp500_alligator_lip_curve = self.plot4.plot(pen=lime_pen)
        self.plot4_sp500_alligator_teeth_curve = self.plot4.plot(pen=magenta_pen)
        self.plot4_sp500_alligator_jaw_curve = self.plot4.plot(pen=aqua_pen)

        self.plot4_dow_alligator_lip_curve = self.plot4.plot(pen=lime_pen)
        self.plot4_dow_alligator_teeth_curve = self.plot4.plot(pen=magenta_pen)
        self.plot4_dow_alligator_jaw_curve = self.plot4.plot(pen=aqua_pen)

        self.plot4_nasdaq_alligator_lip_curve = self.plot4.plot(pen=lime_pen)
        self.plot4_nasdaq_alligator_teeth_curve = self.plot4.plot(pen=magenta_pen)
        self.plot4_nasdaq_alligator_jaw_curve = self.plot4.plot(pen=aqua_pen)

        self.plot4_hti_alligator_lip_curve = self.plot4.plot(pen=lime_pen)
        self.plot4_hti_alligator_teeth_curve = self.plot4.plot(pen=magenta_pen)
        self.plot4_hti_alligator_jaw_curve = self.plot4.plot(pen=aqua_pen)

        self.plot4_wti_alligator_lip_curve = self.plot4.plot(pen=lime_pen)
        self.plot4_wti_alligator_teeth_curve = self.plot4.plot(pen=magenta_pen)
        self.plot4_wti_alligator_jaw_curve = self.plot4.plot(pen=aqua_pen)

        self.plot4_gold_alligator_lip_curve = self.plot4.plot(pen=lime_pen)
        self.plot4_gold_alligator_teeth_curve = self.plot4.plot(pen=magenta_pen)
        self.plot4_gold_alligator_jaw_curve = self.plot4.plot(pen=aqua_pen)

        self.plot4_euro_alligator_lip_curve = self.plot4.plot(pen=lime_pen)
        self.plot4_euro_alligator_teeth_curve = self.plot4.plot(pen=magenta_pen)
        self.plot4_euro_alligator_jaw_curve = self.plot4.plot(pen=aqua_pen)

        self.plot4_yen_alligator_lip_curve = self.plot4.plot(pen=lime_pen)
        self.plot4_yen_alligator_teeth_curve = self.plot4.plot(pen=magenta_pen)
        self.plot4_yen_alligator_jaw_curve = self.plot4.plot(pen=aqua_pen)

        self.plot4_adi_alligator_lip_curve = self.plot4.plot(pen=lime_pen)
        self.plot4_adi_alligator_teeth_curve = self.plot4.plot(pen=magenta_pen)
        self.plot4_adi_alligator_jaw_curve = self.plot4.plot(pen=aqua_pen)

        # RSI Curve
        self.plot4_futures_rsi_curve = self.plot4.plot(pen=rsi_pen)
        self.plot4_sp500_rsi_curve = self.plot4.plot(pen=rsi_pen)
        self.plot4_dow_rsi_curve = self.plot4.plot(pen=rsi_pen)
        self.plot4_nasdaq_rsi_curve = self.plot4.plot(pen=rsi_pen)
        self.plot4_hsi_rsi_curve = self.plot4.plot(pen=rsi_pen)
        self.plot4_wti_rsi_curve = self.plot4.plot(pen=rsi_pen)
        self.plot4_gold_rsi_curve = self.plot4.plot(pen=rsi_pen)
        self.plot4_euro_rsi_curve = self.plot4.plot(pen=rsi_pen)
        self.plot4_yen_rsi_curve = self.plot4.plot(pen=rsi_pen)
        self.plot4_adi_rsi_curve = self.plot4.plot(pen=rsi_pen)

        # CCI Curve
        self.plot4_futures_cci1_curve = self.plot4.plot(pen=cci1_pen)
        self.plot4_sp500_cci1_curve = self.plot4.plot(pen=cci1_pen)
        self.plot4_dow_cci1_curve = self.plot4.plot(pen=cci1_pen)
        self.plot4_nasdaq_cci1_curve = self.plot4.plot(pen=cci1_pen)
        self.plot4_hsi_cci1_curve = self.plot4.plot(pen=cci1_pen)
        self.plot4_wti_cci1_curve = self.plot4.plot(pen=cci1_pen)
        self.plot4_gold_cci1_curve = self.plot4.plot(pen=cci1_pen)
        self.plot4_euro_cci1_curve = self.plot4.plot(pen=cci1_pen)
        self.plot4_yen_cci1_curve = self.plot4.plot(pen=cci1_pen)
        self.plot4_adi_cci1_curve = self.plot4.plot(pen=cci1_pen)

        self.plot4_futures_cci2_curve = self.plot4.plot(pen=cci2_pen)
        self.plot4_sp500_cci2_curve = self.plot4.plot(pen=cci2_pen)
        self.plot4_dow_cci2_curve = self.plot4.plot(pen=cci2_pen)
        self.plot4_nasdaq_cci2_curve = self.plot4.plot(pen=cci2_pen)
        self.plot4_hsi_cci2_curve = self.plot4.plot(pen=cci2_pen)
        self.plot4_wti_cci2_curve = self.plot4.plot(pen=cci2_pen)
        self.plot4_gold_cci2_curve = self.plot4.plot(pen=cci2_pen)
        self.plot4_euro_cci2_curve = self.plot4.plot(pen=cci2_pen)
        self.plot4_yen_cci2_curve = self.plot4.plot(pen=cci2_pen)
        self.plot4_adi_cci2_curve = self.plot4.plot(pen=cci2_pen)

        self.plot4_cci_plus_100_line = self.plot4.addLine(x=None, pen=red_dot_pen)
        self.plot4_cci_minus_100_line = self.plot4.addLine(x=None, pen=red_dot_pen)
        
        #cross hair
        if CROSS_HAIR_LINE:
            self.plot4_vLine = pg.InfiniteLine(angle=90, movable=False)
            self.plot4_hLine = pg.InfiniteLine(angle=0, movable=False)
            self.plot4.addItem(self.plot4_vLine, ignoreBounds=True)
            self.plot4.addItem(self.plot4_hLine, ignoreBounds=True)
            self.plot4.setMouseTracking(True)            
            self.plot4.scene().sigMouseClicked.connect(self.plot4_mouseClicked)
            #self.plot4.scene().sigMouseMoved.connect(self.plot4_mouseMoved)
        else:
            pass  

        # Line & Curve of the Plot5 선물가격(new)
        self.plot5_time_line_jugan_start = self.plot5.addLine(x=0, y=None, pen=jugan_x_start_pen)
        self.plot5_time_line_yagan_start = self.plot5.addLine(x=0, y=None, pen=yagan_x_start_pen)
        self.plot5_time_line = self.plot5.addLine(x=0, y=None, pen=moving_x_pen)
        
        # 선물가격
        self.plot5_fut_jl_line = self.plot5.addLine(x=None, pen=goldenrod_pen)
        self.plot5_fut_jh_line = self.plot5.addLine(x=None, pen=gold_pen)  
        self.plot5_fut_open_line = self.plot5.addLine(x=None, pen=red_dot_pen)
        self.plot5_fut_close_line = self.plot5.addLine(x=None, pen=lime_pen)
        self.plot5_fut_pivot_line = self.plot5.addLine(x=None, pen=fut_pvt_pen)
        self.plot5_fut_low_line = self.plot5.addLine(x=None, pen=skyblue_pen)
        self.plot5_fut_high_line = self.plot5.addLine(x=None, pen=pink_pen)

        self.plot5_fut_cm_price_curve = self.plot5.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        self.plot5_fut_nm_price_curve = self.plot5.plot(pen=gpen, symbolBrush=lime, symbolPen='w', symbol='o', symbolSize=3)
        self.plot5_kp200_curve = self.plot5.plot(pen=ypen, symbolBrush=gold, symbolPen='w', symbol='h', symbolSize=3)

        # 선옵잔량비
        self.plot5_quote_remainder_ratio_base_line = self.plot5.addLine(x=None, pen=ypen1)
        self.plot5_nm_futures_quote_remainder_ratio_bottom_line = self.plot5.addLine(x=None, pen=gpen1)
        self.plot5_nm_futures_quote_remainder_ratio_upper_line = self.plot5.addLine(x=None, pen=red_dot_pen)
        
        self.plot5_fut_cm_quote_remainder_ratio_curve = self.plot5.plot(pen=gpen, symbolBrush=lime, symbolPen='w', symbol='o', symbolSize=3)
        self.plot5_fut_nm_quote_remainder_ratio_curve = self.plot5.plot(pen=ypen, symbolBrush=gold, symbolPen='w', symbol='o', symbolSize=3)

        # 선옵체결
        self.plot5_fut_volume_curve = self.plot5.plot(pen=gpen, symbolBrush=lime, symbolPen='w', symbol='o', symbolSize=3)
        self.plot5_call_volume_curve = self.plot5.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        self.plot5_put_volume_curve = self.plot5.plot(pen=bpen, symbolBrush=cyan, symbolPen='w', symbol='h', symbolSize=3)

        self.plot5_center_val_lower_line = self.plot5.addLine(x=None, pen=skyblue_pen)
        self.plot5_center_val_line = self.plot5.addLine(x=None, pen=gold_pen)
        self.plot5_center_val_upper_line = self.plot5.addLine(x=None, pen=pink_pen)

        self.plot5_center_val_curve = self.plot5.plot(pen=gpen, symbolBrush=lime, symbolPen='w', symbol='h', symbolSize=3)
        
        # 옵션잔량비
        self.plot5_call_quote_curve = self.plot5.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        self.plot5_put_quote_curve = self.plot5.plot(pen=bpen, symbolBrush=cyan, symbolPen='w', symbol='h', symbolSize=3)
        self.plot5_option_quote_remainder_ratio_bottom_line = self.plot5.addLine(x=None, pen=gpen1)
        self.plot5_option_quote_remainder_ratio_upper_line = self.plot5.addLine(x=None, pen=red_dot_pen)

        # 옵션미결
        self.plot5_call_oi_curve = self.plot5.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        self.plot5_put_oi_curve = self.plot5.plot(pen=bpen, symbolBrush=cyan, symbolPen='w', symbol='h', symbolSize=3)

        # 등락율비
        self.plot5_fut_cm_drate_curve = self.plot5.plot(pen=ypen, symbolBrush=gold, symbolPen='w', symbol='o', symbolSize=3)
        self.plot5_fut_nm_drate_curve = self.plot5.plot(pen=wpen, symbolBrush='w', symbolPen='w', symbol='o', symbolSize=3)
        self.plot5_cme_drate_curve = self.plot5.plot(pen=gpen, symbolBrush=lime, symbolPen='w', symbol='h', symbolSize=3)
        self.plot5_call_drate_curve = self.plot5.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        self.plot5_put_drate_curve = self.plot5.plot(pen=bpen, symbolBrush=cyan, symbolPen='w', symbol='h', symbolSize=3)

        # 해외선물        
        self.plot5_ovc_jl_line = self.plot5.addLine(x=None, pen=goldenrod_pen)
        self.plot5_ovc_jh_line = self.plot5.addLine(x=None, pen=gold_pen)  
        self.plot5_ovc_close_line = self.plot5.addLine(x=None, pen=lime_pen)
        self.plot5_ovc_open_line = self.plot5.addLine(x=None, pen=red_dot_pen)
        self.plot5_ovc_pivot_line = self.plot5.addLine(x=None, pen=fut_pvt_pen)
        self.plot5_ovc_low_line = self.plot5.addLine(x=None, pen=skyblue_pen)
        self.plot5_ovc_high_line = self.plot5.addLine(x=None, pen=pink_pen)

        self.plot5_sp500_curve = self.plot5.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        self.plot5_dow_curve = self.plot5.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        self.plot5_nasdaq_curve = self.plot5.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        self.plot5_hsi_curve = self.plot5.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        self.plot5_wti_curve = self.plot5.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        self.plot5_gold_curve = self.plot5.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        self.plot5_euro_curve = self.plot5.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        self.plot5_yen_curve = self.plot5.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        self.plot5_adi_curve = self.plot5.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)

        self.plot5_bollinger_1st_upper_curve = self.plot5.plot(pen=bb_1st_pen)
        self.plot5_bollinger_1st_middle_curve = self.plot5.plot(pen=bb_middle_pen)
        self.plot5_bollinger_1st_lower_curve = self.plot5.plot(pen=bb_1st_pen)
        self.plot5_bollinger_2nd_upper_curve = self.plot5.plot(pen=bb_2nd_pen)
        self.plot5_bollinger_2nd_middle_curve = self.plot5.plot(pen=bb_middle_pen)
        self.plot5_bollinger_2nd_lower_curve = self.plot5.plot(pen=bb_2nd_pen)

        self.plot5_psar_curve = self.plot5.plot(pen=psar_pen)

        self.plot5_mama_curve = self.plot5.plot(pen=mama_pen)
        self.plot5_fama_curve = self.plot5.plot(pen=fama_pen)

        #self.plot5_sslup_curve = self.plot5.plot(pen=sslup_pen)
        #self.plot5_ssldown_curve = self.plot5.plot(pen=ssldown_pen)

        self.plot5_oe_conv_curve = self.plot5.plot(pen=conv_pen)
        self.plot5_oe_base_curve = self.plot5.plot(pen=base_pen)
        self.plot5_span_a_curve = self.plot5.plot(pen=span_a_pen)
        self.plot5_span_b_curve = self.plot5.plot(pen=span_b_pen)
        self.plot5_lagging_span_curve = self.plot5.plot(pen=lagging_span_pen)

        # 수급종합
        self.plot5_program_curve = self.plot5.plot(pen=magenta_pen3)
        self.plot5_kospi_total_curve = self.plot5.plot(pen=yellow_pen3)

        # 외인수급
        self.plot5_futures_foreigner_curve = self.plot5.plot(pen=ypen, symbolBrush=gold, symbolPen='w', symbol='h', symbolSize=3)
        self.plot5_kospi_foreigner_curve = self.plot5.plot(pen=magenta_pen1, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)

        # Fibonacci Retracements Line
        self.plot5_fibonacci_line1 = self.plot5.addLine(x=None, pen=lime_pen)
        self.plot5_fibonacci_line2 = self.plot5.addLine(x=None, pen=lime_pen)
        self.plot5_fibonacci_line3 = self.plot5.addLine(x=None, pen=yellow_pen)
        self.plot5_fibonacci_line4 = self.plot5.addLine(x=None, pen=lime_pen)
        self.plot5_fibonacci_line5 = self.plot5.addLine(x=None, pen=lime_pen)

        # Alligator Curve
        self.plot5_futures_alligator_lip_curve = self.plot5.plot(pen=lime_pen)
        self.plot5_futures_alligator_teeth_curve = self.plot5.plot(pen=magenta_pen)
        self.plot5_futures_alligator_jaw_curve = self.plot5.plot(pen=aqua_pen)

        self.plot5_sp500_alligator_lip_curve = self.plot5.plot(pen=lime_pen)
        self.plot5_sp500_alligator_teeth_curve = self.plot5.plot(pen=magenta_pen)
        self.plot5_sp500_alligator_jaw_curve = self.plot5.plot(pen=aqua_pen)

        self.plot5_dow_alligator_lip_curve = self.plot5.plot(pen=lime_pen)
        self.plot5_dow_alligator_teeth_curve = self.plot5.plot(pen=magenta_pen)
        self.plot5_dow_alligator_jaw_curve = self.plot5.plot(pen=aqua_pen)

        self.plot5_nasdaq_alligator_lip_curve = self.plot5.plot(pen=lime_pen)
        self.plot5_nasdaq_alligator_teeth_curve = self.plot5.plot(pen=magenta_pen)
        self.plot5_nasdaq_alligator_jaw_curve = self.plot5.plot(pen=aqua_pen)

        self.plot5_hti_alligator_lip_curve = self.plot5.plot(pen=lime_pen)
        self.plot5_hti_alligator_teeth_curve = self.plot5.plot(pen=magenta_pen)
        self.plot5_hti_alligator_jaw_curve = self.plot5.plot(pen=aqua_pen)

        self.plot5_wti_alligator_lip_curve = self.plot5.plot(pen=lime_pen)
        self.plot5_wti_alligator_teeth_curve = self.plot5.plot(pen=magenta_pen)
        self.plot5_wti_alligator_jaw_curve = self.plot5.plot(pen=aqua_pen)

        self.plot5_gold_alligator_lip_curve = self.plot5.plot(pen=lime_pen)
        self.plot5_gold_alligator_teeth_curve = self.plot5.plot(pen=magenta_pen)
        self.plot5_gold_alligator_jaw_curve = self.plot5.plot(pen=aqua_pen)

        self.plot5_euro_alligator_lip_curve = self.plot5.plot(pen=lime_pen)
        self.plot5_euro_alligator_teeth_curve = self.plot5.plot(pen=magenta_pen)
        self.plot5_euro_alligator_jaw_curve = self.plot5.plot(pen=aqua_pen)

        self.plot5_yen_alligator_lip_curve = self.plot5.plot(pen=lime_pen)
        self.plot5_yen_alligator_teeth_curve = self.plot5.plot(pen=magenta_pen)
        self.plot5_yen_alligator_jaw_curve = self.plot5.plot(pen=aqua_pen)

        self.plot5_adi_alligator_lip_curve = self.plot5.plot(pen=lime_pen)
        self.plot5_adi_alligator_teeth_curve = self.plot5.plot(pen=magenta_pen)
        self.plot5_adi_alligator_jaw_curve = self.plot5.plot(pen=aqua_pen)

        # RSI Curve
        self.plot5_futures_rsi_curve = self.plot5.plot(pen=rsi_pen)
        self.plot5_sp500_rsi_curve = self.plot5.plot(pen=rsi_pen)
        self.plot5_dow_rsi_curve = self.plot5.plot(pen=rsi_pen)
        self.plot5_nasdaq_rsi_curve = self.plot5.plot(pen=rsi_pen)
        self.plot5_hsi_rsi_curve = self.plot5.plot(pen=rsi_pen)
        self.plot5_wti_rsi_curve = self.plot5.plot(pen=rsi_pen)
        self.plot5_gold_rsi_curve = self.plot5.plot(pen=rsi_pen)
        self.plot5_euro_rsi_curve = self.plot5.plot(pen=rsi_pen)
        self.plot5_yen_rsi_curve = self.plot5.plot(pen=rsi_pen)
        self.plot5_adi_rsi_curve = self.plot5.plot(pen=rsi_pen)

        # CCI Curve
        self.plot5_futures_cci1_curve = self.plot5.plot(pen=cci1_pen)
        self.plot5_sp500_cci1_curve = self.plot5.plot(pen=cci1_pen)
        self.plot5_dow_cci1_curve = self.plot5.plot(pen=cci1_pen)
        self.plot5_nasdaq_cci1_curve = self.plot5.plot(pen=cci1_pen)
        self.plot5_hsi_cci1_curve = self.plot5.plot(pen=cci1_pen)
        self.plot5_wti_cci1_curve = self.plot5.plot(pen=cci1_pen)
        self.plot5_gold_cci1_curve = self.plot5.plot(pen=cci1_pen)
        self.plot5_euro_cci1_curve = self.plot5.plot(pen=cci1_pen)
        self.plot5_yen_cci1_curve = self.plot5.plot(pen=cci1_pen)
        self.plot5_adi_cci1_curve = self.plot5.plot(pen=cci1_pen)

        self.plot5_futures_cci2_curve = self.plot5.plot(pen=cci2_pen)
        self.plot5_sp500_cci2_curve = self.plot5.plot(pen=cci2_pen)
        self.plot5_dow_cci2_curve = self.plot5.plot(pen=cci2_pen)
        self.plot5_nasdaq_cci2_curve = self.plot5.plot(pen=cci2_pen)
        self.plot5_hsi_cci2_curve = self.plot5.plot(pen=cci2_pen)
        self.plot5_wti_cci2_curve = self.plot5.plot(pen=cci2_pen)
        self.plot5_gold_cci2_curve = self.plot5.plot(pen=cci2_pen)
        self.plot5_euro_cci2_curve = self.plot5.plot(pen=cci2_pen)
        self.plot5_yen_cci2_curve = self.plot5.plot(pen=cci2_pen)
        self.plot5_adi_cci2_curve = self.plot5.plot(pen=cci2_pen)

        self.plot5_cci_plus_100_line = self.plot5.addLine(x=None, pen=red_dot_pen)
        self.plot5_cci_minus_100_line = self.plot5.addLine(x=None, pen=red_dot_pen)

        #cross hair
        if CROSS_HAIR_LINE:
            self.plot5_vLine = pg.InfiniteLine(angle=90, movable=False)
            self.plot5_hLine = pg.InfiniteLine(angle=0, movable=False)
            self.plot5.addItem(self.plot5_vLine, ignoreBounds=True)
            self.plot5.addItem(self.plot5_hLine, ignoreBounds=True)
            self.plot5.setMouseTracking(True)            
            self.plot5.scene().sigMouseClicked.connect(self.plot5_mouseClicked)
            #self.plot5.scene().sigMouseMoved.connect(self.plot5_mouseMoved)
        else:
            pass 

        # Line & Curve of the Plot6 선물가격(new)
        self.plot6_time_line_jugan_start = self.plot6.addLine(x=0, y=None, pen=jugan_x_start_pen)
        self.plot6_time_line_yagan_start = self.plot6.addLine(x=0, y=None, pen=yagan_x_start_pen)
        self.plot6_time_line = self.plot6.addLine(x=0, y=None, pen=moving_x_pen)
        
        # 선물가격
        self.plot6_fut_jl_line = self.plot6.addLine(x=None, pen=goldenrod_pen)
        self.plot6_fut_jh_line = self.plot6.addLine(x=None, pen=gold_pen)  
        self.plot6_fut_open_line = self.plot6.addLine(x=None, pen=red_dot_pen)
        self.plot6_fut_close_line = self.plot6.addLine(x=None, pen=lime_pen)
        self.plot6_fut_pivot_line = self.plot6.addLine(x=None, pen=fut_pvt_pen)
        self.plot6_fut_low_line = self.plot6.addLine(x=None, pen=skyblue_pen)
        self.plot6_fut_high_line = self.plot6.addLine(x=None, pen=pink_pen)

        self.plot6_fut_cm_price_curve = self.plot6.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        self.plot6_fut_nm_price_curve = self.plot6.plot(pen=gpen, symbolBrush=lime, symbolPen='w', symbol='o', symbolSize=3)
        self.plot6_kp200_curve = self.plot6.plot(pen=ypen, symbolBrush=gold, symbolPen='w', symbol='h', symbolSize=3)

        # 선옵잔량비
        self.plot6_quote_remainder_ratio_base_line = self.plot6.addLine(x=None, pen=ypen1)
        self.plot6_nm_futures_quote_remainder_ratio_bottom_line = self.plot6.addLine(x=None, pen=gpen1)
        self.plot6_nm_futures_quote_remainder_ratio_upper_line = self.plot6.addLine(x=None, pen=red_dot_pen)
        
        self.plot6_fut_cm_quote_remainder_ratio_curve = self.plot6.plot(pen=gpen, symbolBrush=lime, symbolPen='w', symbol='o', symbolSize=3)
        self.plot6_fut_nm_quote_remainder_ratio_curve = self.plot6.plot(pen=ypen, symbolBrush=gold, symbolPen='w', symbol='o', symbolSize=3)

        # 선옵체결
        self.plot6_fut_volume_curve = self.plot6.plot(pen=gpen, symbolBrush=lime, symbolPen='w', symbol='o', symbolSize=3)
        self.plot6_call_volume_curve = self.plot6.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        self.plot6_put_volume_curve = self.plot6.plot(pen=bpen, symbolBrush=cyan, symbolPen='w', symbol='h', symbolSize=3)        

        self.plot6_center_val_lower_line = self.plot6.addLine(x=None, pen=skyblue_pen)
        self.plot6_center_val_line = self.plot6.addLine(x=None, pen=gold_pen)
        self.plot6_center_val_upper_line = self.plot6.addLine(x=None, pen=pink_pen)

        self.plot6_center_val_curve = self.plot6.plot(pen=gpen, symbolBrush=lime, symbolPen='w', symbol='h', symbolSize=3)
        
        # 옵션잔량비
        self.plot6_call_quote_curve = self.plot6.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        self.plot6_put_quote_curve = self.plot6.plot(pen=bpen, symbolBrush=cyan, symbolPen='w', symbol='h', symbolSize=3)
        self.plot6_option_quote_remainder_ratio_bottom_line = self.plot6.addLine(x=None, pen=gpen1)
        self.plot6_option_quote_remainder_ratio_upper_line = self.plot6.addLine(x=None, pen=red_dot_pen)

        # 옵션미결
        self.plot6_call_oi_curve = self.plot6.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        self.plot6_put_oi_curve = self.plot6.plot(pen=bpen, symbolBrush=cyan, symbolPen='w', symbol='h', symbolSize=3)

        # 등락율비
        self.plot6_fut_cm_drate_curve = self.plot6.plot(pen=ypen, symbolBrush=gold, symbolPen='w', symbol='o', symbolSize=3)
        self.plot6_fut_nm_drate_curve = self.plot6.plot(pen=wpen, symbolBrush='w', symbolPen='w', symbol='o', symbolSize=3)
        self.plot6_cme_drate_curve = self.plot6.plot(pen=gpen, symbolBrush=lime, symbolPen='w', symbol='h', symbolSize=3)
        self.plot6_call_drate_curve = self.plot6.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        self.plot6_put_drate_curve = self.plot6.plot(pen=bpen, symbolBrush=cyan, symbolPen='w', symbol='h', symbolSize=3)

        # 해외선물        
        self.plot6_ovc_jl_line = self.plot6.addLine(x=None, pen=goldenrod_pen)
        self.plot6_ovc_jh_line = self.plot6.addLine(x=None, pen=gold_pen)  
        self.plot6_ovc_close_line = self.plot6.addLine(x=None, pen=lime_pen)
        self.plot6_ovc_open_line = self.plot6.addLine(x=None, pen=red_dot_pen)
        self.plot6_ovc_pivot_line = self.plot6.addLine(x=None, pen=fut_pvt_pen)
        self.plot6_ovc_low_line = self.plot6.addLine(x=None, pen=skyblue_pen)
        self.plot6_ovc_high_line = self.plot6.addLine(x=None, pen=pink_pen)

        self.plot6_sp500_curve = self.plot6.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        self.plot6_dow_curve = self.plot6.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        self.plot6_nasdaq_curve = self.plot6.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        self.plot6_hsi_curve = self.plot6.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3) 
        self.plot6_wti_curve = self.plot6.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        self.plot6_gold_curve = self.plot6.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        self.plot6_euro_curve = self.plot6.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        self.plot6_yen_curve = self.plot6.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        self.plot6_adi_curve = self.plot6.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)

        self.plot6_bollinger_1st_upper_curve = self.plot6.plot(pen=bb_1st_pen)
        self.plot6_bollinger_1st_middle_curve = self.plot6.plot(pen=bb_middle_pen)
        self.plot6_bollinger_1st_lower_curve = self.plot6.plot(pen=bb_1st_pen)
        self.plot6_bollinger_2nd_upper_curve = self.plot6.plot(pen=bb_2nd_pen)
        self.plot6_bollinger_2nd_middle_curve = self.plot6.plot(pen=bb_middle_pen)
        self.plot6_bollinger_2nd_lower_curve = self.plot6.plot(pen=bb_2nd_pen)

        self.plot6_psar_curve = self.plot6.plot(pen=psar_pen)

        self.plot6_mama_curve = self.plot6.plot(pen=mama_pen)
        self.plot6_fama_curve = self.plot6.plot(pen=fama_pen)

        #self.plot6_sslup_curve = self.plot6.plot(pen=sslup_pen)
        #self.plot6_ssldown_curve = self.plot6.plot(pen=ssldown_pen)

        self.plot6_oe_conv_curve = self.plot6.plot(pen=conv_pen)
        self.plot6_oe_base_curve = self.plot6.plot(pen=base_pen)
        self.plot6_span_a_curve = self.plot6.plot(pen=span_a_pen)
        self.plot6_span_b_curve = self.plot6.plot(pen=span_b_pen)
        self.plot6_lagging_span_curve = self.plot6.plot(pen=lagging_span_pen)

        # 수급종합
        self.plot6_program_curve = self.plot6.plot(pen=magenta_pen3)
        self.plot6_kospi_total_curve = self.plot6.plot(pen=yellow_pen3)

        # 외인수급
        self.plot6_futures_foreigner_curve = self.plot6.plot(pen=ypen, symbolBrush=gold, symbolPen='w', symbol='h', symbolSize=3)
        self.plot6_kospi_foreigner_curve = self.plot6.plot(pen=magenta_pen1, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)

        # Fibonacci Retracements Line
        self.plot6_fibonacci_line1 = self.plot6.addLine(x=None, pen=lime_pen)
        self.plot6_fibonacci_line2 = self.plot6.addLine(x=None, pen=lime_pen)
        self.plot6_fibonacci_line3 = self.plot6.addLine(x=None, pen=yellow_pen)
        self.plot6_fibonacci_line4 = self.plot6.addLine(x=None, pen=lime_pen)
        self.plot6_fibonacci_line5 = self.plot6.addLine(x=None, pen=lime_pen)

        # Alligator Curve
        self.plot6_futures_alligator_lip_curve = self.plot6.plot(pen=lime_pen)
        self.plot6_futures_alligator_teeth_curve = self.plot6.plot(pen=magenta_pen)
        self.plot6_futures_alligator_jaw_curve = self.plot6.plot(pen=aqua_pen)

        self.plot6_sp500_alligator_lip_curve = self.plot6.plot(pen=lime_pen)
        self.plot6_sp500_alligator_teeth_curve = self.plot6.plot(pen=magenta_pen)
        self.plot6_sp500_alligator_jaw_curve = self.plot6.plot(pen=aqua_pen)

        self.plot6_dow_alligator_lip_curve = self.plot6.plot(pen=lime_pen)
        self.plot6_dow_alligator_teeth_curve = self.plot6.plot(pen=magenta_pen)
        self.plot6_dow_alligator_jaw_curve = self.plot6.plot(pen=aqua_pen)

        self.plot6_nasdaq_alligator_lip_curve = self.plot6.plot(pen=lime_pen)
        self.plot6_nasdaq_alligator_teeth_curve = self.plot6.plot(pen=magenta_pen)
        self.plot6_nasdaq_alligator_jaw_curve = self.plot6.plot(pen=aqua_pen)

        self.plot6_hti_alligator_lip_curve = self.plot6.plot(pen=lime_pen)
        self.plot6_hti_alligator_teeth_curve = self.plot6.plot(pen=magenta_pen)
        self.plot6_hti_alligator_jaw_curve = self.plot6.plot(pen=aqua_pen)

        self.plot6_wti_alligator_lip_curve = self.plot6.plot(pen=lime_pen)
        self.plot6_wti_alligator_teeth_curve = self.plot6.plot(pen=magenta_pen)
        self.plot6_wti_alligator_jaw_curve = self.plot6.plot(pen=aqua_pen)

        self.plot6_gold_alligator_lip_curve = self.plot6.plot(pen=lime_pen)
        self.plot6_gold_alligator_teeth_curve = self.plot6.plot(pen=magenta_pen)
        self.plot6_gold_alligator_jaw_curve = self.plot6.plot(pen=aqua_pen)

        self.plot6_euro_alligator_lip_curve = self.plot6.plot(pen=lime_pen)
        self.plot6_euro_alligator_teeth_curve = self.plot6.plot(pen=magenta_pen)
        self.plot6_euro_alligator_jaw_curve = self.plot6.plot(pen=aqua_pen)

        self.plot6_yen_alligator_lip_curve = self.plot6.plot(pen=lime_pen)
        self.plot6_yen_alligator_teeth_curve = self.plot6.plot(pen=magenta_pen)
        self.plot6_yen_alligator_jaw_curve = self.plot6.plot(pen=aqua_pen)

        self.plot6_adi_alligator_lip_curve = self.plot6.plot(pen=lime_pen)
        self.plot6_adi_alligator_teeth_curve = self.plot6.plot(pen=magenta_pen)
        self.plot6_adi_alligator_jaw_curve = self.plot6.plot(pen=aqua_pen)

        # RSI Curve
        self.plot6_futures_rsi_curve = self.plot6.plot(pen=rsi_pen)
        self.plot6_sp500_rsi_curve = self.plot6.plot(pen=rsi_pen)
        self.plot6_dow_rsi_curve = self.plot6.plot(pen=rsi_pen)
        self.plot6_nasdaq_rsi_curve = self.plot6.plot(pen=rsi_pen)
        self.plot6_hsi_rsi_curve = self.plot6.plot(pen=rsi_pen)
        self.plot6_wti_rsi_curve = self.plot6.plot(pen=rsi_pen)
        self.plot6_gold_rsi_curve = self.plot6.plot(pen=rsi_pen)
        self.plot6_euro_rsi_curve = self.plot6.plot(pen=rsi_pen)
        self.plot6_yen_rsi_curve = self.plot6.plot(pen=rsi_pen)
        self.plot6_adi_rsi_curve = self.plot6.plot(pen=rsi_pen)

        # CCI Curve
        self.plot6_futures_cci1_curve = self.plot6.plot(pen=cci1_pen)
        self.plot6_sp500_cci1_curve = self.plot6.plot(pen=cci1_pen)
        self.plot6_dow_cci1_curve = self.plot6.plot(pen=cci1_pen)
        self.plot6_nasdaq_cci1_curve = self.plot6.plot(pen=cci1_pen)
        self.plot6_hsi_cci1_curve = self.plot6.plot(pen=cci1_pen)
        self.plot6_wti_cci1_curve = self.plot6.plot(pen=cci1_pen)
        self.plot6_gold_cci1_curve = self.plot6.plot(pen=cci1_pen)
        self.plot6_euro_cci1_curve = self.plot6.plot(pen=cci1_pen)
        self.plot6_yen_cci1_curve = self.plot6.plot(pen=cci1_pen)
        self.plot6_adi_cci1_curve = self.plot6.plot(pen=cci1_pen)

        self.plot6_futures_cci2_curve = self.plot6.plot(pen=cci2_pen)
        self.plot6_sp500_cci2_curve = self.plot6.plot(pen=cci2_pen)
        self.plot6_dow_cci2_curve = self.plot6.plot(pen=cci2_pen)
        self.plot6_nasdaq_cci2_curve = self.plot6.plot(pen=cci2_pen)
        self.plot6_hsi_cci2_curve = self.plot6.plot(pen=cci2_pen)
        self.plot6_wti_cci2_curve = self.plot6.plot(pen=cci2_pen)
        self.plot6_gold_cci2_curve = self.plot6.plot(pen=cci2_pen)
        self.plot6_euro_cci2_curve = self.plot6.plot(pen=cci2_pen)
        self.plot6_yen_cci2_curve = self.plot6.plot(pen=cci2_pen)
        self.plot6_adi_cci2_curve = self.plot6.plot(pen=cci2_pen)

        self.plot6_cci_plus_100_line = self.plot6.addLine(x=None, pen=red_dot_pen)
        self.plot6_cci_minus_100_line = self.plot6.addLine(x=None, pen=red_dot_pen)

        #cross hair
        if CROSS_HAIR_LINE:
            self.plot6_vLine = pg.InfiniteLine(angle=90, movable=False)
            self.plot6_hLine = pg.InfiniteLine(angle=0, movable=False)
            self.plot6.addItem(self.plot6_vLine, ignoreBounds=True)
            self.plot6.addItem(self.plot6_hLine, ignoreBounds=True)
            self.plot6.setMouseTracking(True)            
            self.plot6.scene().sigMouseClicked.connect(self.plot6_mouseClicked)
            #self.plot6.scene().sigMouseMoved.connect(self.plot6_mouseMoved)
        else:
            pass        

        # 선물관련 그래프 초기화(시간을 줄이기위해 for문 일괄처리)
        self.plot1_kp200_line = []
        self.plot2_kp200_line = []
        self.plot3_kp200_line = []
        self.plot4_kp200_line = []
        self.plot5_kp200_line = []
        self.plot6_kp200_line = []
        
        for i in range(10):
            self.plot1_kp200_line.append(self.plot1.addLine(x=None, pen=kp200_pen))
            self.plot2_kp200_line.append(self.plot2.addLine(x=None, pen=kp200_pen))
            self.plot3_kp200_line.append(self.plot3.addLine(x=None, pen=kp200_pen))
            self.plot4_kp200_line.append(self.plot4.addLine(x=None, pen=kp200_pen))
            self.plot5_kp200_line.append(self.plot5.addLine(x=None, pen=kp200_pen))
            self.plot6_kp200_line.append(self.plot6.addLine(x=None, pen=kp200_pen))            

        # 옵션가격 그래프 초기화(시간을 줄이기위해 for문 일괄처리)        
        self.plot1_mv_line = []
        self.plot2_mv_line = []
        self.plot3_mv_line = []
        self.plot4_mv_line = []
        self.plot5_mv_line = []
        self.plot6_mv_line = []
        
        for i in range(9):
            self.plot1_mv_line.append(self.plot1.addLine(x=None, pen=mvpen))
            self.plot2_mv_line.append(self.plot2.addLine(x=None, pen=mvpen))
            self.plot3_mv_line.append(self.plot3.addLine(x=None, pen=mvpen))
            self.plot4_mv_line.append(self.plot4.addLine(x=None, pen=mvpen))
            self.plot5_mv_line.append(self.plot5.addLine(x=None, pen=mvpen))
            self.plot6_mv_line.append(self.plot6.addLine(x=None, pen=mvpen))

        self.plot1_call_curve = []
        self.plot1_put_curve = []

        self.plot2_call_curve = []
        self.plot2_put_curve = []

        self.plot3_call_curve = []
        self.plot3_put_curve = []

        self.plot4_call_curve = []
        self.plot4_put_curve = []

        self.plot5_call_curve = []
        self.plot5_put_curve = []

        self.plot6_call_curve = []
        self.plot6_put_curve = []
        
        for i in range(option_pairs_count):

            self.plot1_call_curve.append(self.plot1.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3))
            self.plot1_put_curve.append(self.plot1.plot(pen=bpen, symbolBrush=cyan, symbolPen='w', symbol='o', symbolSize=3))

            self.plot2_call_curve.append(self.plot2.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3))
            self.plot2_put_curve.append(self.plot2.plot(pen=bpen, symbolBrush=cyan, symbolPen='w', symbol='o', symbolSize=3))

            self.plot3_call_curve.append(self.plot3.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3))
            self.plot3_put_curve.append(self.plot3.plot(pen=bpen, symbolBrush=cyan, symbolPen='w', symbol='o', symbolSize=3))

            self.plot4_call_curve.append(self.plot4.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3))
            self.plot4_put_curve.append(self.plot4.plot(pen=bpen, symbolBrush=cyan, symbolPen='w', symbol='o', symbolSize=3))

            self.plot5_call_curve.append(self.plot5.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3))
            self.plot5_put_curve.append(self.plot5.plot(pen=bpen, symbolBrush=cyan, symbolPen='w', symbol='o', symbolSize=3))

            self.plot6_call_curve.append(self.plot6.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3))
            self.plot6_put_curve.append(self.plot6.plot(pen=bpen, symbolBrush=cyan, symbolPen='w', symbol='o', symbolSize=3))

            if i % 10 == 0:                
                txt = ' Chart윈도우 초기화중({0:.0f}%)...\r'.format((i / option_pairs_count) * 100)
                self.parent.statusbar.showMessage(txt)
                QApplication.processEvents()
            else:
                pass

        txt = ' Chart윈도우 초기화 완료\r'
        self.parent.statusbar.showMessage(txt)

        if NightTime:
            timespan = yagan_timespan
        else:
            timespan = jugan_timespan

        self.plot1.setRange(xRange=[0, timespan], padding=0)
        self.plot1_time_line.setValue(timespan - 1)

        self.plot2.setRange(xRange=[0, timespan], padding=0)
        self.plot2_time_line.setValue(timespan - 1)

        self.plot3.setRange(xRange=[0, timespan], padding=0)
        self.plot3_time_line.setValue(timespan - 1)

        self.plot4.setRange(xRange=[0, timespan], padding=0)
        self.plot4_time_line.setValue(timespan - 1)

        self.plot5.setRange(xRange=[0, timespan], padding=0)
        self.plot5_time_line.setValue(timespan - 1)

        self.plot6.setRange(xRange=[0, timespan], padding=0)
        self.plot6_time_line.setValue(timespan - 1)          

        if NightTime:
            # 야간옵션은 4시, 야간선물은 5시 장마감됨, 시작시간 X축 표시(index 0는 종가, index 1은 시가)
            self.plot1_time_line_jugan_start.setValue(GuardTime + 1)
            self.plot2_time_line_jugan_start.setValue(GuardTime + 1)
            self.plot3_time_line_jugan_start.setValue(GuardTime + 1)
            self.plot4_time_line_jugan_start.setValue(GuardTime + 1)
            self.plot5_time_line_jugan_start.setValue(GuardTime + 1)
            self.plot6_time_line_jugan_start.setValue(GuardTime + 1)

            if SUMMER_TIME:
                cme_open_hour  = 22
            else:
                cme_open_hour  = 23

            CME_START_TIME = (cme_open_hour  - NightTime_PreStart_Hour) * 60 + 30

            self.plot1_time_line_yagan_start.setValue(CME_START_TIME)
            self.plot2_time_line_yagan_start.setValue(CME_START_TIME)
            self.plot3_time_line_yagan_start.setValue(CME_START_TIME)
            self.plot4_time_line_yagan_start.setValue(CME_START_TIME)
            self.plot5_time_line_yagan_start.setValue(CME_START_TIME)
            self.plot6_time_line_yagan_start.setValue(CME_START_TIME)
        else:
            # 시작시간 X축 표시(index 60은 시가)
            self.plot1_time_line_jugan_start.setValue(GuardTime)
            self.plot2_time_line_jugan_start.setValue(GuardTime)
            self.plot3_time_line_jugan_start.setValue(GuardTime)

            self.plot4_time_line_jugan_start.setValue(GuardTime)
            self.plot5_time_line_jugan_start.setValue(GuardTime)
            self.plot6_time_line_jugan_start.setValue(GuardTime)

        # 그리기 쓰레드
        '''
        self.plot_update_worker1 = PlotUpdateWorker1()
        self.plot_update_worker1.trigger.connect(self.update_plot1)

        self.plot_update_worker2 = PlotUpdateWorker2()
        self.plot_update_worker2.trigger.connect(self.update_plot2)

        self.plot_update_worker3 = PlotUpdateWorker3()
        self.plot_update_worker3.trigger.connect(self.update_plot3)

        self.plot_update_worker4 = PlotUpdateWorker4()
        self.plot_update_worker4.trigger.connect(self.update_plot4)

        self.plot_update_worker5 = PlotUpdateWorker5()
        self.plot_update_worker5.trigger.connect(self.update_plot5)

        self.plot_update_worker6 = PlotUpdateWorker6()
        self.plot_update_worker6.trigger.connect(self.update_plot6)
        '''

        self.timer1 = QtCore.QTimer()
        self.timer1.setInterval(chart_update_interval)
        self.timer1.timeout.connect(self.plot1_update)

        self.timer2 = QtCore.QTimer()
        self.timer2.setInterval(chart_update_interval)
        self.timer2.timeout.connect(self.plot2_update)

        self.timer3 = QtCore.QTimer()
        self.timer3.setInterval(chart_update_interval)
        self.timer3.timeout.connect(self.plot3_update)

        self.timer4 = QtCore.QTimer()
        self.timer4.setInterval(chart_update_interval)
        self.timer4.timeout.connect(self.plot4_update)

        self.timer5 = QtCore.QTimer()
        self.timer5.setInterval(chart_update_interval)
        self.timer5.timeout.connect(self.plot5_update)

        self.timer6 = QtCore.QTimer()
        self.timer6.setInterval(chart_update_interval)
        self.timer6.timeout.connect(self.plot6_update)

        end_time = timeit.default_timer()
        processing_time = (end_time - start_time) * 1000

        txt = '[{0:02d}:{1:02d}:{2:02d}] Sky Chart 초기화완료, 시간 = {3} ms\r'.format(dt.hour, dt.minute, dt.second, processing_time)
        self.parent.textBrowser.append(txt)
        print(txt)

    @pyqtSlot(Exception, str)
    def on_exceptionOccurred(self, exception, slot_name):
        QMessageBox.critical(self, "Uncaught exception in SkyChart!", f"In pyqtSlot: {slot_name}:\n" f"Caught exception: {exception.__repr__()}")

    #cross hair
    '''
    def plot1_mouseMoved(self, evt):

        global plot1_x, plot1_y

        pos = evt

        if self.plot1.sceneBoundingRect().contains(pos):

            mousePoint = self.plot1.plotItem.vb.mapSceneToView(pos)

            self.plot1_vLine.setPos(mousePoint.x())
            self.plot1_hLine.setPos(mousePoint.y())
            plot_x = int(mousePoint.x())
            plot_y = mousePoint.y()          

            txt = " X: {0:d}\n Y: {1:.2f} ".format(plot_x, plot_y)            
            self.label_p1_1.setText(txt) 

            if comboindex1 == 2:

                if not np.isnan(df_futures_cm_graph.at[plot_x, 'Price']):                    
                
                    Open = df_futures_cm_graph.at[plot_x, 'Open']                    
                    High = df_futures_cm_graph.at[plot_x, 'High']
                    Low = df_futures_cm_graph.at[plot_x, 'Low']
                    Close = df_futures_cm_graph.at[plot_x, 'Close']

                    txt = " X: {0:d}\n O: {1:.2f}\n H: {2:.2f}\n L\n C: {4:.2f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p1_1.setText(txt)
                else:
                    pass

            elif comboindex1 == 13:

                if not np.isnan(df_sp500_graph.at[plot_x, 'Price']):
                    
                    Open = df_sp500_graph.at[plot_x, 'Open']                    
                    High = df_sp500_graph.at[plot_x, 'High']
                    Low = df_sp500_graph.at[plot_x, 'Low']
                    Close = df_sp500_graph.at[plot_x, 'Close']

                    txt = " X: {0:d}\n O: {1:.2f}\n H: {2:.2f}\n L\n C: {4:.2f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p1_1.setText(txt)
                else:
                    pass

            elif comboindex1 == 14:

                if not np.isnan(df_dow_graph.at[plot_x, 'Price']):
                    
                    Open = df_dow_graph.at[plot_x, 'Open']                    
                    High = df_dow_graph.at[plot_x, 'High']
                    Low = df_dow_graph.at[plot_x, 'Low']
                    Close = df_dow_graph.at[plot_x, 'Close']

                    txt = " X: {0:d}\n O: {1:.0f}\n H: {2:.0f}\n L: {3:.0f}\n C: {4:.0f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p1_1.setText(txt)
                else:
                    pass

            elif comboindex1 == 15:

                if not np.isnan(df_nasdaq_graph.at[plot_x, 'Price']):
                    
                    Open = df_nasdaq_graph.at[plot_x, 'Open']                    
                    High = df_nasdaq_graph.at[plot_x, 'High']
                    Low = df_nasdaq_graph.at[plot_x, 'Low']
                    Close = df_nasdaq_graph.at[plot_x, 'Close']

                    txt = " X: {0:d}\n O: {1:.2f}\n H: {2:.2f}\n L\n C: {4:.2f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p1_1.setText(txt)
                else:
                    pass

            elif comboindex1 == 16:
                
                if not np.isnan(df_hsi_graph.at[plot_x, 'Price']):
                    
                    Open = df_hsi_graph.at[plot_x, 'Open']                    
                    High = df_hsi_graph.at[plot_x, 'High']
                    Low = df_hsi_graph.at[plot_x, 'Low']
                    Close = df_hsi_graph.at[plot_x, 'Close']

                    txt = " X: {0:d}\n O: {1:.2f}\n H: {2:.2f}\n L\n C: {4:.2f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p1_1.setText(txt)
                else:
                    pass

            elif comboindex1 == 17:

                if not np.isnan(df_wti_graph.at[plot_x, 'Price']):
                    
                    Open = df_wti_graph.at[plot_x, 'Open']                    
                    High = df_wti_graph.at[plot_x, 'High']
                    Low = df_wti_graph.at[plot_x, 'Low']
                    Close = df_wti_graph.at[plot_x, 'Close']

                    txt = " X: {0:d}\n O: {1:.2f}\n H: {2:.2f}\n L\n C: {4:.2f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p1_1.setText(txt)
                else:
                    pass

            elif comboindex1 == 18:
                
                if not np.isnan(df_gold_graph.at[plot_x, 'Price']):
                    
                    Open = df_gold_graph.at[plot_x, 'Open']                    
                    High = df_gold_graph.at[plot_x, 'High']
                    Low = df_gold_graph.at[plot_x, 'Low']
                    Close = df_gold_graph.at[plot_x, 'Close']

                    txt = " X: {0:d}\n O: {1:.2f}\n H: {2:.2f}\n L\n C: {4:.2f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p1_1.setText(txt)
                else:
                    pass

            elif comboindex1 == 19:
                
                if not np.isnan(df_euro_graph.at[plot_x, 'Price']):
                    
                    Open = df_euro_graph.at[plot_x, 'Open']                    
                    High = df_euro_graph.at[plot_x, 'High']
                    Low = df_euro_graph.at[plot_x, 'Low']
                    Close = df_euro_graph.at[plot_x, 'Close']

                    txt = " X: {0:d}\n O: {1:.2f}\n H: {2:.2f}\n L\n C: {4:.2f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p1_1.setText(txt)
                else:
                    pass

            elif comboindex1 == 20:
                
                if not np.isnan(df_yen_graph.at[plot_x, 'Price']):
                    
                    Open = df_yen_graph.at[plot_x, 'Open']                    
                    High = df_yen_graph.at[plot_x, 'High']
                    Low = df_yen_graph.at[plot_x, 'Low']
                    Close = df_yen_graph.at[plot_x, 'Close']

                    txt = " X: {0:d}\n O: {1:.2f}\n H: {2:.2f}\n L\n C: {4:.2f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p1_1.setText(txt)
                else:
                    pass

            elif comboindex1 == 21:
                
                if not np.isnan(df_adi_graph.at[plot_x, 'Price']):
                    
                    Open = df_adi_graph.at[plot_x, 'Open']                    
                    High = df_adi_graph.at[plot_x, 'High']
                    Low = df_adi_graph.at[plot_x, 'Low']
                    Close = df_adi_graph.at[plot_x, 'Close']

                    txt = " X: {0:d}\n O: {1:.2f}\n H: {2:.2f}\n L\n C: {4:.2f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p1_1.setText(txt)
                else:
                    pass
            else:
                pass
        else:
            pass
    '''

    def plot1_mouseClicked(self, evt):

        global plot1_x, plot1_y

        if self.plot1.sceneBoundingRect().contains(evt._scenePos):

            mousePoint = self.plot1.plotItem.vb.mapSceneToView(evt._scenePos)

            plot1_x = int(mousePoint.x())
            plot1_y = mousePoint.y()

            self.plot1_vLine.setPos(mousePoint.x())
            self.plot1_hLine.setPos(mousePoint.y())

            #self.cursorlabel1.setHtml("<p style='color:white'>X: {0} <br> Y: {1}</p>".format(plot1_x, plot1_y))

            txt = " X: {0:d}\n Y: {1:.5f} ".format(plot1_x, plot1_y)            
            self.label_p1_1.setText(txt)
    '''
    def plot2_mouseMoved(self, evt):

        global plot2_x, plot2_y

        pos = evt

        if self.plot2.sceneBoundingRect().contains(pos):

            mousePoint = self.plot2.plotItem.vb.mapSceneToView(pos)            

            self.plot2_vLine.setPos(mousePoint.x())
            self.plot2_hLine.setPos(mousePoint.y())
            plot_x = int(mousePoint.x())
            plot_y = mousePoint.y()

            txt = " X: {0:d}\n Y: {1:.2f} ".format(plot_x, plot_y)            
            self.label_p2_1.setText(txt)

            if comboindex2 == 2:

                if not np.isnan(df_futures_cm_graph.at[plot_x, 'Price']):                    
                
                    Open = df_futures_cm_graph.at[plot_x, 'Open']                    
                    High = df_futures_cm_graph.at[plot_x, 'High']
                    Low = df_futures_cm_graph.at[plot_x, 'Low']
                    Close = df_futures_cm_graph.at[plot_x, 'Close']

                    txt = " X: {0:d}\n O: {1:.2f}\n H: {2:.2f}\n L\n C: {4:.2f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p2_1.setText(txt)
                else:
                    pass
            
            elif comboindex2 == 13:

                if not np.isnan(df_sp500_graph.at[plot_x, 'Price']):
                    
                    Open = df_sp500_graph.at[plot_x, 'Open']                    
                    High = df_sp500_graph.at[plot_x, 'High']
                    Low = df_sp500_graph.at[plot_x, 'Low']
                    Close = df_sp500_graph.at[plot_x, 'Close']

                    txt = " X: {0:d}\n O: {1:.2f}\n H: {2:.2f}\n L\n C: {4:.2f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p2_1.setText(txt)
                else:
                    pass
            
            elif comboindex2 == 14:

                if not np.isnan(df_dow_graph.at[plot_x, 'Price']):
                    
                    Open = df_dow_graph.at[plot_x, 'Open']                    
                    High = df_dow_graph.at[plot_x, 'High']
                    Low = df_dow_graph.at[plot_x, 'Low']
                    Close = df_dow_graph.at[plot_x, 'Close']

                    txt = " X: {0:d}\n O: {1:.0f}\n H: {2:.0f}\n L: {3:.0f}\n C: {4:.0f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p2_1.setText(txt)
                else:
                    pass

            elif comboindex2 == 15:

                if not np.isnan(df_nasdaq_graph.at[plot_x, 'Price']):
                    
                    Open = df_nasdaq_graph.at[plot_x, 'Open']                    
                    High = df_nasdaq_graph.at[plot_x, 'High']
                    Low = df_nasdaq_graph.at[plot_x, 'Low']
                    Close = df_nasdaq_graph.at[plot_x, 'Close']

                    txt = " X: {0:d}\n O: {1:.2f}\n H: {2:.2f}\n L\n C: {4:.2f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p2_1.setText(txt)
                else:
                    pass
            
            elif comboindex2 == 16:
                
                if not np.isnan(df_hsi_graph.at[plot_x, 'Price']):
                    
                    Open = df_hsi_graph.at[plot_x, 'Open']                    
                    High = df_hsi_graph.at[plot_x, 'High']
                    Low = df_hsi_graph.at[plot_x, 'Low']
                    Close = df_hsi_graph.at[plot_x, 'Close']

                    txt = " X: {0:d}\n O: {1:.2f}\n H: {2:.2f}\n L\n C: {4:.2f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p2_1.setText(txt)
                else:
                    pass

            elif comboindex2 == 17:

                if not np.isnan(df_wti_graph.at[plot_x, 'Price']):
                    
                    Open = df_wti_graph.at[plot_x, 'Open']                    
                    High = df_wti_graph.at[plot_x, 'High']
                    Low = df_wti_graph.at[plot_x, 'Low']
                    Close = df_wti_graph.at[plot_x, 'Close']

                    txt = " X: {0:d}\n O: {1:.2f}\n H: {2:.2f}\n L\n C: {4:.2f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p2_1.setText(txt)
                else:
                    pass

            elif comboindex2 == 18:
                
                if not np.isnan(df_gold_graph.at[plot_x, 'Price']):
                    
                    Open = df_gold_graph.at[plot_x, 'Open']                    
                    High = df_gold_graph.at[plot_x, 'High']
                    Low = df_gold_graph.at[plot_x, 'Low']
                    Close = df_gold_graph.at[plot_x, 'Close']

                    txt = " X: {0:d}\n O: {1:.2f}\n H: {2:.2f}\n L\n C: {4:.2f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p2_1.setText(txt)
                else:
                    pass

            elif comboindex2 == 19:
                
                if not np.isnan(df_euro_graph.at[plot_x, 'Price']):
                    
                    Open = df_euro_graph.at[plot_x, 'Open']                    
                    High = df_euro_graph.at[plot_x, 'High']
                    Low = df_euro_graph.at[plot_x, 'Low']
                    Close = df_euro_graph.at[plot_x, 'Close']

                    txt = " X: {0:d}\n O: {1:.2f}\n H: {2:.2f}\n L\n C: {4:.2f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p2_1.setText(txt)
                else:
                    pass

            elif comboindex2 == 20:
                
                if not np.isnan(df_yen_graph.at[plot_x, 'Price']):
                    
                    Open = df_yen_graph.at[plot_x, 'Open']                    
                    High = df_yen_graph.at[plot_x, 'High']
                    Low = df_yen_graph.at[plot_x, 'Low']
                    Close = df_yen_graph.at[plot_x, 'Close']

                    txt = " X: {0:d}\n O: {1:.2f}\n H: {2:.2f}\n L\n C: {4:.2f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p2_1.setText(txt)
                else:
                    pass     

            elif comboindex2 == 21:
                
                if not np.isnan(df_adi_graph.at[plot_x, 'Price']):
                    
                    Open = df_adi_graph.at[plot_x, 'Open']                    
                    High = df_adi_graph.at[plot_x, 'High']
                    Low = df_adi_graph.at[plot_x, 'Low']
                    Close = df_adi_graph.at[plot_x, 'Close']

                    txt = " X: {0:d}\n O: {1:.2f}\n H: {2:.2f}\n L\n C: {4:.2f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p2_1.setText(txt)
                else:
                    pass       
            else:
                pass                           
        else:
            pass
    '''

    def plot2_mouseClicked(self, evt):

        global plot2_x, plot2_y

        if self.plot2.sceneBoundingRect().contains(evt._scenePos):

            mousePoint = self.plot2.plotItem.vb.mapSceneToView(evt._scenePos)

            plot2_x = int(mousePoint.x())
            plot2_y = mousePoint.y()

            self.plot2_vLine.setPos(mousePoint.x())
            self.plot2_hLine.setPos(mousePoint.y())

            txt = " X: {0:d}\n Y: {1:.5f} ".format(plot2_x, plot2_y)            
            self.label_p2_1.setText(txt)
    '''
    def plot3_mouseMoved(self, evt):

        global plot3_x, plot3_y

        pos = evt

        if self.plot3.sceneBoundingRect().contains(pos):

            mousePoint = self.plot3.plotItem.vb.mapSceneToView(pos)            

            self.plot3_vLine.setPos(mousePoint.x())
            self.plot3_hLine.setPos(mousePoint.y())
            plot_x = int(mousePoint.x())
            plot_y = mousePoint.y()

            txt = " X: {0:d}\n Y: {1:.2f} ".format(plot_x, plot_y)            
            self.label_p3_1.setText(txt)

            if comboindex3 == 2:

                if not np.isnan(df_futures_cm_graph.at[plot_x, 'Price']):                    
                
                    Open = df_futures_cm_graph.at[plot_x, 'Open']                    
                    High = df_futures_cm_graph.at[plot_x, 'High']
                    Low = df_futures_cm_graph.at[plot_x, 'Low']
                    Close = df_futures_cm_graph.at[plot_x, 'Close']

                    txt = " X: {0:d}\n O: {1:.2f}\n H: {2:.2f}\n L\n C: {4:.2f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p3_1.setText(txt)
                else:
                    pass
            
            elif comboindex3 == 13:

                if not np.isnan(df_sp500_graph.at[plot_x, 'Price']):
                    
                    Open = df_sp500_graph.at[plot_x, 'Open']                    
                    High = df_sp500_graph.at[plot_x, 'High']
                    Low = df_sp500_graph.at[plot_x, 'Low']
                    Close = df_sp500_graph.at[plot_x, 'Close']

                    txt = " X: {0:d}\n O: {1:.2f}\n H: {2:.2f}\n L\n C: {4:.2f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p3_1.setText(txt)
                else:
                    pass            
            
            elif comboindex3 == 14:

                if not np.isnan(df_dow_graph.at[plot_x, 'Price']):
                    
                    Open = df_dow_graph.at[plot_x, 'Open']                    
                    High = df_dow_graph.at[plot_x, 'High']
                    Low = df_dow_graph.at[plot_x, 'Low']
                    Close = df_dow_graph.at[plot_x, 'Close']

                    txt = " X: {0:d}\n O: {1:.0f}\n H: {2:.0f}\n L: {3:.0f}\n C: {4:.0f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p3_1.setText(txt)
                else:
                    pass

            elif comboindex3 == 15:

                if not np.isnan(df_nasdaq_graph.at[plot_x, 'Price']):
                    
                    Open = df_nasdaq_graph.at[plot_x, 'Open']                    
                    High = df_nasdaq_graph.at[plot_x, 'High']
                    Low = df_nasdaq_graph.at[plot_x, 'Low']
                    Close = df_nasdaq_graph.at[plot_x, 'Close']

                    txt = " X: {0:d}\n O: {1:.2f}\n H: {2:.2f}\n L\n C: {4:.2f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p3_1.setText(txt)
                else:
                    pass
            
            elif comboindex3 == 16:
                
                if not np.isnan(df_hsi_graph.at[plot_x, 'Price']):
                    
                    Open = df_hsi_graph.at[plot_x, 'Open']                    
                    High = df_hsi_graph.at[plot_x, 'High']
                    Low = df_hsi_graph.at[plot_x, 'Low']
                    Close = df_hsi_graph.at[plot_x, 'Close']

                    txt = " X: {0:d}\n O: {1:.2f}\n H: {2:.2f}\n L\n C: {4:.2f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p3_1.setText(txt)
                else:
                    pass

            elif comboindex3 == 17:

                if not np.isnan(df_wti_graph.at[plot_x, 'Price']):
                    
                    Open = df_wti_graph.at[plot_x, 'Open']                    
                    High = df_wti_graph.at[plot_x, 'High']
                    Low = df_wti_graph.at[plot_x, 'Low']
                    Close = df_wti_graph.at[plot_x, 'Close']

                    txt = " X: {0:d}\n O: {1:.2f}\n H: {2:.2f}\n L\n C: {4:.2f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p3_1.setText(txt)
                else:
                    pass

            elif comboindex3 == 18:
                
                if not np.isnan(df_gold_graph.at[plot_x, 'Price']):
                    
                    Open = df_gold_graph.at[plot_x, 'Open']                    
                    High = df_gold_graph.at[plot_x, 'High']
                    Low = df_gold_graph.at[plot_x, 'Low']
                    Close = df_gold_graph.at[plot_x, 'Close']

                    txt = " X: {0:d}\n O: {1:.2f}\n H: {2:.2f}\n L\n C: {4:.2f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p3_1.setText(txt)
                else:
                    pass

            elif comboindex3 == 19:
                
                if not np.isnan(df_euro_graph.at[plot_x, 'Price']):
                    
                    Open = df_euro_graph.at[plot_x, 'Open']                    
                    High = df_euro_graph.at[plot_x, 'High']
                    Low = df_euro_graph.at[plot_x, 'Low']
                    Close = df_euro_graph.at[plot_x, 'Close']

                    txt = " X: {0:d}\n O: {1:.2f}\n H: {2:.2f}\n L\n C: {4:.2f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p3_1.setText(txt)
                else:
                    pass

            elif comboindex3 == 20:
                
                if not np.isnan(df_yen_graph.at[plot_x, 'Price']):
                    
                    Open = df_yen_graph.at[plot_x, 'Open']                    
                    High = df_yen_graph.at[plot_x, 'High']
                    Low = df_yen_graph.at[plot_x, 'Low']
                    Close = df_yen_graph.at[plot_x, 'Close']

                    txt = " X: {0:d}\n O: {1:.2f}\n H: {2:.2f}\n L\n C: {4:.2f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p3_1.setText(txt)
                else:
                    pass

            elif comboindex3 == 21:
                
                if not np.isnan(df_adi_graph.at[plot_x, 'Price']):
                    
                    Open = df_adi_graph.at[plot_x, 'Open']                    
                    High = df_adi_graph.at[plot_x, 'High']
                    Low = df_adi_graph.at[plot_x, 'Low']
                    Close = df_adi_graph.at[plot_x, 'Close']

                    txt = " X: {0:d}\n O: {1:.2f}\n H: {2:.2f}\n L\n C: {4:.2f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p3_1.setText(txt)
                else:
                    pass             
            else:
                pass                            
        else:
            pass
    '''

    def plot3_mouseClicked(self, evt):

        global plot3_x, plot3_y

        if self.plot3.sceneBoundingRect().contains(evt._scenePos):

            mousePoint = self.plot3.plotItem.vb.mapSceneToView(evt._scenePos)

            plot3_x = int(mousePoint.x())
            plot3_y = mousePoint.y()

            self.plot3_vLine.setPos(mousePoint.x())
            self.plot3_hLine.setPos(mousePoint.y())

            txt = " X: {0:d}\n Y: {1:.5f} ".format(plot3_x, plot3_y)            
            self.label_p3_1.setText(txt)
    '''
    def plot4_mouseMoved(self, evt):
        
        global plot4_x, plot4_y

        pos = evt

        if self.plot4.sceneBoundingRect().contains(pos):

            mousePoint = self.plot4.plotItem.vb.mapSceneToView(pos)

            self.plot4_vLine.setPos(mousePoint.x())
            self.plot4_hLine.setPos(mousePoint.y())
            plot_x = int(mousePoint.x())
            plot_y = mousePoint.y()          

            txt = " X: {0:d}\n Y: {1:.2f} ".format(plot_x, plot_y)            
            self.label_p4_1.setText(txt) 

            if comboindex4 == 2:

                if not np.isnan(df_futures_cm_graph.at[plot_x, 'Price']):
                    
                    Open = df_futures_cm_graph.at[plot_x, 'Open']                    
                    High = df_futures_cm_graph.at[plot_x, 'High']
                    Low = df_futures_cm_graph.at[plot_x, 'Low']
                    Close = df_futures_cm_graph.at[plot_x, 'Close']

                    txt = " X: {0:d}\n O: {1:.2f}\n H: {2:.2f}\n L\n C: {4:.2f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p4_1.setText(txt)
                else:
                    pass

            elif comboindex4 == 13:

                if not np.isnan(df_sp500_graph.at[plot_x, 'Price']):
                    
                    Open = df_sp500_graph.at[plot_x, 'Open']                    
                    High = df_sp500_graph.at[plot_x, 'High']
                    Low = df_sp500_graph.at[plot_x, 'Low']
                    Close = df_sp500_graph.at[plot_x, 'Close']

                    txt = " X: {0:d}\n O: {1:.2f}\n H: {2:.2f}\n L\n C: {4:.2f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p4_1.setText(txt)
                else:
                    pass
            
            elif comboindex4 == 14:

                if not np.isnan(df_dow_graph.at[plot_x, 'Price']):
                    
                    Open = df_dow_graph.at[plot_x, 'Open']                    
                    High = df_dow_graph.at[plot_x, 'High']
                    Low = df_dow_graph.at[plot_x, 'Low']
                    Close = df_dow_graph.at[plot_x, 'Close']

                    txt = " X: {0:d}\n O: {1:.0f}\n H: {2:.0f}\n L: {3:.0f}\n C: {4:.0f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p4_1.setText(txt)
                else:
                    pass

            elif comboindex4 == 15:

                if not np.isnan(df_nasdaq_graph.at[plot_x, 'Price']):
                    
                    Open = df_nasdaq_graph.at[plot_x, 'Open']                    
                    High = df_nasdaq_graph.at[plot_x, 'High']
                    Low = df_nasdaq_graph.at[plot_x, 'Low']
                    Close = df_nasdaq_graph.at[plot_x, 'Close']

                    txt = " X: {0:d}\n O: {1:.2f}\n H: {2:.2f}\n L\n C: {4:.2f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p4_1.setText(txt)
                else:
                    pass
            
            elif comboindex4 == 16:
                
                if not np.isnan(df_hsi_graph.at[plot_x, 'Price']):
                    
                    Open = df_hsi_graph.at[plot_x, 'Open']                    
                    High = df_hsi_graph.at[plot_x, 'High']
                    Low = df_hsi_graph.at[plot_x, 'Low']
                    Close = df_hsi_graph.at[plot_x, 'Close']

                    txt = " X: {0:d}\n O: {1:.2f}\n H: {2:.2f}\n L\n C: {4:.2f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p4_1.setText(txt)
                else:
                    pass

            elif comboindex4 == 17:

                if not np.isnan(df_wti_graph.at[plot_x, 'Price']):
                    
                    Open = df_wti_graph.at[plot_x, 'Open']                    
                    High = df_wti_graph.at[plot_x, 'High']
                    Low = df_wti_graph.at[plot_x, 'Low']
                    Close = df_wti_graph.at[plot_x, 'Close']

                    txt = " X: {0:d}\n O: {1:.2f}\n H: {2:.2f}\n L\n C: {4:.2f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p4_1.setText(txt)
                else:
                    pass

            elif comboindex4 == 18:
                
                if not np.isnan(df_gold_graph.at[plot_x, 'Price']):
                    
                    Open = df_gold_graph.at[plot_x, 'Open']                    
                    High = df_gold_graph.at[plot_x, 'High']
                    Low = df_gold_graph.at[plot_x, 'Low']
                    Close = df_gold_graph.at[plot_x, 'Close']

                    txt = " X: {0:d}\n O: {1:.2f}\n H: {2:.2f}\n L\n C: {4:.2f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p4_1.setText(txt)
                else:
                    pass

            elif comboindex4 == 19:
                
                if not np.isnan(df_euro_graph.at[plot_x, 'Price']):
                    
                    Open = df_euro_graph.at[plot_x, 'Open']                    
                    High = df_euro_graph.at[plot_x, 'High']
                    Low = df_euro_graph.at[plot_x, 'Low']
                    Close = df_euro_graph.at[plot_x, 'Close']

                    txt = " X: {0:d}\n O: {1:.2f}\n H: {2:.2f}\n L\n C: {4:.2f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p4_1.setText(txt)
                else:
                    pass

            elif comboindex4 == 20:
                
                if not np.isnan(df_yen_graph.at[plot_x, 'Price']):
                    
                    Open = df_yen_graph.at[plot_x, 'Open']                    
                    High = df_yen_graph.at[plot_x, 'High']
                    Low = df_yen_graph.at[plot_x, 'Low']
                    Close = df_yen_graph.at[plot_x, 'Close']

                    txt = " X: {0:d}\n O: {1:.2f}\n H: {2:.2f}\n L\n C: {4:.2f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p4_1.setText(txt)
                else:
                    pass    

            elif comboindex4 == 21:
                
                if not np.isnan(df_adi_graph.at[plot_x, 'Price']):
                    
                    Open = df_adi_graph.at[plot_x, 'Open']                    
                    High = df_adi_graph.at[plot_x, 'High']
                    Low = df_adi_graph.at[plot_x, 'Low']
                    Close = df_adi_graph.at[plot_x, 'Close']

                    txt = " X: {0:d}\n O: {1:.2f}\n H: {2:.2f}\n L\n C: {4:.2f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p4_1.setText(txt)
                else:
                    pass        
            else:
                pass
    '''

    def plot4_mouseClicked(self, evt):

        global plot4_x, plot4_y

        if self.plot4.sceneBoundingRect().contains(evt._scenePos):

            mousePoint = self.plot4.plotItem.vb.mapSceneToView(evt._scenePos)

            plot4_x = int(mousePoint.x())
            plot4_y = mousePoint.y()

            self.plot4_vLine.setPos(mousePoint.x())
            self.plot4_hLine.setPos(mousePoint.y())

            txt = " X: {0:d}\n Y: {1:.5f} ".format(plot4_x, plot4_y)            
            self.label_p4_1.setText(txt)                    
    '''
    def plot5_mouseMoved(self, evt):

        global plot5_x, plot5_y

        pos = evt

        if self.plot5.sceneBoundingRect().contains(pos):

            mousePoint = self.plot5.plotItem.vb.mapSceneToView(pos)            

            self.plot5_vLine.setPos(mousePoint.x())
            self.plot5_hLine.setPos(mousePoint.y())
            plot_x = int(mousePoint.x())
            plot_y = mousePoint.y()

            txt = " X: {0:d}\n Y: {1:.2f} ".format(plot_x, plot_y)            
            self.label_p5_1.setText(txt)

            if comboindex5 == 2:

                if not np.isnan(df_futures_cm_graph.at[plot_x, 'Price']):
                    
                    Open = df_futures_cm_graph.at[plot_x, 'Open']                    
                    High = df_futures_cm_graph.at[plot_x, 'High']
                    Low = df_futures_cm_graph.at[plot_x, 'Low']
                    Close = df_futures_cm_graph.at[plot_x, 'Close']

                    txt = " X: {0:d}\n O: {1:.2f}\n H: {2:.2f}\n L\n C: {4:.2f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p5_1.setText(txt)
                else:
                    pass

            elif comboindex5 == 13:

                if not np.isnan(df_sp500_graph.at[plot_x, 'Price']):
                    
                    Open = df_sp500_graph.at[plot_x, 'Open']                    
                    High = df_sp500_graph.at[plot_x, 'High']
                    Low = df_sp500_graph.at[plot_x, 'Low']
                    Close = df_sp500_graph.at[plot_x, 'Close']

                    txt = " X: {0:d}\n O: {1:.2f}\n H: {2:.2f}\n L\n C: {4:.2f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p5_1.setText(txt)
                else:
                    pass

            elif comboindex5 == 14:

                if not np.isnan(df_dow_graph.at[plot_x, 'Price']):
                    
                    Open = df_dow_graph.at[plot_x, 'Open']                    
                    High = df_dow_graph.at[plot_x, 'High']
                    Low = df_dow_graph.at[plot_x, 'Low']
                    Close = df_dow_graph.at[plot_x, 'Close']

                    txt = " X: {0:d}\n O: {1:.0f}\n H: {2:.0f}\n L: {3:.0f}\n C: {4:.0f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p5_1.setText(txt)
                else:
                    pass

            elif comboindex5 == 15:

                if not np.isnan(df_nasdaq_graph.at[plot_x, 'Price']):
                    
                    Open = df_nasdaq_graph.at[plot_x, 'Open']                    
                    High = df_nasdaq_graph.at[plot_x, 'High']
                    Low = df_nasdaq_graph.at[plot_x, 'Low']
                    Close = df_nasdaq_graph.at[plot_x, 'Close']

                    txt = " X: {0:d}\n O: {1:.2f}\n H: {2:.2f}\n L\n C: {4:.2f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p5_1.setText(txt)
                else:
                    pass

            elif comboindex5 == 16:
                
                if not np.isnan(df_hsi_graph.at[plot_x, 'Price']):
                    
                    Open = df_hsi_graph.at[plot_x, 'Open']                    
                    High = df_hsi_graph.at[plot_x, 'High']
                    Low = df_hsi_graph.at[plot_x, 'Low']
                    Close = df_hsi_graph.at[plot_x, 'Close']

                    txt = " X: {0:d}\n O: {1:.2f}\n H: {2:.2f}\n L\n C: {4:.2f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p5_1.setText(txt)
                else:
                    pass

            elif comboindex5 == 17:

                if not np.isnan(df_wti_graph.at[plot_x, 'Price']):
                    
                    Open = df_wti_graph.at[plot_x, 'Open']                    
                    High = df_wti_graph.at[plot_x, 'High']
                    Low = df_wti_graph.at[plot_x, 'Low']
                    Close = df_wti_graph.at[plot_x, 'Close']

                    txt = " X: {0:d}\n O: {1:.2f}\n H: {2:.2f}\n L\n C: {4:.2f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p5_1.setText(txt)
                else:
                    pass

            elif comboindex5 == 18:
                
                if not np.isnan(df_gold_graph.at[plot_x, 'Price']):
                    
                    Open = df_gold_graph.at[plot_x, 'Open']                    
                    High = df_gold_graph.at[plot_x, 'High']
                    Low = df_gold_graph.at[plot_x, 'Low']
                    Close = df_gold_graph.at[plot_x, 'Close']

                    txt = " X: {0:d}\n O: {1:.2f}\n H: {2:.2f}\n L\n C: {4:.2f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p5_1.setText(txt)
                else:
                    pass

            elif comboindex5 == 19:
                
                if not np.isnan(df_euro_graph.at[plot_x, 'Price']):
                    
                    Open = df_euro_graph.at[plot_x, 'Open']                    
                    High = df_euro_graph.at[plot_x, 'High']
                    Low = df_euro_graph.at[plot_x, 'Low']
                    Close = df_euro_graph.at[plot_x, 'Close']

                    txt = " X: {0:d}\n O: {1:.2f}\n H: {2:.2f}\n L\n C: {4:.2f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p5_1.setText(txt)
                else:
                    pass

            elif comboindex5 == 20:
                
                if not np.isnan(df_yen_graph.at[plot_x, 'Price']):
                    
                    Open = df_yen_graph.at[plot_x, 'Open']                    
                    High = df_yen_graph.at[plot_x, 'High']
                    Low = df_yen_graph.at[plot_x, 'Low']
                    Close = df_yen_graph.at[plot_x, 'Close']

                    txt = " X: {0:d}\n O: {1:.2f}\n H: {2:.2f}\n L\n C: {4:.2f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p5_1.setText(txt)
                else:
                    pass

            elif comboindex5 == 21:
                
                if not np.isnan(df_adi_graph.at[plot_x, 'Price']):
                    
                    Open = df_adi_graph.at[plot_x, 'Open']                    
                    High = df_adi_graph.at[plot_x, 'High']
                    Low = df_adi_graph.at[plot_x, 'Low']
                    Close = df_adi_graph.at[plot_x, 'Close']

                    txt = " X: {0:d}\n O: {1:.2f}\n H: {2:.2f}\n L\n C: {4:.2f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p5_1.setText(txt)
                else:
                    pass
            else:
                pass                       
        else:
            pass
    '''

    def plot5_mouseClicked(self, evt):

        global plot5_x, plot5_y

        if self.plot5.sceneBoundingRect().contains(evt._scenePos):

            mousePoint = self.plot5.plotItem.vb.mapSceneToView(evt._scenePos)

            plot5_x = int(mousePoint.x())
            plot5_y = mousePoint.y()

            self.plot5_vLine.setPos(mousePoint.x())
            self.plot5_hLine.setPos(mousePoint.y())

            txt = " X: {0:d}\n Y: {1:.5f} ".format(plot5_x, plot5_y)            
            self.label_p5_1.setText(txt)
    '''
    def plot6_mouseMoved(self, evt):

        global plot6_x, plot6_y

        pos = evt

        if self.plot6.sceneBoundingRect().contains(pos):

            mousePoint = self.plot6.plotItem.vb.mapSceneToView(pos)            

            self.plot6_vLine.setPos(mousePoint.x())
            self.plot6_hLine.setPos(mousePoint.y())
            plot_x = int(mousePoint.x())
            plot_y = mousePoint.y()

            txt = " X: {0:d}\n Y: {1:.2f} ".format(plot_x, plot_y)            
            self.label_p6_1.setText(txt)

            if comboindex6 == 2:

                if not np.isnan(df_futures_cm_graph.at[plot_x, 'Price']):
                    
                    Open = df_futures_cm_graph.at[plot_x, 'Open']                    
                    High = df_futures_cm_graph.at[plot_x, 'High']
                    Low = df_futures_cm_graph.at[plot_x, 'Low']
                    Close = df_futures_cm_graph.at[plot_x, 'Close']

                    txt = " X: {0:d}\n O: {1:.2f}\n H: {2:.2f}\n L\n C: {4:.2f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p6_1.setText(txt)
                else:
                    pass

            elif comboindex6 == 13:

                if not np.isnan(df_sp500_graph.at[plot_x, 'Price']):
                    
                    Open = df_sp500_graph.at[plot_x, 'Open']                    
                    High = df_sp500_graph.at[plot_x, 'High']
                    Low = df_sp500_graph.at[plot_x, 'Low']
                    Close = df_sp500_graph.at[plot_x, 'Close']

                    txt = " X: {0:d}\n O: {1:.2f}\n H: {2:.2f}\n L\n C: {4:.2f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p6_1.setText(txt)
                else:
                    pass
            
            elif comboindex6 == 14:

                if not np.isnan(df_dow_graph.at[plot_x, 'Price']):
                    
                    Open = df_dow_graph.at[plot_x, 'Open']                    
                    High = df_dow_graph.at[plot_x, 'High']
                    Low = df_dow_graph.at[plot_x, 'Low']
                    Close = df_dow_graph.at[plot_x, 'Close']

                    txt = " X: {0:d}\n O: {1:.0f}\n H: {2:.0f}\n L: {3:.0f}\n C: {4:.0f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p6_1.setText(txt)
                else:
                    pass

            elif comboindex6 == 15:

                if not np.isnan(df_nasdaq_graph.at[plot_x, 'Price']):
                    
                    Open = df_nasdaq_graph.at[plot_x, 'Open']                    
                    High = df_nasdaq_graph.at[plot_x, 'High']
                    Low = df_nasdaq_graph.at[plot_x, 'Low']
                    Close = df_nasdaq_graph.at[plot_x, 'Close']

                    txt = " X: {0:d}\n O: {1:.2f}\n H: {2:.2f}\n L\n C: {4:.2f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p6_1.setText(txt)
                else:
                    pass

            elif comboindex6 == 16:
                
                if not np.isnan(df_hsi_graph.at[plot_x, 'Price']):
                    
                    Open = df_hsi_graph.at[plot_x, 'Open']                    
                    High = df_hsi_graph.at[plot_x, 'High']
                    Low = df_hsi_graph.at[plot_x, 'Low']
                    Close = df_hsi_graph.at[plot_x, 'Close']

                    txt = " X: {0:d}\n O: {1:.2f}\n H: {2:.2f}\n L\n C: {4:.2f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p6_1.setText(txt)
                else:
                    pass

            elif comboindex6 == 17:

                if not np.isnan(df_wti_graph.at[plot_x, 'Price']):
                    
                    Open = df_wti_graph.at[plot_x, 'Open']                    
                    High = df_wti_graph.at[plot_x, 'High']
                    Low = df_wti_graph.at[plot_x, 'Low']
                    Close = df_wti_graph.at[plot_x, 'Close']

                    txt = " X: {0:d}\n O: {1:.2f}\n H: {2:.2f}\n L\n C: {4:.2f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p6_1.setText(txt)
                else:
                    pass

            elif comboindex6 == 18:
                
                if not np.isnan(df_gold_graph.at[plot_x, 'Price']):
                    
                    Open = df_gold_graph.at[plot_x, 'Open']                    
                    High = df_gold_graph.at[plot_x, 'High']
                    Low = df_gold_graph.at[plot_x, 'Low']
                    Close = df_gold_graph.at[plot_x, 'Close']

                    txt = " X: {0:d}\n O: {1:.2f}\n H: {2:.2f}\n L\n C: {4:.2f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p6_1.setText(txt)
                else:
                    pass

            elif comboindex6 == 19:
                
                if not np.isnan(df_euro_graph.at[plot_x, 'Price']):
                    
                    Open = df_euro_graph.at[plot_x, 'Open']                    
                    High = df_euro_graph.at[plot_x, 'High']
                    Low = df_euro_graph.at[plot_x, 'Low']
                    Close = df_euro_graph.at[plot_x, 'Close']

                    txt = " X: {0:d}\n O: {1:.2f}\n H: {2:.2f}\n L\n C: {4:.2f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p6_1.setText(txt)
                else:
                    pass

            elif comboindex6 == 20:
                
                if not np.isnan(df_yen_graph.at[plot_x, 'Price']):
                    
                    Open = df_yen_graph.at[plot_x, 'Open']                    
                    High = df_yen_graph.at[plot_x, 'High']
                    Low = df_yen_graph.at[plot_x, 'Low']
                    Close = df_yen_graph.at[plot_x, 'Close']

                    txt = " X: {0:d}\n O: {1:.2f}\n H: {2:.2f}\n L\n C: {4:.2f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p6_1.setText(txt)
                else:
                    pass    

            elif comboindex6 == 21:
                
                if not np.isnan(df_adi_graph.at[plot_x, 'Price']):
                    
                    Open = df_adi_graph.at[plot_x, 'Open']                    
                    High = df_adi_graph.at[plot_x, 'High']
                    Low = df_adi_graph.at[plot_x, 'Low']
                    Close = df_adi_graph.at[plot_x, 'Close']

                    txt = " X: {0:d}\n O: {1:.2f}\n H: {2:.2f}\n L\n C: {4:.2f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p6_1.setText(txt)
                else:
                    pass        
            else:
                pass                
        else:
            pass
    '''
    
    def plot6_mouseClicked(self, evt):

        global plot6_x, plot6_y

        if self.plot6.sceneBoundingRect().contains(evt._scenePos):

            mousePoint = self.plot6.plotItem.vb.mapSceneToView(evt._scenePos)

            plot6_x = int(mousePoint.x())
            plot6_y = mousePoint.y()

            self.plot6_vLine.setPos(mousePoint.x())
            self.plot6_hLine.setPos(mousePoint.y())

            txt = " X: {0:d}\n Y: {1:.5f} ".format(plot6_x, plot6_y)            
            self.label_p6_1.setText(txt)    

    def checkBox_plot1_bband_checkState(self):

        global flag_checkBox_plot1_bband

        if self.checkBox_plot1_bband.isChecked() == True:
            flag_checkBox_plot1_bband = True
        else:
            flag_checkBox_plot1_bband = False

            self.plot1_bollinger_1st_upper_curve.clear()
            self.plot1_bollinger_1st_middle_curve.clear()
            self.plot1_bollinger_1st_lower_curve.clear()
            self.plot1_bollinger_2nd_upper_curve.clear()
            self.plot1_bollinger_2nd_middle_curve.clear()
            self.plot1_bollinger_2nd_lower_curve.clear()

    def checkBox_plot2_bband_checkState(self):

        global flag_checkBox_plot2_bband

        if self.checkBox_plot2_bband.isChecked() == True:
            flag_checkBox_plot2_bband = True
        else:
            flag_checkBox_plot2_bband = False

            self.plot2_bollinger_1st_upper_curve.clear()
            self.plot2_bollinger_1st_middle_curve.clear()
            self.plot2_bollinger_1st_lower_curve.clear()
            self.plot2_bollinger_2nd_upper_curve.clear()
            self.plot2_bollinger_2nd_middle_curve.clear()
            self.plot2_bollinger_2nd_lower_curve.clear()  

    def checkBox_plot3_bband_checkState(self):

        global flag_checkBox_plot3_bband

        if self.checkBox_plot3_bband.isChecked() == True:
            flag_checkBox_plot3_bband = True
        else:
            flag_checkBox_plot3_bband = False

            self.plot3_bollinger_1st_upper_curve.clear()
            self.plot3_bollinger_1st_middle_curve.clear()
            self.plot3_bollinger_1st_lower_curve.clear()
            self.plot3_bollinger_2nd_upper_curve.clear()
            self.plot3_bollinger_2nd_middle_curve.clear()
            self.plot3_bollinger_2nd_lower_curve.clear()

    def checkBox_plot4_bband_checkState(self):

        global flag_checkBox_plot4_bband

        if self.checkBox_plot4_bband.isChecked() == True:
            flag_checkBox_plot4_bband = True
        else:
            flag_checkBox_plot4_bband = False

            self.plot4_bollinger_1st_upper_curve.clear()
            self.plot4_bollinger_1st_middle_curve.clear()
            self.plot4_bollinger_1st_lower_curve.clear()
            self.plot4_bollinger_2nd_upper_curve.clear()
            self.plot4_bollinger_2nd_middle_curve.clear()
            self.plot4_bollinger_2nd_lower_curve.clear()

    def checkBox_plot5_bband_checkState(self):

        global flag_checkBox_plot5_bband

        if self.checkBox_plot5_bband.isChecked() == True:
            flag_checkBox_plot5_bband = True
        else:
            flag_checkBox_plot5_bband = False

            self.plot5_bollinger_1st_upper_curve.clear()
            self.plot5_bollinger_1st_middle_curve.clear()
            self.plot5_bollinger_1st_lower_curve.clear()
            self.plot5_bollinger_2nd_upper_curve.clear()
            self.plot5_bollinger_2nd_middle_curve.clear()
            self.plot5_bollinger_2nd_lower_curve.clear()

    def checkBox_plot6_bband_checkState(self):

        global flag_checkBox_plot6_bband

        if self.checkBox_plot6_bband.isChecked() == True:
            flag_checkBox_plot6_bband = True
        else:
            flag_checkBox_plot6_bband = False

            self.plot6_bollinger_1st_upper_curve.clear()
            self.plot6_bollinger_1st_middle_curve.clear()
            self.plot6_bollinger_1st_lower_curve.clear()
            self.plot6_bollinger_2nd_upper_curve.clear()
            self.plot6_bollinger_2nd_middle_curve.clear()
            self.plot6_bollinger_2nd_lower_curve.clear()

    def checkBox_plot1_one_eye_checkState(self):

        global flag_checkBox_plot1_one_eye

        if self.checkBox_plot1_one_eye.isChecked() == True:
            flag_checkBox_plot1_one_eye = True
        else:
            flag_checkBox_plot1_one_eye = False

            self.plot1_oe_conv_curve.clear()
            self.plot1_oe_base_curve.clear()
            self.plot1_span_a_curve.clear()
            self.plot1_span_b_curve.clear()
            self.plot1_lagging_span_curve.clear()              

    def checkBox_plot2_one_eye_checkState(self):

        global flag_checkBox_plot2_one_eye

        if self.checkBox_plot2_one_eye.isChecked() == True:
            flag_checkBox_plot2_one_eye = True
        else:
            flag_checkBox_plot2_one_eye = False

            self.plot2_oe_conv_curve.clear()
            self.plot2_oe_base_curve.clear()
            self.plot2_span_a_curve.clear()
            self.plot2_span_b_curve.clear()
            self.plot2_lagging_span_curve.clear()

    def checkBox_plot3_one_eye_checkState(self):

        global flag_checkBox_plot3_one_eye

        if self.checkBox_plot3_one_eye.isChecked() == True:
            flag_checkBox_plot3_one_eye = True
        else:
            flag_checkBox_plot3_one_eye = False

            self.plot3_oe_conv_curve.clear()
            self.plot3_oe_base_curve.clear()
            self.plot3_span_a_curve.clear()
            self.plot3_span_b_curve.clear()
            self.plot3_lagging_span_curve.clear()

    def checkBox_plot4_one_eye_checkState(self):

        global flag_checkBox_plot4_one_eye

        if self.checkBox_plot4_one_eye.isChecked() == True:
            flag_checkBox_plot4_one_eye = True
        else:
            flag_checkBox_plot4_one_eye = False

            self.plot4_oe_conv_curve.clear()
            self.plot4_oe_base_curve.clear()
            self.plot4_span_a_curve.clear()
            self.plot4_span_b_curve.clear()
            self.plot4_lagging_span_curve.clear()

    def checkBox_plot5_one_eye_checkState(self):

        global flag_checkBox_plot5_one_eye

        if self.checkBox_plot5_one_eye.isChecked() == True:
            flag_checkBox_plot5_one_eye = True
        else:
            flag_checkBox_plot5_one_eye = False

            self.plot5_oe_conv_curve.clear()
            self.plot5_oe_base_curve.clear()
            self.plot5_span_a_curve.clear()
            self.plot5_span_b_curve.clear()
            self.plot5_lagging_span_curve.clear()

    def checkBox_plot6_one_eye_checkState(self):

        global flag_checkBox_plot6_one_eye

        if self.checkBox_plot6_one_eye.isChecked() == True:
            flag_checkBox_plot6_one_eye = True
        else:
            flag_checkBox_plot6_one_eye = False

            self.plot6_oe_conv_curve.clear()
            self.plot6_oe_base_curve.clear()
            self.plot6_span_a_curve.clear()
            self.plot6_span_b_curve.clear()
            self.plot6_lagging_span_curve.clear()

    def checkBox_plot1_psar_checkState(self):

        global flag_checkBox_plot1_psar

        if self.checkBox_plot1_psar.isChecked() == True:
            flag_checkBox_plot1_psar = True
        else:
            flag_checkBox_plot1_psar = False

            self.plot1_psar_curve.clear()            
            self.plot1_mama_curve.clear()
            self.plot1_fama_curve.clear()
            #self.plot1_sslup_curve.clear()
            #self.plot1_ssldown_curve.clear()

    def checkBox_plot2_psar_checkState(self):

        global flag_checkBox_plot2_psar

        if self.checkBox_plot2_psar.isChecked() == True:
            flag_checkBox_plot2_psar = True
        else:
            flag_checkBox_plot2_psar = False

            self.plot2_psar_curve.clear()
            self.plot2_mama_curve.clear()
            self.plot2_fama_curve.clear()
            #self.plot2_sslup_curve.clear()
            #self.plot2_ssldown_curve.clear()

    def checkBox_plot3_psar_checkState(self):

        global flag_checkBox_plot3_psar

        if self.checkBox_plot3_psar.isChecked() == True:
            flag_checkBox_plot3_psar = True
        else:
            flag_checkBox_plot3_psar = False

            self.plot3_psar_curve.clear()
            self.plot3_mama_curve.clear()
            self.plot3_fama_curve.clear()
            #self.plot3_sslup_curve.clear()
            #self.plot3_ssldown_curve.clear()

    def checkBox_plot4_psar_checkState(self):

        global flag_checkBox_plot4_psar

        if self.checkBox_plot4_psar.isChecked() == True:
            flag_checkBox_plot4_psar = True
        else:
            flag_checkBox_plot4_psar = False

            self.plot4_psar_curve.clear()
            self.plot4_mama_curve.clear()
            self.plot4_fama_curve.clear()
            #self.plot4_sslup_curve.clear()
            #self.plot4_ssldown_curve.clear()

    def checkBox_plot5_psar_checkState(self):

        global flag_checkBox_plot5_psar

        if self.checkBox_plot5_psar.isChecked() == True:
            flag_checkBox_plot5_psar = True
        else:
            flag_checkBox_plot5_psar = False

            self.plot5_psar_curve.clear()
            self.plot5_mama_curve.clear()
            self.plot5_fama_curve.clear()
            #self.plot5_sslup_curve.clear()
            #self.plot5_ssldown_curve.clear()

    def checkBox_plot6_psar_checkState(self):

        global flag_checkBox_plot6_psar

        if self.checkBox_plot6_psar.isChecked() == True:
            flag_checkBox_plot6_psar = True
        else:
            flag_checkBox_plot6_psar = False

            self.plot6_psar_curve.clear()
            self.plot6_mama_curve.clear()
            self.plot6_fama_curve.clear()
            #self.plot6_sslup_curve.clear()
            #self.plot6_ssldown_curve.clear()

    def plot1_clear(self):        

        # Line Clear
        self.plot1_fut_jl_line.setValue(0)
        self.plot1_fut_jh_line.setValue(0)
        self.plot1_fut_open_line.setValue(0)
        self.plot1_fut_close_line.setValue(0)
        self.plot1_fut_pivot_line.setValue(0)
        self.plot1_fut_low_line.setValue(0)
        self.plot1_fut_high_line.setValue(0)

        self.plot1_ovc_jl_line.setValue(0)
        self.plot1_ovc_jh_line.setValue(0)
        self.plot1_ovc_close_line.setValue(0)
        self.plot1_ovc_open_line.setValue(0)
        self.plot1_ovc_pivot_line.setValue(0)
        self.plot1_ovc_low_line.setValue(0)
        self.plot1_ovc_high_line.setValue(0)

        for i in range(10):
            self.plot1_kp200_line[i].setValue(0)

        for i in range(9):
            self.plot1_mv_line[i].setValue(0)        

        self.plot1_quote_remainder_ratio_base_line.setValue(0)
        self.plot1_nm_futures_quote_remainder_ratio_bottom_line.setValue(0)
        self.plot1_nm_futures_quote_remainder_ratio_upper_line.setValue(0)

        self.plot1_option_quote_remainder_ratio_bottom_line.setValue(0)
        self.plot1_option_quote_remainder_ratio_upper_line.setValue(0)

        self.plot1_center_val_lower_line.setValue(0)
        self.plot1_center_val_line.setValue(0)
        self.plot1_center_val_upper_line.setValue(0)

        # Fibonacci Retracements Line
        self.plot1_fibonacci_line1.setValue(0)
        self.plot1_fibonacci_line2.setValue(0)
        self.plot1_fibonacci_line3.setValue(0)
        self.plot1_fibonacci_line4.setValue(0)
        self.plot1_fibonacci_line5.setValue(0)

        # CCI Line
        self.plot1_cci_plus_100_line.setValue(0)
        self.plot1_cci_minus_100_line.setValue(0)

        # Curve Clear
        self.plot1_fut_cm_price_curve.clear()
        self.plot1_fut_nm_price_curve.clear()
        self.plot1_kp200_curve.clear()

        self.plot1_fut_cm_quote_remainder_ratio_curve.clear()
        self.plot1_fut_nm_quote_remainder_ratio_curve.clear()

        self.plot1_fut_volume_curve.clear()
        self.plot1_call_volume_curve.clear()
        self.plot1_put_volume_curve.clear()        

        self.plot1_center_val_curve.clear()

        for i in range(option_pairs_count):
            self.plot1_call_curve[i].clear()
            self.plot1_put_curve[i].clear()

        self.plot1_call_quote_curve.clear()
        self.plot1_put_quote_curve.clear()

        self.plot1_call_oi_curve.clear()
        self.plot1_put_oi_curve.clear()

        self.plot1_fut_cm_drate_curve.clear()
        self.plot1_fut_nm_drate_curve.clear()
        self.plot1_cme_drate_curve.clear()
        self.plot1_call_drate_curve.clear()
        self.plot1_put_drate_curve.clear()

        self.plot1_program_curve.clear()
        self.plot1_kospi_total_curve.clear()
        self.plot1_futures_foreigner_curve.clear()
        self.plot1_kospi_foreigner_curve.clear()

        self.plot1_sp500_curve.clear()
        self.plot1_dow_curve.clear()
        self.plot1_nasdaq_curve.clear()
        self.plot1_hsi_curve.clear()

        self.plot1_wti_curve.clear()
        self.plot1_gold_curve.clear()

        self.plot1_euro_curve.clear()
        self.plot1_yen_curve.clear()
        self.plot1_adi_curve.clear()

        self.plot1_bollinger_1st_upper_curve.clear()
        self.plot1_bollinger_1st_middle_curve.clear()
        self.plot1_bollinger_1st_lower_curve.clear()
        self.plot1_bollinger_2nd_upper_curve.clear()
        self.plot1_bollinger_2nd_middle_curve.clear()
        self.plot1_bollinger_2nd_lower_curve.clear()

        self.plot1_psar_curve.clear()

        self.plot1_mama_curve.clear()
        self.plot1_fama_curve.clear()
        #self.plot1_sslup_curve.clear()
        #self.plot1_ssldown_curve.clear()

        self.plot1_oe_conv_curve.clear()
        self.plot1_oe_base_curve.clear()
        self.plot1_span_a_curve.clear()
        self.plot1_span_b_curve.clear()
        self.plot1_lagging_span_curve.clear()

        self.plot1_futures_rsi_curve.clear()
        self.plot1_sp500_rsi_curve.clear()
        self.plot1_dow_rsi_curve.clear()
        self.plot1_nasdaq_rsi_curve.clear()
        self.plot1_hsi_rsi_curve.clear()
        self.plot1_wti_rsi_curve.clear()
        self.plot1_gold_rsi_curve.clear()
        self.plot1_euro_rsi_curve.clear()
        self.plot1_yen_rsi_curve.clear()
        self.plot1_adi_rsi_curve.clear()

        self.plot1_futures_cci1_curve.clear()
        self.plot1_sp500_cci1_curve.clear()
        self.plot1_dow_cci1_curve.clear()
        self.plot1_nasdaq_cci1_curve.clear()
        self.plot1_hsi_cci1_curve.clear()
        self.plot1_wti_cci1_curve.clear()
        self.plot1_gold_cci1_curve.clear()
        self.plot1_euro_cci1_curve.clear()
        self.plot1_yen_cci1_curve.clear()
        self.plot1_adi_cci1_curve.clear()

        self.plot1_futures_cci2_curve.clear()
        self.plot1_sp500_cci2_curve.clear()
        self.plot1_dow_cci2_curve.clear()
        self.plot1_nasdaq_cci2_curve.clear()
        self.plot1_hsi_cci2_curve.clear()
        self.plot1_wti_cci2_curve.clear()
        self.plot1_gold_cci2_curve.clear()
        self.plot1_euro_cci2_curve.clear()
        self.plot1_yen_cci2_curve.clear()
        self.plot1_adi_cci2_curve.clear()

        self.label_11.setText(" - ")
        self.label_12.setText(" - ")
        self.label_13.setText(" - ")
        self.label_14.setText(" - ")
        self.label_15.setText(" - ")
        self.label_16.setText(" - ")
        self.label_17.setText(" - ")
        self.label_18.setText(" - ")

        self.label_p1_1.setStyleSheet('background-color: lime; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_p1_1.setText(" 좌표 ")

        self.label_p1_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_p1_2.setText(" BB Upper\n BB Middle\n BB Lower ")

        self.label_p1_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_p1_3.setText(" PSAR\n MAMA ")

        self.label_p1_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_p1_4.setText(" ONE EYE ")

        txt = 'Plot1 Clear...\r'
        self.parent.textBrowser.append(txt)
    
    def cb1_selectionChanged(self):

        global comboindex1
        
        txt = self.comboBox1.currentText()
        comboindex1 = self.comboBox1.currentIndex()

        self.plot1_clear()

        if comboindex1 == 0:
            self.timer1.stop()

            txt = 'Plot1 Timer Stop...\r'
            self.parent.textBrowser.append(txt)
        else:
            if not self.timer1.isActive():

                start_time = timeit.default_timer()

                while True:

                    if not flag_screen_update_is_running:
                        self.timer1.start()
                        txt = 'Plot1 Timer Setting Done...\r'
                        self.parent.textBrowser.append(txt)
                        break
                    
                    end_time = timeit.default_timer()

                    time_gap = (end_time - start_time) * 1000

                    if DayTime:
                        time_limit = 200
                    else:
                        time_limit = 100

                    if time_gap > time_limit:
                        self.timer1.start()
                        txt = 'Plot1 Timer Forced Setting Done...\r'
                        self.parent.textBrowser.append(txt)
                        break                                 
            else:
                pass                   
        
        # 선물가격
        if comboindex1 == 2:
                                    
            if 근월물_선물_전저 == 0:
                선물_전저 = 근월물_선물_종가
            else:
                선물_전저 = 근월물_선물_전저

            if 근월물_선물_전고 == 0:
                선물_전고 = 근월물_선물_종가
            else:
                선물_전고 = 근월물_선물_전고

            선물_종가 = 근월물_선물_종가                

            if 근월물_선물_피봇 == 0:
                선물_피봇 = 근월물_선물_종가
            else:
                선물_피봇 = 근월물_선물_피봇

            if 근월물_선물_시가 == 0:
                선물_시가 = 근월물_선물_종가
            else:
                선물_시가 = 근월물_선물_시가

            if 근월물_선물_저가 == 0:
                선물_저가 = 근월물_선물_종가
            else:
                선물_저가 = 근월물_선물_저가

            if 근월물_선물_고가 == 0:
                선물_고가 = 근월물_선물_종가
            else:
                선물_고가 = 근월물_선물_고가
            
            self.plot1_kp200_line[0].setValue(KP200_COREVAL[3])
            self.plot1_kp200_line[1].setValue(KP200_COREVAL[3])
            self.plot1_kp200_line[2].setValue(KP200_COREVAL[3])
            self.plot1_kp200_line[3].setValue(KP200_COREVAL[3])
            self.plot1_kp200_line[4].setValue(KP200_COREVAL[4])
            self.plot1_kp200_line[5].setValue(KP200_COREVAL[5])
            self.plot1_kp200_line[6].setValue(KP200_COREVAL[6])
            self.plot1_kp200_line[7].setValue(KP200_COREVAL[6])
            self.plot1_kp200_line[8].setValue(KP200_COREVAL[6])
            self.plot1_kp200_line[9].setValue(KP200_COREVAL[6])
            
            # 종가선 컬러를 살리기위한 임시방편            
            self.plot1_quote_remainder_ratio_base_line.setValue(선물_종가)
            self.plot1_nm_futures_quote_remainder_ratio_bottom_line.setValue(선물_종가)
            self.plot1_nm_futures_quote_remainder_ratio_upper_line.setValue(선물_종가)

            self.plot1_option_quote_remainder_ratio_bottom_line.setValue(선물_종가)
            self.plot1_option_quote_remainder_ratio_upper_line.setValue(선물_종가)

            for i in range(9):
                self.plot1_mv_line[i].setValue(선물_종가)

            self.plot1_center_val_lower_line.setValue(선물_종가)
            self.plot1_center_val_line.setValue(선물_종가)
            self.plot1_center_val_upper_line.setValue(선물_종가)

            self.plot1_ovc_open_line.setValue(선물_종가)
            self.plot1_ovc_jl_line.setValue(선물_종가)
            self.plot1_ovc_jh_line.setValue(선물_종가)
            self.plot1_ovc_pivot_line.setValue(선물_종가)
            self.plot1_ovc_low_line.setValue(선물_종가)
            self.plot1_ovc_high_line.setValue(선물_종가)
            self.plot1_ovc_close_line.setValue(선물_종가)

            self.plot1_cci_plus_100_line.setValue(선물_종가)
            self.plot1_cci_minus_100_line.setValue(선물_종가)

            txt = ' {0} '.format(선물_전저)
            self.label_11.setText(txt) 
            self.plot1_fut_jl_line.setValue(선물_전저)
            
            txt = ' {0} '.format(선물_전고)
            self.label_12.setText(txt)
            self.plot1_fut_jh_line.setValue(선물_전고)
            
            txt = ' {0} '.format(선물_종가)
            self.label_13.setText(txt)
            self.plot1_fut_close_line.setValue(선물_종가)
            
            txt = ' {0} '.format(선물_피봇)
            self.label_14.setText(txt)
            self.plot1_fut_pivot_line.setValue(선물_피봇)

            txt = ' {0} '.format(선물_시가)
            self.label_15.setText(txt)
            self.plot1_fut_open_line.setValue(선물_시가)

            txt = ' {0} '.format(선물_저가)
            self.label_16.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_16.setText(txt)
            self.plot1_fut_low_line.setValue(선물_저가)
            
            self.label_17.setText(" 000.00 (전일대비, 등락율, 진폭), kp200 : 000.00 ")

            txt = ' {0} '.format(선물_고가)
            self.label_18.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_18.setText(txt)
            self.plot1_fut_high_line.setValue(선물_고가)
            
        # 선옵잔량비
        elif comboindex1 == 3:

            self.label_11.setText(" - ")
            self.label_12.setText(" - ")
            self.label_13.setText(" - ")
            self.label_14.setText(" - ")
            self.label_15.setText(" - ")

            self.label_16.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_16.setText(" 풋잔량비 ")

            self.label_17.setText(" - ")

            self.label_18.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_18.setText(" 콜잔량비 ")
            
            self.label_p1_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p1_2.setText(" BB Upper\n BB Middle\n BB Lower ")

            self.label_p1_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p1_3.setText(" PSAR\n MAMA ")

            self.label_p1_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p1_4.setText(" ONE EYE ")
            
            self.plot1_quote_remainder_ratio_base_line.setValue(1.0)
            self.plot1_nm_futures_quote_remainder_ratio_bottom_line.setValue(1.0)
            self.plot1_nm_futures_quote_remainder_ratio_upper_line.setValue(1.0)

            self.plot1_option_quote_remainder_ratio_bottom_line.setValue(1.0)
            self.plot1_option_quote_remainder_ratio_upper_line.setValue(1.0)

        # 선옵체결 --> 수급
        elif comboindex1 == 4:              

            self.label_11.setText(" - ")
            self.label_12.setText(" - ")
            self.label_13.setText(" - ")
            self.label_14.setText(" - ")
            self.label_15.setText(" - ")

            self.label_16.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_16.setText(" 풋체결량 ")

            self.label_17.setText(" 선물체결량 ")

            self.label_18.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_18.setText(" 콜체결량 ")
            
            self.label_p1_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p1_2.setText(" BB Upper\n BB Middle\n BB Lower ")

            self.label_p1_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p1_3.setText(" PSAR\n MAMA ")

            self.label_p1_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p1_4.setText(" ONE EYE ")
        
        # 옵션가격
        elif comboindex1 == 5:

            self.label_11.setText(" 등가: 행사가 ")
            self.label_12.setText(" 시작 중심가 ")
            self.label_13.setText(" 중심가 하단 ")
            self.label_14.setText(" 중심가 상단 ")
            self.label_15.setText(" - ")
            self.label_16.setText(" 풋현재가 ")
            self.label_17.setText(" 중심가 ")
            self.label_18.setText(" 콜현재가 ")
            
            self.label_p1_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p1_2.setText(" BB Upper\n BB Middle\n BB Lower ")

            self.label_p1_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p1_3.setText(" PSAR\n MAMA ")

            self.label_p1_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p1_4.setText(" ONE EYE ")

            # 대맥점 표시
            self.plot1_mv_line[1].setValue(2.5)
            self.plot1_mv_line[2].setValue(3.5)
            self.plot1_mv_line[3].setValue(4.85)
            
            self.plot1_center_val_lower_line.setValue(옵션_중심가/GOLDEN_RATIO)
            self.plot1_center_val_line.setValue(옵션_중심가)
            self.plot1_center_val_upper_line.setValue(옵션_중심가*GOLDEN_RATIO)

        # 옵션잔량비
        elif comboindex1 == 6:

            self.label_11.setText(" - ")
            self.label_12.setText(" - ")
            self.label_13.setText(" - ")
            self.label_14.setText(" - ")
            self.label_15.setText(" - ")

            self.label_16.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_16.setText(" 풋잔량비 ")

            self.label_17.setText(" - ")

            self.label_18.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_18.setText(" 콜잔량비 ")
            
            self.label_p1_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p1_2.setText(" BB Upper\n BB Middle\n BB Lower ")

            self.label_p1_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p1_3.setText(" PSAR\n MAMA ")

            self.label_p1_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p1_4.setText(" ONE EYE ")
                        
            self.plot1_quote_remainder_ratio_base_line.setValue(1.0)
            self.plot1_nm_futures_quote_remainder_ratio_bottom_line.setValue(1.0)
            self.plot1_nm_futures_quote_remainder_ratio_upper_line.setValue(1.0)

            self.plot1_option_quote_remainder_ratio_bottom_line.setValue(1.0)
            self.plot1_option_quote_remainder_ratio_upper_line.setValue(1.0)
        
        # 옵션미결
        elif comboindex1 == 7:

            self.label_11.setText(" - ")
            self.label_12.setText(" - ")
            self.label_13.setText(" - ")
            self.label_14.setText(" - ")
            self.label_15.setText(" - ")

            self.label_16.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_16.setText(" 풋미결 ")

            self.label_17.setText(" - ")

            self.label_18.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_18.setText(" 콜미결 ")
            
            self.label_p1_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p1_2.setText(" BB Upper\n BB Middle\n BB Lower ")

            self.label_p1_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p1_3.setText(" PSAR\n MAMA ")

            self.label_p1_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p1_4.setText(" ONE EYE ")

        # 등락율비
        elif comboindex1 == 8:

            self.label_11.setText(" - ")
            self.label_12.setText(" - ")
            self.label_13.setText(" - ")
            self.label_14.setText(" - ")

            self.label_15.setStyleSheet('background-color: lime; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_15.setText(" DOW등락율 ")

            self.label_16.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_16.setText(" 풋등락율 ")

            self.label_17.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_17.setText(" 선물등락율 ")

            self.label_18.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_18.setText(" 콜등락율 ")
            
            self.label_p1_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p1_2.setText(" BB Upper\n BB Middle\n BB Lower ")

            self.label_p1_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p1_3.setText(" PSAR\n MAMA ")

            self.label_p1_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p1_4.setText(" ONE EYE ")
        
        # 수급종합
        elif comboindex1 == 10:

            self.label_11.setText(" 기관현물 ")
            self.label_12.setText(" 기관선물 ")
            self.label_13.setText(" 개인현물 ")
            self.label_14.setText(" 개인선물 ")
            self.label_15.setText(" - ")

            self.label_16.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_16.setText(" Prog/F.S ")

            self.label_17.setText(" 선물체결량 ")

            self.label_18.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_18.setText(" S.S/F.F ")

        # 외인수급
        elif comboindex1 == 11:

            pass
            '''
            self.label_11.setText(" 기관현물 ")
            self.label_12.setText(" 기관선물 ")
            self.label_13.setText(" 개인현물 ")
            self.label_14.setText(" 개인선물 ")
            self.label_15.setText(" - ")

            self.label_16.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_16.setText(" 외인현물 ")

            self.label_17.setText(" 선물체결량 ")

            self.label_18.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_18.setText(" 외인선물 ")
            '''

        # SP500
        elif comboindex1 == 13:

            if SP500_전저 == 0:
                sp500_전저 = SP500_전일종가
            else:
                sp500_전저 = SP500_전저

            if SP500_전고 == 0:
                sp500_전고 = SP500_전일종가
            else:
                sp500_전고 = SP500_전고              

            if SP500_피봇 == 0:
                sp500_피봇 = SP500_전일종가
            else:
                sp500_피봇 = SP500_피봇            

            if SP500_시가 == 0:
                sp500_시가 = SP500_전일종가
            else:
                sp500_시가 = SP500_시가

            if SP500_저가 == 0:
                sp500_저가 = SP500_전일종가
            else:
                sp500_저가 = SP500_저가

            if SP500_고가 == 0:
                sp500_고가 = SP500_전일종가
            else:
                sp500_고가 = SP500_고가

            self.plot1_quote_remainder_ratio_base_line.setValue(SP500_전일종가)
            self.plot1_nm_futures_quote_remainder_ratio_bottom_line.setValue(SP500_전일종가)
            self.plot1_nm_futures_quote_remainder_ratio_upper_line.setValue(SP500_전일종가)

            self.plot1_option_quote_remainder_ratio_bottom_line.setValue(SP500_전일종가)
            self.plot1_option_quote_remainder_ratio_upper_line.setValue(SP500_전일종가)
            
            for i in range(10):
                self.plot1_kp200_line[i].setValue(SP500_전일종가)

            for i in range(9):
                self.plot1_mv_line[i].setValue(SP500_전일종가)

            self.plot1_center_val_lower_line.setValue(SP500_전일종가)
            self.plot1_center_val_line.setValue(SP500_전일종가)
            self.plot1_center_val_upper_line.setValue(SP500_전일종가)
            
            self.plot1_fut_jl_line.setValue(SP500_전일종가)
            self.plot1_fut_jh_line.setValue(SP500_전일종가)
            self.plot1_fut_close_line.setValue(SP500_전일종가)
            self.plot1_fut_pivot_line.setValue(SP500_전일종가)
            self.plot1_fut_open_line.setValue(SP500_전일종가)
            self.plot1_fut_low_line.setValue(SP500_전일종가)
            self.plot1_fut_high_line.setValue(SP500_전일종가)

            self.plot1_cci_plus_100_line.setValue(SP500_전일종가)
            self.plot1_cci_minus_100_line.setValue(SP500_전일종가)
                
            txt = ' {0} '.format(format(sp500_전저, ','))
            self.label_11.setText(txt)
            self.plot1_ovc_jl_line.setValue(sp500_전저)

            txt = ' {0} '.format(format(sp500_전고, ','))
            self.label_12.setText(txt)
            self.plot1_ovc_jh_line.setValue(sp500_전고)
            
            txt = ' {0} '.format(format(SP500_전일종가, ','))
            self.label_13.setText(txt)
            self.plot1_ovc_close_line.setValue(SP500_전일종가)

            txt = ' {0} '.format(format(sp500_피봇, ','))
            self.label_14.setText(txt)
            self.plot1_ovc_pivot_line.setValue(sp500_피봇)
            
            txt = ' {0} '.format(format(sp500_시가, ','))
            self.label_15.setText(txt)
            self.plot1_ovc_open_line.setValue(sp500_시가)

            txt = ' {0} '.format(format(sp500_저가, ','))
            self.label_16.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_16.setText(txt)
            self.plot1_ovc_low_line.setValue(sp500_저가)

            self.label_17.setText(" 0,000.00 (전일대비, 등락율, 진폭) ")

            txt = ' {0} '.format(format(sp500_고가, ','))
            self.label_18.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_18.setText(txt)
            self.plot1_ovc_high_line.setValue(sp500_고가)

        # DOW   
        elif comboindex1 == 14:
            
            if DOW_전저 == 0:
                dow_전저 = DOW_전일종가
            else:
                dow_전저 = DOW_전저

            if DOW_전고 == 0:
                dow_전고 = DOW_전일종가
            else:
                dow_전고 = DOW_전고

            if DOW_피봇 == 0:
                dow_피봇 = DOW_전일종가
            else:
                dow_피봇 = DOW_피봇

            if DOW_시가 == 0:
                dow_시가 = DOW_전일종가
            else:
                dow_시가 = DOW_시가

            if DOW_저가 == 0:
                dow_저가 = DOW_전일종가
            else:
                dow_저가 = DOW_저가

            if DOW_고가 == 0:
                dow_고가 = DOW_전일종가
            else:
                dow_고가 = DOW_고가

            self.plot1_quote_remainder_ratio_base_line.setValue(DOW_전일종가)
            self.plot1_nm_futures_quote_remainder_ratio_bottom_line.setValue(DOW_전일종가)
            self.plot1_nm_futures_quote_remainder_ratio_upper_line.setValue(DOW_전일종가)

            self.plot1_option_quote_remainder_ratio_bottom_line.setValue(DOW_전일종가)
            self.plot1_option_quote_remainder_ratio_upper_line.setValue(DOW_전일종가)
            
            for i in range(10):
                self.plot1_kp200_line[i].setValue(DOW_전일종가)

            for i in range(9):
                self.plot1_mv_line[i].setValue(DOW_전일종가)

            self.plot1_center_val_lower_line.setValue(DOW_전일종가)
            self.plot1_center_val_line.setValue(DOW_전일종가)
            self.plot1_center_val_upper_line.setValue(DOW_전일종가)
            
            self.plot1_fut_jl_line.setValue(DOW_전일종가)
            self.plot1_fut_jh_line.setValue(DOW_전일종가)
            self.plot1_fut_close_line.setValue(DOW_전일종가)
            self.plot1_fut_pivot_line.setValue(DOW_전일종가)
            self.plot1_fut_open_line.setValue(DOW_전일종가)
            self.plot1_fut_low_line.setValue(DOW_전일종가)
            self.plot1_fut_high_line.setValue(DOW_전일종가)

            self.plot1_cci_plus_100_line.setValue(DOW_전일종가)
            self.plot1_cci_minus_100_line.setValue(DOW_전일종가)
                            
            txt = ' {0} '.format(format(dow_전저, ','))
            self.label_11.setText(txt)
            self.plot1_ovc_jl_line.setValue(dow_전저)

            txt = ' {0} '.format(format(dow_전고, ','))
            self.label_12.setText(txt)
            self.plot1_ovc_jh_line.setValue(dow_전고)
            
            txt = ' {0} '.format(format(DOW_전일종가, ','))
            self.label_13.setText(txt)
            self.plot1_ovc_close_line.setValue(DOW_전일종가)

            txt = ' {0} '.format(format(dow_피봇, ','))
            self.label_14.setText(txt)
            self.plot1_ovc_pivot_line.setValue(dow_피봇)
            
            txt = ' {0} '.format(format(dow_시가, ','))
            self.label_15.setText(txt)
            self.plot1_ovc_open_line.setValue(dow_시가)

            txt = ' {0} '.format(format(dow_저가, ','))
            self.label_16.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_16.setText(txt)
            self.plot1_ovc_low_line.setValue(dow_저가)

            self.label_17.setText(" 00,000 (전일대비, 등락율, 진폭) ")

            txt = ' {0} '.format(format(dow_고가, ','))
            self.label_18.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_18.setText(txt)
            self.plot1_ovc_high_line.setValue(dow_고가)

        # NASDAQ
        elif comboindex1 == 15:

            if NASDAQ_전저 == 0:
                nasdaq_전저 = NASDAQ_전일종가
            else:
                nasdaq_전저 = NASDAQ_전저

            if NASDAQ_전고 == 0:
                nasdaq_전고 = NASDAQ_전일종가
            else:
                nasdaq_전고 = NASDAQ_전고

            if NASDAQ_피봇 == 0:
                nasdaq_피봇 = NASDAQ_전일종가
            else:
                nasdaq_피봇 = NASDAQ_피봇

            if NASDAQ_시가 == 0:
                nasdaq_시가 = NASDAQ_전일종가
            else:
                nasdaq_시가 = NASDAQ_시가

            if NASDAQ_저가 == 0:
                nasdaq_저가 = NASDAQ_전일종가
            else:
                nasdaq_저가 = NASDAQ_저가

            if NASDAQ_고가 == 0:
                nasdaq_고가 = NASDAQ_전일종가
            else:
                nasdaq_고가 = NASDAQ_고가

            self.plot1_quote_remainder_ratio_base_line.setValue(NASDAQ_전일종가)
            self.plot1_nm_futures_quote_remainder_ratio_bottom_line.setValue(NASDAQ_전일종가)
            self.plot1_nm_futures_quote_remainder_ratio_upper_line.setValue(NASDAQ_전일종가)

            self.plot1_option_quote_remainder_ratio_bottom_line.setValue(NASDAQ_전일종가)
            self.plot1_option_quote_remainder_ratio_upper_line.setValue(NASDAQ_전일종가)
            
            for i in range(10):
                self.plot1_kp200_line[i].setValue(NASDAQ_전일종가)

            for i in range(9):
                self.plot1_mv_line[i].setValue(NASDAQ_전일종가)

            self.plot1_center_val_lower_line.setValue(NASDAQ_전일종가)
            self.plot1_center_val_line.setValue(NASDAQ_전일종가)
            self.plot1_center_val_upper_line.setValue(NASDAQ_전일종가)
            
            self.plot1_fut_jl_line.setValue(NASDAQ_전일종가)
            self.plot1_fut_jh_line.setValue(NASDAQ_전일종가)
            self.plot1_fut_close_line.setValue(NASDAQ_전일종가)
            self.plot1_fut_pivot_line.setValue(NASDAQ_전일종가)
            self.plot1_fut_open_line.setValue(NASDAQ_전일종가)
            self.plot1_fut_low_line.setValue(NASDAQ_전일종가)
            self.plot1_fut_high_line.setValue(NASDAQ_전일종가)

            self.plot1_cci_plus_100_line.setValue(NASDAQ_전일종가)
            self.plot1_cci_minus_100_line.setValue(NASDAQ_전일종가)
                
            txt = ' {0} '.format(format(nasdaq_전저, ','))
            self.label_11.setText(txt)
            self.plot1_ovc_jl_line.setValue(nasdaq_전저)

            txt = ' {0} '.format(format(nasdaq_전고, ','))
            self.label_12.setText(txt)
            self.plot1_ovc_jh_line.setValue(nasdaq_전고)
            
            txt = ' {0} '.format(format(NASDAQ_전일종가, ','))
            self.label_13.setText(txt)
            self.plot1_ovc_close_line.setValue(NASDAQ_전일종가)

            txt = ' {0} '.format(format(nasdaq_피봇, ','))
            self.label_14.setText(txt)
            self.plot1_ovc_pivot_line.setValue(nasdaq_피봇)
            
            txt = ' {0} '.format(format(nasdaq_시가, ','))
            self.label_15.setText(txt)
            self.plot1_ovc_open_line.setValue(nasdaq_시가)

            txt = ' {0} '.format(format(nasdaq_저가, ','))
            self.label_16.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_16.setText(txt)
            self.plot1_ovc_low_line.setValue(nasdaq_저가)

            self.label_17.setText(" 0,000.00 (전일대비, 등락율, 진폭) ")

            txt = ' {0} '.format(format(nasdaq_고가, ','))
            self.label_18.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_18.setText(txt)
            self.plot1_ovc_high_line.setValue(nasdaq_고가)
        
        elif comboindex1 == 16:
            
            if HANGSENG_전저 == 0:
                hsi_전저 = HANGSENG_전일종가
            else:
                hsi_전저 = HANGSENG_전저

            if HANGSENG_전고 == 0:
                hsi_전고 = HANGSENG_전일종가
            else:
                hsi_전고 = HANGSENG_전고

            if HANGSENG_피봇 == 0:
                hsi_피봇 = HANGSENG_전일종가
            else:
                hsi_피봇 = HANGSENG_피봇

            if HANGSENG_시가 == 0:
                hsi_시가 = HANGSENG_전일종가
            else:
                hsi_시가 = HANGSENG_시가

            if HANGSENG_저가 == 0:
                hsi_저가 = HANGSENG_전일종가
            else:
                hsi_저가 = HANGSENG_저가

            if HANGSENG_고가 == 0:
                hsi_고가 = HANGSENG_전일종가
            else:
                hsi_고가 = HANGSENG_고가

            self.plot1_quote_remainder_ratio_base_line.setValue(HANGSENG_전일종가)
            self.plot1_nm_futures_quote_remainder_ratio_bottom_line.setValue(HANGSENG_전일종가)
            self.plot1_nm_futures_quote_remainder_ratio_upper_line.setValue(HANGSENG_전일종가)

            self.plot1_option_quote_remainder_ratio_bottom_line.setValue(HANGSENG_전일종가)
            self.plot1_option_quote_remainder_ratio_upper_line.setValue(HANGSENG_전일종가)
            
            for i in range(10):
                self.plot1_kp200_line[i].setValue(HANGSENG_전일종가)

            for i in range(9):
                self.plot1_mv_line[i].setValue(HANGSENG_전일종가)

            self.plot1_center_val_lower_line.setValue(HANGSENG_전일종가)
            self.plot1_center_val_line.setValue(HANGSENG_전일종가)
            self.plot1_center_val_upper_line.setValue(HANGSENG_전일종가)
            
            self.plot1_fut_jl_line.setValue(HANGSENG_전일종가)
            self.plot1_fut_jh_line.setValue(HANGSENG_전일종가)
            self.plot1_fut_close_line.setValue(HANGSENG_전일종가)
            self.plot1_fut_pivot_line.setValue(HANGSENG_전일종가)
            self.plot1_fut_open_line.setValue(HANGSENG_전일종가)
            self.plot1_fut_low_line.setValue(HANGSENG_전일종가)
            self.plot1_fut_high_line.setValue(HANGSENG_전일종가)

            self.plot1_cci_plus_100_line.setValue(HANGSENG_전일종가)
            self.plot1_cci_minus_100_line.setValue(HANGSENG_전일종가)
                            
            txt = ' {0} '.format(format(hsi_전저, ','))
            self.label_11.setText(txt)
            self.plot1_ovc_jl_line.setValue(hsi_전저)

            txt = ' {0} '.format(format(hsi_전고, ','))
            self.label_12.setText(txt)
            self.plot1_ovc_jh_line.setValue(hsi_전고)
            
            txt = ' {0} '.format(format(HANGSENG_전일종가, ','))
            self.label_13.setText(txt)
            self.plot1_ovc_close_line.setValue(HANGSENG_전일종가)

            txt = ' {0} '.format(format(hsi_피봇, ','))
            self.label_14.setText(txt)
            self.plot1_ovc_pivot_line.setValue(hsi_피봇)
            
            txt = ' {0} '.format(format(hsi_시가, ','))
            self.label_15.setText(txt)
            self.plot1_ovc_open_line.setValue(hsi_시가)

            txt = ' {0} '.format(format(hsi_저가, ','))
            self.label_16.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_16.setText(txt)
            self.plot1_ovc_low_line.setValue(hsi_저가)

            self.label_17.setText(" 00.00 (전일대비, 등락율, 진폭) ")

            txt = ' {0} '.format(format(hsi_고가, ','))
            self.label_18.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_18.setText(txt)
            self.plot1_ovc_high_line.setValue(hsi_고가)

        # WTI   
        elif comboindex1 == 17:

            if WTI_전저 == 0:
                wti_전저 = WTI_전일종가
            else:
                wti_전저 = WTI_전저

            if WTI_전고 == 0:
                wti_전고 = WTI_전일종가
            else:
                wti_전고 = WTI_전고

            if WTI_피봇 == 0:
                wti_피봇 = WTI_전일종가
            else:
                wti_피봇 = WTI_피봇

            if WTI_시가 == 0:
                wti_시가 = WTI_전일종가
            else:
                wti_시가 = WTI_시가

            if WTI_저가 == 0:
                wti_저가 = WTI_전일종가
            else:
                wti_저가 = WTI_저가

            if WTI_고가 == 0:
                wti_고가 = WTI_전일종가
            else:
                wti_고가 = WTI_고가

            self.plot1_quote_remainder_ratio_base_line.setValue(WTI_전일종가)
            self.plot1_nm_futures_quote_remainder_ratio_bottom_line.setValue(WTI_전일종가)
            self.plot1_nm_futures_quote_remainder_ratio_upper_line.setValue(WTI_전일종가)

            self.plot1_option_quote_remainder_ratio_bottom_line.setValue(WTI_전일종가)
            self.plot1_option_quote_remainder_ratio_upper_line.setValue(WTI_전일종가)
            
            for i in range(10):
                self.plot1_kp200_line[i].setValue(WTI_전일종가)

            for i in range(9):
                self.plot1_mv_line[i].setValue(WTI_전일종가)

            self.plot1_center_val_lower_line.setValue(WTI_전일종가)
            self.plot1_center_val_line.setValue(WTI_전일종가)
            self.plot1_center_val_upper_line.setValue(WTI_전일종가)
            
            self.plot1_fut_jl_line.setValue(WTI_전일종가)
            self.plot1_fut_jh_line.setValue(WTI_전일종가)
            self.plot1_fut_close_line.setValue(WTI_전일종가)
            self.plot1_fut_pivot_line.setValue(WTI_전일종가)
            self.plot1_fut_open_line.setValue(WTI_전일종가)
            self.plot1_fut_low_line.setValue(WTI_전일종가)
            self.plot1_fut_high_line.setValue(WTI_전일종가)

            self.plot1_cci_plus_100_line.setValue(WTI_전일종가)
            self.plot1_cci_minus_100_line.setValue(WTI_전일종가)
                
            txt = ' {0} '.format(format(wti_전저, ','))
            self.label_11.setText(txt)
            self.plot1_ovc_jl_line.setValue(wti_전저)

            txt = ' {0} '.format(format(wti_전고, ','))
            self.label_12.setText(txt)
            self.plot1_ovc_jh_line.setValue(wti_전고)
            
            txt = ' {0} '.format(format(WTI_전일종가, ','))
            self.label_13.setText(txt)
            self.plot1_ovc_close_line.setValue(WTI_전일종가)

            txt = ' {0} '.format(format(wti_피봇, ','))
            self.label_14.setText(txt)
            self.plot1_ovc_pivot_line.setValue(wti_피봇)
            
            txt = ' {0} '.format(format(wti_시가, ','))
            self.label_15.setText(txt)
            self.plot1_ovc_open_line.setValue(wti_시가)

            txt = ' {0} '.format(format(wti_저가, ','))
            self.label_16.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_16.setText(txt)
            self.plot1_ovc_low_line.setValue(wti_저가)

            self.label_17.setText(" 00.00 (전일대비, 등락율, 진폭) ")

            txt = ' {0} '.format(format(wti_고가, ','))
            self.label_18.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_18.setText(txt)
            self.plot1_ovc_high_line.setValue(wti_고가)
                
        elif comboindex1 == 18:

            if GOLD_전저 == 0:
                gold_전저 = GOLD_전일종가
            else:
                gold_전저 = GOLD_전저

            if GOLD_전고 == 0:
                gold_전고 = GOLD_전일종가
            else:
                gold_전고 = GOLD_전고

            if GOLD_피봇 == 0:
                gold_피봇 = GOLD_전일종가
            else:
                gold_피봇 = GOLD_피봇

            if GOLD_시가 == 0:
                gold_시가 = GOLD_전일종가
            else:
                gold_시가 = GOLD_시가

            if GOLD_저가 == 0:
                gold_저가 = GOLD_전일종가
            else:
                gold_저가 = GOLD_저가

            if GOLD_고가 == 0:
                gold_고가 = GOLD_전일종가
            else:
                gold_고가 = GOLD_고가

            self.plot1_quote_remainder_ratio_base_line.setValue(GOLD_전일종가)
            self.plot1_nm_futures_quote_remainder_ratio_bottom_line.setValue(GOLD_전일종가)
            self.plot1_nm_futures_quote_remainder_ratio_upper_line.setValue(GOLD_전일종가)

            self.plot1_option_quote_remainder_ratio_bottom_line.setValue(GOLD_전일종가)
            self.plot1_option_quote_remainder_ratio_upper_line.setValue(GOLD_전일종가)
            
            for i in range(10):
                self.plot1_kp200_line[i].setValue(GOLD_전일종가)

            for i in range(9):
                self.plot1_mv_line[i].setValue(GOLD_전일종가)

            self.plot1_center_val_lower_line.setValue(GOLD_전일종가)
            self.plot1_center_val_line.setValue(GOLD_전일종가)
            self.plot1_center_val_upper_line.setValue(GOLD_전일종가)
            
            self.plot1_fut_jl_line.setValue(GOLD_전일종가)
            self.plot1_fut_jh_line.setValue(GOLD_전일종가)
            self.plot1_fut_close_line.setValue(GOLD_전일종가)
            self.plot1_fut_pivot_line.setValue(GOLD_전일종가)
            self.plot1_fut_open_line.setValue(GOLD_전일종가)
            self.plot1_fut_low_line.setValue(GOLD_전일종가)
            self.plot1_fut_high_line.setValue(GOLD_전일종가)

            self.plot1_cci_plus_100_line.setValue(GOLD_전일종가)
            self.plot1_cci_minus_100_line.setValue(GOLD_전일종가)         
                
            txt = ' {0} '.format(format(gold_전저, ','))
            self.label_11.setText(txt)
            self.plot1_ovc_jl_line.setValue(gold_전저)

            txt = ' {0} '.format(format(gold_전고, ','))
            self.label_12.setText(txt)
            self.plot1_ovc_jh_line.setValue(gold_전고)
            
            txt = ' {0} '.format(format(GOLD_전일종가, ','))
            self.label_13.setText(txt)
            self.plot1_ovc_close_line.setValue(GOLD_전일종가)

            txt = ' {0} '.format(format(gold_피봇, ','))
            self.label_14.setText(txt)
            self.plot1_ovc_pivot_line.setValue(gold_피봇)
            
            txt = ' {0} '.format(format(gold_시가, ','))
            self.label_15.setText(txt)
            self.plot1_ovc_open_line.setValue(gold_시가)

            txt = ' {0} '.format(format(gold_저가, ','))
            self.label_16.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_16.setText(txt)
            self.plot1_ovc_low_line.setValue(gold_저가)

            self.label_17.setText(" 00.00 (전일대비, 등락율, 진폭) ")

            txt = ' {0} '.format(format(gold_고가, ','))
            self.label_18.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_18.setText(txt)
            self.plot1_ovc_high_line.setValue(gold_고가)

        elif comboindex1 == 19:
            
            if EURO_전저 == 0:
                euro_전저 = EURO_전일종가
            else:
                euro_전저 = EURO_전저

            if EURO_전고 == 0:
                euro_전고 = EURO_전일종가
            else:
                euro_전고 = EURO_전고

            if EURO_피봇 == 0:
                euro_피봇 = EURO_전일종가
            else:
                euro_피봇 = EURO_피봇

            if EURO_시가 == 0:
                euro_시가 = EURO_전일종가
            else:
                euro_시가 = EURO_시가

            if EURO_저가 == 0:
                euro_저가 = EURO_전일종가
            else:
                euro_저가 = EURO_저가

            if EURO_고가 == 0:
                euro_고가 = EURO_전일종가
            else:
                euro_고가 = EURO_고가

            self.plot1_quote_remainder_ratio_base_line.setValue(EURO_전일종가)
            self.plot1_nm_futures_quote_remainder_ratio_bottom_line.setValue(EURO_전일종가)
            self.plot1_nm_futures_quote_remainder_ratio_upper_line.setValue(EURO_전일종가)

            self.plot1_option_quote_remainder_ratio_bottom_line.setValue(EURO_전일종가)
            self.plot1_option_quote_remainder_ratio_upper_line.setValue(EURO_전일종가)
            
            for i in range(10):
                self.plot1_kp200_line[i].setValue(EURO_전일종가)

            for i in range(9):
                self.plot1_mv_line[i].setValue(EURO_전일종가)

            self.plot1_center_val_lower_line.setValue(EURO_전일종가)
            self.plot1_center_val_line.setValue(EURO_전일종가)
            self.plot1_center_val_upper_line.setValue(EURO_전일종가)
            
            self.plot1_fut_jl_line.setValue(EURO_전일종가)
            self.plot1_fut_jh_line.setValue(EURO_전일종가)
            self.plot1_fut_close_line.setValue(EURO_전일종가)
            self.plot1_fut_pivot_line.setValue(EURO_전일종가)
            self.plot1_fut_open_line.setValue(EURO_전일종가)
            self.plot1_fut_low_line.setValue(EURO_전일종가)
            self.plot1_fut_high_line.setValue(EURO_전일종가)

            self.plot1_cci_plus_100_line.setValue(EURO_전일종가)
            self.plot1_cci_minus_100_line.setValue(EURO_전일종가)
                            
            txt = ' {0:.5f} '.format(euro_전저)
            self.label_11.setText(txt)
            self.plot1_ovc_jl_line.setValue(euro_전저)

            txt = ' {0:.5f} '.format(euro_전고)
            self.label_12.setText(txt)
            self.plot1_ovc_jh_line.setValue(euro_전고)
            
            txt = ' {0:.5f} '.format(EURO_전일종가)
            self.label_13.setText(txt)
            self.plot1_ovc_close_line.setValue(EURO_전일종가)

            txt = ' {0:.5f} '.format(euro_피봇)
            self.label_14.setText(txt)
            self.plot1_ovc_pivot_line.setValue(euro_피봇)
            
            txt = ' {0:.5f} '.format(euro_시가)
            self.label_15.setText(txt)
            self.plot1_ovc_open_line.setValue(euro_시가)

            txt = ' {0:.5f} '.format(euro_저가)
            self.label_16.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_16.setText(txt)
            self.plot1_ovc_low_line.setValue(euro_저가)

            self.label_17.setText(" 00.00 (전일대비, 등락율, 진폭) ")

            txt = ' {0:.5f} '.format(euro_고가)
            self.label_18.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_18.setText(txt)
            self.plot1_ovc_high_line.setValue(euro_고가)

        elif comboindex1 == 20:
            
            if YEN_전저 == 0:
                yen_전저 = YEN_전일종가
            else:
                yen_전저 = YEN_전저

            if YEN_전고 == 0:
                yen_전고 = YEN_전일종가
            else:
                yen_전고 = YEN_전고

            if YEN_피봇 == 0:
                yen_피봇 = YEN_전일종가
            else:
                yen_피봇 = YEN_피봇

            if YEN_시가 == 0:
                yen_시가 = YEN_전일종가
            else:
                yen_시가 = YEN_시가

            if YEN_저가 == 0:
                yen_저가 = YEN_전일종가
            else:
                yen_저가 = YEN_저가

            if YEN_고가 == 0:
                yen_고가 = YEN_전일종가
            else:
                yen_고가 = YEN_고가

            self.plot1_quote_remainder_ratio_base_line.setValue(YEN_전일종가)
            self.plot1_nm_futures_quote_remainder_ratio_bottom_line.setValue(YEN_전일종가)
            self.plot1_nm_futures_quote_remainder_ratio_upper_line.setValue(YEN_전일종가)

            self.plot1_option_quote_remainder_ratio_bottom_line.setValue(YEN_전일종가)
            self.plot1_option_quote_remainder_ratio_upper_line.setValue(YEN_전일종가)
            
            for i in range(10):
                self.plot1_kp200_line[i].setValue(YEN_전일종가)

            for i in range(9):
                self.plot1_mv_line[i].setValue(YEN_전일종가)

            self.plot1_center_val_lower_line.setValue(YEN_전일종가)
            self.plot1_center_val_line.setValue(YEN_전일종가)
            self.plot1_center_val_upper_line.setValue(YEN_전일종가)
            
            self.plot1_fut_jl_line.setValue(YEN_전일종가)
            self.plot1_fut_jh_line.setValue(YEN_전일종가)
            self.plot1_fut_close_line.setValue(YEN_전일종가)
            self.plot1_fut_pivot_line.setValue(YEN_전일종가)
            self.plot1_fut_open_line.setValue(YEN_전일종가)
            self.plot1_fut_low_line.setValue(YEN_전일종가)
            self.plot1_fut_high_line.setValue(YEN_전일종가)

            self.plot1_cci_plus_100_line.setValue(YEN_전일종가)
            self.plot1_cci_minus_100_line.setValue(YEN_전일종가)
                
            txt = ' {0} '.format(format(yen_전저, ','))
            self.label_11.setText(txt)
            self.plot1_ovc_jl_line.setValue(yen_전저)

            txt = ' {0} '.format(format(yen_전고, ','))
            self.label_12.setText(txt)
            self.plot1_ovc_jh_line.setValue(yen_전고)
            
            txt = ' {0} '.format(format(YEN_전일종가, ','))
            self.label_13.setText(txt)
            self.plot1_ovc_close_line.setValue(YEN_전일종가)

            txt = ' {0} '.format(format(yen_피봇, ','))
            self.label_14.setText(txt)
            self.plot1_ovc_pivot_line.setValue(yen_피봇)
            
            txt = ' {0} '.format(format(yen_시가, ','))
            self.label_15.setText(txt)
            self.plot1_ovc_open_line.setValue(yen_시가)

            txt = ' {0} '.format(format(yen_저가, ','))
            self.label_16.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_16.setText(txt)
            self.plot1_ovc_low_line.setValue(yen_저가)

            self.label_17.setText(" 00.00 (전일대비, 등락율, 진폭) ")

            txt = ' {0} '.format(format(yen_고가, ','))
            self.label_18.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_18.setText(txt)
            self.plot1_ovc_high_line.setValue(yen_고가)

        elif comboindex1 == 21:
            
            if ADI_전저 == 0:
                adi_전저 = ADI_전일종가
            else:
                adi_전저 = ADI_전저

            if ADI_전고 == 0:
                adi_전고 = ADI_전일종가
            else:
                adi_전고 = ADI_전고

            if ADI_피봇 == 0:
                adi_피봇 = ADI_전일종가
            else:
                adi_피봇 = ADI_피봇

            if ADI_시가 == 0:
                adi_시가 = ADI_전일종가
            else:
                adi_시가 = ADI_시가

            if ADI_저가 == 0:
                adi_저가 = ADI_전일종가
            else:
                adi_저가 = ADI_저가

            if ADI_고가 == 0:
                adi_고가 = ADI_전일종가
            else:
                adi_고가 = ADI_고가

            self.plot1_quote_remainder_ratio_base_line.setValue(ADI_전일종가)
            self.plot1_nm_futures_quote_remainder_ratio_bottom_line.setValue(ADI_전일종가)
            self.plot1_nm_futures_quote_remainder_ratio_upper_line.setValue(ADI_전일종가)

            self.plot1_option_quote_remainder_ratio_bottom_line.setValue(ADI_전일종가)
            self.plot1_option_quote_remainder_ratio_upper_line.setValue(ADI_전일종가)
            
            for i in range(10):
                self.plot1_kp200_line[i].setValue(ADI_전일종가)

            for i in range(9):
                self.plot1_mv_line[i].setValue(ADI_전일종가)

            self.plot1_center_val_lower_line.setValue(ADI_전일종가)
            self.plot1_center_val_line.setValue(ADI_전일종가)
            self.plot1_center_val_upper_line.setValue(ADI_전일종가)
            
            self.plot1_fut_jl_line.setValue(ADI_전일종가)
            self.plot1_fut_jh_line.setValue(ADI_전일종가)
            self.plot1_fut_close_line.setValue(ADI_전일종가)
            self.plot1_fut_pivot_line.setValue(ADI_전일종가)
            self.plot1_fut_open_line.setValue(ADI_전일종가)
            self.plot1_fut_low_line.setValue(ADI_전일종가)
            self.plot1_fut_high_line.setValue(ADI_전일종가)

            self.plot1_cci_plus_100_line.setValue(ADI_전일종가)
            self.plot1_cci_minus_100_line.setValue(ADI_전일종가)                        
                
            txt = ' {0:.5f} '.format(adi_전저)
            self.label_11.setText(txt)
            self.plot1_ovc_jl_line.setValue(adi_전저)

            txt = ' {0:.5f} '.format(adi_전고)
            self.label_12.setText(txt)
            self.plot1_ovc_jh_line.setValue(adi_전고)
            
            txt = ' {0:.5f} '.format(ADI_전일종가)
            self.label_13.setText(txt)
            self.plot1_ovc_close_line.setValue(ADI_전일종가)

            txt = ' {0:.5f} '.format(adi_피봇)
            self.label_14.setText(txt)
            self.plot1_ovc_pivot_line.setValue(adi_피봇)
            
            txt = ' {0:.5f} '.format(adi_시가)
            self.label_15.setText(txt)
            self.plot1_ovc_open_line.setValue(adi_시가)

            txt = ' {0:.5f} '.format(adi_저가)
            self.label_16.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_16.setText(txt)
            self.plot1_ovc_low_line.setValue(adi_저가)

            self.label_17.setText(" 00.00 (전일대비, 등락율, 진폭) ")

            txt = ' {0:.5f} '.format(adi_고가)
            self.label_18.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_18.setText(txt)
            self.plot1_ovc_high_line.setValue(adi_고가)
        else:
            pass

    def plot2_clear(self):

        # Line Clear
        self.plot2_fut_jl_line.setValue(0)
        self.plot2_fut_jh_line.setValue(0)
        self.plot2_fut_open_line.setValue(0)
        self.plot2_fut_close_line.setValue(0)
        self.plot2_fut_pivot_line.setValue(0)
        self.plot2_fut_low_line.setValue(0)
        self.plot2_fut_high_line.setValue(0)

        self.plot2_ovc_jl_line.setValue(0)
        self.plot2_ovc_jh_line.setValue(0)
        self.plot2_ovc_close_line.setValue(0)
        self.plot2_ovc_open_line.setValue(0)
        self.plot2_ovc_pivot_line.setValue(0)
        self.plot2_ovc_low_line.setValue(0)
        self.plot2_ovc_high_line.setValue(0)

        for i in range(10):
            self.plot2_kp200_line[i].setValue(0)

        for i in range(9):
            self.plot2_mv_line[i].setValue(0)        

        self.plot2_quote_remainder_ratio_base_line.setValue(0)
        self.plot2_nm_futures_quote_remainder_ratio_bottom_line.setValue(0)
        self.plot2_nm_futures_quote_remainder_ratio_upper_line.setValue(0)

        self.plot2_option_quote_remainder_ratio_bottom_line.setValue(0)
        self.plot2_option_quote_remainder_ratio_upper_line.setValue(0)

        self.plot2_center_val_lower_line.setValue(0)
        self.plot2_center_val_line.setValue(0)
        self.plot2_center_val_upper_line.setValue(0)

        # Fibonacci Retracements Line
        self.plot2_fibonacci_line1.setValue(0)
        self.plot2_fibonacci_line2.setValue(0)
        self.plot2_fibonacci_line3.setValue(0)
        self.plot2_fibonacci_line4.setValue(0)
        self.plot2_fibonacci_line5.setValue(0)

        # CCI Line
        self.plot2_cci_plus_100_line.setValue(0)
        self.plot2_cci_minus_100_line.setValue(0)

        # Curve Clear
        self.plot2_fut_cm_price_curve.clear()
        self.plot2_fut_nm_price_curve.clear()
        self.plot2_kp200_curve.clear()

        self.plot2_fut_cm_quote_remainder_ratio_curve.clear()
        self.plot2_fut_nm_quote_remainder_ratio_curve.clear()

        self.plot2_fut_volume_curve.clear()
        self.plot2_call_volume_curve.clear()
        self.plot2_put_volume_curve.clear()        

        self.plot2_center_val_curve.clear()

        for i in range(option_pairs_count):
            self.plot2_call_curve[i].clear()
            self.plot2_put_curve[i].clear()

        self.plot2_call_quote_curve.clear()
        self.plot2_put_quote_curve.clear()

        self.plot2_call_oi_curve.clear()
        self.plot2_put_oi_curve.clear()

        self.plot2_fut_cm_drate_curve.clear()
        self.plot2_fut_nm_drate_curve.clear()
        self.plot2_cme_drate_curve.clear()
        self.plot2_call_drate_curve.clear()
        self.plot2_put_drate_curve.clear()

        self.plot2_program_curve.clear()
        self.plot2_kospi_total_curve.clear()
        self.plot2_futures_foreigner_curve.clear()
        self.plot2_kospi_foreigner_curve.clear()

        self.plot2_sp500_curve.clear()
        self.plot2_dow_curve.clear()
        self.plot2_nasdaq_curve.clear()
        self.plot2_hsi_curve.clear()

        self.plot2_wti_curve.clear()
        self.plot2_gold_curve.clear()

        self.plot2_euro_curve.clear()
        self.plot2_yen_curve.clear()
        self.plot2_adi_curve.clear()

        self.plot2_bollinger_1st_upper_curve.clear()
        self.plot2_bollinger_1st_middle_curve.clear()
        self.plot2_bollinger_1st_lower_curve.clear()
        self.plot2_bollinger_2nd_upper_curve.clear()
        self.plot2_bollinger_2nd_middle_curve.clear()
        self.plot2_bollinger_2nd_lower_curve.clear()

        self.plot2_psar_curve.clear()

        self.plot2_mama_curve.clear()
        self.plot2_fama_curve.clear()
        #self.plot2_sslup_curve.clear()
        #self.plot2_ssldown_curve.clear()

        self.plot2_oe_conv_curve.clear()
        self.plot2_oe_base_curve.clear()
        self.plot2_span_a_curve.clear()
        self.plot2_span_b_curve.clear()
        self.plot2_lagging_span_curve.clear()

        self.plot2_futures_rsi_curve.clear()
        self.plot2_sp500_rsi_curve.clear()
        self.plot2_dow_rsi_curve.clear()
        self.plot2_nasdaq_rsi_curve.clear()
        self.plot2_hsi_rsi_curve.clear()
        self.plot2_wti_rsi_curve.clear()
        self.plot2_gold_rsi_curve.clear()
        self.plot2_euro_rsi_curve.clear()
        self.plot2_yen_rsi_curve.clear()
        self.plot2_adi_rsi_curve.clear()

        self.plot2_futures_cci1_curve.clear()
        self.plot2_sp500_cci1_curve.clear()
        self.plot2_dow_cci1_curve.clear()
        self.plot2_nasdaq_cci1_curve.clear()
        self.plot2_hsi_cci1_curve.clear()
        self.plot2_wti_cci1_curve.clear()
        self.plot2_gold_cci1_curve.clear()
        self.plot2_euro_cci1_curve.clear()
        self.plot2_yen_cci1_curve.clear()
        self.plot2_adi_cci1_curve.clear()

        self.plot2_futures_cci2_curve.clear()
        self.plot2_sp500_cci2_curve.clear()
        self.plot2_dow_cci2_curve.clear()
        self.plot2_nasdaq_cci2_curve.clear()
        self.plot2_hsi_cci2_curve.clear()
        self.plot2_wti_cci2_curve.clear()
        self.plot2_gold_cci2_curve.clear()
        self.plot2_euro_cci2_curve.clear()
        self.plot2_yen_cci2_curve.clear()
        self.plot2_adi_cci2_curve.clear()

        self.label_21.setText(" - ")
        self.label_22.setText(" - ")
        self.label_23.setText(" - ")
        self.label_24.setText(" - ")
        self.label_25.setText(" - ")
        self.label_26.setText(" - ")
        self.label_27.setText(" - ")
        self.label_28.setText(" - ")

        self.label_p2_1.setStyleSheet('background-color: lime; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_p2_1.setText(" 좌표 ")

        self.label_p2_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_p2_2.setText(" BB Upper\n BB Middle\n BB Lower ")

        self.label_p2_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_p2_3.setText(" PSAR\n MAMA ")

        self.label_p2_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_p2_4.setText(" ONE EYE ")

        txt = 'Plot2 Clear...\r'
        self.parent.textBrowser.append(txt)

    def cb2_selectionChanged(self):

        global comboindex2
        
        txt = self.comboBox2.currentText()
        comboindex2 = self.comboBox2.currentIndex()

        self.plot2_clear()

        if comboindex2 == 0:
            self.timer2.stop()

            txt = 'Plot2 Timer Stop...\r'
            self.parent.textBrowser.append(txt)
        else:
            if not self.timer2.isActive():

                start_time = timeit.default_timer()

                while True:

                    if not flag_screen_update_is_running:
                        self.timer2.start()
                        txt = 'Plot2 Timer Setting Done...\r'
                        self.parent.textBrowser.append(txt)
                        break

                    end_time = timeit.default_timer()

                    time_gap = (end_time - start_time) * 1000

                    if DayTime:
                        time_limit = 200
                    else:
                        time_limit = 100

                    if time_gap > time_limit:
                        self.timer2.start()
                        txt = 'Plot2 Timer Forced Setting Done...\r'
                        self.parent.textBrowser.append(txt)
                        break
            else:
                pass            

        # 선물가격
        if comboindex2 == 2:
                        
            if 근월물_선물_전저 == 0:
                선물_전저 = 근월물_선물_종가
            else:
                선물_전저 = 근월물_선물_전저

            if 근월물_선물_전고 == 0:
                선물_전고 = 근월물_선물_종가
            else:
                선물_전고 = 근월물_선물_전고

            선물_종가 = 근월물_선물_종가                               

            if 근월물_선물_피봇 == 0:
                선물_피봇 = 근월물_선물_종가
            else:
                선물_피봇 = 근월물_선물_피봇

            if 근월물_선물_시가 == 0:
                선물_시가 = 근월물_선물_종가
            else:
                선물_시가 = 근월물_선물_시가

            if 근월물_선물_저가 == 0:
                선물_저가 = 근월물_선물_종가
            else:
                선물_저가 = 근월물_선물_저가

            if 근월물_선물_고가 == 0:
                선물_고가 = 근월물_선물_종가
            else:
                선물_고가 = 근월물_선물_고가

            self.plot2_kp200_line[0].setValue(KP200_COREVAL[3])
            self.plot2_kp200_line[1].setValue(KP200_COREVAL[3])
            self.plot2_kp200_line[2].setValue(KP200_COREVAL[3])
            self.plot2_kp200_line[3].setValue(KP200_COREVAL[3])
            self.plot2_kp200_line[4].setValue(KP200_COREVAL[4])
            self.plot2_kp200_line[5].setValue(KP200_COREVAL[5])
            self.plot2_kp200_line[6].setValue(KP200_COREVAL[6])
            self.plot2_kp200_line[7].setValue(KP200_COREVAL[6])
            self.plot2_kp200_line[8].setValue(KP200_COREVAL[6])
            self.plot2_kp200_line[9].setValue(KP200_COREVAL[6])
            
            # 종가선 컬러를 살리기위한 임시방편            
            self.plot2_quote_remainder_ratio_base_line.setValue(선물_종가)
            self.plot2_nm_futures_quote_remainder_ratio_bottom_line.setValue(선물_종가)
            self.plot2_nm_futures_quote_remainder_ratio_upper_line.setValue(선물_종가)

            self.plot2_option_quote_remainder_ratio_bottom_line.setValue(선물_종가)
            self.plot2_option_quote_remainder_ratio_upper_line.setValue(선물_종가)

            for i in range(9):
                self.plot2_mv_line[i].setValue(선물_종가)

            self.plot2_center_val_lower_line.setValue(선물_종가)
            self.plot2_center_val_line.setValue(선물_종가)
            self.plot2_center_val_upper_line.setValue(선물_종가)

            self.plot2_ovc_open_line.setValue(선물_종가)
            self.plot2_ovc_jl_line.setValue(선물_종가)
            self.plot2_ovc_jh_line.setValue(선물_종가)
            self.plot2_ovc_pivot_line.setValue(선물_종가)
            self.plot2_ovc_low_line.setValue(선물_종가)
            self.plot2_ovc_high_line.setValue(선물_종가)
            self.plot2_ovc_close_line.setValue(선물_종가)

            self.plot2_cci_plus_100_line.setValue(선물_종가)
            self.plot2_cci_minus_100_line.setValue(선물_종가)

            txt = ' {0} '.format(선물_전저)
            self.label_21.setText(txt) 
            self.plot2_fut_jl_line.setValue(선물_전저)
            
            txt = ' {0} '.format(선물_전고)
            self.label_22.setText(txt)
            self.plot2_fut_jh_line.setValue(선물_전고)
            
            txt = ' {0} '.format(선물_종가)
            self.label_23.setText(txt)
            self.plot2_fut_close_line.setValue(선물_종가)
            
            txt = ' {0} '.format(선물_피봇)
            self.label_24.setText(txt)
            self.plot2_fut_pivot_line.setValue(선물_피봇)

            txt = ' {0} '.format(선물_시가)
            self.label_25.setText(txt)
            self.plot2_fut_open_line.setValue(선물_시가)

            txt = ' {0} '.format(선물_저가)
            self.label_26.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_26.setText(txt)
            self.plot2_fut_low_line.setValue(선물_저가)
            
            self.label_27.setText(" 000.00 (전일대비, 등락율, 진폭), kp200 : 000.00 ")

            txt = ' {0} '.format(선물_고가)
            self.label_28.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_28.setText(txt)
            self.plot2_fut_high_line.setValue(선물_고가)
                    
        # 선옵잔량비
        elif comboindex2 == 3:

            self.label_21.setText(" - ")
            self.label_22.setText(" - ")
            self.label_23.setText(" - ")
            self.label_24.setText(" - ")
            self.label_25.setText(" - ")

            self.label_26.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_26.setText(" 풋잔량비 ")

            self.label_27.setText(" 선물잔량비 ")

            self.label_28.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_28.setText(" 콜잔량비 ")
            
            self.label_p2_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p2_2.setText(" BB Upper\n BB Middle\n BB Lower ")

            self.label_p2_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p2_3.setText(" PSAR\n MAMA ")

            self.label_p2_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p2_4.setText(" ONE EYE ")

            self.plot2_quote_remainder_ratio_base_line.setValue(1.0)
            self.plot2_nm_futures_quote_remainder_ratio_bottom_line.setValue(1.0)
            self.plot2_nm_futures_quote_remainder_ratio_upper_line.setValue(1.0)

            self.plot2_option_quote_remainder_ratio_bottom_line.setValue(1.0)
            self.plot2_option_quote_remainder_ratio_upper_line.setValue(1.0)

        # 선옵체결
        elif comboindex2 == 4:

            self.label_21.setText(" - ")
            self.label_22.setText(" - ")
            self.label_23.setText(" - ")
            self.label_24.setText(" - ")
            self.label_25.setText(" - ")

            self.label_26.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_26.setText(" 풋체결량 ")

            self.label_27.setText(" 선물체결량 ")

            self.label_28.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_28.setText(" 콜체결량 ")
            
            self.label_p2_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p2_2.setText(" BB Upper\n BB Middle\n BB Lower ")

            self.label_p2_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p2_3.setText(" PSAR\n MAMA ")

            self.label_p2_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p2_4.setText(" ONE EYE ")

        # 옵션가격
        elif comboindex2 == 5:

            self.label_21.setText(" 등가: 행사가 ")
            self.label_22.setText(" 시작 중심가 ")
            self.label_23.setText(" 중심가 하단 ")
            self.label_24.setText(" 중심가 상단 ")
            self.label_25.setText(" - ")
            self.label_26.setText(" 풋현재가 ")
            self.label_27.setText(" 중심가 ")
            self.label_28.setText(" 콜현재가 ")
            
            self.label_p2_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p2_2.setText(" BB Upper\n BB Middle\n BB Lower ")

            self.label_p2_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p2_3.setText(" PSAR\n MAMA ")

            self.label_p2_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p2_4.setText(" ONE EYE ")

            # 대맥점 표시
            self.plot2_mv_line[1].setValue(2.5)
            self.plot2_mv_line[2].setValue(3.5)
            self.plot2_mv_line[3].setValue(4.85)
            
            self.plot2_center_val_lower_line.setValue(옵션_중심가/GOLDEN_RATIO)
            self.plot2_center_val_line.setValue(옵션_중심가)
            self.plot2_center_val_upper_line.setValue(옵션_중심가*GOLDEN_RATIO)

        # 옵션잔량비   
        elif comboindex2 == 6:

            self.label_21.setText(" - ")
            self.label_22.setText(" - ")
            self.label_23.setText(" - ")
            self.label_24.setText(" - ")
            self.label_25.setText(" - ")
            
            self.label_26.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_26.setText(" 풋잔량비 ")

            self.label_27.setText(" - ")

            self.label_28.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_28.setText(" 콜잔량비 ")
            
            self.label_p2_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p2_2.setText(" BB Upper\n BB Middle\n BB Lower ")

            self.label_p2_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p2_3.setText(" PSAR\n MAMA ")

            self.label_p2_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p2_4.setText(" ONE EYE ")

            self.plot2_quote_remainder_ratio_base_line.setValue(1.0)
            self.plot2_nm_futures_quote_remainder_ratio_bottom_line.setValue(1.0)
            self.plot2_nm_futures_quote_remainder_ratio_upper_line.setValue(1.0)

            self.plot2_option_quote_remainder_ratio_bottom_line.setValue(1.0)
            self.plot2_option_quote_remainder_ratio_upper_line.setValue(1.0)     
        
        # 옵션미결
        elif comboindex2 == 7:

            self.label_21.setText(" - ")
            self.label_22.setText(" - ")
            self.label_23.setText(" - ")
            self.label_24.setText(" - ")
            self.label_25.setText(" - ")

            self.label_26.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_26.setText(" 풋미결 ")

            self.label_27.setText(" - ")

            self.label_28.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_28.setText(" 콜미결 ")
            
            self.label_p2_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p2_2.setText(" BB Upper\n BB Middle\n BB Lower ")

            self.label_p2_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p2_3.setText(" PSAR\n MAMA ")

            self.label_p2_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p2_4.setText(" ONE EYE ")

        # 등락율비
        elif comboindex2 == 8:

            self.label_21.setText(" - ")
            self.label_22.setText(" - ")
            self.label_23.setText(" - ")
            self.label_24.setText(" - ")

            self.label_25.setStyleSheet('background-color: lime; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_25.setText(" DOW등락율 ")

            self.label_26.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_26.setText(" 풋등락율 ")

            self.label_27.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_27.setText(" 선물등락율 ")

            self.label_28.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_28.setText(" 콜등락율 ")
            
            self.label_p2_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p2_2.setText(" BB Upper\n BB Middle\n BB Lower ")

            self.label_p2_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p2_3.setText(" PSAR\n MAMA ")

            self.label_p2_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p2_4.setText(" ONE EYE ")
        
        # 수급종합
        elif comboindex2 == 10:

            self.label_21.setText(" - ")
            self.label_22.setText(" - ")
            self.label_23.setText(" - ")
            self.label_24.setText(" - ")
            self.label_25.setText(" - ")

            self.label_26.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_26.setText(" Prog/F.S ")

            self.label_27.setText(" 선물체결량 ")

            self.label_28.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_28.setText(" S.S/F.F ")

        # 외인수급
        elif comboindex2 == 11:

            pass
            '''
            self.label_21.setText(" - ")
            self.label_22.setText(" - ")
            self.label_23.setText(" - ")
            self.label_24.setText(" - ")
            self.label_25.setText(" - ")

            self.label_26.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_26.setText(" 외인현물 ")

            self.label_27.setText(" 선물체결량 ")

            self.label_28.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_28.setText(" 외인선물 ")
            '''

        # SP500
        elif comboindex2 == 13:

            if SP500_전저 == 0:
                sp500_전저 = SP500_전일종가
            else:
                sp500_전저 = SP500_전저

            if SP500_전고 == 0:
                sp500_전고 = SP500_전일종가
            else:
                sp500_전고 = SP500_전고              

            if SP500_피봇 == 0:
                sp500_피봇 = SP500_전일종가
            else:
                sp500_피봇 = SP500_피봇            

            if SP500_시가 == 0:
                sp500_시가 = SP500_전일종가
            else:
                sp500_시가 = SP500_시가

            if SP500_저가 == 0:
                sp500_저가 = SP500_전일종가
            else:
                sp500_저가 = SP500_저가

            if SP500_고가 == 0:
                sp500_고가 = SP500_전일종가
            else:
                sp500_고가 = SP500_고가

            self.plot2_quote_remainder_ratio_base_line.setValue(SP500_전일종가)
            self.plot2_nm_futures_quote_remainder_ratio_bottom_line.setValue(SP500_전일종가)
            self.plot2_nm_futures_quote_remainder_ratio_upper_line.setValue(SP500_전일종가)

            self.plot2_option_quote_remainder_ratio_bottom_line.setValue(SP500_전일종가)
            self.plot2_option_quote_remainder_ratio_upper_line.setValue(SP500_전일종가)
            
            for i in range(10):
                self.plot2_kp200_line[i].setValue(SP500_전일종가)

            for i in range(9):
                self.plot2_mv_line[i].setValue(SP500_전일종가)

            self.plot2_center_val_lower_line.setValue(SP500_전일종가)
            self.plot2_center_val_line.setValue(SP500_전일종가)
            self.plot2_center_val_upper_line.setValue(SP500_전일종가)
            
            self.plot2_fut_jl_line.setValue(SP500_전일종가)
            self.plot2_fut_jh_line.setValue(SP500_전일종가)
            self.plot2_fut_close_line.setValue(SP500_전일종가)
            self.plot2_fut_pivot_line.setValue(SP500_전일종가)
            self.plot2_fut_open_line.setValue(SP500_전일종가)
            self.plot2_fut_low_line.setValue(SP500_전일종가)
            self.plot2_fut_high_line.setValue(SP500_전일종가)

            self.plot2_cci_plus_100_line.setValue(SP500_전일종가)
            self.plot2_cci_minus_100_line.setValue(SP500_전일종가)
                
            txt = ' {0} '.format(format(sp500_전저, ','))
            self.label_21.setText(txt)
            self.plot2_ovc_jl_line.setValue(sp500_전저)

            txt = ' {0} '.format(format(sp500_전고, ','))
            self.label_22.setText(txt)
            self.plot2_ovc_jh_line.setValue(sp500_전고)
            
            txt = ' {0} '.format(format(SP500_전일종가, ','))
            self.label_23.setText(txt)
            self.plot2_ovc_close_line.setValue(SP500_전일종가)

            txt = ' {0} '.format(format(sp500_피봇, ','))
            self.label_24.setText(txt)
            self.plot2_ovc_pivot_line.setValue(sp500_피봇)
            
            txt = ' {0} '.format(format(sp500_시가, ','))
            self.label_25.setText(txt)
            self.plot2_ovc_open_line.setValue(sp500_시가)

            txt = ' {0} '.format(format(sp500_저가, ','))
            self.label_26.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_26.setText(txt)
            self.plot2_ovc_low_line.setValue(sp500_저가)

            self.label_27.setText(" 0,000.00 (전일대비, 등락율, 진폭) ")

            txt = ' {0} '.format(format(sp500_고가, ','))
            self.label_28.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_28.setText(txt)
            self.plot2_ovc_high_line.setValue(sp500_고가)

        # DOW
        elif comboindex2 == 14:

            if DOW_전저 == 0:
                dow_전저 = DOW_전일종가
            else:
                dow_전저 = DOW_전저

            if DOW_전고 == 0:
                dow_전고 = DOW_전일종가
            else:
                dow_전고 = DOW_전고

            if DOW_피봇 == 0:
                dow_피봇 = DOW_전일종가
            else:
                dow_피봇 = DOW_피봇

            if DOW_시가 == 0:
                dow_시가 = DOW_전일종가
            else:
                dow_시가 = DOW_시가

            if DOW_저가 == 0:
                dow_저가 = DOW_전일종가
            else:
                dow_저가 = DOW_저가

            if DOW_고가 == 0:
                dow_고가 = DOW_전일종가
            else:
                dow_고가 = DOW_고가

            self.plot2_quote_remainder_ratio_base_line.setValue(DOW_전일종가)
            self.plot2_nm_futures_quote_remainder_ratio_bottom_line.setValue(DOW_전일종가)
            self.plot2_nm_futures_quote_remainder_ratio_upper_line.setValue(DOW_전일종가)

            self.plot2_option_quote_remainder_ratio_bottom_line.setValue(DOW_전일종가)
            self.plot2_option_quote_remainder_ratio_upper_line.setValue(DOW_전일종가)
            
            for i in range(10):
                self.plot2_kp200_line[i].setValue(DOW_전일종가)

            for i in range(9):
                self.plot2_mv_line[i].setValue(DOW_전일종가)

            self.plot2_center_val_lower_line.setValue(DOW_전일종가)
            self.plot2_center_val_line.setValue(DOW_전일종가)
            self.plot2_center_val_upper_line.setValue(DOW_전일종가)
            
            self.plot2_fut_jl_line.setValue(DOW_전일종가)
            self.plot2_fut_jh_line.setValue(DOW_전일종가)
            self.plot2_fut_close_line.setValue(DOW_전일종가)
            self.plot2_fut_pivot_line.setValue(DOW_전일종가)
            self.plot2_fut_open_line.setValue(DOW_전일종가)
            self.plot2_fut_low_line.setValue(DOW_전일종가)
            self.plot2_fut_high_line.setValue(DOW_전일종가)

            self.plot2_cci_plus_100_line.setValue(DOW_전일종가)
            self.plot2_cci_minus_100_line.setValue(DOW_전일종가)
                
            txt = ' {0} '.format(format(dow_전저, ','))
            self.label_21.setText(txt)
            self.plot2_ovc_jl_line.setValue(dow_전저)

            txt = ' {0} '.format(format(dow_전고, ','))
            self.label_22.setText(txt)
            self.plot2_ovc_jh_line.setValue(dow_전고)
            
            txt = ' {0} '.format(format(DOW_전일종가, ','))
            self.label_23.setText(txt)
            self.plot2_ovc_close_line.setValue(DOW_전일종가)

            txt = ' {0} '.format(format(dow_피봇, ','))
            self.label_24.setText(txt)
            self.plot2_ovc_pivot_line.setValue(dow_피봇)
            
            txt = ' {0} '.format(format(dow_시가, ','))
            self.label_25.setText(txt)
            self.plot2_ovc_open_line.setValue(dow_시가)

            txt = ' {0} '.format(format(dow_저가, ','))
            self.label_26.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_26.setText(txt)
            self.plot2_ovc_low_line.setValue(dow_저가)

            self.label_27.setText(" 00,000 (전일대비, 등락율, 진폭) ")

            txt = ' {0} '.format(format(dow_고가, ','))
            self.label_28.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_28.setText(txt)
            self.plot2_ovc_high_line.setValue(dow_고가)

        # NASDAQ
        elif comboindex2 == 15:

            if NASDAQ_전저 == 0:
                nasdaq_전저 = NASDAQ_전일종가
            else:
                nasdaq_전저 = NASDAQ_전저

            if NASDAQ_전고 == 0:
                nasdaq_전고 = NASDAQ_전일종가
            else:
                nasdaq_전고 = NASDAQ_전고

            if NASDAQ_피봇 == 0:
                nasdaq_피봇 = NASDAQ_전일종가
            else:
                nasdaq_피봇 = NASDAQ_피봇

            if NASDAQ_시가 == 0:
                nasdaq_시가 = NASDAQ_전일종가
            else:
                nasdaq_시가 = NASDAQ_시가

            if NASDAQ_저가 == 0:
                nasdaq_저가 = NASDAQ_전일종가
            else:
                nasdaq_저가 = NASDAQ_저가

            if NASDAQ_고가 == 0:
                nasdaq_고가 = NASDAQ_전일종가
            else:
                nasdaq_고가 = NASDAQ_고가

            self.plot2_quote_remainder_ratio_base_line.setValue(NASDAQ_전일종가)
            self.plot2_nm_futures_quote_remainder_ratio_bottom_line.setValue(NASDAQ_전일종가)
            self.plot2_nm_futures_quote_remainder_ratio_upper_line.setValue(NASDAQ_전일종가)

            self.plot2_option_quote_remainder_ratio_bottom_line.setValue(NASDAQ_전일종가)
            self.plot2_option_quote_remainder_ratio_upper_line.setValue(NASDAQ_전일종가)
            
            for i in range(10):
                self.plot2_kp200_line[i].setValue(NASDAQ_전일종가)

            for i in range(9):
                self.plot2_mv_line[i].setValue(NASDAQ_전일종가)

            self.plot2_center_val_lower_line.setValue(NASDAQ_전일종가)
            self.plot2_center_val_line.setValue(NASDAQ_전일종가)
            self.plot2_center_val_upper_line.setValue(NASDAQ_전일종가)
            
            self.plot2_fut_jl_line.setValue(NASDAQ_전일종가)
            self.plot2_fut_jh_line.setValue(NASDAQ_전일종가)
            self.plot2_fut_close_line.setValue(NASDAQ_전일종가)
            self.plot2_fut_pivot_line.setValue(NASDAQ_전일종가)
            self.plot2_fut_open_line.setValue(NASDAQ_전일종가)
            self.plot2_fut_low_line.setValue(NASDAQ_전일종가)
            self.plot2_fut_high_line.setValue(NASDAQ_전일종가)

            self.plot2_cci_plus_100_line.setValue(NASDAQ_전일종가)
            self.plot2_cci_minus_100_line.setValue(NASDAQ_전일종가)
            
            txt = ' {0} '.format(format(nasdaq_전저, ','))
            self.label_21.setText(txt)
            self.plot2_ovc_jl_line.setValue(nasdaq_전저)

            txt = ' {0} '.format(format(nasdaq_전고, ','))
            self.label_22.setText(txt)
            self.plot2_ovc_jh_line.setValue(nasdaq_전고)
            
            txt = ' {0} '.format(format(NASDAQ_전일종가, ','))
            self.label_23.setText(txt)
            self.plot2_ovc_close_line.setValue(NASDAQ_전일종가)

            txt = ' {0} '.format(format(nasdaq_피봇, ','))
            self.label_24.setText(txt)
            self.plot2_ovc_pivot_line.setValue(nasdaq_피봇)
            
            txt = ' {0} '.format(format(nasdaq_시가, ','))
            self.label_25.setText(txt)
            self.plot2_ovc_open_line.setValue(nasdaq_시가)

            txt = ' {0} '.format(format(nasdaq_저가, ','))
            self.label_26.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_26.setText(txt)
            self.plot2_ovc_low_line.setValue(nasdaq_저가)

            self.label_27.setText(" 0,000.00 (전일대비, 등락율, 진폭) ")

            txt = ' {0} '.format(format(nasdaq_고가, ','))
            self.label_28.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_28.setText(txt)
            self.plot2_ovc_high_line.setValue(nasdaq_고가)            

        elif comboindex2 == 16:

            if HANGSENG_전저 == 0:
                hsi_전저 = HANGSENG_전일종가
            else:
                hsi_전저 = HANGSENG_전저

            if HANGSENG_전고 == 0:
                hsi_전고 = HANGSENG_전일종가
            else:
                hsi_전고 = HANGSENG_전고

            if HANGSENG_피봇 == 0:
                hsi_피봇 = HANGSENG_전일종가
            else:
                hsi_피봇 = HANGSENG_피봇

            if HANGSENG_시가 == 0:
                hsi_시가 = HANGSENG_전일종가
            else:
                hsi_시가 = HANGSENG_시가

            if HANGSENG_저가 == 0:
                hsi_저가 = HANGSENG_전일종가
            else:
                hsi_저가 = HANGSENG_저가

            if HANGSENG_고가 == 0:
                hsi_고가 = HANGSENG_전일종가
            else:
                hsi_고가 = HANGSENG_고가

            self.plot2_quote_remainder_ratio_base_line.setValue(HANGSENG_전일종가)
            self.plot2_nm_futures_quote_remainder_ratio_bottom_line.setValue(HANGSENG_전일종가)
            self.plot2_nm_futures_quote_remainder_ratio_upper_line.setValue(HANGSENG_전일종가)

            self.plot2_option_quote_remainder_ratio_bottom_line.setValue(HANGSENG_전일종가)
            self.plot2_option_quote_remainder_ratio_upper_line.setValue(HANGSENG_전일종가)
            
            for i in range(10):
                self.plot2_kp200_line[i].setValue(HANGSENG_전일종가)

            for i in range(9):
                self.plot2_mv_line[i].setValue(HANGSENG_전일종가)

            self.plot2_center_val_lower_line.setValue(HANGSENG_전일종가)
            self.plot2_center_val_line.setValue(HANGSENG_전일종가)
            self.plot2_center_val_upper_line.setValue(HANGSENG_전일종가)
            
            self.plot2_fut_jl_line.setValue(HANGSENG_전일종가)
            self.plot2_fut_jh_line.setValue(HANGSENG_전일종가)
            self.plot2_fut_close_line.setValue(HANGSENG_전일종가)
            self.plot2_fut_pivot_line.setValue(HANGSENG_전일종가)
            self.plot2_fut_open_line.setValue(HANGSENG_전일종가)
            self.plot2_fut_low_line.setValue(HANGSENG_전일종가)
            self.plot2_fut_high_line.setValue(HANGSENG_전일종가)

            self.plot2_cci_plus_100_line.setValue(HANGSENG_전일종가)
            self.plot2_cci_minus_100_line.setValue(HANGSENG_전일종가)
                
            txt = ' {0} '.format(format(hsi_전저, ','))
            self.label_21.setText(txt)
            self.plot2_ovc_jl_line.setValue(hsi_전저)

            txt = ' {0} '.format(format(hsi_전고, ','))
            self.label_22.setText(txt)
            self.plot2_ovc_jh_line.setValue(hsi_전고)
            
            txt = ' {0} '.format(format(HANGSENG_전일종가, ','))
            self.label_23.setText(txt)
            self.plot2_ovc_close_line.setValue(HANGSENG_전일종가)

            txt = ' {0} '.format(format(hsi_피봇, ','))
            self.label_24.setText(txt)
            self.plot2_ovc_pivot_line.setValue(hsi_피봇)
            
            txt = ' {0} '.format(format(hsi_시가, ','))
            self.label_25.setText(txt)
            self.plot2_ovc_open_line.setValue(hsi_시가)

            txt = ' {0} '.format(format(hsi_저가, ','))
            self.label_26.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_26.setText(txt)
            self.plot2_ovc_low_line.setValue(hsi_저가)

            self.label_27.setText(" 00.00 (전일대비, 등락율, 진폭) ")

            txt = ' {0} '.format(format(hsi_고가, ','))
            self.label_28.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_28.setText(txt)
            self.plot2_ovc_high_line.setValue(hsi_고가)

        # WTI  
        elif comboindex2 == 17:

            if WTI_전저 == 0:
                wti_전저 = WTI_전일종가
            else:
                wti_전저 = WTI_전저

            if WTI_전고 == 0:
                wti_전고 = WTI_전일종가
            else:
                wti_전고 = WTI_전고

            if WTI_피봇 == 0:
                wti_피봇 = WTI_전일종가
            else:
                wti_피봇 = WTI_피봇

            if WTI_시가 == 0:
                wti_시가 = WTI_전일종가
            else:
                wti_시가 = WTI_시가

            if WTI_저가 == 0:
                wti_저가 = WTI_전일종가
            else:
                wti_저가 = WTI_저가

            if WTI_고가 == 0:
                wti_고가 = WTI_전일종가
            else:
                wti_고가 = WTI_고가

            self.plot2_quote_remainder_ratio_base_line.setValue(WTI_전일종가)
            self.plot2_nm_futures_quote_remainder_ratio_bottom_line.setValue(WTI_전일종가)
            self.plot2_nm_futures_quote_remainder_ratio_upper_line.setValue(WTI_전일종가)

            self.plot2_option_quote_remainder_ratio_bottom_line.setValue(WTI_전일종가)
            self.plot2_option_quote_remainder_ratio_upper_line.setValue(WTI_전일종가)
            
            for i in range(10):
                self.plot2_kp200_line[i].setValue(WTI_전일종가)

            for i in range(9):
                self.plot2_mv_line[i].setValue(WTI_전일종가)

            self.plot2_center_val_lower_line.setValue(WTI_전일종가)
            self.plot2_center_val_line.setValue(WTI_전일종가)
            self.plot2_center_val_upper_line.setValue(WTI_전일종가)
            
            self.plot2_fut_jl_line.setValue(WTI_전일종가)
            self.plot2_fut_jh_line.setValue(WTI_전일종가)
            self.plot2_fut_close_line.setValue(WTI_전일종가)
            self.plot2_fut_pivot_line.setValue(WTI_전일종가)
            self.plot2_fut_open_line.setValue(WTI_전일종가)
            self.plot2_fut_low_line.setValue(WTI_전일종가)
            self.plot2_fut_high_line.setValue(WTI_전일종가)

            self.plot2_cci_plus_100_line.setValue(WTI_전일종가)
            self.plot2_cci_minus_100_line.setValue(WTI_전일종가)
                
            txt = ' {0} '.format(format(wti_전저, ','))
            self.label_21.setText(txt)
            self.plot2_ovc_jl_line.setValue(wti_전저)

            txt = ' {0} '.format(format(wti_전고, ','))
            self.label_22.setText(txt)
            self.plot2_ovc_jh_line.setValue(wti_전고)
            
            txt = ' {0} '.format(format(WTI_전일종가, ','))
            self.label_23.setText(txt)
            self.plot2_ovc_close_line.setValue(WTI_전일종가)

            txt = ' {0} '.format(format(wti_피봇, ','))
            self.label_24.setText(txt)
            self.plot2_ovc_pivot_line.setValue(wti_피봇)
            
            txt = ' {0} '.format(format(wti_시가, ','))
            self.label_25.setText(txt)
            self.plot2_ovc_open_line.setValue(wti_시가)

            txt = ' {0} '.format(format(wti_저가, ','))
            self.label_26.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_26.setText(txt)
            self.plot2_ovc_low_line.setValue(wti_저가)

            self.label_27.setText(" 00.00 (전일대비, 등락율, 진폭) ")

            txt = ' {0} '.format(format(wti_고가, ','))
            self.label_28.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_28.setText(txt)
            self.plot2_ovc_high_line.setValue(wti_고가)            
        
        elif comboindex2 == 18:

            if GOLD_전저 == 0:
                gold_전저 = GOLD_전일종가
            else:
                gold_전저 = GOLD_전저

            if GOLD_전고 == 0:
                gold_전고 = GOLD_전일종가
            else:
                gold_전고 = GOLD_전고

            if GOLD_피봇 == 0:
                gold_피봇 = GOLD_전일종가
            else:
                gold_피봇 = GOLD_피봇

            if GOLD_시가 == 0:
                gold_시가 = GOLD_전일종가
            else:
                gold_시가 = GOLD_시가

            if GOLD_저가 == 0:
                gold_저가 = GOLD_전일종가
            else:
                gold_저가 = GOLD_저가

            if GOLD_고가 == 0:
                gold_고가 = GOLD_전일종가
            else:
                gold_고가 = GOLD_고가

            self.plot2_quote_remainder_ratio_base_line.setValue(GOLD_전일종가)
            self.plot2_nm_futures_quote_remainder_ratio_bottom_line.setValue(GOLD_전일종가)
            self.plot2_nm_futures_quote_remainder_ratio_upper_line.setValue(GOLD_전일종가)

            self.plot2_option_quote_remainder_ratio_bottom_line.setValue(GOLD_전일종가)
            self.plot2_option_quote_remainder_ratio_upper_line.setValue(GOLD_전일종가)
            
            for i in range(10):
                self.plot2_kp200_line[i].setValue(GOLD_전일종가)

            for i in range(9):
                self.plot2_mv_line[i].setValue(GOLD_전일종가)

            self.plot2_center_val_lower_line.setValue(GOLD_전일종가)
            self.plot2_center_val_line.setValue(GOLD_전일종가)
            self.plot2_center_val_upper_line.setValue(GOLD_전일종가)
            
            self.plot2_fut_jl_line.setValue(GOLD_전일종가)
            self.plot2_fut_jh_line.setValue(GOLD_전일종가)
            self.plot2_fut_close_line.setValue(GOLD_전일종가)
            self.plot2_fut_pivot_line.setValue(GOLD_전일종가)
            self.plot2_fut_open_line.setValue(GOLD_전일종가)
            self.plot2_fut_low_line.setValue(GOLD_전일종가)
            self.plot2_fut_high_line.setValue(GOLD_전일종가)

            self.plot2_cci_plus_100_line.setValue(GOLD_전일종가)
            self.plot2_cci_minus_100_line.setValue(GOLD_전일종가)
                
            txt = ' {0} '.format(format(gold_전저, ','))
            self.label_21.setText(txt)
            self.plot2_ovc_jl_line.setValue(gold_전저)

            txt = ' {0} '.format(format(gold_전고, ','))
            self.label_22.setText(txt)
            self.plot2_ovc_jh_line.setValue(gold_전고)
            
            txt = ' {0} '.format(format(GOLD_전일종가, ','))
            self.label_23.setText(txt)
            self.plot2_ovc_close_line.setValue(GOLD_전일종가)

            txt = ' {0} '.format(format(gold_피봇, ','))
            self.label_24.setText(txt)
            self.plot2_ovc_pivot_line.setValue(gold_피봇)
            
            txt = ' {0} '.format(format(gold_시가, ','))
            self.label_25.setText(txt)
            self.plot2_ovc_open_line.setValue(gold_시가)

            txt = ' {0} '.format(format(gold_저가, ','))
            self.label_26.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_26.setText(txt)
            self.plot2_ovc_low_line.setValue(gold_저가)

            self.label_27.setText(" 00.00 (전일대비, 등락율, 진폭) ")

            txt = ' {0} '.format(format(gold_고가, ','))
            self.label_28.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_28.setText(txt)
            self.plot2_ovc_high_line.setValue(gold_고가)

        elif comboindex2 == 19:

            if EURO_전저 == 0:
                euro_전저 = EURO_전일종가
            else:
                euro_전저 = EURO_전저

            if EURO_전고 == 0:
                euro_전고 = EURO_전일종가
            else:
                euro_전고 = EURO_전고

            if EURO_피봇 == 0:
                euro_피봇 = EURO_전일종가
            else:
                euro_피봇 = EURO_피봇

            if EURO_시가 == 0:
                euro_시가 = EURO_전일종가
            else:
                euro_시가 = EURO_시가

            if EURO_저가 == 0:
                euro_저가 = EURO_전일종가
            else:
                euro_저가 = EURO_저가

            if EURO_고가 == 0:
                euro_고가 = EURO_전일종가
            else:
                euro_고가 = EURO_고가

            self.plot2_quote_remainder_ratio_base_line.setValue(EURO_전일종가)
            self.plot2_nm_futures_quote_remainder_ratio_bottom_line.setValue(EURO_전일종가)
            self.plot2_nm_futures_quote_remainder_ratio_upper_line.setValue(EURO_전일종가)

            self.plot2_option_quote_remainder_ratio_bottom_line.setValue(EURO_전일종가)
            self.plot2_option_quote_remainder_ratio_upper_line.setValue(EURO_전일종가)
            
            for i in range(10):
                self.plot2_kp200_line[i].setValue(EURO_전일종가)

            for i in range(9):
                self.plot2_mv_line[i].setValue(EURO_전일종가)

            self.plot2_center_val_lower_line.setValue(EURO_전일종가)
            self.plot2_center_val_line.setValue(EURO_전일종가)
            self.plot2_center_val_upper_line.setValue(EURO_전일종가)
            
            self.plot2_fut_jl_line.setValue(EURO_전일종가)
            self.plot2_fut_jh_line.setValue(EURO_전일종가)
            self.plot2_fut_close_line.setValue(EURO_전일종가)
            self.plot2_fut_pivot_line.setValue(EURO_전일종가)
            self.plot2_fut_open_line.setValue(EURO_전일종가)
            self.plot2_fut_low_line.setValue(EURO_전일종가)
            self.plot2_fut_high_line.setValue(EURO_전일종가)

            self.plot2_cci_plus_100_line.setValue(EURO_전일종가)
            self.plot2_cci_minus_100_line.setValue(EURO_전일종가)
                
            txt = ' {0:.5f} '.format(euro_전저)
            self.label_21.setText(txt)
            self.plot2_ovc_jl_line.setValue(euro_전저)

            txt = ' {0:.5f} '.format(euro_전고)
            self.label_22.setText(txt)
            self.plot2_ovc_jh_line.setValue(euro_전고)
            
            txt = ' {0:.5f} '.format(EURO_전일종가)
            self.label_23.setText(txt)
            self.plot2_ovc_close_line.setValue(EURO_전일종가)

            txt = ' {0:.5f} '.format(euro_피봇)
            self.label_24.setText(txt)
            self.plot2_ovc_pivot_line.setValue(euro_피봇)
            
            txt = ' {0:.5f} '.format(euro_시가)
            self.label_25.setText(txt)
            self.plot2_ovc_open_line.setValue(euro_시가)

            txt = ' {0:.5f} '.format(euro_저가)
            self.label_26.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_26.setText(txt)
            self.plot2_ovc_low_line.setValue(euro_저가)

            self.label_27.setText(" 00.00 (전일대비, 등락율, 진폭) ")

            txt = ' {0:.5f} '.format(euro_고가)
            self.label_28.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_28.setText(txt)
            self.plot2_ovc_high_line.setValue(euro_고가)

        elif comboindex2 == 20:

            if YEN_전저 == 0:
                yen_전저 = YEN_전일종가
            else:
                yen_전저 = YEN_전저

            if YEN_전고 == 0:
                yen_전고 = YEN_전일종가
            else:
                yen_전고 = YEN_전고

            if YEN_피봇 == 0:
                yen_피봇 = YEN_전일종가
            else:
                yen_피봇 = YEN_피봇

            if YEN_시가 == 0:
                yen_시가 = YEN_전일종가
            else:
                yen_시가 = YEN_시가

            if YEN_저가 == 0:
                yen_저가 = YEN_전일종가
            else:
                yen_저가 = YEN_저가

            if YEN_고가 == 0:
                yen_고가 = YEN_전일종가
            else:
                yen_고가 = YEN_고가

            self.plot2_quote_remainder_ratio_base_line.setValue(YEN_전일종가)
            self.plot2_nm_futures_quote_remainder_ratio_bottom_line.setValue(YEN_전일종가)
            self.plot2_nm_futures_quote_remainder_ratio_upper_line.setValue(YEN_전일종가)

            self.plot2_option_quote_remainder_ratio_bottom_line.setValue(YEN_전일종가)
            self.plot2_option_quote_remainder_ratio_upper_line.setValue(YEN_전일종가)
            
            for i in range(10):
                self.plot2_kp200_line[i].setValue(YEN_전일종가)

            for i in range(9):
                self.plot2_mv_line[i].setValue(YEN_전일종가)

            self.plot2_center_val_lower_line.setValue(YEN_전일종가)
            self.plot2_center_val_line.setValue(YEN_전일종가)
            self.plot2_center_val_upper_line.setValue(YEN_전일종가)
            
            self.plot2_fut_jl_line.setValue(YEN_전일종가)
            self.plot2_fut_jh_line.setValue(YEN_전일종가)
            self.plot2_fut_close_line.setValue(YEN_전일종가)
            self.plot2_fut_pivot_line.setValue(YEN_전일종가)
            self.plot2_fut_open_line.setValue(YEN_전일종가)
            self.plot2_fut_low_line.setValue(YEN_전일종가)
            self.plot2_fut_high_line.setValue(YEN_전일종가)

            self.plot2_cci_plus_100_line.setValue(YEN_전일종가)
            self.plot2_cci_minus_100_line.setValue(YEN_전일종가)
                
            txt = ' {0} '.format(format(yen_전저, ','))
            self.label_21.setText(txt)
            self.plot2_ovc_jl_line.setValue(yen_전저)

            txt = ' {0} '.format(format(yen_전고, ','))
            self.label_22.setText(txt)
            self.plot2_ovc_jh_line.setValue(yen_전고)
            
            txt = ' {0} '.format(format(YEN_전일종가, ','))
            self.label_23.setText(txt)
            self.plot2_ovc_close_line.setValue(YEN_전일종가)

            txt = ' {0} '.format(format(yen_피봇, ','))
            self.label_24.setText(txt)
            self.plot2_ovc_pivot_line.setValue(yen_피봇)
            
            txt = ' {0} '.format(format(yen_시가, ','))
            self.label_25.setText(txt)
            self.plot2_ovc_open_line.setValue(yen_시가)

            txt = ' {0} '.format(format(yen_저가, ','))
            self.label_26.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_26.setText(txt)
            self.plot2_ovc_low_line.setValue(yen_저가)

            self.label_27.setText(" 00.00 (전일대비, 등락율, 진폭) ")

            txt = ' {0} '.format(format(yen_고가, ','))
            self.label_28.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_28.setText(txt)
            self.plot2_ovc_high_line.setValue(yen_고가)
        
        elif comboindex2 == 21:

            if ADI_전저 == 0:
                adi_전저 = ADI_전일종가
            else:
                adi_전저 = ADI_전저

            if ADI_전고 == 0:
                adi_전고 = ADI_전일종가
            else:
                adi_전고 = ADI_전고

            if ADI_피봇 == 0:
                adi_피봇 = ADI_전일종가
            else:
                adi_피봇 = ADI_피봇

            if ADI_시가 == 0:
                adi_시가 = ADI_전일종가
            else:
                adi_시가 = ADI_시가

            if ADI_저가 == 0:
                adi_저가 = ADI_전일종가
            else:
                adi_저가 = ADI_저가

            if ADI_고가 == 0:
                adi_고가 = ADI_전일종가
            else:
                adi_고가 = ADI_고가

            self.plot2_quote_remainder_ratio_base_line.setValue(ADI_전일종가)
            self.plot2_nm_futures_quote_remainder_ratio_bottom_line.setValue(ADI_전일종가)
            self.plot2_nm_futures_quote_remainder_ratio_upper_line.setValue(ADI_전일종가)

            self.plot2_option_quote_remainder_ratio_bottom_line.setValue(ADI_전일종가)
            self.plot2_option_quote_remainder_ratio_upper_line.setValue(ADI_전일종가)
            
            for i in range(10):
                self.plot2_kp200_line[i].setValue(ADI_전일종가)

            for i in range(9):
                self.plot2_mv_line[i].setValue(ADI_전일종가)

            self.plot2_center_val_lower_line.setValue(ADI_전일종가)
            self.plot2_center_val_line.setValue(ADI_전일종가)
            self.plot2_center_val_upper_line.setValue(ADI_전일종가)
            
            self.plot2_fut_jl_line.setValue(ADI_전일종가)
            self.plot2_fut_jh_line.setValue(ADI_전일종가)
            self.plot2_fut_close_line.setValue(ADI_전일종가)
            self.plot2_fut_pivot_line.setValue(ADI_전일종가)
            self.plot2_fut_open_line.setValue(ADI_전일종가)
            self.plot2_fut_low_line.setValue(ADI_전일종가)
            self.plot2_fut_high_line.setValue(ADI_전일종가)

            self.plot2_cci_plus_100_line.setValue(ADI_전일종가)
            self.plot2_cci_minus_100_line.setValue(ADI_전일종가)
                
            txt = ' {0:.5f} '.format(adi_전저)
            self.label_21.setText(txt)
            self.plot2_ovc_jl_line.setValue(adi_전저)

            txt = ' {0:.5f} '.format(adi_전고)
            self.label_22.setText(txt)
            self.plot2_ovc_jh_line.setValue(adi_전고)
            
            txt = ' {0:.5f} '.format(ADI_전일종가)
            self.label_23.setText(txt)
            self.plot2_ovc_close_line.setValue(ADI_전일종가)

            txt = ' {0:.5f} '.format(adi_피봇)
            self.label_24.setText(txt)
            self.plot2_ovc_pivot_line.setValue(adi_피봇)
            
            txt = ' {0:.5f} '.format(adi_시가)
            self.label_25.setText(txt)
            self.plot2_ovc_open_line.setValue(adi_시가)

            txt = ' {0:.5f} '.format(adi_저가)
            self.label_26.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_26.setText(txt)
            self.plot2_ovc_low_line.setValue(adi_저가)

            self.label_27.setText(" 00.00 (전일대비, 등락율, 진폭) ")

            txt = ' {0:.5f} '.format(adi_고가)
            self.label_28.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_28.setText(txt)
            self.plot2_ovc_high_line.setValue(adi_고가)
        else:
            pass

    def plot3_clear(self):

        # Line Clear
        self.plot3_fut_jl_line.setValue(0)
        self.plot3_fut_jh_line.setValue(0)
        self.plot3_fut_open_line.setValue(0)
        self.plot3_fut_close_line.setValue(0)
        self.plot3_fut_pivot_line.setValue(0)
        self.plot3_fut_low_line.setValue(0)
        self.plot3_fut_high_line.setValue(0)

        self.plot3_ovc_jl_line.setValue(0)
        self.plot3_ovc_jh_line.setValue(0)
        self.plot3_ovc_close_line.setValue(0)
        self.plot3_ovc_open_line.setValue(0)
        self.plot3_ovc_pivot_line.setValue(0)
        self.plot3_ovc_low_line.setValue(0)
        self.plot3_ovc_high_line.setValue(0)

        for i in range(10):
            self.plot3_kp200_line[i].setValue(0)

        for i in range(9):
            self.plot3_mv_line[i].setValue(0)        

        self.plot3_quote_remainder_ratio_base_line.setValue(0)
        self.plot3_nm_futures_quote_remainder_ratio_bottom_line.setValue(0)
        self.plot3_nm_futures_quote_remainder_ratio_upper_line.setValue(0)

        self.plot3_option_quote_remainder_ratio_bottom_line.setValue(0)
        self.plot3_option_quote_remainder_ratio_upper_line.setValue(0)

        self.plot3_center_val_lower_line.setValue(0)
        self.plot3_center_val_line.setValue(0)
        self.plot3_center_val_upper_line.setValue(0)

        # Fibonacci Retracements Line
        self.plot3_fibonacci_line1.setValue(0)
        self.plot3_fibonacci_line2.setValue(0)
        self.plot3_fibonacci_line3.setValue(0)
        self.plot3_fibonacci_line4.setValue(0)
        self.plot3_fibonacci_line5.setValue(0)

        # CCI Line
        self.plot3_cci_plus_100_line.setValue(0)
        self.plot3_cci_minus_100_line.setValue(0)

        # Curve Clear
        self.plot3_fut_cm_price_curve.clear()
        self.plot3_fut_nm_price_curve.clear()
        self.plot3_kp200_curve.clear()

        self.plot3_fut_cm_quote_remainder_ratio_curve.clear()
        self.plot3_fut_nm_quote_remainder_ratio_curve.clear()

        self.plot3_fut_volume_curve.clear()
        self.plot3_call_volume_curve.clear()
        self.plot3_put_volume_curve.clear()        

        self.plot3_center_val_curve.clear()

        for i in range(option_pairs_count):
            self.plot3_call_curve[i].clear()
            self.plot3_put_curve[i].clear()

        self.plot3_call_quote_curve.clear()
        self.plot3_put_quote_curve.clear()

        self.plot3_call_oi_curve.clear()
        self.plot3_put_oi_curve.clear()

        self.plot3_fut_cm_drate_curve.clear()
        self.plot3_fut_nm_drate_curve.clear()
        self.plot3_cme_drate_curve.clear()
        self.plot3_call_drate_curve.clear()
        self.plot3_put_drate_curve.clear()

        self.plot3_program_curve.clear()
        self.plot3_kospi_total_curve.clear()
        self.plot3_futures_foreigner_curve.clear()
        self.plot3_kospi_foreigner_curve.clear()

        self.plot3_sp500_curve.clear()
        self.plot3_dow_curve.clear()
        self.plot3_nasdaq_curve.clear()
        self.plot3_hsi_curve.clear()

        self.plot3_wti_curve.clear()
        self.plot3_gold_curve.clear()

        self.plot3_euro_curve.clear()
        self.plot3_yen_curve.clear()
        self.plot3_adi_curve.clear()

        self.plot3_bollinger_1st_upper_curve.clear()
        self.plot3_bollinger_1st_middle_curve.clear()
        self.plot3_bollinger_1st_lower_curve.clear()
        self.plot3_bollinger_2nd_upper_curve.clear()
        self.plot3_bollinger_2nd_middle_curve.clear()
        self.plot3_bollinger_2nd_lower_curve.clear()

        self.plot3_psar_curve.clear()

        self.plot3_mama_curve.clear()
        self.plot3_fama_curve.clear()
        #self.plot3_sslup_curve.clear()
        #self.plot3_ssldown_curve.clear()

        self.plot3_oe_conv_curve.clear()
        self.plot3_oe_base_curve.clear()
        self.plot3_span_a_curve.clear()
        self.plot3_span_b_curve.clear()
        self.plot3_lagging_span_curve.clear()

        self.plot3_futures_rsi_curve.clear()
        self.plot3_sp500_rsi_curve.clear()
        self.plot3_dow_rsi_curve.clear()
        self.plot3_nasdaq_rsi_curve.clear()
        self.plot3_hsi_rsi_curve.clear()
        self.plot3_wti_rsi_curve.clear()
        self.plot3_gold_rsi_curve.clear()
        self.plot3_euro_rsi_curve.clear()
        self.plot3_yen_rsi_curve.clear()
        self.plot3_adi_rsi_curve.clear()

        self.plot3_futures_cci1_curve.clear()
        self.plot3_sp500_cci1_curve.clear()
        self.plot3_dow_cci1_curve.clear()
        self.plot3_nasdaq_cci1_curve.clear()
        self.plot3_hsi_cci1_curve.clear()
        self.plot3_wti_cci1_curve.clear()
        self.plot3_gold_cci1_curve.clear()
        self.plot3_euro_cci1_curve.clear()
        self.plot3_yen_cci1_curve.clear()
        self.plot3_adi_cci1_curve.clear()

        self.plot3_futures_cci2_curve.clear()
        self.plot3_sp500_cci2_curve.clear()
        self.plot3_dow_cci2_curve.clear()
        self.plot3_nasdaq_cci2_curve.clear()
        self.plot3_hsi_cci2_curve.clear()
        self.plot3_wti_cci2_curve.clear()
        self.plot3_gold_cci2_curve.clear()
        self.plot3_euro_cci2_curve.clear()
        self.plot3_yen_cci2_curve.clear()
        self.plot3_adi_cci2_curve.clear()

        self.label_31.setText(" - ")
        self.label_32.setText(" - ")
        self.label_33.setText(" - ")
        self.label_34.setText(" - ")
        self.label_35.setText(" - ")
        self.label_36.setText(" - ")
        self.label_37.setText(" - ")
        self.label_38.setText(" - ")

        self.label_p3_1.setStyleSheet('background-color: lime; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_p3_1.setText(" 좌표 ")

        self.label_p3_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_p3_2.setText(" BB Upper\n BB Middle\n BB Lower ")

        self.label_p3_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_p3_3.setText(" PSAR\n MAMA ")

        self.label_p3_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_p3_4.setText(" ONE EYE ")

        txt = 'Plot3 Clear...\r'
        self.parent.textBrowser.append(txt)
    
    def cb3_selectionChanged(self):

        global comboindex3
        
        txt = self.comboBox3.currentText()
        comboindex3 = self.comboBox3.currentIndex()

        self.plot3_clear()

        if comboindex3 == 0:
            self.timer3.stop()

            txt = 'Plot3 Timer Stop...\r'
            self.parent.textBrowser.append(txt)
        else:
            if not self.timer3.isActive():

                start_time = timeit.default_timer()

                while True:

                    if not flag_screen_update_is_running:
                        self.timer3.start()
                        txt = 'Plot3 Timer Setting Done...\r'
                        self.parent.textBrowser.append(txt)
                        break

                    end_time = timeit.default_timer()

                    time_gap = (end_time - start_time) * 1000

                    if DayTime:
                        time_limit = 200
                    else:
                        time_limit = 100

                    if time_gap > time_limit:
                        self.timer3.start()
                        txt = 'Plot3 Timer Forced Setting Done...\r'
                        self.parent.textBrowser.append(txt)
                        break
            else:
                pass

        # 선물가격
        if comboindex3 == 2:

            if 근월물_선물_전저 == 0:
                선물_전저 = 근월물_선물_종가
            else:
                선물_전저 = 근월물_선물_전저

            if 근월물_선물_전고 == 0:
                선물_전고 = 근월물_선물_종가
            else:
                선물_전고 = 근월물_선물_전고

            선물_종가 = 근월물_선물_종가                

            if 근월물_선물_피봇 == 0:
                선물_피봇 = 근월물_선물_종가
            else:
                선물_피봇 = 근월물_선물_피봇

            if 근월물_선물_시가 == 0:
                선물_시가 = 근월물_선물_종가
            else:
                선물_시가 = 근월물_선물_시가

            if 근월물_선물_저가 == 0:
                선물_저가 = 근월물_선물_종가
            else:
                선물_저가 = 근월물_선물_저가

            if 근월물_선물_고가 == 0:
                선물_고가 = 근월물_선물_종가
            else:
                선물_고가 = 근월물_선물_고가
            
            self.plot3_kp200_line[0].setValue(KP200_COREVAL[3])
            self.plot3_kp200_line[1].setValue(KP200_COREVAL[3])
            self.plot3_kp200_line[2].setValue(KP200_COREVAL[3])
            self.plot3_kp200_line[3].setValue(KP200_COREVAL[3])
            self.plot3_kp200_line[4].setValue(KP200_COREVAL[4])
            self.plot3_kp200_line[5].setValue(KP200_COREVAL[5])
            self.plot3_kp200_line[6].setValue(KP200_COREVAL[6])
            self.plot3_kp200_line[7].setValue(KP200_COREVAL[6])
            self.plot3_kp200_line[8].setValue(KP200_COREVAL[6])
            self.plot3_kp200_line[9].setValue(KP200_COREVAL[6])
                        
            # 종가선 컬러를 살리기위한 임시방편            
            self.plot3_quote_remainder_ratio_base_line.setValue(선물_종가)
            self.plot3_nm_futures_quote_remainder_ratio_bottom_line.setValue(선물_종가)
            self.plot3_nm_futures_quote_remainder_ratio_upper_line.setValue(선물_종가)

            self.plot3_option_quote_remainder_ratio_bottom_line.setValue(선물_종가)
            self.plot3_option_quote_remainder_ratio_upper_line.setValue(선물_종가)

            for i in range(9):
                self.plot3_mv_line[i].setValue(선물_종가)

            self.plot3_center_val_lower_line.setValue(선물_종가)
            self.plot3_center_val_line.setValue(선물_종가)
            self.plot3_center_val_upper_line.setValue(선물_종가)

            self.plot3_ovc_open_line.setValue(선물_종가)
            self.plot3_ovc_jl_line.setValue(선물_종가)
            self.plot3_ovc_jh_line.setValue(선물_종가)
            self.plot3_ovc_pivot_line.setValue(선물_종가)
            self.plot3_ovc_low_line.setValue(선물_종가)
            self.plot3_ovc_high_line.setValue(선물_종가)
            self.plot3_ovc_close_line.setValue(선물_종가)

            self.plot3_cci_plus_100_line.setValue(선물_종가)
            self.plot3_cci_minus_100_line.setValue(선물_종가)

            txt = ' {0} '.format(선물_전저)
            self.label_31.setText(txt) 
            self.plot3_fut_jl_line.setValue(선물_전저)
            
            txt = ' {0} '.format(선물_전고)
            self.label_32.setText(txt)
            self.plot3_fut_jh_line.setValue(선물_전고)
            
            txt = ' {0} '.format(선물_종가)
            self.label_33.setText(txt)
            self.plot3_fut_close_line.setValue(선물_종가) 
            
            txt = ' {0} '.format(선물_피봇)
            self.label_34.setText(txt)
            self.plot3_fut_pivot_line.setValue(선물_피봇)

            txt = ' {0} '.format(선물_시가)
            self.label_35.setText(txt)
            self.plot3_fut_open_line.setValue(선물_시가)

            txt = ' {0} '.format(선물_저가)
            self.label_36.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_36.setText(txt)
            self.plot3_fut_low_line.setValue(선물_저가)
            
            self.label_37.setText(" 000.00 (전일대비, 등락율, 진폭), kp200 : 000.00 ")

            txt = ' {0} '.format(선물_고가)
            self.label_38.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_38.setText(txt)
            self.plot3_fut_high_line.setValue(선물_고가)
                    
        # 선옵잔량비
        elif comboindex3 == 3:

            self.label_31.setText(" - ")
            self.label_32.setText(" - ")
            self.label_33.setText(" - ")
            self.label_34.setText(" - ")
            self.label_35.setText(" - ")

            self.label_36.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_36.setText(" 풋잔량비 ")

            self.label_37.setText(" 선물잔량비 ")

            self.label_38.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_38.setText(" 콜잔량비 ")
            
            self.label_p3_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p3_2.setText(" BB Upper\n BB Middle\n BB Lower ")

            self.label_p3_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p3_3.setText(" PSAR\n MAMA ")

            self.label_p3_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p3_4.setText(" ONE EYE ")

            self.plot3_quote_remainder_ratio_base_line.setValue(1.0)
            self.plot3_nm_futures_quote_remainder_ratio_bottom_line.setValue(1.0)
            self.plot3_nm_futures_quote_remainder_ratio_upper_line.setValue(1.0)

            self.plot3_option_quote_remainder_ratio_bottom_line.setValue(1.0)
            self.plot3_option_quote_remainder_ratio_upper_line.setValue(1.0)

        # 선옵체결
        elif comboindex3 == 4:

            self.label_31.setText(" - ")
            self.label_32.setText(" - ")
            self.label_33.setText(" - ")
            self.label_34.setText(" - ")
            self.label_35.setText(" - ")

            self.label_36.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_36.setText(" 풋체결량 ")

            self.label_37.setText(" 선물체결량 ")

            self.label_38.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_38.setText(" 콜체결량 ")
            
            self.label_p3_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p3_2.setText(" BB Upper\n BB Middle\n BB Lower ")

            self.label_p3_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p3_3.setText(" PSAR\n MAMA ")

            self.label_p3_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p3_4.setText(" ONE EYE ")
        
        # 옵션가격
        elif comboindex3 == 5:

            self.label_31.setText(" 등가: 행사가 ")
            self.label_32.setText(" 시작 중심가 ")
            self.label_33.setText(" 중심가 하단 ")
            self.label_34.setText(" 중심가 상단 ")
            self.label_35.setText(" - ")
            self.label_36.setText(" 풋현재가 ")
            self.label_37.setText(" 중심가 ")
            self.label_38.setText(" 콜현재가 ")
            
            self.label_p3_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p3_2.setText(" BB Upper\n BB Middle\n BB Lower ")

            self.label_p3_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p3_3.setText(" PSAR\n MAMA ")

            self.label_p3_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p3_4.setText(" ONE EYE ")

            # 대맥점 표시
            self.plot3_mv_line[1].setValue(2.5)
            self.plot3_mv_line[2].setValue(3.5)
            self.plot3_mv_line[3].setValue(4.85)

            self.plot3_center_val_lower_line.setValue(옵션_중심가/GOLDEN_RATIO)
            self.plot3_center_val_line.setValue(옵션_중심가)
            self.plot3_center_val_upper_line.setValue(옵션_중심가*GOLDEN_RATIO)

        # 옵션잔량비   
        elif comboindex3 == 6:

            self.label_31.setText(" - ")
            self.label_32.setText(" - ")
            self.label_33.setText(" - ")
            self.label_34.setText(" - ")
            self.label_35.setText(" - ")

            self.label_36.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_36.setText(" 풋잔량비 ")

            self.label_37.setText(" - ")

            self.label_38.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_38.setText(" 콜잔량비 ")
            
            self.label_p3_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p3_2.setText(" BB Upper\n BB Middle\n BB Lower ")

            self.label_p3_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p3_3.setText(" PSAR\n MAMA ")

            self.label_p3_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p3_4.setText(" ONE EYE ")

            self.plot3_quote_remainder_ratio_base_line.setValue(1.0)
            self.plot3_nm_futures_quote_remainder_ratio_bottom_line.setValue(1.0)
            self.plot3_nm_futures_quote_remainder_ratio_upper_line.setValue(1.0)

            self.plot3_option_quote_remainder_ratio_bottom_line.setValue(1.0)
            self.plot3_option_quote_remainder_ratio_upper_line.setValue(1.0)       
        
        # 옵션미결
        elif comboindex3 == 7:

            self.label_31.setText(" - ")
            self.label_32.setText(" - ")
            self.label_33.setText(" - ")
            self.label_34.setText(" - ")
            self.label_35.setText(" - ")

            self.label_36.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_36.setText(" 풋미결 ")

            self.label_37.setText(" - ")

            self.label_38.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_38.setText(" 콜미결 ")
            
            self.label_p3_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p3_2.setText(" BB Upper\n BB Middle\n BB Lower ")

            self.label_p3_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p3_3.setText(" PSAR\n MAMA ")

            self.label_p3_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p3_4.setText(" ONE EYE ")
        
        # 등락율비
        elif comboindex3 == 8:

            self.label_31.setText(" - ")
            self.label_32.setText(" - ")
            self.label_33.setText(" - ")
            self.label_34.setText(" - ")

            self.label_35.setStyleSheet('background-color: lime; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_35.setText(" DOW등락율 ")

            self.label_36.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_36.setText(" 풋등락율 ")

            self.label_37.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_37.setText(" 선물등락율 ")

            self.label_38.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_38.setText(" 콜등락율 ")
            
            self.label_p3_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p3_2.setText(" BB Upper\n BB Middle\n BB Lower ")

            self.label_p3_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p3_3.setText(" PSAR\n MAMA ")

            self.label_p3_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p3_4.setText(" ONE EYE ")
        
        # 수급종합
        elif comboindex3 == 10:

            self.label_31.setText(" - ")
            self.label_32.setText(" - ")
            self.label_33.setText(" - ")
            self.label_34.setText(" - ")
            self.label_35.setText(" - ")

            self.label_36.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_36.setText(" Prog/F.S ")

            self.label_37.setText(" 선물체결량 ")

            self.label_38.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_38.setText(" S.S/F.F ")

        # 외인수급
        elif comboindex3 == 11:

            pass
            '''
            self.label_31.setText(" - ")
            self.label_32.setText(" - ")
            self.label_33.setText(" - ")
            self.label_34.setText(" - ")
            self.label_35.setText(" - ")

            self.label_36.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_36.setText(" 외인현물 ")

            self.label_37.setText(" 선물체결량 ")

            self.label_38.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_38.setText(" 외인선물 ")
            '''

        # SP500
        elif comboindex3 == 13:

            if SP500_전저 == 0:
                sp500_전저 = SP500_전일종가
            else:
                sp500_전저 = SP500_전저

            if SP500_전고 == 0:
                sp500_전고 = SP500_전일종가
            else:
                sp500_전고 = SP500_전고              

            if SP500_피봇 == 0:
                sp500_피봇 = SP500_전일종가
            else:
                sp500_피봇 = SP500_피봇            

            if SP500_시가 == 0:
                sp500_시가 = SP500_전일종가
            else:
                sp500_시가 = SP500_시가

            if SP500_저가 == 0:
                sp500_저가 = SP500_전일종가
            else:
                sp500_저가 = SP500_저가

            if SP500_고가 == 0:
                sp500_고가 = SP500_전일종가
            else:
                sp500_고가 = SP500_고가

            self.plot3_quote_remainder_ratio_base_line.setValue(SP500_전일종가)
            self.plot3_nm_futures_quote_remainder_ratio_bottom_line.setValue(SP500_전일종가)
            self.plot3_nm_futures_quote_remainder_ratio_upper_line.setValue(SP500_전일종가)

            self.plot3_option_quote_remainder_ratio_bottom_line.setValue(SP500_전일종가)
            self.plot3_option_quote_remainder_ratio_upper_line.setValue(SP500_전일종가)
            
            for i in range(10):
                self.plot3_kp200_line[i].setValue(SP500_전일종가)

            for i in range(9):
                self.plot3_mv_line[i].setValue(SP500_전일종가)

            self.plot3_center_val_lower_line.setValue(SP500_전일종가)
            self.plot3_center_val_line.setValue(SP500_전일종가)
            self.plot3_center_val_upper_line.setValue(SP500_전일종가)
            
            self.plot3_fut_jl_line.setValue(SP500_전일종가)
            self.plot3_fut_jh_line.setValue(SP500_전일종가)
            self.plot3_fut_close_line.setValue(SP500_전일종가)
            self.plot3_fut_pivot_line.setValue(SP500_전일종가)
            self.plot3_fut_open_line.setValue(SP500_전일종가)
            self.plot3_fut_low_line.setValue(SP500_전일종가)
            self.plot3_fut_high_line.setValue(SP500_전일종가)

            self.plot3_cci_plus_100_line.setValue(SP500_전일종가)
            self.plot3_cci_minus_100_line.setValue(SP500_전일종가)
                
            txt = ' {0} '.format(format(sp500_전저, ','))
            self.label_31.setText(txt)
            self.plot3_ovc_jl_line.setValue(sp500_전저)

            txt = ' {0} '.format(format(sp500_전고, ','))
            self.label_32.setText(txt)
            self.plot3_ovc_jh_line.setValue(sp500_전고)
            
            txt = ' {0} '.format(format(SP500_전일종가, ','))
            self.label_33.setText(txt)
            self.plot3_ovc_close_line.setValue(SP500_전일종가)

            txt = ' {0} '.format(format(sp500_피봇, ','))
            self.label_34.setText(txt)
            self.plot3_ovc_pivot_line.setValue(sp500_피봇)
            
            txt = ' {0} '.format(format(sp500_시가, ','))
            self.label_35.setText(txt)
            self.plot3_ovc_open_line.setValue(sp500_시가)

            txt = ' {0} '.format(format(sp500_저가, ','))
            self.label_36.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_36.setText(txt)
            self.plot3_ovc_low_line.setValue(sp500_저가)

            self.label_37.setText(" 0,000.00 (전일대비, 등락율, 진폭) ")

            txt = ' {0} '.format(format(sp500_고가, ','))
            self.label_38.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_38.setText(txt)
            self.plot3_ovc_high_line.setValue(sp500_고가)

        # DOW
        elif comboindex3 == 14:

            if DOW_전저 == 0:
                dow_전저 = DOW_전일종가
            else:
                dow_전저 = DOW_전저

            if DOW_전고 == 0:
                dow_전고 = DOW_전일종가
            else:
                dow_전고 = DOW_전고

            if DOW_피봇 == 0:
                dow_피봇 = DOW_전일종가
            else:
                dow_피봇 = DOW_피봇

            if DOW_시가 == 0:
                dow_시가 = DOW_전일종가
            else:
                dow_시가 = DOW_시가

            if DOW_저가 == 0:
                dow_저가 = DOW_전일종가
            else:
                dow_저가 = DOW_저가

            if DOW_고가 == 0:
                dow_고가 = DOW_전일종가
            else:
                dow_고가 = DOW_고가

            self.plot3_quote_remainder_ratio_base_line.setValue(DOW_전일종가)
            self.plot3_nm_futures_quote_remainder_ratio_bottom_line.setValue(DOW_전일종가)
            self.plot3_nm_futures_quote_remainder_ratio_upper_line.setValue(DOW_전일종가)

            self.plot3_option_quote_remainder_ratio_bottom_line.setValue(DOW_전일종가)
            self.plot3_option_quote_remainder_ratio_upper_line.setValue(DOW_전일종가)
            
            for i in range(10):
                self.plot3_kp200_line[i].setValue(DOW_전일종가)

            for i in range(9):
                self.plot3_mv_line[i].setValue(DOW_전일종가)

            self.plot3_center_val_lower_line.setValue(DOW_전일종가)
            self.plot3_center_val_line.setValue(DOW_전일종가)
            self.plot3_center_val_upper_line.setValue(DOW_전일종가)
            
            self.plot3_fut_jl_line.setValue(DOW_전일종가)
            self.plot3_fut_jh_line.setValue(DOW_전일종가)
            self.plot3_fut_close_line.setValue(DOW_전일종가)
            self.plot3_fut_pivot_line.setValue(DOW_전일종가)
            self.plot3_fut_open_line.setValue(DOW_전일종가)
            self.plot3_fut_low_line.setValue(DOW_전일종가)
            self.plot3_fut_high_line.setValue(DOW_전일종가)

            self.plot3_cci_plus_100_line.setValue(DOW_전일종가)
            self.plot3_cci_minus_100_line.setValue(DOW_전일종가)
                
            txt = ' {0} '.format(format(dow_전저, ','))
            self.label_31.setText(txt)
            self.plot3_ovc_jl_line.setValue(dow_전저)

            txt = ' {0} '.format(format(dow_전고, ','))
            self.label_32.setText(txt)
            self.plot3_ovc_jh_line.setValue(dow_전고)
            
            txt = ' {0} '.format(format(DOW_전일종가, ','))
            self.label_33.setText(txt)
            self.plot3_ovc_close_line.setValue(DOW_전일종가)

            txt = ' {0} '.format(format(dow_피봇, ','))
            self.label_34.setText(txt)
            self.plot3_ovc_pivot_line.setValue(dow_피봇)
            
            txt = ' {0} '.format(format(dow_시가, ','))
            self.label_35.setText(txt)
            self.plot3_ovc_open_line.setValue(dow_시가)

            txt = ' {0} '.format(format(dow_저가, ','))
            self.label_36.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_36.setText(txt)
            self.plot3_ovc_low_line.setValue(dow_저가)

            self.label_37.setText(" 00,000 (전일대비, 등락율, 진폭) ")

            txt = ' {0} '.format(format(dow_고가, ','))
            self.label_38.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_38.setText(txt)
            self.plot3_ovc_high_line.setValue(dow_고가)

        # NASDAQ
        elif comboindex3 == 15:

            if NASDAQ_전저 == 0:
                nasdaq_전저 = NASDAQ_전일종가
            else:
                nasdaq_전저 = NASDAQ_전저

            if NASDAQ_전고 == 0:
                nasdaq_전고 = NASDAQ_전일종가
            else:
                nasdaq_전고 = NASDAQ_전고

            if NASDAQ_피봇 == 0:
                nasdaq_피봇 = NASDAQ_전일종가
            else:
                nasdaq_피봇 = NASDAQ_피봇

            if NASDAQ_시가 == 0:
                nasdaq_시가 = NASDAQ_전일종가
            else:
                nasdaq_시가 = NASDAQ_시가

            if NASDAQ_저가 == 0:
                nasdaq_저가 = NASDAQ_전일종가
            else:
                nasdaq_저가 = NASDAQ_저가

            if NASDAQ_고가 == 0:
                nasdaq_고가 = NASDAQ_전일종가
            else:
                nasdaq_고가 = NASDAQ_고가

            self.plot3_quote_remainder_ratio_base_line.setValue(NASDAQ_전일종가)
            self.plot3_nm_futures_quote_remainder_ratio_bottom_line.setValue(NASDAQ_전일종가)
            self.plot3_nm_futures_quote_remainder_ratio_upper_line.setValue(NASDAQ_전일종가)

            self.plot3_option_quote_remainder_ratio_bottom_line.setValue(NASDAQ_전일종가)
            self.plot3_option_quote_remainder_ratio_upper_line.setValue(NASDAQ_전일종가)
            
            for i in range(10):
                self.plot3_kp200_line[i].setValue(NASDAQ_전일종가)

            for i in range(9):
                self.plot3_mv_line[i].setValue(NASDAQ_전일종가)

            self.plot3_center_val_lower_line.setValue(NASDAQ_전일종가)
            self.plot3_center_val_line.setValue(NASDAQ_전일종가)
            self.plot3_center_val_upper_line.setValue(NASDAQ_전일종가)
            
            self.plot3_fut_jl_line.setValue(NASDAQ_전일종가)
            self.plot3_fut_jh_line.setValue(NASDAQ_전일종가)
            self.plot3_fut_close_line.setValue(NASDAQ_전일종가)
            self.plot3_fut_pivot_line.setValue(NASDAQ_전일종가)
            self.plot3_fut_open_line.setValue(NASDAQ_전일종가)
            self.plot3_fut_low_line.setValue(NASDAQ_전일종가)
            self.plot3_fut_high_line.setValue(NASDAQ_전일종가)

            self.plot3_cci_plus_100_line.setValue(NASDAQ_전일종가)
            self.plot3_cci_minus_100_line.setValue(NASDAQ_전일종가)
                
            txt = ' {0} '.format(format(nasdaq_전저, ','))
            self.label_31.setText(txt)
            self.plot3_ovc_jl_line.setValue(nasdaq_전저)

            txt = ' {0} '.format(format(nasdaq_전고, ','))
            self.label_32.setText(txt)
            self.plot3_ovc_jh_line.setValue(nasdaq_전고)
            
            txt = ' {0} '.format(format(NASDAQ_전일종가, ','))
            self.label_33.setText(txt)
            self.plot3_ovc_close_line.setValue(NASDAQ_전일종가)

            txt = ' {0} '.format(format(nasdaq_피봇, ','))
            self.label_34.setText(txt)
            self.plot3_ovc_pivot_line.setValue(nasdaq_피봇)
            
            txt = ' {0} '.format(format(nasdaq_시가, ','))
            self.label_35.setText(txt)
            self.plot3_ovc_open_line.setValue(nasdaq_시가)

            txt = ' {0} '.format(format(nasdaq_저가, ','))
            self.label_36.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_36.setText(txt)
            self.plot3_ovc_low_line.setValue(nasdaq_저가)

            self.label_37.setText(" 0,000.00 (전일대비, 등락율, 진폭) ")

            txt = ' {0} '.format(format(nasdaq_고가, ','))
            self.label_38.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_38.setText(txt)
            self.plot3_ovc_high_line.setValue(nasdaq_고가)            

        elif comboindex3 == 16:

            if HANGSENG_전저 == 0:
                hsi_전저 = HANGSENG_전일종가
            else:
                hsi_전저 = HANGSENG_전저

            if HANGSENG_전고 == 0:
                hsi_전고 = HANGSENG_전일종가
            else:
                hsi_전고 = HANGSENG_전고

            if HANGSENG_피봇 == 0:
                hsi_피봇 = HANGSENG_전일종가
            else:
                hsi_피봇 = HANGSENG_피봇

            if HANGSENG_시가 == 0:
                hsi_시가 = HANGSENG_전일종가
            else:
                hsi_시가 = HANGSENG_시가

            if HANGSENG_저가 == 0:
                hsi_저가 = HANGSENG_전일종가
            else:
                hsi_저가 = HANGSENG_저가

            if HANGSENG_고가 == 0:
                hsi_고가 = HANGSENG_전일종가
            else:
                hsi_고가 = HANGSENG_고가

            self.plot3_quote_remainder_ratio_base_line.setValue(HANGSENG_전일종가)
            self.plot3_nm_futures_quote_remainder_ratio_bottom_line.setValue(HANGSENG_전일종가)
            self.plot3_nm_futures_quote_remainder_ratio_upper_line.setValue(HANGSENG_전일종가)

            self.plot3_option_quote_remainder_ratio_bottom_line.setValue(HANGSENG_전일종가)
            self.plot3_option_quote_remainder_ratio_upper_line.setValue(HANGSENG_전일종가)
            
            for i in range(10):
                self.plot3_kp200_line[i].setValue(HANGSENG_전일종가)

            for i in range(9):
                self.plot3_mv_line[i].setValue(HANGSENG_전일종가)

            self.plot3_center_val_lower_line.setValue(HANGSENG_전일종가)
            self.plot3_center_val_line.setValue(HANGSENG_전일종가)
            self.plot3_center_val_upper_line.setValue(HANGSENG_전일종가)
            
            self.plot3_fut_jl_line.setValue(HANGSENG_전일종가)
            self.plot3_fut_jh_line.setValue(HANGSENG_전일종가)
            self.plot3_fut_close_line.setValue(HANGSENG_전일종가)
            self.plot3_fut_pivot_line.setValue(HANGSENG_전일종가)
            self.plot3_fut_open_line.setValue(HANGSENG_전일종가)
            self.plot3_fut_low_line.setValue(HANGSENG_전일종가)
            self.plot3_fut_high_line.setValue(HANGSENG_전일종가)

            self.plot3_cci_plus_100_line.setValue(HANGSENG_전일종가)
            self.plot3_cci_minus_100_line.setValue(HANGSENG_전일종가)
                
            txt = ' {0} '.format(format(hsi_전저, ','))
            self.label_31.setText(txt)
            self.plot3_ovc_jl_line.setValue(hsi_전저)

            txt = ' {0} '.format(format(hsi_전고, ','))
            self.label_32.setText(txt)
            self.plot3_ovc_jh_line.setValue(hsi_전고)
            
            txt = ' {0} '.format(format(HANGSENG_전일종가, ','))
            self.label_33.setText(txt)
            self.plot3_ovc_close_line.setValue(HANGSENG_전일종가)

            txt = ' {0} '.format(format(hsi_피봇, ','))
            self.label_34.setText(txt)
            self.plot3_ovc_pivot_line.setValue(hsi_피봇)
            
            txt = ' {0} '.format(format(hsi_시가, ','))
            self.label_35.setText(txt)
            self.plot3_ovc_open_line.setValue(hsi_시가)

            txt = ' {0} '.format(format(hsi_저가, ','))
            self.label_36.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_36.setText(txt)
            self.plot3_ovc_low_line.setValue(hsi_저가)

            self.label_37.setText(" 00.00 (전일대비, 등락율, 진폭) ")

            txt = ' {0} '.format(format(hsi_고가, ','))
            self.label_38.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_38.setText(txt)
            self.plot3_ovc_high_line.setValue(hsi_고가)

        # WTI
        elif comboindex3 == 17:

            if WTI_전저 == 0:
                wti_전저 = WTI_전일종가
            else:
                wti_전저 = WTI_전저

            if WTI_전고 == 0:
                wti_전고 = WTI_전일종가
            else:
                wti_전고 = WTI_전고

            if WTI_피봇 == 0:
                wti_피봇 = WTI_전일종가
            else:
                wti_피봇 = WTI_피봇

            if WTI_시가 == 0:
                wti_시가 = WTI_전일종가
            else:
                wti_시가 = WTI_시가

            if WTI_저가 == 0:
                wti_저가 = WTI_전일종가
            else:
                wti_저가 = WTI_저가

            if WTI_고가 == 0:
                wti_고가 = WTI_전일종가
            else:
                wti_고가 = WTI_고가

            self.plot3_quote_remainder_ratio_base_line.setValue(WTI_전일종가)
            self.plot3_nm_futures_quote_remainder_ratio_bottom_line.setValue(WTI_전일종가)
            self.plot3_nm_futures_quote_remainder_ratio_upper_line.setValue(WTI_전일종가)

            self.plot3_option_quote_remainder_ratio_bottom_line.setValue(WTI_전일종가)
            self.plot3_option_quote_remainder_ratio_upper_line.setValue(WTI_전일종가)
            
            for i in range(10):
                self.plot3_kp200_line[i].setValue(WTI_전일종가)

            for i in range(9):
                self.plot3_mv_line[i].setValue(WTI_전일종가)

            self.plot3_center_val_lower_line.setValue(WTI_전일종가)
            self.plot3_center_val_line.setValue(WTI_전일종가)
            self.plot3_center_val_upper_line.setValue(WTI_전일종가)
            
            self.plot3_fut_jl_line.setValue(WTI_전일종가)
            self.plot3_fut_jh_line.setValue(WTI_전일종가)
            self.plot3_fut_close_line.setValue(WTI_전일종가)
            self.plot3_fut_pivot_line.setValue(WTI_전일종가)
            self.plot3_fut_open_line.setValue(WTI_전일종가)
            self.plot3_fut_low_line.setValue(WTI_전일종가)
            self.plot3_fut_high_line.setValue(WTI_전일종가)

            self.plot3_cci_plus_100_line.setValue(WTI_전일종가)
            self.plot3_cci_minus_100_line.setValue(WTI_전일종가)
                
            txt = ' {0} '.format(format(wti_전저, ','))
            self.label_31.setText(txt)
            self.plot3_ovc_jl_line.setValue(wti_전저)

            txt = ' {0} '.format(format(wti_전고, ','))
            self.label_32.setText(txt)
            self.plot3_ovc_jh_line.setValue(wti_전고)
            
            txt = ' {0} '.format(format(WTI_전일종가, ','))
            self.label_33.setText(txt)
            self.plot3_ovc_close_line.setValue(WTI_전일종가)

            txt = ' {0} '.format(format(wti_피봇, ','))
            self.label_34.setText(txt)
            self.plot3_ovc_pivot_line.setValue(wti_피봇)
            
            txt = ' {0} '.format(format(wti_시가, ','))
            self.label_35.setText(txt)
            self.plot3_ovc_open_line.setValue(wti_시가)

            txt = ' {0} '.format(format(wti_저가, ','))
            self.label_36.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_36.setText(txt)
            self.plot3_ovc_low_line.setValue(wti_저가)

            self.label_37.setText(" 00.00 (전일대비, 등락율, 진폭) ")

            txt = ' {0} '.format(format(wti_고가, ','))
            self.label_38.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_38.setText(txt)
            self.plot3_ovc_high_line.setValue(wti_고가)            
                
        elif comboindex3 == 18:

            if GOLD_전저 == 0:
                gold_전저 = GOLD_전일종가
            else:
                gold_전저 = GOLD_전저

            if GOLD_전고 == 0:
                gold_전고 = GOLD_전일종가
            else:
                gold_전고 = GOLD_전고

            if GOLD_피봇 == 0:
                gold_피봇 = GOLD_전일종가
            else:
                gold_피봇 = GOLD_피봇

            if GOLD_시가 == 0:
                gold_시가 = GOLD_전일종가
            else:
                gold_시가 = GOLD_시가

            if GOLD_저가 == 0:
                gold_저가 = GOLD_전일종가
            else:
                gold_저가 = GOLD_저가

            if GOLD_고가 == 0:
                gold_고가 = GOLD_전일종가
            else:
                gold_고가 = GOLD_고가

            self.plot3_quote_remainder_ratio_base_line.setValue(GOLD_전일종가)
            self.plot3_nm_futures_quote_remainder_ratio_bottom_line.setValue(GOLD_전일종가)
            self.plot3_nm_futures_quote_remainder_ratio_upper_line.setValue(GOLD_전일종가)

            self.plot3_option_quote_remainder_ratio_bottom_line.setValue(GOLD_전일종가)
            self.plot3_option_quote_remainder_ratio_upper_line.setValue(GOLD_전일종가)
            
            for i in range(10):
                self.plot3_kp200_line[i].setValue(GOLD_전일종가)

            for i in range(9):
                self.plot3_mv_line[i].setValue(GOLD_전일종가)

            self.plot3_center_val_lower_line.setValue(GOLD_전일종가)
            self.plot3_center_val_line.setValue(GOLD_전일종가)
            self.plot3_center_val_upper_line.setValue(GOLD_전일종가)
            
            self.plot3_fut_jl_line.setValue(GOLD_전일종가)
            self.plot3_fut_jh_line.setValue(GOLD_전일종가)
            self.plot3_fut_close_line.setValue(GOLD_전일종가)
            self.plot3_fut_pivot_line.setValue(GOLD_전일종가)
            self.plot3_fut_open_line.setValue(GOLD_전일종가)
            self.plot3_fut_low_line.setValue(GOLD_전일종가)
            self.plot3_fut_high_line.setValue(GOLD_전일종가)

            self.plot3_cci_plus_100_line.setValue(GOLD_전일종가)
            self.plot3_cci_minus_100_line.setValue(GOLD_전일종가)
                
            txt = ' {0} '.format(format(gold_전저, ','))
            self.label_31.setText(txt)
            self.plot3_ovc_jl_line.setValue(gold_전저)

            txt = ' {0} '.format(format(gold_전고, ','))
            self.label_32.setText(txt)
            self.plot3_ovc_jh_line.setValue(gold_전고)
            
            txt = ' {0} '.format(format(GOLD_전일종가, ','))
            self.label_33.setText(txt)
            self.plot3_ovc_close_line.setValue(GOLD_전일종가)

            txt = ' {0} '.format(format(gold_피봇, ','))
            self.label_34.setText(txt)
            self.plot3_ovc_pivot_line.setValue(gold_피봇)
            
            txt = ' {0} '.format(format(gold_시가, ','))
            self.label_35.setText(txt)
            self.plot3_ovc_open_line.setValue(gold_시가)

            txt = ' {0} '.format(format(gold_저가, ','))
            self.label_36.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_36.setText(txt)
            self.plot3_ovc_low_line.setValue(gold_저가)

            self.label_37.setText(" 00.00 (전일대비, 등락율, 진폭) ")

            txt = ' {0} '.format(format(gold_고가, ','))
            self.label_38.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_38.setText(txt)
            self.plot3_ovc_high_line.setValue(gold_고가)

        elif comboindex3 == 19:

            if EURO_전저 == 0:
                euro_전저 = EURO_전일종가
            else:
                euro_전저 = EURO_전저

            if EURO_전고 == 0:
                euro_전고 = EURO_전일종가
            else:
                euro_전고 = EURO_전고

            if EURO_피봇 == 0:
                euro_피봇 = EURO_전일종가
            else:
                euro_피봇 = EURO_피봇

            if EURO_시가 == 0:
                euro_시가 = EURO_전일종가
            else:
                euro_시가 = EURO_시가

            if EURO_저가 == 0:
                euro_저가 = EURO_전일종가
            else:
                euro_저가 = EURO_저가

            if EURO_고가 == 0:
                euro_고가 = EURO_전일종가
            else:
                euro_고가 = EURO_고가

            self.plot3_quote_remainder_ratio_base_line.setValue(EURO_전일종가)
            self.plot3_nm_futures_quote_remainder_ratio_bottom_line.setValue(EURO_전일종가)
            self.plot3_nm_futures_quote_remainder_ratio_upper_line.setValue(EURO_전일종가)

            self.plot3_option_quote_remainder_ratio_bottom_line.setValue(EURO_전일종가)
            self.plot3_option_quote_remainder_ratio_upper_line.setValue(EURO_전일종가)
            
            for i in range(10):
                self.plot3_kp200_line[i].setValue(EURO_전일종가)

            for i in range(9):
                self.plot3_mv_line[i].setValue(EURO_전일종가)

            self.plot3_center_val_lower_line.setValue(EURO_전일종가)
            self.plot3_center_val_line.setValue(EURO_전일종가)
            self.plot3_center_val_upper_line.setValue(EURO_전일종가)
            
            self.plot3_fut_jl_line.setValue(EURO_전일종가)
            self.plot3_fut_jh_line.setValue(EURO_전일종가)
            self.plot3_fut_close_line.setValue(EURO_전일종가)
            self.plot3_fut_pivot_line.setValue(EURO_전일종가)
            self.plot3_fut_open_line.setValue(EURO_전일종가)
            self.plot3_fut_low_line.setValue(EURO_전일종가)
            self.plot3_fut_high_line.setValue(EURO_전일종가)

            self.plot3_cci_plus_100_line.setValue(EURO_전일종가)
            self.plot3_cci_minus_100_line.setValue(EURO_전일종가)
                
            txt = ' {0:.5f} '.format(euro_전저)
            self.label_31.setText(txt)
            self.plot3_ovc_jl_line.setValue(euro_전저)

            txt = ' {0:.5f} '.format(euro_전고)
            self.label_32.setText(txt)
            self.plot3_ovc_jh_line.setValue(euro_전고)
            
            txt = ' {0:.5f} '.format(EURO_전일종가)
            self.label_33.setText(txt)
            self.plot3_ovc_close_line.setValue(EURO_전일종가)

            txt = ' {0:.5f} '.format(euro_피봇)
            self.label_34.setText(txt)
            self.plot3_ovc_pivot_line.setValue(euro_피봇)
            
            txt = ' {0:.5f} '.format(euro_시가)
            self.label_35.setText(txt)
            self.plot3_ovc_open_line.setValue(euro_시가)

            txt = ' {0:.5f} '.format(euro_저가)
            self.label_36.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_36.setText(txt)
            self.plot3_ovc_low_line.setValue(euro_저가)

            self.label_37.setText(" 00.00 (전일대비, 등락율, 진폭) ")

            txt = ' {0:.5f} '.format(euro_고가)
            self.label_38.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_38.setText(txt)
            self.plot3_ovc_high_line.setValue(euro_고가)

        elif comboindex3 == 20:

            if YEN_전저 == 0:
                yen_전저 = YEN_전일종가
            else:
                yen_전저 = YEN_전저

            if YEN_전고 == 0:
                yen_전고 = YEN_전일종가
            else:
                yen_전고 = YEN_전고

            if YEN_피봇 == 0:
                yen_피봇 = YEN_전일종가
            else:
                yen_피봇 = YEN_피봇

            if YEN_시가 == 0:
                yen_시가 = YEN_전일종가
            else:
                yen_시가 = YEN_시가

            if YEN_저가 == 0:
                yen_저가 = YEN_전일종가
            else:
                yen_저가 = YEN_저가

            if YEN_고가 == 0:
                yen_고가 = YEN_전일종가
            else:
                yen_고가 = YEN_고가

            self.plot3_quote_remainder_ratio_base_line.setValue(YEN_전일종가)
            self.plot3_nm_futures_quote_remainder_ratio_bottom_line.setValue(YEN_전일종가)
            self.plot3_nm_futures_quote_remainder_ratio_upper_line.setValue(YEN_전일종가)

            self.plot3_option_quote_remainder_ratio_bottom_line.setValue(YEN_전일종가)
            self.plot3_option_quote_remainder_ratio_upper_line.setValue(YEN_전일종가)
            
            for i in range(10):
                self.plot3_kp200_line[i].setValue(YEN_전일종가)

            for i in range(9):
                self.plot3_mv_line[i].setValue(YEN_전일종가)

            self.plot3_center_val_lower_line.setValue(YEN_전일종가)
            self.plot3_center_val_line.setValue(YEN_전일종가)
            self.plot3_center_val_upper_line.setValue(YEN_전일종가)
            
            self.plot3_fut_jl_line.setValue(YEN_전일종가)
            self.plot3_fut_jh_line.setValue(YEN_전일종가)
            self.plot3_fut_close_line.setValue(YEN_전일종가)
            self.plot3_fut_pivot_line.setValue(YEN_전일종가)
            self.plot3_fut_open_line.setValue(YEN_전일종가)
            self.plot3_fut_low_line.setValue(YEN_전일종가)
            self.plot3_fut_high_line.setValue(YEN_전일종가)

            self.plot3_cci_plus_100_line.setValue(YEN_전일종가)
            self.plot3_cci_minus_100_line.setValue(YEN_전일종가)
                
            txt = ' {0} '.format(format(yen_전저, ','))
            self.label_31.setText(txt)
            self.plot3_ovc_jl_line.setValue(yen_전저)

            txt = ' {0} '.format(format(yen_전고, ','))
            self.label_32.setText(txt)
            self.plot3_ovc_jh_line.setValue(yen_전고)
            
            txt = ' {0} '.format(format(YEN_전일종가, ','))
            self.label_33.setText(txt)
            self.plot3_ovc_close_line.setValue(YEN_전일종가)

            txt = ' {0} '.format(format(yen_피봇, ','))
            self.label_34.setText(txt)
            self.plot3_ovc_pivot_line.setValue(yen_피봇)
            
            txt = ' {0} '.format(format(yen_시가, ','))
            self.label_35.setText(txt)
            self.plot3_ovc_open_line.setValue(yen_시가)

            txt = ' {0} '.format(format(yen_저가, ','))
            self.label_36.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_36.setText(txt)
            self.plot3_ovc_low_line.setValue(yen_저가)

            self.label_37.setText(" 00.00 (전일대비, 등락율, 진폭) ")

            txt = ' {0} '.format(format(yen_고가, ','))
            self.label_38.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_38.setText(txt)
            self.plot3_ovc_high_line.setValue(yen_고가)
        
        elif comboindex3 == 21:

            if ADI_전저 == 0:
                adi_전저 = ADI_전일종가
            else:
                adi_전저 = ADI_전저

            if ADI_전고 == 0:
                adi_전고 = ADI_전일종가
            else:
                adi_전고 = ADI_전고

            if ADI_피봇 == 0:
                adi_피봇 = ADI_전일종가
            else:
                adi_피봇 = ADI_피봇

            if ADI_시가 == 0:
                adi_시가 = ADI_전일종가
            else:
                adi_시가 = ADI_시가

            if ADI_저가 == 0:
                adi_저가 = ADI_전일종가
            else:
                adi_저가 = ADI_저가

            if ADI_고가 == 0:
                adi_고가 = ADI_전일종가
            else:
                adi_고가 = ADI_고가

            self.plot3_quote_remainder_ratio_base_line.setValue(ADI_전일종가)
            self.plot3_nm_futures_quote_remainder_ratio_bottom_line.setValue(ADI_전일종가)
            self.plot3_nm_futures_quote_remainder_ratio_upper_line.setValue(ADI_전일종가)

            self.plot3_option_quote_remainder_ratio_bottom_line.setValue(ADI_전일종가)
            self.plot3_option_quote_remainder_ratio_upper_line.setValue(ADI_전일종가)
            
            for i in range(10):
                self.plot3_kp200_line[i].setValue(ADI_전일종가)

            for i in range(9):
                self.plot3_mv_line[i].setValue(ADI_전일종가)

            self.plot3_center_val_lower_line.setValue(ADI_전일종가)
            self.plot3_center_val_line.setValue(ADI_전일종가)
            self.plot3_center_val_upper_line.setValue(ADI_전일종가)
            
            self.plot3_fut_jl_line.setValue(ADI_전일종가)
            self.plot3_fut_jh_line.setValue(ADI_전일종가)
            self.plot3_fut_close_line.setValue(ADI_전일종가)
            self.plot3_fut_pivot_line.setValue(ADI_전일종가)
            self.plot3_fut_open_line.setValue(ADI_전일종가)
            self.plot3_fut_low_line.setValue(ADI_전일종가)
            self.plot3_fut_high_line.setValue(ADI_전일종가)

            self.plot3_cci_plus_100_line.setValue(ADI_전일종가)
            self.plot3_cci_minus_100_line.setValue(ADI_전일종가)
                
            txt = ' {0:.5f} '.format(adi_전저)
            self.label_31.setText(txt)
            self.plot3_ovc_jl_line.setValue(adi_전저)

            txt = ' {0:.5f} '.format(adi_전고)
            self.label_32.setText(txt)
            self.plot3_ovc_jh_line.setValue(adi_전고)
            
            txt = ' {0:.5f} '.format(ADI_전일종가)
            self.label_33.setText(txt)
            self.plot3_ovc_close_line.setValue(ADI_전일종가)

            txt = ' {0:.5f} '.format(adi_피봇)
            self.label_34.setText(txt)
            self.plot3_ovc_pivot_line.setValue(adi_피봇)
            
            txt = ' {0:.5f} '.format(adi_시가)
            self.label_35.setText(txt)
            self.plot3_ovc_open_line.setValue(adi_시가)

            txt = ' {0:.5f} '.format(adi_저가)
            self.label_36.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_36.setText(txt)
            self.plot3_ovc_low_line.setValue(adi_저가)

            self.label_37.setText(" 00.00 (전일대비, 등락율, 진폭) ")

            txt = ' {0:.5f} '.format(adi_고가)
            self.label_38.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_38.setText(txt)
            self.plot3_ovc_high_line.setValue(adi_고가)
        else:
            pass

    def plot4_clear(self):

        # Line Clear
        self.plot4_fut_jl_line.setValue(0)
        self.plot4_fut_jh_line.setValue(0)
        self.plot4_fut_open_line.setValue(0)
        self.plot4_fut_close_line.setValue(0)
        self.plot4_fut_pivot_line.setValue(0)
        self.plot4_fut_low_line.setValue(0)
        self.plot4_fut_high_line.setValue(0)

        self.plot4_ovc_jl_line.setValue(0)
        self.plot4_ovc_jh_line.setValue(0)
        self.plot4_ovc_close_line.setValue(0)
        self.plot4_ovc_open_line.setValue(0)
        self.plot4_ovc_pivot_line.setValue(0)
        self.plot4_ovc_low_line.setValue(0)
        self.plot4_ovc_high_line.setValue(0)

        for i in range(10):
            self.plot4_kp200_line[i].setValue(0)

        for i in range(9):
            self.plot4_mv_line[i].setValue(0)        

        self.plot4_quote_remainder_ratio_base_line.setValue(0)
        self.plot4_nm_futures_quote_remainder_ratio_bottom_line.setValue(0)
        self.plot4_nm_futures_quote_remainder_ratio_upper_line.setValue(0)

        self.plot4_option_quote_remainder_ratio_bottom_line.setValue(0)
        self.plot4_option_quote_remainder_ratio_upper_line.setValue(0)

        self.plot4_center_val_lower_line.setValue(0)
        self.plot4_center_val_line.setValue(0)
        self.plot4_center_val_upper_line.setValue(0)

        # Fibonacci Retracements Line
        self.plot4_fibonacci_line1.setValue(0)
        self.plot4_fibonacci_line2.setValue(0)
        self.plot4_fibonacci_line3.setValue(0)
        self.plot4_fibonacci_line4.setValue(0)
        self.plot4_fibonacci_line5.setValue(0)

        # CCI Line
        self.plot4_cci_plus_100_line.setValue(0)
        self.plot4_cci_minus_100_line.setValue(0)

        # Curve Clear
        self.plot4_fut_cm_price_curve.clear()
        self.plot4_fut_nm_price_curve.clear()
        self.plot4_kp200_curve.clear()

        self.plot4_fut_cm_quote_remainder_ratio_curve.clear()
        self.plot4_fut_nm_quote_remainder_ratio_curve.clear()

        self.plot4_fut_volume_curve.clear()
        self.plot4_call_volume_curve.clear()
        self.plot4_put_volume_curve.clear()        

        self.plot4_center_val_curve.clear()

        for i in range(option_pairs_count):
            self.plot4_call_curve[i].clear()
            self.plot4_put_curve[i].clear()

        self.plot4_call_quote_curve.clear()
        self.plot4_put_quote_curve.clear()

        self.plot4_call_oi_curve.clear()
        self.plot4_put_oi_curve.clear()

        self.plot4_fut_cm_drate_curve.clear()
        self.plot4_fut_nm_drate_curve.clear()
        self.plot4_cme_drate_curve.clear()
        self.plot4_call_drate_curve.clear()
        self.plot4_put_drate_curve.clear()

        self.plot4_program_curve.clear()
        self.plot4_kospi_total_curve.clear()
        self.plot4_futures_foreigner_curve.clear()
        self.plot4_kospi_foreigner_curve.clear()

        self.plot4_sp500_curve.clear()
        self.plot4_dow_curve.clear()
        self.plot4_nasdaq_curve.clear()
        self.plot4_hsi_curve.clear()

        self.plot4_wti_curve.clear()
        self.plot4_gold_curve.clear()

        self.plot4_euro_curve.clear()
        self.plot4_yen_curve.clear()
        self.plot4_adi_curve.clear()

        self.plot4_bollinger_1st_upper_curve.clear()
        self.plot4_bollinger_1st_middle_curve.clear()
        self.plot4_bollinger_1st_lower_curve.clear()
        self.plot4_bollinger_2nd_upper_curve.clear()
        self.plot4_bollinger_2nd_middle_curve.clear()
        self.plot4_bollinger_2nd_lower_curve.clear()

        self.plot4_psar_curve.clear()

        self.plot4_mama_curve.clear()
        self.plot4_fama_curve.clear()
        #self.plot4_sslup_curve.clear()
        #self.plot4_ssldown_curve.clear()

        self.plot4_oe_conv_curve.clear()
        self.plot4_oe_base_curve.clear()
        self.plot4_span_a_curve.clear()
        self.plot4_span_b_curve.clear()
        self.plot4_lagging_span_curve.clear()

        self.plot4_futures_rsi_curve.clear()
        self.plot4_sp500_rsi_curve.clear()
        self.plot4_dow_rsi_curve.clear()
        self.plot4_nasdaq_rsi_curve.clear()
        self.plot4_hsi_rsi_curve.clear()
        self.plot4_wti_rsi_curve.clear()
        self.plot4_gold_rsi_curve.clear()
        self.plot4_euro_rsi_curve.clear()
        self.plot4_yen_rsi_curve.clear()
        self.plot4_adi_rsi_curve.clear()

        self.plot4_futures_cci1_curve.clear()
        self.plot4_sp500_cci1_curve.clear()
        self.plot4_dow_cci1_curve.clear()
        self.plot4_nasdaq_cci1_curve.clear()
        self.plot4_hsi_cci1_curve.clear()
        self.plot4_wti_cci1_curve.clear()
        self.plot4_gold_cci1_curve.clear()
        self.plot4_euro_cci1_curve.clear()
        self.plot4_yen_cci1_curve.clear()
        self.plot4_adi_cci1_curve.clear()

        self.plot4_futures_cci2_curve.clear()
        self.plot4_sp500_cci2_curve.clear()
        self.plot4_dow_cci2_curve.clear()
        self.plot4_nasdaq_cci2_curve.clear()
        self.plot4_hsi_cci2_curve.clear()
        self.plot4_wti_cci2_curve.clear()
        self.plot4_gold_cci2_curve.clear()
        self.plot4_euro_cci2_curve.clear()
        self.plot4_yen_cci2_curve.clear()
        self.plot4_adi_cci2_curve.clear()

        self.label_41.setText(" - ")
        self.label_42.setText(" - ")
        self.label_43.setText(" - ")
        self.label_44.setText(" - ")
        self.label_45.setText(" - ")
        self.label_46.setText(" - ")
        self.label_47.setText(" - ")
        self.label_48.setText(" - ")

        self.label_p4_1.setStyleSheet('background-color: lime; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_p4_1.setText(" 좌표 ")

        self.label_p4_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_p4_2.setText(" BB Upper\n BB Middle\n BB Lower ")

        self.label_p4_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_p4_3.setText(" PSAR\n MAMA ")

        self.label_p4_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_p4_4.setText(" ONE EYE ")

        txt = 'Plot4 Clear...\r'
        self.parent.textBrowser.append(txt)

    def cb4_selectionChanged(self):

        global comboindex4
        
        txt = self.comboBox4.currentText()
        comboindex4 = self.comboBox4.currentIndex()

        self.plot4_clear()

        if comboindex4 == 0:
            self.timer4.stop()

            txt = 'Plot4 Timer Stop...\r'
            self.parent.textBrowser.append(txt)
        else:
            if not self.timer4.isActive():

                start_time = timeit.default_timer()

                while True:

                    if not flag_screen_update_is_running:
                        self.timer4.start()
                        txt = 'Plot4 Timer Setting Done...\r'
                        self.parent.textBrowser.append(txt)
                        break

                    end_time = timeit.default_timer()

                    time_gap = (end_time - start_time) * 1000

                    if DayTime:
                        time_limit = 200
                    else:
                        time_limit = 100

                    if time_gap > time_limit:
                        self.timer4.start()
                        txt = 'Plot4 Timer Forced Setting Done...\r'
                        self.parent.textBrowser.append(txt)
                        break
            else:
                pass

        # 선물가격
        if comboindex4 == 2:           
                        
            if 근월물_선물_전저 == 0:
                선물_전저 = 근월물_선물_종가
            else:
                선물_전저 = 근월물_선물_전저

            if 근월물_선물_전고 == 0:
                선물_전고 = 근월물_선물_종가
            else:
                선물_전고 = 근월물_선물_전고

            선물_종가 = 근월물_선물_종가                

            if 근월물_선물_피봇 == 0:
                선물_피봇 = 근월물_선물_종가
            else:
                선물_피봇 = 근월물_선물_피봇

            if 근월물_선물_시가 == 0:
                선물_시가 = 근월물_선물_종가
            else:
                선물_시가 = 근월물_선물_시가

            if 근월물_선물_저가 == 0:
                선물_저가 = 근월물_선물_종가
            else:
                선물_저가 = 근월물_선물_저가

            if 근월물_선물_고가 == 0:
                선물_고가 = 근월물_선물_종가
            else:
                선물_고가 = 근월물_선물_고가

            self.plot4_kp200_line[0].setValue(KP200_COREVAL[3])
            self.plot4_kp200_line[1].setValue(KP200_COREVAL[3])
            self.plot4_kp200_line[2].setValue(KP200_COREVAL[3])
            self.plot4_kp200_line[3].setValue(KP200_COREVAL[3])
            self.plot4_kp200_line[4].setValue(KP200_COREVAL[4])
            self.plot4_kp200_line[5].setValue(KP200_COREVAL[5])
            self.plot4_kp200_line[6].setValue(KP200_COREVAL[6])
            self.plot4_kp200_line[7].setValue(KP200_COREVAL[6])
            self.plot4_kp200_line[8].setValue(KP200_COREVAL[6])
            self.plot4_kp200_line[9].setValue(KP200_COREVAL[6])
            
            # 종가선 컬러를 살리기위한 임시방편            
            self.plot4_quote_remainder_ratio_base_line.setValue(선물_종가)
            self.plot4_nm_futures_quote_remainder_ratio_bottom_line.setValue(선물_종가)
            self.plot4_nm_futures_quote_remainder_ratio_upper_line.setValue(선물_종가)

            self.plot4_option_quote_remainder_ratio_bottom_line.setValue(선물_종가)
            self.plot4_option_quote_remainder_ratio_upper_line.setValue(선물_종가)

            for i in range(9):
                self.plot4_mv_line[i].setValue(선물_종가)

            self.plot4_center_val_lower_line.setValue(선물_종가)
            self.plot4_center_val_line.setValue(선물_종가)
            self.plot4_center_val_upper_line.setValue(선물_종가)

            self.plot4_ovc_open_line.setValue(선물_종가)
            self.plot4_ovc_jl_line.setValue(선물_종가)
            self.plot4_ovc_jh_line.setValue(선물_종가)
            self.plot4_ovc_pivot_line.setValue(선물_종가)
            self.plot4_ovc_low_line.setValue(선물_종가)
            self.plot4_ovc_high_line.setValue(선물_종가)
            self.plot4_ovc_close_line.setValue(선물_종가)

            self.plot4_cci_plus_100_line.setValue(선물_종가)
            self.plot4_cci_minus_100_line.setValue(선물_종가)

            txt = ' {0} '.format(선물_전저)
            self.label_41.setText(txt) 
            self.plot4_fut_jl_line.setValue(선물_전저)
            
            txt = ' {0} '.format(선물_전고)
            self.label_42.setText(txt)
            self.plot4_fut_jh_line.setValue(선물_전고)
            
            txt = ' {0} '.format(선물_종가)
            self.label_43.setText(txt)
            self.plot4_fut_close_line.setValue(선물_종가)
            
            txt = ' {0} '.format(선물_피봇)
            self.label_44.setText(txt)
            self.plot4_fut_pivot_line.setValue(선물_피봇)

            txt = ' {0} '.format(선물_시가)
            self.label_45.setText(txt)
            self.plot4_fut_open_line.setValue(선물_시가)

            txt = ' {0} '.format(선물_저가)
            self.label_46.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_46.setText(txt)
            self.plot4_fut_low_line.setValue(선물_저가)
            
            self.label_47.setText(" 000.00 (전일대비, 등락율, 진폭), kp200 : 000.00 ")

            txt = ' {0} '.format(선물_고가)
            self.label_48.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_48.setText(txt)
            self.plot4_fut_high_line.setValue(선물_고가)        
        
        # 선옵잔량비
        elif comboindex4 == 3:

            self.label_41.setText(" - ")
            self.label_42.setText(" - ")
            self.label_43.setText(" - ")
            self.label_44.setText(" - ")
            self.label_45.setText(" - ")

            self.label_46.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_46.setText(" 풋잔량비 ")

            self.label_47.setText(" 선물잔량비 ")

            self.label_48.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_48.setText(" 콜잔량비 ")
            
            self.label_p4_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p4_2.setText(" BB Upper\n BB Middle\n BB Lower ")

            self.label_p4_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p4_3.setText(" PSAR\n MAMA ")

            self.label_p4_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p4_4.setText(" ONE EYE ")
            
            self.plot4_quote_remainder_ratio_base_line.setValue(1.0)
            self.plot4_nm_futures_quote_remainder_ratio_bottom_line.setValue(1.0)
            self.plot4_nm_futures_quote_remainder_ratio_upper_line.setValue(1.0)

            self.plot4_option_quote_remainder_ratio_bottom_line.setValue(1.0)
            self.plot4_option_quote_remainder_ratio_upper_line.setValue(1.0)

        # 선옵체결
        elif comboindex4 == 4:

            self.label_41.setText(" - ")
            self.label_42.setText(" - ")
            self.label_43.setText(" - ")
            self.label_44.setText(" - ")
            self.label_45.setText(" - ")

            self.label_46.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_46.setText(" 풋체결량 ")

            self.label_47.setText(" 선물체결량 ")

            self.label_48.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_48.setText(" 콜체결량 ")
            
            self.label_p4_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p4_2.setText(" BB Upper\n BB Middle\n BB Lower ")

            self.label_p4_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p4_3.setText(" PSAR\n MAMA ")

            self.label_p4_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p4_4.setText(" ONE EYE ")
        
        # 옵션가격
        elif comboindex4 == 5:

            self.label_41.setText(" 등가: 행사가 ")
            self.label_42.setText(" 시작 중심가 ")
            self.label_43.setText(" 중심가 하단 ")
            self.label_44.setText(" 중심가 상단 ")
            self.label_45.setText(" - ")
            self.label_46.setText(" 풋현재가 ")
            self.label_47.setText(" 중심가 ")
            self.label_48.setText(" 콜현재가 ")
            
            self.label_p4_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p4_2.setText(" BB Upper\n BB Middle\n BB Lower ")

            self.label_p4_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p4_3.setText(" PSAR\n MAMA ")

            self.label_p4_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p4_4.setText(" ONE EYE ")

            # 대맥점 표시
            self.plot4_mv_line[1].setValue(2.5)
            self.plot4_mv_line[2].setValue(3.5)
            self.plot4_mv_line[3].setValue(4.85)

            self.plot4_center_val_lower_line.setValue(옵션_중심가/GOLDEN_RATIO)
            self.plot4_center_val_line.setValue(옵션_중심가)
            self.plot4_center_val_upper_line.setValue(옵션_중심가*GOLDEN_RATIO)

        # 옵션잔량비
        elif comboindex4 == 6:

            self.label_41.setText(" - ")
            self.label_42.setText(" - ")
            self.label_43.setText(" - ")
            self.label_44.setText(" - ")
            self.label_45.setText(" - ")

            self.label_46.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_46.setText(" 풋잔량비 ")

            self.label_47.setText(" - ")

            self.label_48.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_48.setText(" 콜잔량비 ")
            
            self.label_p4_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p4_2.setText(" BB Upper\n BB Middle\n BB Lower ")

            self.label_p4_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p4_3.setText(" PSAR\n MAMA ")

            self.label_p4_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p4_4.setText(" ONE EYE ")
            
            self.plot4_quote_remainder_ratio_base_line.setValue(1.0)
            self.plot4_nm_futures_quote_remainder_ratio_bottom_line.setValue(1.0)
            self.plot4_nm_futures_quote_remainder_ratio_upper_line.setValue(1.0)

            self.plot4_option_quote_remainder_ratio_bottom_line.setValue(1.0)
            self.plot4_option_quote_remainder_ratio_upper_line.setValue(1.0)
        
        # 옵션미결
        elif comboindex4 == 7:

            self.label_41.setText(" - ")
            self.label_42.setText(" - ")
            self.label_43.setText(" - ")
            self.label_44.setText(" - ")
            self.label_45.setText(" - ")

            self.label_46.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')                
            self.label_46.setText(" 풋미결 ")

            self.label_47.setText(" - ")

            self.label_48.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_48.setText(" 콜미결 ")
            
            self.label_p4_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p4_2.setText(" BB Upper\n BB Middle\n BB Lower ")

            self.label_p4_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p4_3.setText(" PSAR\n MAMA ")

            self.label_p4_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p4_4.setText(" ONE EYE ")         

        # 등락율비
        elif comboindex4 == 8:

            self.label_41.setText(" - ")
            self.label_42.setText(" - ")
            self.label_43.setText(" - ")
            self.label_44.setText(" - ")

            self.label_45.setStyleSheet('background-color: lime; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_45.setText(" DOW등락율 ")

            self.label_46.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_46.setText(" 풋등락율 ")

            self.label_47.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_47.setText(" 선물등락율 ")

            self.label_48.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_48.setText(" 콜등락율 ")
            
            self.label_p4_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p4_2.setText(" BB Upper\n BB Middle\n BB Lower ")

            self.label_p4_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p4_3.setText(" PSAR\n MAMA ")

            self.label_p4_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p4_4.setText(" ONE EYE ")

        # 수급종합
        elif comboindex4 == 10:

            self.label_41.setText(" - ")
            self.label_42.setText(" - ")
            self.label_43.setText(" - ")
            self.label_44.setText(" - ")
            self.label_45.setText(" - ")

            self.label_46.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_46.setText(" Prog/F.S ")

            self.label_47.setText(" 선물체결량 ")

            self.label_48.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_48.setText(" S.S/F.F ")

        # 외인수급
        elif comboindex4 == 11:

            pass
            '''
            self.label_41.setText(" - ")
            self.label_42.setText(" - ")
            self.label_43.setText(" - ")
            self.label_44.setText(" - ")
            self.label_45.setText(" - ")

            self.label_46.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_46.setText(" 외인현물 ")

            self.label_47.setText(" 선물체결량 ")

            self.label_48.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_48.setText(" 외인선물 ")
            '''

        # SP500
        elif comboindex4 == 13:

            if SP500_전저 == 0:
                sp500_전저 = SP500_전일종가
            else:
                sp500_전저 = SP500_전저

            if SP500_전고 == 0:
                sp500_전고 = SP500_전일종가
            else:
                sp500_전고 = SP500_전고               

            if SP500_피봇 == 0:
                sp500_피봇 = SP500_전일종가
            else:
                sp500_피봇 = SP500_피봇            

            if SP500_시가 == 0:
                sp500_시가 = SP500_전일종가
            else:
                sp500_시가 = SP500_시가

            if SP500_저가 == 0:
                sp500_저가 = SP500_전일종가
            else:
                sp500_저가 = SP500_저가

            if SP500_고가 == 0:
                sp500_고가 = SP500_전일종가
            else:
                sp500_고가 = SP500_고가

            self.plot4_quote_remainder_ratio_base_line.setValue(SP500_전일종가)
            self.plot4_nm_futures_quote_remainder_ratio_bottom_line.setValue(SP500_전일종가)
            self.plot4_nm_futures_quote_remainder_ratio_upper_line.setValue(SP500_전일종가)

            self.plot4_option_quote_remainder_ratio_bottom_line.setValue(SP500_전일종가)
            self.plot4_option_quote_remainder_ratio_upper_line.setValue(SP500_전일종가)
            
            for i in range(10):
                self.plot4_kp200_line[i].setValue(SP500_전일종가)

            for i in range(9):
                self.plot4_mv_line[i].setValue(SP500_전일종가)

            self.plot4_center_val_lower_line.setValue(SP500_전일종가)
            self.plot4_center_val_line.setValue(SP500_전일종가)
            self.plot4_center_val_upper_line.setValue(SP500_전일종가)
            
            self.plot4_fut_jl_line.setValue(SP500_전일종가)
            self.plot4_fut_jh_line.setValue(SP500_전일종가)
            self.plot4_fut_close_line.setValue(SP500_전일종가)
            self.plot4_fut_pivot_line.setValue(SP500_전일종가)
            self.plot4_fut_open_line.setValue(SP500_전일종가)
            self.plot4_fut_low_line.setValue(SP500_전일종가)
            self.plot4_fut_high_line.setValue(SP500_전일종가)

            self.plot4_cci_plus_100_line.setValue(SP500_전일종가)
            self.plot4_cci_minus_100_line.setValue(SP500_전일종가)
                            
            txt = ' {0} '.format(format(sp500_전저, ','))
            self.label_41.setText(txt)
            self.plot4_ovc_jl_line.setValue(sp500_전저)

            txt = ' {0} '.format(format(sp500_전고, ','))
            self.label_42.setText(txt)
            self.plot4_ovc_jh_line.setValue(sp500_전고)
            
            txt = ' {0} '.format(format(SP500_전일종가, ','))
            self.label_43.setText(txt)
            self.plot4_ovc_close_line.setValue(SP500_전일종가)

            txt = ' {0} '.format(format(sp500_피봇, ','))
            self.label_44.setText(txt)
            self.plot4_ovc_pivot_line.setValue(sp500_피봇)
            
            txt = ' {0} '.format(format(sp500_시가, ','))
            self.label_45.setText(txt)
            self.plot4_ovc_open_line.setValue(sp500_시가)

            txt = ' {0} '.format(format(sp500_저가, ','))
            self.label_46.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_46.setText(txt)
            self.plot4_ovc_low_line.setValue(sp500_저가)

            self.label_47.setText(" 0,000.00 (전일대비, 등락율, 진폭) ")

            txt = ' {0} '.format(format(sp500_고가, ','))
            self.label_48.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_48.setText(txt)
            self.plot4_ovc_high_line.setValue(sp500_고가)
        
        # DOW    
        elif comboindex4 == 14:

            if DOW_전저 == 0:
                dow_전저 = DOW_전일종가
            else:
                dow_전저 = DOW_전저

            if DOW_전고 == 0:
                dow_전고 = DOW_전일종가
            else:
                dow_전고 = DOW_전고

            if DOW_피봇 == 0:
                dow_피봇 = DOW_전일종가
            else:
                dow_피봇 = DOW_피봇

            if DOW_시가 == 0:
                dow_시가 = DOW_전일종가
            else:
                dow_시가 = DOW_시가

            if DOW_저가 == 0:
                dow_저가 = DOW_전일종가
            else:
                dow_저가 = DOW_저가

            if DOW_고가 == 0:
                dow_고가 = DOW_전일종가
            else:
                dow_고가 = DOW_고가

            self.plot4_quote_remainder_ratio_base_line.setValue(DOW_전일종가)
            self.plot4_nm_futures_quote_remainder_ratio_bottom_line.setValue(DOW_전일종가)
            self.plot4_nm_futures_quote_remainder_ratio_upper_line.setValue(DOW_전일종가)

            self.plot4_option_quote_remainder_ratio_bottom_line.setValue(DOW_전일종가)
            self.plot4_option_quote_remainder_ratio_upper_line.setValue(DOW_전일종가)
            
            for i in range(10):
                self.plot4_kp200_line[i].setValue(DOW_전일종가)

            for i in range(9):
                self.plot4_mv_line[i].setValue(DOW_전일종가)

            self.plot4_center_val_lower_line.setValue(DOW_전일종가)
            self.plot4_center_val_line.setValue(DOW_전일종가)
            self.plot4_center_val_upper_line.setValue(DOW_전일종가)
            
            self.plot4_fut_jl_line.setValue(DOW_전일종가)
            self.plot4_fut_jh_line.setValue(DOW_전일종가)
            self.plot4_fut_close_line.setValue(DOW_전일종가)
            self.plot4_fut_pivot_line.setValue(DOW_전일종가)
            self.plot4_fut_open_line.setValue(DOW_전일종가)
            self.plot4_fut_low_line.setValue(DOW_전일종가)
            self.plot4_fut_high_line.setValue(DOW_전일종가)

            self.plot4_cci_plus_100_line.setValue(DOW_전일종가)
            self.plot4_cci_minus_100_line.setValue(DOW_전일종가)
                            
            txt = ' {0} '.format(format(dow_전저, ','))
            self.label_41.setText(txt)
            self.plot4_ovc_jl_line.setValue(dow_전저)

            txt = ' {0} '.format(format(dow_전고, ','))
            self.label_42.setText(txt)
            self.plot4_ovc_jh_line.setValue(dow_전고)
            
            txt = ' {0} '.format(format(DOW_전일종가, ','))
            self.label_43.setText(txt)
            self.plot4_ovc_close_line.setValue(DOW_전일종가)

            txt = ' {0} '.format(format(dow_피봇, ','))
            self.label_44.setText(txt)
            self.plot4_ovc_pivot_line.setValue(dow_피봇)
            
            txt = ' {0} '.format(format(dow_시가, ','))
            self.label_45.setText(txt)
            self.plot4_ovc_open_line.setValue(dow_시가)

            txt = ' {0} '.format(format(dow_저가, ','))
            self.label_46.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_46.setText(txt)
            self.plot4_ovc_low_line.setValue(dow_저가)

            self.label_47.setText(" 00,000 (전일대비, 등락율, 진폭) ")

            txt = ' {0} '.format(format(dow_고가, ','))
            self.label_48.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_48.setText(txt)
            self.plot4_ovc_high_line.setValue(dow_고가)

        # NASDAQ
        elif comboindex4 == 15:

            if NASDAQ_전저 == 0:
                nasdaq_전저 = NASDAQ_전일종가
            else:
                nasdaq_전저 = NASDAQ_전저

            if NASDAQ_전고 == 0:
                nasdaq_전고 = NASDAQ_전일종가
            else:
                nasdaq_전고 = NASDAQ_전고

            if NASDAQ_피봇 == 0:
                nasdaq_피봇 = NASDAQ_전일종가
            else:
                nasdaq_피봇 = NASDAQ_피봇

            if NASDAQ_시가 == 0:
                nasdaq_시가 = NASDAQ_전일종가
            else:
                nasdaq_시가 = NASDAQ_시가

            if NASDAQ_저가 == 0:
                nasdaq_저가 = NASDAQ_전일종가
            else:
                nasdaq_저가 = NASDAQ_저가

            if NASDAQ_고가 == 0:
                nasdaq_고가 = NASDAQ_전일종가
            else:
                nasdaq_고가 = NASDAQ_고가

            self.plot4_quote_remainder_ratio_base_line.setValue(NASDAQ_전일종가)
            self.plot4_nm_futures_quote_remainder_ratio_bottom_line.setValue(NASDAQ_전일종가)
            self.plot4_nm_futures_quote_remainder_ratio_upper_line.setValue(NASDAQ_전일종가)

            self.plot4_option_quote_remainder_ratio_bottom_line.setValue(NASDAQ_전일종가)
            self.plot4_option_quote_remainder_ratio_upper_line.setValue(NASDAQ_전일종가)
            
            for i in range(10):
                self.plot4_kp200_line[i].setValue(NASDAQ_전일종가)

            for i in range(9):
                self.plot4_mv_line[i].setValue(NASDAQ_전일종가)

            self.plot4_center_val_lower_line.setValue(NASDAQ_전일종가)
            self.plot4_center_val_line.setValue(NASDAQ_전일종가)
            self.plot4_center_val_upper_line.setValue(NASDAQ_전일종가)
            
            self.plot4_fut_jl_line.setValue(NASDAQ_전일종가)
            self.plot4_fut_jh_line.setValue(NASDAQ_전일종가)
            self.plot4_fut_close_line.setValue(NASDAQ_전일종가)
            self.plot4_fut_pivot_line.setValue(NASDAQ_전일종가)
            self.plot4_fut_open_line.setValue(NASDAQ_전일종가)
            self.plot4_fut_low_line.setValue(NASDAQ_전일종가)
            self.plot4_fut_high_line.setValue(NASDAQ_전일종가)

            self.plot4_cci_plus_100_line.setValue(NASDAQ_전일종가)
            self.plot4_cci_minus_100_line.setValue(NASDAQ_전일종가)
                            
            txt = ' {0} '.format(format(nasdaq_전저, ','))
            self.label_41.setText(txt)
            self.plot4_ovc_jl_line.setValue(nasdaq_전저)

            txt = ' {0} '.format(format(nasdaq_전고, ','))
            self.label_42.setText(txt)
            self.plot4_ovc_jh_line.setValue(nasdaq_전고)
            
            txt = ' {0} '.format(format(NASDAQ_전일종가, ','))
            self.label_43.setText(txt)
            self.plot4_ovc_close_line.setValue(NASDAQ_전일종가)

            txt = ' {0} '.format(format(nasdaq_피봇, ','))
            self.label_44.setText(txt)
            self.plot4_ovc_pivot_line.setValue(nasdaq_피봇)
            
            txt = ' {0} '.format(format(nasdaq_시가, ','))
            self.label_45.setText(txt)
            self.plot4_ovc_open_line.setValue(nasdaq_시가)

            txt = ' {0} '.format(format(nasdaq_저가, ','))
            self.label_46.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_46.setText(txt)
            self.plot4_ovc_low_line.setValue(nasdaq_저가)

            self.label_47.setText(" 0,000.00 (전일대비, 등락율, 진폭) ")

            txt = ' {0} '.format(format(nasdaq_고가, ','))
            self.label_48.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_48.setText(txt)
            self.plot4_ovc_high_line.setValue(nasdaq_고가)            

        elif comboindex4 == 16:

            if HANGSENG_전저 == 0:
                hsi_전저 = HANGSENG_전일종가
            else:
                hsi_전저 = HANGSENG_전저

            if HANGSENG_전고 == 0:
                hsi_전고 = HANGSENG_전일종가
            else:
                hsi_전고 = HANGSENG_전고

            if HANGSENG_피봇 == 0:
                hsi_피봇 = HANGSENG_전일종가
            else:
                hsi_피봇 = HANGSENG_피봇

            if HANGSENG_시가 == 0:
                hsi_시가 = HANGSENG_전일종가
            else:
                hsi_시가 = HANGSENG_시가

            if HANGSENG_저가 == 0:
                hsi_저가 = HANGSENG_전일종가
            else:
                hsi_저가 = HANGSENG_저가

            if HANGSENG_고가 == 0:
                hsi_고가 = HANGSENG_전일종가
            else:
                hsi_고가 = HANGSENG_고가

            self.plot4_quote_remainder_ratio_base_line.setValue(HANGSENG_전일종가)
            self.plot4_nm_futures_quote_remainder_ratio_bottom_line.setValue(HANGSENG_전일종가)
            self.plot4_nm_futures_quote_remainder_ratio_upper_line.setValue(HANGSENG_전일종가)

            self.plot4_option_quote_remainder_ratio_bottom_line.setValue(HANGSENG_전일종가)
            self.plot4_option_quote_remainder_ratio_upper_line.setValue(HANGSENG_전일종가)
            
            for i in range(10):
                self.plot4_kp200_line[i].setValue(HANGSENG_전일종가)

            for i in range(9):
                self.plot4_mv_line[i].setValue(HANGSENG_전일종가)

            self.plot4_center_val_lower_line.setValue(HANGSENG_전일종가)
            self.plot4_center_val_line.setValue(HANGSENG_전일종가)
            self.plot4_center_val_upper_line.setValue(HANGSENG_전일종가)
            
            self.plot4_fut_jl_line.setValue(HANGSENG_전일종가)
            self.plot4_fut_jh_line.setValue(HANGSENG_전일종가)
            self.plot4_fut_close_line.setValue(HANGSENG_전일종가)
            self.plot4_fut_pivot_line.setValue(HANGSENG_전일종가)
            self.plot4_fut_open_line.setValue(HANGSENG_전일종가)
            self.plot4_fut_low_line.setValue(HANGSENG_전일종가)
            self.plot4_fut_high_line.setValue(HANGSENG_전일종가)

            self.plot4_cci_plus_100_line.setValue(HANGSENG_전일종가)
            self.plot4_cci_minus_100_line.setValue(HANGSENG_전일종가)
                            
            txt = ' {0} '.format(format(hsi_전저, ','))
            self.label_41.setText(txt)
            self.plot4_ovc_jl_line.setValue(hsi_전저)

            txt = ' {0} '.format(format(hsi_전고, ','))
            self.label_42.setText(txt)
            self.plot4_ovc_jh_line.setValue(hsi_전고)
            
            txt = ' {0} '.format(format(HANGSENG_전일종가, ','))
            self.label_43.setText(txt)
            self.plot4_ovc_close_line.setValue(HANGSENG_전일종가)

            txt = ' {0} '.format(format(hsi_피봇, ','))
            self.label_44.setText(txt)
            self.plot4_ovc_pivot_line.setValue(hsi_피봇)
            
            txt = ' {0} '.format(format(hsi_시가, ','))
            self.label_45.setText(txt)
            self.plot4_ovc_open_line.setValue(hsi_시가)

            txt = ' {0} '.format(format(hsi_저가, ','))
            self.label_46.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_46.setText(txt)
            self.plot4_ovc_low_line.setValue(hsi_저가)

            self.label_47.setText(" 00.00 (전일대비, 등락율, 진폭) ")

            txt = ' {0} '.format(format(hsi_고가, ','))
            self.label_48.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_48.setText(txt)
            self.plot4_ovc_high_line.setValue(hsi_고가)

        # WTI    
        elif comboindex4 == 17:

            if WTI_전저 == 0:
                wti_전저 = WTI_전일종가
            else:
                wti_전저 = WTI_전저

            if WTI_전고 == 0:
                wti_전고 = WTI_전일종가
            else:
                wti_전고 = WTI_전고

            if WTI_피봇 == 0:
                wti_피봇 = WTI_전일종가
            else:
                wti_피봇 = WTI_피봇

            if WTI_시가 == 0:
                wti_시가 = WTI_전일종가
            else:
                wti_시가 = WTI_시가

            if WTI_저가 == 0:
                wti_저가 = WTI_전일종가
            else:
                wti_저가 = WTI_저가

            if WTI_고가 == 0:
                wti_고가 = WTI_전일종가
            else:
                wti_고가 = WTI_고가

            self.plot4_quote_remainder_ratio_base_line.setValue(WTI_전일종가)
            self.plot4_nm_futures_quote_remainder_ratio_bottom_line.setValue(WTI_전일종가)
            self.plot4_nm_futures_quote_remainder_ratio_upper_line.setValue(WTI_전일종가)

            self.plot4_option_quote_remainder_ratio_bottom_line.setValue(WTI_전일종가)
            self.plot4_option_quote_remainder_ratio_upper_line.setValue(WTI_전일종가)
            
            for i in range(10):
                self.plot4_kp200_line[i].setValue(WTI_전일종가)

            for i in range(9):
                self.plot4_mv_line[i].setValue(WTI_전일종가)

            self.plot4_center_val_lower_line.setValue(WTI_전일종가)
            self.plot4_center_val_line.setValue(WTI_전일종가)
            self.plot4_center_val_upper_line.setValue(WTI_전일종가)
            
            self.plot4_fut_jl_line.setValue(WTI_전일종가)
            self.plot4_fut_jh_line.setValue(WTI_전일종가)
            self.plot4_fut_close_line.setValue(WTI_전일종가)
            self.plot4_fut_pivot_line.setValue(WTI_전일종가)
            self.plot4_fut_open_line.setValue(WTI_전일종가)
            self.plot4_fut_low_line.setValue(WTI_전일종가)
            self.plot4_fut_high_line.setValue(WTI_전일종가)

            self.plot4_cci_plus_100_line.setValue(WTI_전일종가)
            self.plot4_cci_minus_100_line.setValue(WTI_전일종가)
                            
            txt = ' {0} '.format(format(wti_전저, ','))
            self.label_41.setText(txt)
            self.plot4_ovc_jl_line.setValue(wti_전저)

            txt = ' {0} '.format(format(wti_전고, ','))
            self.label_42.setText(txt)
            self.plot4_ovc_jh_line.setValue(wti_전고)
            
            txt = ' {0} '.format(format(WTI_전일종가, ','))
            self.label_43.setText(txt)
            self.plot4_ovc_close_line.setValue(WTI_전일종가)

            txt = ' {0} '.format(format(wti_피봇, ','))
            self.label_44.setText(txt)
            self.plot4_ovc_pivot_line.setValue(wti_피봇)
            
            txt = ' {0} '.format(format(wti_시가, ','))
            self.label_45.setText(txt)
            self.plot4_ovc_open_line.setValue(wti_시가)

            txt = ' {0} '.format(format(wti_저가, ','))
            self.label_46.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_46.setText(txt)
            self.plot4_ovc_low_line.setValue(wti_저가)

            self.label_47.setText(" 00.00 (전일대비, 등락율, 진폭) ")

            txt = ' {0} '.format(format(wti_고가, ','))
            self.label_48.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_48.setText(txt)
            self.plot4_ovc_high_line.setValue(wti_고가)
        
        elif comboindex4 == 18:

            if GOLD_전저 == 0:
                gold_전저 = GOLD_전일종가
            else:
                gold_전저 = GOLD_전저

            if GOLD_전고 == 0:
                gold_전고 = GOLD_전일종가
            else:
                gold_전고 = GOLD_전고

            if GOLD_피봇 == 0:
                gold_피봇 = GOLD_전일종가
            else:
                gold_피봇 = GOLD_피봇

            if GOLD_시가 == 0:
                gold_시가 = GOLD_전일종가
            else:
                gold_시가 = GOLD_시가

            if GOLD_저가 == 0:
                gold_저가 = GOLD_전일종가
            else:
                gold_저가 = GOLD_저가

            if GOLD_고가 == 0:
                gold_고가 = GOLD_전일종가
            else:
                gold_고가 = GOLD_고가

            self.plot4_quote_remainder_ratio_base_line.setValue(GOLD_전일종가)
            self.plot4_nm_futures_quote_remainder_ratio_bottom_line.setValue(GOLD_전일종가)
            self.plot4_nm_futures_quote_remainder_ratio_upper_line.setValue(GOLD_전일종가)

            self.plot4_option_quote_remainder_ratio_bottom_line.setValue(GOLD_전일종가)
            self.plot4_option_quote_remainder_ratio_upper_line.setValue(GOLD_전일종가)
            
            for i in range(10):
                self.plot4_kp200_line[i].setValue(GOLD_전일종가)

            for i in range(9):
                self.plot4_mv_line[i].setValue(GOLD_전일종가)

            self.plot4_center_val_lower_line.setValue(GOLD_전일종가)
            self.plot4_center_val_line.setValue(GOLD_전일종가)
            self.plot4_center_val_upper_line.setValue(GOLD_전일종가)
            
            self.plot4_fut_jl_line.setValue(GOLD_전일종가)
            self.plot4_fut_jh_line.setValue(GOLD_전일종가)
            self.plot4_fut_close_line.setValue(GOLD_전일종가)
            self.plot4_fut_pivot_line.setValue(GOLD_전일종가)
            self.plot4_fut_open_line.setValue(GOLD_전일종가)
            self.plot4_fut_low_line.setValue(GOLD_전일종가)
            self.plot4_fut_high_line.setValue(GOLD_전일종가)

            self.plot4_cci_plus_100_line.setValue(GOLD_전일종가)
            self.plot4_cci_minus_100_line.setValue(GOLD_전일종가)
                            
            txt = ' {0} '.format(format(gold_전저, ','))
            self.label_41.setText(txt)
            self.plot4_ovc_jl_line.setValue(gold_전저)

            txt = ' {0} '.format(format(gold_전고, ','))
            self.label_42.setText(txt)
            self.plot4_ovc_jh_line.setValue(gold_전고)
            
            txt = ' {0} '.format(format(GOLD_전일종가, ','))
            self.label_43.setText(txt)
            self.plot4_ovc_close_line.setValue(GOLD_전일종가)

            txt = ' {0} '.format(format(gold_피봇, ','))
            self.label_44.setText(txt)
            self.plot4_ovc_pivot_line.setValue(gold_피봇)
            
            txt = ' {0} '.format(format(gold_시가, ','))
            self.label_45.setText(txt)
            self.plot4_ovc_open_line.setValue(gold_시가)

            txt = ' {0} '.format(format(gold_저가, ','))
            self.label_46.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_46.setText(txt)
            self.plot4_ovc_low_line.setValue(gold_저가)

            self.label_47.setText(" 00.00 (전일대비, 등락율, 진폭) ")

            txt = ' {0} '.format(format(gold_고가, ','))
            self.label_48.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_48.setText(txt)
            self.plot4_ovc_high_line.setValue(gold_고가)

        elif comboindex4 == 19:

            if EURO_전저 == 0:
                euro_전저 = EURO_전일종가
            else:
                euro_전저 = EURO_전저

            if EURO_전고 == 0:
                euro_전고 = EURO_전일종가
            else:
                euro_전고 = EURO_전고

            if EURO_피봇 == 0:
                euro_피봇 = EURO_전일종가
            else:
                euro_피봇 = EURO_피봇

            if EURO_시가 == 0:
                euro_시가 = EURO_전일종가
            else:
                euro_시가 = EURO_시가

            if EURO_저가 == 0:
                euro_저가 = EURO_전일종가
            else:
                euro_저가 = EURO_저가

            if EURO_고가 == 0:
                euro_고가 = EURO_전일종가
            else:
                euro_고가 = EURO_고가

            self.plot4_quote_remainder_ratio_base_line.setValue(EURO_전일종가)
            self.plot4_nm_futures_quote_remainder_ratio_bottom_line.setValue(EURO_전일종가)
            self.plot4_nm_futures_quote_remainder_ratio_upper_line.setValue(EURO_전일종가)

            self.plot4_option_quote_remainder_ratio_bottom_line.setValue(EURO_전일종가)
            self.plot4_option_quote_remainder_ratio_upper_line.setValue(EURO_전일종가)
            
            for i in range(10):
                self.plot4_kp200_line[i].setValue(EURO_전일종가)

            for i in range(9):
                self.plot4_mv_line[i].setValue(EURO_전일종가)

            self.plot4_center_val_lower_line.setValue(EURO_전일종가)
            self.plot4_center_val_line.setValue(EURO_전일종가)
            self.plot4_center_val_upper_line.setValue(EURO_전일종가)
            
            self.plot4_fut_jl_line.setValue(EURO_전일종가)
            self.plot4_fut_jh_line.setValue(EURO_전일종가)
            self.plot4_fut_close_line.setValue(EURO_전일종가)
            self.plot4_fut_pivot_line.setValue(EURO_전일종가)
            self.plot4_fut_open_line.setValue(EURO_전일종가)
            self.plot4_fut_low_line.setValue(EURO_전일종가)
            self.plot4_fut_high_line.setValue(EURO_전일종가)

            self.plot4_cci_plus_100_line.setValue(EURO_전일종가)
            self.plot4_cci_minus_100_line.setValue(EURO_전일종가)
                            
            txt = ' {0:.5f} '.format(euro_전저)
            self.label_41.setText(txt)
            self.plot4_ovc_jl_line.setValue(euro_전저)

            txt = ' {0:.5f} '.format(euro_전고)
            self.label_42.setText(txt)
            self.plot4_ovc_jh_line.setValue(euro_전고)
            
            txt = ' {0:.5f} '.format(EURO_전일종가)
            self.label_43.setText(txt)
            self.plot4_ovc_close_line.setValue(EURO_전일종가)

            txt = ' {0:.5f} '.format(euro_피봇)
            self.label_44.setText(txt)
            self.plot4_ovc_pivot_line.setValue(euro_피봇)
            
            txt = ' {0:.5f} '.format(euro_시가)
            self.label_45.setText(txt)
            self.plot4_ovc_open_line.setValue(euro_시가)

            txt = ' {0:.5f} '.format(euro_저가)
            self.label_46.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_46.setText(txt)
            self.plot4_ovc_low_line.setValue(euro_저가)

            self.label_47.setText(" 00.00 (전일대비, 등락율, 진폭) ")

            txt = ' {0:.5f} '.format(euro_고가)
            self.label_48.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_48.setText(txt)
            self.plot4_ovc_high_line.setValue(euro_고가)

        elif comboindex4 == 20:

            if YEN_전저 == 0:
                yen_전저 = YEN_전일종가
            else:
                yen_전저 = YEN_전저

            if YEN_전고 == 0:
                yen_전고 = YEN_전일종가
            else:
                yen_전고 = YEN_전고

            if YEN_피봇 == 0:
                yen_피봇 = YEN_전일종가
            else:
                yen_피봇 = YEN_피봇

            if YEN_시가 == 0:
                yen_시가 = YEN_전일종가
            else:
                yen_시가 = YEN_시가

            if YEN_저가 == 0:
                yen_저가 = YEN_전일종가
            else:
                yen_저가 = YEN_저가

            if YEN_고가 == 0:
                yen_고가 = YEN_전일종가
            else:
                yen_고가 = YEN_고가

            self.plot4_quote_remainder_ratio_base_line.setValue(YEN_전일종가)
            self.plot4_nm_futures_quote_remainder_ratio_bottom_line.setValue(YEN_전일종가)
            self.plot4_nm_futures_quote_remainder_ratio_upper_line.setValue(YEN_전일종가)

            self.plot4_option_quote_remainder_ratio_bottom_line.setValue(YEN_전일종가)
            self.plot4_option_quote_remainder_ratio_upper_line.setValue(YEN_전일종가)
            
            for i in range(10):
                self.plot4_kp200_line[i].setValue(YEN_전일종가)

            for i in range(9):
                self.plot4_mv_line[i].setValue(YEN_전일종가)

            self.plot4_center_val_lower_line.setValue(YEN_전일종가)
            self.plot4_center_val_line.setValue(YEN_전일종가)
            self.plot4_center_val_upper_line.setValue(YEN_전일종가)
            
            self.plot4_fut_jl_line.setValue(YEN_전일종가)
            self.plot4_fut_jh_line.setValue(YEN_전일종가)
            self.plot4_fut_close_line.setValue(YEN_전일종가)
            self.plot4_fut_pivot_line.setValue(YEN_전일종가)
            self.plot4_fut_open_line.setValue(YEN_전일종가)
            self.plot4_fut_low_line.setValue(YEN_전일종가)
            self.plot4_fut_high_line.setValue(YEN_전일종가)

            self.plot4_cci_plus_100_line.setValue(YEN_전일종가)
            self.plot4_cci_minus_100_line.setValue(YEN_전일종가)
                            
            txt = ' {0} '.format(format(yen_전저, ','))
            self.label_41.setText(txt)
            self.plot4_ovc_jl_line.setValue(yen_전저)

            txt = ' {0} '.format(format(yen_전고, ','))
            self.label_42.setText(txt)
            self.plot4_ovc_jh_line.setValue(yen_전고)
            
            txt = ' {0} '.format(format(YEN_전일종가, ','))
            self.label_43.setText(txt)
            self.plot4_ovc_close_line.setValue(YEN_전일종가)

            txt = ' {0} '.format(format(yen_피봇, ','))
            self.label_44.setText(txt)
            self.plot4_ovc_pivot_line.setValue(yen_피봇)
            
            txt = ' {0} '.format(format(yen_시가, ','))
            self.label_45.setText(txt)
            self.plot4_ovc_open_line.setValue(yen_시가)

            txt = ' {0} '.format(format(yen_저가, ','))
            self.label_46.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_46.setText(txt)
            self.plot4_ovc_low_line.setValue(yen_저가)

            self.label_47.setText(" 00.00 (전일대비, 등락율, 진폭) ")

            txt = ' {0} '.format(format(yen_고가, ','))
            self.label_48.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_48.setText(txt)
            self.plot4_ovc_high_line.setValue(yen_고가)
        
        elif comboindex4 == 21:

            if ADI_전저 == 0:
                adi_전저 = ADI_전일종가
            else:
                adi_전저 = ADI_전저

            if ADI_전고 == 0:
                adi_전고 = ADI_전일종가
            else:
                adi_전고 = ADI_전고

            if ADI_피봇 == 0:
                adi_피봇 = ADI_전일종가
            else:
                adi_피봇 = ADI_피봇

            if ADI_시가 == 0:
                adi_시가 = ADI_전일종가
            else:
                adi_시가 = ADI_시가

            if ADI_저가 == 0:
                adi_저가 = ADI_전일종가
            else:
                adi_저가 = ADI_저가

            if ADI_고가 == 0:
                adi_고가 = ADI_전일종가
            else:
                adi_고가 = ADI_고가

            self.plot4_quote_remainder_ratio_base_line.setValue(ADI_전일종가)
            self.plot4_nm_futures_quote_remainder_ratio_bottom_line.setValue(ADI_전일종가)
            self.plot4_nm_futures_quote_remainder_ratio_upper_line.setValue(ADI_전일종가)

            self.plot4_option_quote_remainder_ratio_bottom_line.setValue(ADI_전일종가)
            self.plot4_option_quote_remainder_ratio_upper_line.setValue(ADI_전일종가)
            
            for i in range(10):
                self.plot4_kp200_line[i].setValue(ADI_전일종가)

            for i in range(9):
                self.plot4_mv_line[i].setValue(ADI_전일종가)

            self.plot4_center_val_lower_line.setValue(ADI_전일종가)
            self.plot4_center_val_line.setValue(ADI_전일종가)
            self.plot4_center_val_upper_line.setValue(ADI_전일종가)
            
            self.plot4_fut_jl_line.setValue(ADI_전일종가)
            self.plot4_fut_jh_line.setValue(ADI_전일종가)
            self.plot4_fut_close_line.setValue(ADI_전일종가)
            self.plot4_fut_pivot_line.setValue(ADI_전일종가)
            self.plot4_fut_open_line.setValue(ADI_전일종가)
            self.plot4_fut_low_line.setValue(ADI_전일종가)
            self.plot4_fut_high_line.setValue(ADI_전일종가)

            self.plot4_cci_plus_100_line.setValue(ADI_전일종가)
            self.plot4_cci_minus_100_line.setValue(ADI_전일종가)
                            
            txt = ' {0:.5f} '.format(adi_전저)
            self.label_41.setText(txt)
            self.plot4_ovc_jl_line.setValue(adi_전저)

            txt = ' {0:.5f} '.format(adi_전고)
            self.label_42.setText(txt)
            self.plot4_ovc_jh_line.setValue(adi_전고)
            
            txt = ' {0:.5f} '.format(ADI_전일종가)
            self.label_43.setText(txt)
            self.plot4_ovc_close_line.setValue(ADI_전일종가)

            txt = ' {0:.5f} '.format(adi_피봇)
            self.label_44.setText(txt)
            self.plot4_ovc_pivot_line.setValue(adi_피봇)
            
            txt = ' {0:.5f} '.format(adi_시가)
            self.label_45.setText(txt)
            self.plot4_ovc_open_line.setValue(adi_시가)

            txt = ' {0:.5f} '.format(adi_저가)
            self.label_46.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_46.setText(txt)
            self.plot4_ovc_low_line.setValue(adi_저가)

            self.label_47.setText(" 00.00 (전일대비, 등락율, 진폭) ")

            txt = ' {0:.5f} '.format(adi_고가)
            self.label_48.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_48.setText(txt)
            self.plot4_ovc_high_line.setValue(adi_고가)
        else:
            pass

    def plot5_clear(self):

        # Line Clear
        self.plot5_fut_jl_line.setValue(0)
        self.plot5_fut_jh_line.setValue(0)
        self.plot5_fut_open_line.setValue(0)
        self.plot5_fut_close_line.setValue(0)
        self.plot5_fut_pivot_line.setValue(0)
        self.plot5_fut_low_line.setValue(0)
        self.plot5_fut_high_line.setValue(0)

        self.plot5_ovc_jl_line.setValue(0)
        self.plot5_ovc_jh_line.setValue(0)
        self.plot5_ovc_close_line.setValue(0)
        self.plot5_ovc_open_line.setValue(0)
        self.plot5_ovc_pivot_line.setValue(0)
        self.plot5_ovc_low_line.setValue(0)
        self.plot5_ovc_high_line.setValue(0)

        for i in range(10):
            self.plot5_kp200_line[i].setValue(0)

        for i in range(9):
            self.plot5_mv_line[i].setValue(0)        

        self.plot5_quote_remainder_ratio_base_line.setValue(0)
        self.plot5_nm_futures_quote_remainder_ratio_bottom_line.setValue(0)
        self.plot5_nm_futures_quote_remainder_ratio_upper_line.setValue(0)

        self.plot5_option_quote_remainder_ratio_bottom_line.setValue(0)
        self.plot5_option_quote_remainder_ratio_upper_line.setValue(0)

        self.plot5_center_val_lower_line.setValue(0)
        self.plot5_center_val_line.setValue(0)
        self.plot5_center_val_upper_line.setValue(0)

        # Fibonacci Retracements Line
        self.plot5_fibonacci_line1.setValue(0)
        self.plot5_fibonacci_line2.setValue(0)
        self.plot5_fibonacci_line3.setValue(0)
        self.plot5_fibonacci_line4.setValue(0)
        self.plot5_fibonacci_line5.setValue(0)

        # CCI Line
        self.plot5_cci_plus_100_line.setValue(0)
        self.plot5_cci_minus_100_line.setValue(0)

        # Curve Clear
        self.plot5_fut_cm_price_curve.clear()
        self.plot5_fut_nm_price_curve.clear()
        self.plot5_kp200_curve.clear()

        self.plot5_fut_cm_quote_remainder_ratio_curve.clear()
        self.plot5_fut_nm_quote_remainder_ratio_curve.clear()

        self.plot5_fut_volume_curve.clear()
        self.plot5_call_volume_curve.clear()
        self.plot5_put_volume_curve.clear()        

        self.plot5_center_val_curve.clear()

        for i in range(option_pairs_count):
            self.plot5_call_curve[i].clear()
            self.plot5_put_curve[i].clear()

        self.plot5_call_quote_curve.clear()
        self.plot5_put_quote_curve.clear()

        self.plot5_call_oi_curve.clear()
        self.plot5_put_oi_curve.clear()

        self.plot5_fut_cm_drate_curve.clear()
        self.plot5_fut_nm_drate_curve.clear()
        self.plot5_cme_drate_curve.clear()
        self.plot5_call_drate_curve.clear()
        self.plot5_put_drate_curve.clear()

        self.plot5_program_curve.clear()
        self.plot5_kospi_total_curve.clear()
        self.plot5_futures_foreigner_curve.clear()
        self.plot5_kospi_foreigner_curve.clear()

        self.plot5_sp500_curve.clear()
        self.plot5_dow_curve.clear()
        self.plot5_nasdaq_curve.clear()
        self.plot5_hsi_curve.clear()

        self.plot5_wti_curve.clear()
        self.plot5_gold_curve.clear()

        self.plot5_euro_curve.clear()
        self.plot5_yen_curve.clear()
        self.plot5_adi_curve.clear()

        self.plot5_bollinger_1st_upper_curve.clear()
        self.plot5_bollinger_1st_middle_curve.clear()
        self.plot5_bollinger_1st_lower_curve.clear()
        self.plot5_bollinger_2nd_upper_curve.clear()
        self.plot5_bollinger_2nd_middle_curve.clear()
        self.plot5_bollinger_2nd_lower_curve.clear()

        self.plot5_psar_curve.clear()

        self.plot5_mama_curve.clear()
        self.plot5_fama_curve.clear()
        #self.plot5_sslup_curve.clear()
        #self.plot5_ssldown_curve.clear()

        self.plot5_oe_conv_curve.clear()
        self.plot5_oe_base_curve.clear()
        self.plot5_span_a_curve.clear()
        self.plot5_span_b_curve.clear()
        self.plot5_lagging_span_curve.clear()

        self.plot5_futures_rsi_curve.clear()
        self.plot5_sp500_rsi_curve.clear()
        self.plot5_dow_rsi_curve.clear()
        self.plot5_nasdaq_rsi_curve.clear()
        self.plot5_hsi_rsi_curve.clear()
        self.plot5_wti_rsi_curve.clear()
        self.plot5_gold_rsi_curve.clear()
        self.plot5_euro_rsi_curve.clear()
        self.plot5_yen_rsi_curve.clear()
        self.plot5_adi_rsi_curve.clear()

        self.plot5_futures_cci1_curve.clear()
        self.plot5_sp500_cci1_curve.clear()
        self.plot5_dow_cci1_curve.clear()
        self.plot5_nasdaq_cci1_curve.clear()
        self.plot5_hsi_cci1_curve.clear()
        self.plot5_wti_cci1_curve.clear()
        self.plot5_gold_cci1_curve.clear()
        self.plot5_euro_cci1_curve.clear()
        self.plot5_yen_cci1_curve.clear()
        self.plot5_adi_cci1_curve.clear()

        self.plot5_futures_cci2_curve.clear()
        self.plot5_sp500_cci2_curve.clear()
        self.plot5_dow_cci2_curve.clear()
        self.plot5_nasdaq_cci2_curve.clear()
        self.plot5_hsi_cci2_curve.clear()
        self.plot5_wti_cci2_curve.clear()
        self.plot5_gold_cci2_curve.clear()
        self.plot5_euro_cci2_curve.clear()
        self.plot5_yen_cci2_curve.clear()
        self.plot5_adi_cci2_curve.clear()

        self.label_51.setText(" - ")
        self.label_52.setText(" - ")
        self.label_53.setText(" - ")
        self.label_54.setText(" - ")
        self.label_55.setText(" - ")
        self.label_56.setText(" - ")
        self.label_57.setText(" - ")
        self.label_58.setText(" - ")

        self.label_p5_1.setStyleSheet('background-color: lime; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_p5_1.setText(" 좌표 ")

        self.label_p5_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_p5_2.setText(" BB Upper\n BB Middle\n BB Lower ")

        self.label_p5_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_p5_3.setText(" PSAR\n MAMA ")

        self.label_p5_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_p5_4.setText(" ONE EYE ")

        txt = 'Plot5 Clear...\r'
        self.parent.textBrowser.append(txt)

    def cb5_selectionChanged(self):

        global comboindex5
        
        txt = self.comboBox5.currentText()
        comboindex5 = self.comboBox5.currentIndex()

        self.plot5_clear()

        if comboindex5 == 0:
            self.timer5.stop()

            txt = 'Plot5 Timer Stop...\r'
            self.parent.textBrowser.append(txt)
        else:
            if not self.timer5.isActive():

                start_time = timeit.default_timer()

                while True:

                    if not flag_screen_update_is_running:
                        self.timer5.start()
                        txt = 'Plot5 Timer Setting Done...\r'
                        self.parent.textBrowser.append(txt)
                        break

                    end_time = timeit.default_timer()

                    time_gap = (end_time - start_time) * 1000

                    if DayTime:
                        time_limit = 200
                    else:
                        time_limit = 100

                    if time_gap > time_limit:
                        self.timer5.start()
                        txt = 'Plot5 Timer Forced Setting Done...\r'
                        self.parent.textBrowser.append(txt)
                        break
            else:
                pass

        # 선물가격
        if comboindex5 == 2:
                        
            if 근월물_선물_전저 == 0:
                선물_전저 = 근월물_선물_종가
            else:
                선물_전저 = 근월물_선물_전저

            if 근월물_선물_전고 == 0:
                선물_전고 = 근월물_선물_종가
            else:
                선물_전고 = 근월물_선물_전고

            선물_종가 = 근월물_선물_종가                

            if 근월물_선물_피봇 == 0:
                선물_피봇 = 근월물_선물_종가
            else:
                선물_피봇 = 근월물_선물_피봇

            if 근월물_선물_시가 == 0:
                선물_시가 = 근월물_선물_종가
            else:
                선물_시가 = 근월물_선물_시가

            if 근월물_선물_저가 == 0:
                선물_저가 = 근월물_선물_종가
            else:
                선물_저가 = 근월물_선물_저가

            if 근월물_선물_고가 == 0:
                선물_고가 = 근월물_선물_종가
            else:
                선물_고가 = 근월물_선물_고가

            self.plot5_kp200_line[0].setValue(KP200_COREVAL[3])
            self.plot5_kp200_line[1].setValue(KP200_COREVAL[3])
            self.plot5_kp200_line[2].setValue(KP200_COREVAL[3])
            self.plot5_kp200_line[3].setValue(KP200_COREVAL[3])
            self.plot5_kp200_line[4].setValue(KP200_COREVAL[4])
            self.plot5_kp200_line[5].setValue(KP200_COREVAL[5])
            self.plot5_kp200_line[6].setValue(KP200_COREVAL[6])
            self.plot5_kp200_line[7].setValue(KP200_COREVAL[6])
            self.plot5_kp200_line[8].setValue(KP200_COREVAL[6])
            self.plot5_kp200_line[9].setValue(KP200_COREVAL[6])
            
            # 종가선 컬러를 살리기위한 임시방편            
            self.plot5_quote_remainder_ratio_base_line.setValue(선물_종가)
            self.plot5_nm_futures_quote_remainder_ratio_bottom_line.setValue(선물_종가)
            self.plot5_nm_futures_quote_remainder_ratio_upper_line.setValue(선물_종가)

            self.plot5_option_quote_remainder_ratio_bottom_line.setValue(선물_종가)
            self.plot5_option_quote_remainder_ratio_upper_line.setValue(선물_종가)

            for i in range(9):
                self.plot5_mv_line[i].setValue(선물_종가)

            self.plot5_center_val_lower_line.setValue(선물_종가)
            self.plot5_center_val_line.setValue(선물_종가)
            self.plot5_center_val_upper_line.setValue(선물_종가)

            self.plot5_ovc_open_line.setValue(선물_종가)
            self.plot5_ovc_jl_line.setValue(선물_종가)
            self.plot5_ovc_jh_line.setValue(선물_종가)
            self.plot5_ovc_pivot_line.setValue(선물_종가)
            self.plot5_ovc_low_line.setValue(선물_종가)
            self.plot5_ovc_high_line.setValue(선물_종가)
            self.plot5_ovc_close_line.setValue(선물_종가)

            self.plot5_cci_plus_100_line.setValue(선물_종가)
            self.plot5_cci_minus_100_line.setValue(선물_종가)

            txt = ' {0} '.format(선물_전저)
            self.label_51.setText(txt) 
            self.plot5_fut_jl_line.setValue(선물_전저)
            
            txt = ' {0} '.format(선물_전고)
            self.label_52.setText(txt)
            self.plot5_fut_jh_line.setValue(선물_전고)
            
            txt = ' {0} '.format(선물_종가)
            self.label_53.setText(txt)
            self.plot5_fut_close_line.setValue(선물_종가)
            
            txt = ' {0} '.format(선물_피봇)
            self.label_54.setText(txt)
            self.plot5_fut_pivot_line.setValue(선물_피봇)

            txt = ' {0} '.format(선물_시가)
            self.label_55.setText(txt)
            self.plot5_fut_open_line.setValue(선물_시가)

            txt = ' {0} '.format(선물_저가)
            self.label_56.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_56.setText(txt)
            self.plot5_fut_low_line.setValue(선물_저가)
            
            self.label_57.setText(" 000.00 (전일대비, 등락율, 진폭), kp200 : 000.00 ")

            txt = ' {0} '.format(선물_고가)
            self.label_58.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_58.setText(txt)
            self.plot5_fut_high_line.setValue(선물_고가)
        
        # 선옵잔량비
        elif comboindex5 == 3:

            self.label_51.setText(" - ")
            self.label_52.setText(" - ")
            self.label_53.setText(" - ")
            self.label_54.setText(" - ")
            self.label_55.setText(" - ")

            self.label_56.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_56.setText(" 풋잔량비 ")

            self.label_57.setText(" 선물잔량비 ")

            self.label_58.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_58.setText(" 콜잔량비 ")
            
            self.label_p5_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p5_2.setText(" BB Upper\n BB Middle\n BB Lower ")

            self.label_p5_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p5_3.setText(" PSAR\n MAMA ")

            self.label_p5_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p5_4.setText(" ONE EYE ")

            self.plot5_quote_remainder_ratio_base_line.setValue(1.0)
            self.plot5_nm_futures_quote_remainder_ratio_bottom_line.setValue(1.0)
            self.plot5_nm_futures_quote_remainder_ratio_upper_line.setValue(1.0)

            self.plot5_option_quote_remainder_ratio_bottom_line.setValue(1.0)
            self.plot5_option_quote_remainder_ratio_upper_line.setValue(1.0)

        # 선옵체결
        elif comboindex5 == 4:

            self.label_51.setText(" - ")
            self.label_52.setText(" - ")
            self.label_53.setText(" - ")
            self.label_54.setText(" - ")
            self.label_55.setText(" - ")

            self.label_56.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_56.setText(" 풋체결량 ")

            self.label_57.setText(" 선물체결량 ")

            self.label_58.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_58.setText(" 콜체결량 ")
            
            self.label_p5_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p5_2.setText(" BB Upper\n BB Middle\n BB Lower ")

            self.label_p5_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p5_3.setText(" PSAR\n MAMA ")

            self.label_p5_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p5_4.setText(" ONE EYE ")

        # 옵션가격
        elif comboindex5 == 5:

            self.label_51.setText(" 등가: 행사가 ")
            self.label_52.setText(" 시작 중심가 ")
            self.label_53.setText(" 중심가 하단 ")
            self.label_54.setText(" 중심가 상단 ")
            self.label_55.setText(" - ")
            self.label_56.setText(" 풋현재가 ")
            self.label_57.setText(" 중심가 ")
            self.label_58.setText(" 콜현재가 ")
            
            self.label_p5_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p5_2.setText(" BB Upper\n BB Middle\n BB Lower ")

            self.label_p5_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p5_3.setText(" PSAR\n MAMA ")

            self.label_p5_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p5_4.setText(" ONE EYE ")

            # 대맥점 표시
            self.plot5_mv_line[1].setValue(2.5)
            self.plot5_mv_line[2].setValue(3.5)
            self.plot5_mv_line[3].setValue(4.85)

            self.plot5_center_val_lower_line.setValue(옵션_중심가/GOLDEN_RATIO)
            self.plot5_center_val_line.setValue(옵션_중심가)
            self.plot5_center_val_upper_line.setValue(옵션_중심가*GOLDEN_RATIO)

        # 옵션잔량비    
        elif comboindex5 == 6:

            self.label_51.setText(" - ")
            self.label_52.setText(" - ")
            self.label_53.setText(" - ")
            self.label_54.setText(" - ")
            self.label_55.setText(" - ")

            self.label_56.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_56.setText(" 풋잔량비 ")

            self.label_57.setText(" - ")

            self.label_58.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_58.setText(" 콜잔량비 ")
            
            self.label_p5_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p5_2.setText(" BB Upper\n BB Middle\n BB Lower ")

            self.label_p5_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p5_3.setText(" PSAR\n MAMA ")

            self.label_p5_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p5_4.setText(" ONE EYE ")

            self.plot5_quote_remainder_ratio_base_line.setValue(1.0)
            self.plot5_nm_futures_quote_remainder_ratio_bottom_line.setValue(1.0)
            self.plot5_nm_futures_quote_remainder_ratio_upper_line.setValue(1.0)

            self.plot5_option_quote_remainder_ratio_bottom_line.setValue(1.0)
            self.plot5_option_quote_remainder_ratio_upper_line.setValue(1.0)     

        # 옵션미결
        elif comboindex5 == 7:

            self.label_51.setText(" - ")
            self.label_52.setText(" - ")
            self.label_53.setText(" - ")
            self.label_54.setText(" - ")
            self.label_55.setText(" - ")

            self.label_56.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_56.setText(" 풋미결 ")

            self.label_57.setText(" - ")

            self.label_58.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_58.setText(" 콜미결 ")
            
            self.label_p5_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p5_2.setText(" BB Upper\n BB Middle\n BB Lower ")

            self.label_p5_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p5_3.setText(" PSAR\n MAMA ")

            self.label_p5_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p5_4.setText(" ONE EYE ")
        
        # 등락율비
        elif comboindex5 == 8:

            self.label_51.setText(" - ")
            self.label_52.setText(" - ")
            self.label_53.setText(" - ")
            self.label_54.setText(" - ")

            self.label_55.setStyleSheet('background-color: lime; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_55.setText(" DOW등락율 ")

            self.label_56.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_56.setText(" 풋등락율 ")

            self.label_57.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_57.setText(" 선물등락율 ")

            self.label_58.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_58.setText(" 콜등락율 ")
            
            self.label_p5_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p5_2.setText(" BB Upper\n BB Middle\n BB Lower ")

            self.label_p5_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p5_3.setText(" PSAR\n MAMA ")

            self.label_p5_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p5_4.setText(" ONE EYE ")

        # 수급종합
        elif comboindex5 == 10:

            self.label_51.setText(" - ")
            self.label_52.setText(" - ")
            self.label_53.setText(" - ")
            self.label_54.setText(" - ")
            self.label_55.setText(" - ")

            self.label_56.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_56.setText(" Prog/F.S ")

            self.label_57.setText(" 선물체결량 ")

            self.label_58.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_58.setText(" S.S/F.F ")

        # 외인수급
        elif comboindex5 == 11:

            pass
            '''
            self.label_51.setText(" - ")
            self.label_52.setText(" - ")
            self.label_53.setText(" - ")
            self.label_54.setText(" - ")
            self.label_55.setText(" - ")

            self.label_56.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_56.setText(" 외인현물 ")

            self.label_57.setText(" 선물체결량 ")

            self.label_58.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_58.setText(" 외인선물 ")
            '''

        # SP500
        elif comboindex5 == 13:

            if SP500_전저 == 0:
                sp500_전저 = SP500_전일종가
            else:
                sp500_전저 = SP500_전저

            if SP500_전고 == 0:
                sp500_전고 = SP500_전일종가
            else:
                sp500_전고 = SP500_전고               

            if SP500_피봇 == 0:
                sp500_피봇 = SP500_전일종가
            else:
                sp500_피봇 = SP500_피봇            

            if SP500_시가 == 0:
                sp500_시가 = SP500_전일종가
            else:
                sp500_시가 = SP500_시가

            if SP500_저가 == 0:
                sp500_저가 = SP500_전일종가
            else:
                sp500_저가 = SP500_저가

            if SP500_고가 == 0:
                sp500_고가 = SP500_전일종가
            else:
                sp500_고가 = SP500_고가

            self.plot5_quote_remainder_ratio_base_line.setValue(SP500_전일종가)
            self.plot5_nm_futures_quote_remainder_ratio_bottom_line.setValue(SP500_전일종가)
            self.plot5_nm_futures_quote_remainder_ratio_upper_line.setValue(SP500_전일종가)

            self.plot5_option_quote_remainder_ratio_bottom_line.setValue(SP500_전일종가)
            self.plot5_option_quote_remainder_ratio_upper_line.setValue(SP500_전일종가)
            
            for i in range(10):
                self.plot5_kp200_line[i].setValue(SP500_전일종가)

            for i in range(9):
                self.plot5_mv_line[i].setValue(SP500_전일종가)

            self.plot5_center_val_lower_line.setValue(SP500_전일종가)
            self.plot5_center_val_line.setValue(SP500_전일종가)
            self.plot5_center_val_upper_line.setValue(SP500_전일종가)
            
            self.plot5_fut_jl_line.setValue(SP500_전일종가)
            self.plot5_fut_jh_line.setValue(SP500_전일종가)
            self.plot5_fut_close_line.setValue(SP500_전일종가)
            self.plot5_fut_pivot_line.setValue(SP500_전일종가)
            self.plot5_fut_open_line.setValue(SP500_전일종가)
            self.plot5_fut_low_line.setValue(SP500_전일종가)
            self.plot5_fut_high_line.setValue(SP500_전일종가)

            self.plot5_cci_plus_100_line.setValue(SP500_전일종가)
            self.plot5_cci_minus_100_line.setValue(SP500_전일종가)
                
            txt = ' {0} '.format(format(sp500_전저, ','))
            self.label_51.setText(txt)
            self.plot5_ovc_jl_line.setValue(sp500_전저)

            txt = ' {0} '.format(format(sp500_전고, ','))
            self.label_52.setText(txt)
            self.plot5_ovc_jh_line.setValue(sp500_전고)
            
            txt = ' {0} '.format(format(SP500_전일종가, ','))
            self.label_53.setText(txt)
            self.plot5_ovc_close_line.setValue(SP500_전일종가)

            txt = ' {0} '.format(format(sp500_피봇, ','))
            self.label_54.setText(txt)
            self.plot5_ovc_pivot_line.setValue(sp500_피봇)
            
            txt = ' {0} '.format(format(sp500_시가, ','))
            self.label_55.setText(txt)
            self.plot5_ovc_open_line.setValue(sp500_시가)

            txt = ' {0} '.format(format(sp500_저가, ','))
            self.label_56.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_56.setText(txt)
            self.plot5_ovc_low_line.setValue(sp500_저가)

            self.label_57.setText(" 0,000.00 (전일대비, 등락율, 진폭) ")

            txt = ' {0} '.format(format(sp500_고가, ','))
            self.label_58.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_58.setText(txt)
            self.plot5_ovc_high_line.setValue(sp500_고가)

        # DOW
        elif comboindex5 == 14:

            if DOW_전저 == 0:
                dow_전저 = DOW_전일종가
            else:
                dow_전저 = DOW_전저

            if DOW_전고 == 0:
                dow_전고 = DOW_전일종가
            else:
                dow_전고 = DOW_전고

            if DOW_피봇 == 0:
                dow_피봇 = DOW_전일종가
            else:
                dow_피봇 = DOW_피봇

            if DOW_시가 == 0:
                dow_시가 = DOW_전일종가
            else:
                dow_시가 = DOW_시가

            if DOW_저가 == 0:
                dow_저가 = DOW_전일종가
            else:
                dow_저가 = DOW_저가

            if DOW_고가 == 0:
                dow_고가 = DOW_전일종가
            else:
                dow_고가 = DOW_고가

            self.plot5_quote_remainder_ratio_base_line.setValue(DOW_전일종가)
            self.plot5_nm_futures_quote_remainder_ratio_bottom_line.setValue(DOW_전일종가)
            self.plot5_nm_futures_quote_remainder_ratio_upper_line.setValue(DOW_전일종가)

            self.plot5_option_quote_remainder_ratio_bottom_line.setValue(DOW_전일종가)
            self.plot5_option_quote_remainder_ratio_upper_line.setValue(DOW_전일종가)
            
            for i in range(10):
                self.plot5_kp200_line[i].setValue(DOW_전일종가)

            for i in range(9):
                self.plot5_mv_line[i].setValue(DOW_전일종가)

            self.plot5_center_val_lower_line.setValue(DOW_전일종가)
            self.plot5_center_val_line.setValue(DOW_전일종가)
            self.plot5_center_val_upper_line.setValue(DOW_전일종가)
            
            self.plot5_fut_jl_line.setValue(DOW_전일종가)
            self.plot5_fut_jh_line.setValue(DOW_전일종가)
            self.plot5_fut_close_line.setValue(DOW_전일종가)
            self.plot5_fut_pivot_line.setValue(DOW_전일종가)
            self.plot5_fut_open_line.setValue(DOW_전일종가)
            self.plot5_fut_low_line.setValue(DOW_전일종가)
            self.plot5_fut_high_line.setValue(DOW_전일종가)

            self.plot5_cci_plus_100_line.setValue(DOW_전일종가)
            self.plot5_cci_minus_100_line.setValue(DOW_전일종가)
                
            txt = ' {0} '.format(format(dow_전저, ','))
            self.label_51.setText(txt)
            self.plot5_ovc_jl_line.setValue(dow_전저)

            txt = ' {0} '.format(format(dow_전고, ','))
            self.label_52.setText(txt)
            self.plot5_ovc_jh_line.setValue(dow_전고)
            
            txt = ' {0} '.format(format(DOW_전일종가, ','))
            self.label_53.setText(txt)
            self.plot5_ovc_close_line.setValue(DOW_전일종가)

            txt = ' {0} '.format(format(dow_피봇, ','))
            self.label_54.setText(txt)
            self.plot5_ovc_pivot_line.setValue(dow_피봇)
            
            txt = ' {0} '.format(format(dow_시가, ','))
            self.label_55.setText(txt)
            self.plot5_ovc_open_line.setValue(dow_시가)

            txt = ' {0} '.format(format(dow_저가, ','))
            self.label_56.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_56.setText(txt)
            self.plot5_ovc_low_line.setValue(dow_저가)

            self.label_57.setText(" 00,000 (전일대비, 등락율, 진폭) ")

            txt = ' {0} '.format(format(dow_고가, ','))
            self.label_58.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_58.setText(txt)
            self.plot5_ovc_high_line.setValue(dow_고가)

        # NASDAQ
        elif comboindex5 == 15:

            if NASDAQ_전저 == 0:
                nasdaq_전저 = NASDAQ_전일종가
            else:
                nasdaq_전저 = NASDAQ_전저

            if NASDAQ_전고 == 0:
                nasdaq_전고 = NASDAQ_전일종가
            else:
                nasdaq_전고 = NASDAQ_전고

            if NASDAQ_피봇 == 0:
                nasdaq_피봇 = NASDAQ_전일종가
            else:
                nasdaq_피봇 = NASDAQ_피봇

            if NASDAQ_시가 == 0:
                nasdaq_시가 = NASDAQ_전일종가
            else:
                nasdaq_시가 = NASDAQ_시가

            if NASDAQ_저가 == 0:
                nasdaq_저가 = NASDAQ_전일종가
            else:
                nasdaq_저가 = NASDAQ_저가

            if NASDAQ_고가 == 0:
                nasdaq_고가 = NASDAQ_전일종가
            else:
                nasdaq_고가 = NASDAQ_고가

            self.plot5_quote_remainder_ratio_base_line.setValue(NASDAQ_전일종가)
            self.plot5_nm_futures_quote_remainder_ratio_bottom_line.setValue(NASDAQ_전일종가)
            self.plot5_nm_futures_quote_remainder_ratio_upper_line.setValue(NASDAQ_전일종가)

            self.plot5_option_quote_remainder_ratio_bottom_line.setValue(NASDAQ_전일종가)
            self.plot5_option_quote_remainder_ratio_upper_line.setValue(NASDAQ_전일종가)
            
            for i in range(10):
                self.plot5_kp200_line[i].setValue(NASDAQ_전일종가)

            for i in range(9):
                self.plot5_mv_line[i].setValue(NASDAQ_전일종가)

            self.plot5_center_val_lower_line.setValue(NASDAQ_전일종가)
            self.plot5_center_val_line.setValue(NASDAQ_전일종가)
            self.plot5_center_val_upper_line.setValue(NASDAQ_전일종가)
            
            self.plot5_fut_jl_line.setValue(NASDAQ_전일종가)
            self.plot5_fut_jh_line.setValue(NASDAQ_전일종가)
            self.plot5_fut_close_line.setValue(NASDAQ_전일종가)
            self.plot5_fut_pivot_line.setValue(NASDAQ_전일종가)
            self.plot5_fut_open_line.setValue(NASDAQ_전일종가)
            self.plot5_fut_low_line.setValue(NASDAQ_전일종가)
            self.plot5_fut_high_line.setValue(NASDAQ_전일종가)

            self.plot5_cci_plus_100_line.setValue(NASDAQ_전일종가)
            self.plot5_cci_minus_100_line.setValue(NASDAQ_전일종가)
                
            txt = ' {0} '.format(format(nasdaq_전저, ','))
            self.label_51.setText(txt)
            self.plot5_ovc_jl_line.setValue(nasdaq_전저)

            txt = ' {0} '.format(format(nasdaq_전고, ','))
            self.label_52.setText(txt)
            self.plot5_ovc_jh_line.setValue(nasdaq_전고)
            
            txt = ' {0} '.format(format(NASDAQ_전일종가, ','))
            self.label_53.setText(txt)
            self.plot5_ovc_close_line.setValue(NASDAQ_전일종가)

            txt = ' {0} '.format(format(nasdaq_피봇, ','))
            self.label_54.setText(txt)
            self.plot5_ovc_pivot_line.setValue(nasdaq_피봇)
            
            txt = ' {0} '.format(format(nasdaq_시가, ','))
            self.label_55.setText(txt)
            self.plot5_ovc_open_line.setValue(nasdaq_시가)

            txt = ' {0} '.format(format(nasdaq_저가, ','))
            self.label_56.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_56.setText(txt)
            self.plot5_ovc_low_line.setValue(nasdaq_저가)

            self.label_57.setText(" 0,000.00 (전일대비, 등락율, 진폭) ")

            txt = ' {0} '.format(format(nasdaq_고가, ','))
            self.label_58.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_58.setText(txt)
            self.plot5_ovc_high_line.setValue(nasdaq_고가)            

        elif comboindex5 == 16:

            if HANGSENG_전저 == 0:
                hsi_전저 = HANGSENG_전일종가
            else:
                hsi_전저 = HANGSENG_전저

            if HANGSENG_전고 == 0:
                hsi_전고 = HANGSENG_전일종가
            else:
                hsi_전고 = HANGSENG_전고

            if HANGSENG_피봇 == 0:
                hsi_피봇 = HANGSENG_전일종가
            else:
                hsi_피봇 = HANGSENG_피봇

            if HANGSENG_시가 == 0:
                hsi_시가 = HANGSENG_전일종가
            else:
                hsi_시가 = HANGSENG_시가

            if HANGSENG_저가 == 0:
                hsi_저가 = HANGSENG_전일종가
            else:
                hsi_저가 = HANGSENG_저가

            if HANGSENG_고가 == 0:
                hsi_고가 = HANGSENG_전일종가
            else:
                hsi_고가 = HANGSENG_고가

            self.plot5_quote_remainder_ratio_base_line.setValue(HANGSENG_전일종가)
            self.plot5_nm_futures_quote_remainder_ratio_bottom_line.setValue(HANGSENG_전일종가)
            self.plot5_nm_futures_quote_remainder_ratio_upper_line.setValue(HANGSENG_전일종가)

            self.plot5_option_quote_remainder_ratio_bottom_line.setValue(HANGSENG_전일종가)
            self.plot5_option_quote_remainder_ratio_upper_line.setValue(HANGSENG_전일종가)
            
            for i in range(10):
                self.plot5_kp200_line[i].setValue(HANGSENG_전일종가)

            for i in range(9):
                self.plot5_mv_line[i].setValue(HANGSENG_전일종가)

            self.plot5_center_val_lower_line.setValue(HANGSENG_전일종가)
            self.plot5_center_val_line.setValue(HANGSENG_전일종가)
            self.plot5_center_val_upper_line.setValue(HANGSENG_전일종가)
            
            self.plot5_fut_jl_line.setValue(HANGSENG_전일종가)
            self.plot5_fut_jh_line.setValue(HANGSENG_전일종가)
            self.plot5_fut_close_line.setValue(HANGSENG_전일종가)
            self.plot5_fut_pivot_line.setValue(HANGSENG_전일종가)
            self.plot5_fut_open_line.setValue(HANGSENG_전일종가)
            self.plot5_fut_low_line.setValue(HANGSENG_전일종가)
            self.plot5_fut_high_line.setValue(HANGSENG_전일종가)

            self.plot5_cci_plus_100_line.setValue(HANGSENG_전일종가)
            self.plot5_cci_minus_100_line.setValue(HANGSENG_전일종가)
                
            txt = ' {0} '.format(format(hsi_전저, ','))
            self.label_51.setText(txt)
            self.plot5_ovc_jl_line.setValue(hsi_전저)

            txt = ' {0} '.format(format(hsi_전고, ','))
            self.label_52.setText(txt)
            self.plot5_ovc_jh_line.setValue(hsi_전고)
            
            txt = ' {0} '.format(format(HANGSENG_전일종가, ','))
            self.label_53.setText(txt)
            self.plot5_ovc_close_line.setValue(HANGSENG_전일종가)

            txt = ' {0} '.format(format(hsi_피봇, ','))
            self.label_54.setText(txt)
            self.plot5_ovc_pivot_line.setValue(hsi_피봇)
            
            txt = ' {0} '.format(format(hsi_시가, ','))
            self.label_55.setText(txt)
            self.plot5_ovc_open_line.setValue(hsi_시가)

            txt = ' {0} '.format(format(hsi_저가, ','))
            self.label_56.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_56.setText(txt)
            self.plot5_ovc_low_line.setValue(hsi_저가)

            self.label_57.setText(" 00.00 (전일대비, 등락율, 진폭) ")

            txt = ' {0} '.format(format(hsi_고가, ','))
            self.label_58.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_58.setText(txt)
            self.plot5_ovc_high_line.setValue(hsi_고가)

        # WTI
        elif comboindex5 == 17:

            if WTI_전저 == 0:
                wti_전저 = WTI_전일종가
            else:
                wti_전저 = WTI_전저

            if WTI_전고 == 0:
                wti_전고 = WTI_전일종가
            else:
                wti_전고 = WTI_전고

            if WTI_피봇 == 0:
                wti_피봇 = WTI_전일종가
            else:
                wti_피봇 = WTI_피봇

            if WTI_시가 == 0:
                wti_시가 = WTI_전일종가
            else:
                wti_시가 = WTI_시가

            if WTI_저가 == 0:
                wti_저가 = WTI_전일종가
            else:
                wti_저가 = WTI_저가

            if WTI_고가 == 0:
                wti_고가 = WTI_전일종가
            else:
                wti_고가 = WTI_고가

            self.plot5_quote_remainder_ratio_base_line.setValue(WTI_전일종가)
            self.plot5_nm_futures_quote_remainder_ratio_bottom_line.setValue(WTI_전일종가)
            self.plot5_nm_futures_quote_remainder_ratio_upper_line.setValue(WTI_전일종가)

            self.plot5_option_quote_remainder_ratio_bottom_line.setValue(WTI_전일종가)
            self.plot5_option_quote_remainder_ratio_upper_line.setValue(WTI_전일종가)
            
            for i in range(10):
                self.plot5_kp200_line[i].setValue(WTI_전일종가)

            for i in range(9):
                self.plot5_mv_line[i].setValue(WTI_전일종가)

            self.plot5_center_val_lower_line.setValue(WTI_전일종가)
            self.plot5_center_val_line.setValue(WTI_전일종가)
            self.plot5_center_val_upper_line.setValue(WTI_전일종가)
            
            self.plot5_fut_jl_line.setValue(WTI_전일종가)
            self.plot5_fut_jh_line.setValue(WTI_전일종가)
            self.plot5_fut_close_line.setValue(WTI_전일종가)
            self.plot5_fut_pivot_line.setValue(WTI_전일종가)
            self.plot5_fut_open_line.setValue(WTI_전일종가)
            self.plot5_fut_low_line.setValue(WTI_전일종가)
            self.plot5_fut_high_line.setValue(WTI_전일종가)

            self.plot5_cci_plus_100_line.setValue(WTI_전일종가)
            self.plot5_cci_minus_100_line.setValue(WTI_전일종가)
                
            txt = ' {0} '.format(format(wti_전저, ','))
            self.label_51.setText(txt)
            self.plot5_ovc_jl_line.setValue(wti_전저)

            txt = ' {0} '.format(format(wti_전고, ','))
            self.label_52.setText(txt)
            self.plot5_ovc_jh_line.setValue(wti_전고)
            
            txt = ' {0} '.format(format(WTI_전일종가, ','))
            self.label_53.setText(txt)
            self.plot5_ovc_close_line.setValue(WTI_전일종가)

            txt = ' {0} '.format(format(wti_피봇, ','))
            self.label_54.setText(txt)
            self.plot5_ovc_pivot_line.setValue(wti_피봇)
            
            txt = ' {0} '.format(format(wti_시가, ','))
            self.label_55.setText(txt)
            self.plot5_ovc_open_line.setValue(wti_시가)

            txt = ' {0} '.format(format(wti_저가, ','))
            self.label_56.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_56.setText(txt)
            self.plot5_ovc_low_line.setValue(wti_저가)

            self.label_57.setText(" 00.00 (전일대비, 등락율, 진폭) ")

            txt = ' {0} '.format(format(wti_고가, ','))
            self.label_58.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_58.setText(txt)
            self.plot5_ovc_high_line.setValue(wti_고가)            
        
        elif comboindex5 == 18:

            if GOLD_전저 == 0:
                gold_전저 = GOLD_전일종가
            else:
                gold_전저 = GOLD_전저

            if GOLD_전고 == 0:
                gold_전고 = GOLD_전일종가
            else:
                gold_전고 = GOLD_전고

            if GOLD_피봇 == 0:
                gold_피봇 = GOLD_전일종가
            else:
                gold_피봇 = GOLD_피봇

            if GOLD_시가 == 0:
                gold_시가 = GOLD_전일종가
            else:
                gold_시가 = GOLD_시가

            if GOLD_저가 == 0:
                gold_저가 = GOLD_전일종가
            else:
                gold_저가 = GOLD_저가

            if GOLD_고가 == 0:
                gold_고가 = GOLD_전일종가
            else:
                gold_고가 = GOLD_고가

            self.plot5_quote_remainder_ratio_base_line.setValue(GOLD_전일종가)
            self.plot5_nm_futures_quote_remainder_ratio_bottom_line.setValue(GOLD_전일종가)
            self.plot5_nm_futures_quote_remainder_ratio_upper_line.setValue(GOLD_전일종가)

            self.plot5_option_quote_remainder_ratio_bottom_line.setValue(GOLD_전일종가)
            self.plot5_option_quote_remainder_ratio_upper_line.setValue(GOLD_전일종가)
            
            for i in range(10):
                self.plot5_kp200_line[i].setValue(GOLD_전일종가)

            for i in range(9):
                self.plot5_mv_line[i].setValue(GOLD_전일종가)

            self.plot5_center_val_lower_line.setValue(GOLD_전일종가)
            self.plot5_center_val_line.setValue(GOLD_전일종가)
            self.plot5_center_val_upper_line.setValue(GOLD_전일종가)
            
            self.plot5_fut_jl_line.setValue(GOLD_전일종가)
            self.plot5_fut_jh_line.setValue(GOLD_전일종가)
            self.plot5_fut_close_line.setValue(GOLD_전일종가)
            self.plot5_fut_pivot_line.setValue(GOLD_전일종가)
            self.plot5_fut_open_line.setValue(GOLD_전일종가)
            self.plot5_fut_low_line.setValue(GOLD_전일종가)
            self.plot5_fut_high_line.setValue(GOLD_전일종가)

            self.plot5_cci_plus_100_line.setValue(GOLD_전일종가)
            self.plot5_cci_minus_100_line.setValue(GOLD_전일종가)
                
            txt = ' {0} '.format(format(gold_전저, ','))
            self.label_51.setText(txt)
            self.plot5_ovc_jl_line.setValue(gold_전저)

            txt = ' {0} '.format(format(gold_전고, ','))
            self.label_52.setText(txt)
            self.plot5_ovc_jh_line.setValue(gold_전고)
            
            txt = ' {0} '.format(format(GOLD_전일종가, ','))
            self.label_53.setText(txt)
            self.plot5_ovc_close_line.setValue(GOLD_전일종가)

            txt = ' {0} '.format(format(gold_피봇, ','))
            self.label_54.setText(txt)
            self.plot5_ovc_pivot_line.setValue(gold_피봇)
            
            txt = ' {0} '.format(format(gold_시가, ','))
            self.label_55.setText(txt)
            self.plot5_ovc_open_line.setValue(gold_시가)

            txt = ' {0} '.format(format(gold_저가, ','))
            self.label_56.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_56.setText(txt)
            self.plot5_ovc_low_line.setValue(gold_저가)

            self.label_57.setText(" 00.00 (전일대비, 등락율, 진폭) ")

            txt = ' {0} '.format(format(gold_고가, ','))
            self.label_58.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_58.setText(txt)
            self.plot5_ovc_high_line.setValue(gold_고가)

        elif comboindex5 == 19:

            if EURO_전저 == 0:
                euro_전저 = EURO_전일종가
            else:
                euro_전저 = EURO_전저

            if EURO_전고 == 0:
                euro_전고 = EURO_전일종가
            else:
                euro_전고 = EURO_전고

            if EURO_피봇 == 0:
                euro_피봇 = EURO_전일종가
            else:
                euro_피봇 = EURO_피봇

            if EURO_시가 == 0:
                euro_시가 = EURO_전일종가
            else:
                euro_시가 = EURO_시가

            if EURO_저가 == 0:
                euro_저가 = EURO_전일종가
            else:
                euro_저가 = EURO_저가

            if EURO_고가 == 0:
                euro_고가 = EURO_전일종가
            else:
                euro_고가 = EURO_고가

            self.plot5_quote_remainder_ratio_base_line.setValue(EURO_전일종가)
            self.plot5_nm_futures_quote_remainder_ratio_bottom_line.setValue(EURO_전일종가)
            self.plot5_nm_futures_quote_remainder_ratio_upper_line.setValue(EURO_전일종가)

            self.plot5_option_quote_remainder_ratio_bottom_line.setValue(EURO_전일종가)
            self.plot5_option_quote_remainder_ratio_upper_line.setValue(EURO_전일종가)
            
            for i in range(10):
                self.plot5_kp200_line[i].setValue(EURO_전일종가)

            for i in range(9):
                self.plot5_mv_line[i].setValue(EURO_전일종가)

            self.plot5_center_val_lower_line.setValue(EURO_전일종가)
            self.plot5_center_val_line.setValue(EURO_전일종가)
            self.plot5_center_val_upper_line.setValue(EURO_전일종가)
            
            self.plot5_fut_jl_line.setValue(EURO_전일종가)
            self.plot5_fut_jh_line.setValue(EURO_전일종가)
            self.plot5_fut_close_line.setValue(EURO_전일종가)
            self.plot5_fut_pivot_line.setValue(EURO_전일종가)
            self.plot5_fut_open_line.setValue(EURO_전일종가)
            self.plot5_fut_low_line.setValue(EURO_전일종가)
            self.plot5_fut_high_line.setValue(EURO_전일종가)

            self.plot5_cci_plus_100_line.setValue(EURO_전일종가)
            self.plot5_cci_minus_100_line.setValue(EURO_전일종가)
                
            txt = ' {0:.5f} '.format(euro_전저)
            self.label_51.setText(txt)
            self.plot5_ovc_jl_line.setValue(euro_전저)

            txt = ' {0:.5f} '.format(euro_전고)
            self.label_52.setText(txt)
            self.plot5_ovc_jh_line.setValue(euro_전고)
            
            txt = ' {0:.5f} '.format(EURO_전일종가)
            self.label_53.setText(txt)
            self.plot5_ovc_close_line.setValue(EURO_전일종가)

            txt = ' {0:.5f} '.format(euro_피봇)
            self.label_54.setText(txt)
            self.plot5_ovc_pivot_line.setValue(euro_피봇)
            
            txt = ' {0:.5f} '.format(euro_시가)
            self.label_55.setText(txt)
            self.plot5_ovc_open_line.setValue(euro_시가)

            txt = ' {0:.5f} '.format(euro_저가)
            self.label_56.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_56.setText(txt)
            self.plot5_ovc_low_line.setValue(euro_저가)

            self.label_57.setText(" 00.00 (전일대비, 등락율, 진폭) ")

            txt = ' {0:.5f} '.format(euro_고가)
            self.label_58.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_58.setText(txt)
            self.plot5_ovc_high_line.setValue(euro_고가)

        elif comboindex5 == 20:

            if YEN_전저 == 0:
                yen_전저 = YEN_전일종가
            else:
                yen_전저 = YEN_전저

            if YEN_전고 == 0:
                yen_전고 = YEN_전일종가
            else:
                yen_전고 = YEN_전고

            if YEN_피봇 == 0:
                yen_피봇 = YEN_전일종가
            else:
                yen_피봇 = YEN_피봇

            if YEN_시가 == 0:
                yen_시가 = YEN_전일종가
            else:
                yen_시가 = YEN_시가

            if YEN_저가 == 0:
                yen_저가 = YEN_전일종가
            else:
                yen_저가 = YEN_저가

            if YEN_고가 == 0:
                yen_고가 = YEN_전일종가
            else:
                yen_고가 = YEN_고가

            self.plot5_quote_remainder_ratio_base_line.setValue(YEN_전일종가)
            self.plot5_nm_futures_quote_remainder_ratio_bottom_line.setValue(YEN_전일종가)
            self.plot5_nm_futures_quote_remainder_ratio_upper_line.setValue(YEN_전일종가)

            self.plot5_option_quote_remainder_ratio_bottom_line.setValue(YEN_전일종가)
            self.plot5_option_quote_remainder_ratio_upper_line.setValue(YEN_전일종가)
            
            for i in range(10):
                self.plot5_kp200_line[i].setValue(YEN_전일종가)

            for i in range(9):
                self.plot5_mv_line[i].setValue(YEN_전일종가)

            self.plot5_center_val_lower_line.setValue(YEN_전일종가)
            self.plot5_center_val_line.setValue(YEN_전일종가)
            self.plot5_center_val_upper_line.setValue(YEN_전일종가)
            
            self.plot5_fut_jl_line.setValue(YEN_전일종가)
            self.plot5_fut_jh_line.setValue(YEN_전일종가)
            self.plot5_fut_close_line.setValue(YEN_전일종가)
            self.plot5_fut_pivot_line.setValue(YEN_전일종가)
            self.plot5_fut_open_line.setValue(YEN_전일종가)
            self.plot5_fut_low_line.setValue(YEN_전일종가)
            self.plot5_fut_high_line.setValue(YEN_전일종가)

            self.plot5_cci_plus_100_line.setValue(YEN_전일종가)
            self.plot5_cci_minus_100_line.setValue(YEN_전일종가)
                
            txt = ' {0} '.format(format(yen_전저, ','))
            self.label_51.setText(txt)
            self.plot5_ovc_jl_line.setValue(yen_전저)

            txt = ' {0} '.format(format(yen_전고, ','))
            self.label_52.setText(txt)
            self.plot5_ovc_jh_line.setValue(yen_전고)
            
            txt = ' {0} '.format(format(YEN_전일종가, ','))
            self.label_53.setText(txt)
            self.plot5_ovc_close_line.setValue(YEN_전일종가)

            txt = ' {0} '.format(format(yen_피봇, ','))
            self.label_54.setText(txt)
            self.plot5_ovc_pivot_line.setValue(yen_피봇)
            
            txt = ' {0} '.format(format(yen_시가, ','))
            self.label_55.setText(txt)
            self.plot5_ovc_open_line.setValue(yen_시가)

            txt = ' {0} '.format(format(yen_저가, ','))
            self.label_56.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_56.setText(txt)
            self.plot5_ovc_low_line.setValue(yen_저가)

            self.label_57.setText(" 00.00 (전일대비, 등락율, 진폭) ")

            txt = ' {0} '.format(format(yen_고가, ','))
            self.label_58.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_58.setText(txt)
            self.plot5_ovc_high_line.setValue(yen_고가)
        
        elif comboindex5 == 21:

            if ADI_전저 == 0:
                adi_전저 = ADI_전일종가
            else:
                adi_전저 = ADI_전저

            if ADI_전고 == 0:
                adi_전고 = ADI_전일종가
            else:
                adi_전고 = ADI_전고

            if ADI_피봇 == 0:
                adi_피봇 = ADI_전일종가
            else:
                adi_피봇 = ADI_피봇

            if ADI_시가 == 0:
                adi_시가 = ADI_전일종가
            else:
                adi_시가 = ADI_시가

            if ADI_저가 == 0:
                adi_저가 = ADI_전일종가
            else:
                adi_저가 = ADI_저가

            if ADI_고가 == 0:
                adi_고가 = ADI_전일종가
            else:
                adi_고가 = ADI_고가

            self.plot5_quote_remainder_ratio_base_line.setValue(ADI_전일종가)
            self.plot5_nm_futures_quote_remainder_ratio_bottom_line.setValue(ADI_전일종가)
            self.plot5_nm_futures_quote_remainder_ratio_upper_line.setValue(ADI_전일종가)

            self.plot5_option_quote_remainder_ratio_bottom_line.setValue(ADI_전일종가)
            self.plot5_option_quote_remainder_ratio_upper_line.setValue(ADI_전일종가)
            
            for i in range(10):
                self.plot5_kp200_line[i].setValue(ADI_전일종가)

            for i in range(9):
                self.plot5_mv_line[i].setValue(ADI_전일종가)

            self.plot5_center_val_lower_line.setValue(ADI_전일종가)
            self.plot5_center_val_line.setValue(ADI_전일종가)
            self.plot5_center_val_upper_line.setValue(ADI_전일종가)
            
            self.plot5_fut_jl_line.setValue(ADI_전일종가)
            self.plot5_fut_jh_line.setValue(ADI_전일종가)
            self.plot5_fut_close_line.setValue(ADI_전일종가)
            self.plot5_fut_pivot_line.setValue(ADI_전일종가)
            self.plot5_fut_open_line.setValue(ADI_전일종가)
            self.plot5_fut_low_line.setValue(ADI_전일종가)
            self.plot5_fut_high_line.setValue(ADI_전일종가)

            self.plot5_cci_plus_100_line.setValue(ADI_전일종가)
            self.plot5_cci_minus_100_line.setValue(ADI_전일종가)
                
            txt = ' {0:.5f} '.format(adi_전저)
            self.label_51.setText(txt)
            self.plot5_ovc_jl_line.setValue(adi_전저)

            txt = ' {0:.5f} '.format(adi_전고)
            self.label_52.setText(txt)
            self.plot5_ovc_jh_line.setValue(adi_전고)
            
            txt = ' {0:.5f} '.format(ADI_전일종가)
            self.label_53.setText(txt)
            self.plot5_ovc_close_line.setValue(ADI_전일종가)

            txt = ' {0:.5f} '.format(adi_피봇)
            self.label_54.setText(txt)
            self.plot5_ovc_pivot_line.setValue(adi_피봇)
            
            txt = ' {0:.5f} '.format(adi_시가)
            self.label_55.setText(txt)
            self.plot5_ovc_open_line.setValue(adi_시가)

            txt = ' {0:.5f} '.format(adi_저가)
            self.label_56.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_56.setText(txt)
            self.plot5_ovc_low_line.setValue(adi_저가)

            self.label_57.setText(" 00.00 (전일대비, 등락율, 진폭) ")

            txt = ' {0:.5f} '.format(adi_고가)
            self.label_58.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_58.setText(txt)
            self.plot5_ovc_high_line.setValue(adi_고가)
        else:
            pass

    def plot6_clear(self):

        # Line Clear
        self.plot6_fut_jl_line.setValue(0)
        self.plot6_fut_jh_line.setValue(0)
        self.plot6_fut_open_line.setValue(0)
        self.plot6_fut_close_line.setValue(0)
        self.plot6_fut_pivot_line.setValue(0)
        self.plot6_fut_low_line.setValue(0)
        self.plot6_fut_high_line.setValue(0)

        self.plot6_ovc_jl_line.setValue(0)
        self.plot6_ovc_jh_line.setValue(0)
        self.plot6_ovc_close_line.setValue(0)
        self.plot6_ovc_open_line.setValue(0)
        self.plot6_ovc_pivot_line.setValue(0)
        self.plot6_ovc_low_line.setValue(0)
        self.plot6_ovc_high_line.setValue(0)

        for i in range(10):
            self.plot6_kp200_line[i].setValue(0)

        for i in range(9):
            self.plot6_mv_line[i].setValue(0)        

        self.plot6_quote_remainder_ratio_base_line.setValue(0)
        self.plot6_nm_futures_quote_remainder_ratio_bottom_line.setValue(0)
        self.plot6_nm_futures_quote_remainder_ratio_upper_line.setValue(0)

        self.plot6_option_quote_remainder_ratio_bottom_line.setValue(0)
        self.plot6_option_quote_remainder_ratio_upper_line.setValue(0)

        self.plot6_center_val_lower_line.setValue(0)
        self.plot6_center_val_line.setValue(0)
        self.plot6_center_val_upper_line.setValue(0)

        # Fibonacci Retracements Line
        self.plot6_fibonacci_line1.setValue(0)
        self.plot6_fibonacci_line2.setValue(0)
        self.plot6_fibonacci_line3.setValue(0)
        self.plot6_fibonacci_line4.setValue(0)
        self.plot6_fibonacci_line5.setValue(0)

        # CCI Line
        self.plot6_cci_plus_100_line.setValue(0)
        self.plot6_cci_minus_100_line.setValue(0)

        # Curve Clear
        self.plot6_fut_cm_price_curve.clear()
        self.plot6_fut_nm_price_curve.clear()
        self.plot6_kp200_curve.clear()

        self.plot6_fut_cm_quote_remainder_ratio_curve.clear()
        self.plot6_fut_nm_quote_remainder_ratio_curve.clear()

        self.plot6_fut_volume_curve.clear()
        self.plot6_call_volume_curve.clear()
        self.plot6_put_volume_curve.clear()        

        self.plot6_center_val_curve.clear()

        for i in range(option_pairs_count):
            self.plot6_call_curve[i].clear()
            self.plot6_put_curve[i].clear()

        self.plot6_call_quote_curve.clear()
        self.plot6_put_quote_curve.clear()

        self.plot6_call_oi_curve.clear()
        self.plot6_put_oi_curve.clear()

        self.plot6_fut_cm_drate_curve.clear()
        self.plot6_fut_nm_drate_curve.clear()
        self.plot6_cme_drate_curve.clear()
        self.plot6_call_drate_curve.clear()
        self.plot6_put_drate_curve.clear()

        self.plot6_program_curve.clear()
        self.plot6_kospi_total_curve.clear()
        self.plot6_futures_foreigner_curve.clear()
        self.plot6_kospi_foreigner_curve.clear()

        self.plot6_sp500_curve.clear()
        self.plot6_dow_curve.clear()
        self.plot6_nasdaq_curve.clear()
        self.plot6_hsi_curve.clear()

        self.plot6_wti_curve.clear()
        self.plot6_gold_curve.clear()

        self.plot6_euro_curve.clear()
        self.plot6_yen_curve.clear()
        self.plot6_adi_curve.clear()

        self.plot6_bollinger_1st_upper_curve.clear()
        self.plot6_bollinger_1st_middle_curve.clear()
        self.plot6_bollinger_1st_lower_curve.clear()
        self.plot6_bollinger_2nd_upper_curve.clear()
        self.plot6_bollinger_2nd_middle_curve.clear()
        self.plot6_bollinger_2nd_lower_curve.clear()

        self.plot6_psar_curve.clear()

        self.plot6_mama_curve.clear()
        self.plot6_fama_curve.clear()
        #self.plot6_sslup_curve.clear()
        #self.plot6_ssldown_curve.clear()

        self.plot6_oe_conv_curve.clear()
        self.plot6_oe_base_curve.clear()
        self.plot6_span_a_curve.clear()
        self.plot6_span_b_curve.clear()
        self.plot6_lagging_span_curve.clear()

        self.plot6_futures_rsi_curve.clear()
        self.plot6_sp500_rsi_curve.clear()
        self.plot6_dow_rsi_curve.clear()
        self.plot6_nasdaq_rsi_curve.clear()
        self.plot6_hsi_rsi_curve.clear()
        self.plot6_wti_rsi_curve.clear()
        self.plot6_gold_rsi_curve.clear()
        self.plot6_euro_rsi_curve.clear()
        self.plot6_yen_rsi_curve.clear()
        self.plot6_adi_rsi_curve.clear()

        self.plot6_futures_cci1_curve.clear()
        self.plot6_sp500_cci1_curve.clear()
        self.plot6_dow_cci1_curve.clear()
        self.plot6_nasdaq_cci1_curve.clear()
        self.plot6_hsi_cci1_curve.clear()
        self.plot6_wti_cci1_curve.clear()
        self.plot6_gold_cci1_curve.clear()
        self.plot6_euro_cci1_curve.clear()
        self.plot6_yen_cci1_curve.clear()
        self.plot6_adi_cci1_curve.clear()

        self.plot6_futures_cci2_curve.clear()
        self.plot6_sp500_cci2_curve.clear()
        self.plot6_dow_cci2_curve.clear()
        self.plot6_nasdaq_cci2_curve.clear()
        self.plot6_hsi_cci2_curve.clear()
        self.plot6_wti_cci2_curve.clear()
        self.plot6_gold_cci2_curve.clear()
        self.plot6_euro_cci2_curve.clear()
        self.plot6_yen_cci2_curve.clear()
        self.plot6_adi_cci2_curve.clear()

        self.label_61.setText(" - ")
        self.label_62.setText(" - ")
        self.label_63.setText(" - ")
        self.label_64.setText(" - ")
        self.label_65.setText(" - ")
        self.label_66.setText(" - ")
        self.label_67.setText(" - ")
        self.label_68.setText(" - ")

        self.label_p6_1.setStyleSheet('background-color: lime; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_p6_1.setText(" 좌표 ")

        self.label_p6_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_p6_2.setText(" BB Upper\n BB Middle\n BB Lower ")

        self.label_p6_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_p6_3.setText(" PSAR\n MAMA ")

        self.label_p6_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
        self.label_p6_4.setText(" ONE EYE ")

        txt = 'Plot6 Clear...\r'
        self.parent.textBrowser.append(txt)

    def cb6_selectionChanged(self):

        global comboindex6
        
        txt = self.comboBox6.currentText()
        comboindex6 = self.comboBox6.currentIndex()

        self.plot6_clear()

        if comboindex6 == 0:
            self.timer6.stop()

            txt = 'Plot6 Timer Stop...\r'
            self.parent.textBrowser.append(txt)
        else:
            if not self.timer6.isActive():

                start_time = timeit.default_timer()

                while True:

                    if not flag_screen_update_is_running:
                        self.timer6.start()
                        txt = 'Plot6 Timer Setting Done...\r'
                        self.parent.textBrowser.append(txt)
                        break

                    end_time = timeit.default_timer()

                    time_gap = (end_time - start_time) * 1000

                    if DayTime:
                        time_limit = 200
                    else:
                        time_limit = 100

                    if time_gap > time_limit:
                        self.timer6.start()
                        txt = 'Plot6 Timer Forced Setting Done...\r'
                        self.parent.textBrowser.append(txt)
                        break
            else:
                pass

        # 선물가격
        if comboindex6 == 2:
                        
            if 근월물_선물_전저 == 0:
                선물_전저 = 근월물_선물_종가
            else:
                선물_전저 = 근월물_선물_전저

            if 근월물_선물_전고 == 0:
                선물_전고 = 근월물_선물_종가
            else:
                선물_전고 = 근월물_선물_전고

            선물_종가 = 근월물_선물_종가                

            if 근월물_선물_피봇 == 0:
                선물_피봇 = 근월물_선물_종가
            else:
                선물_피봇 = 근월물_선물_피봇

            if 근월물_선물_시가 == 0:
                선물_시가 = 근월물_선물_종가
            else:
                선물_시가 = 근월물_선물_시가

            if 근월물_선물_저가 == 0:
                선물_저가 = 근월물_선물_종가
            else:
                선물_저가 = 근월물_선물_저가

            if 근월물_선물_고가 == 0:
                선물_고가 = 근월물_선물_종가
            else:
                선물_고가 = 근월물_선물_고가

            self.plot6_kp200_line[0].setValue(KP200_COREVAL[3])
            self.plot6_kp200_line[1].setValue(KP200_COREVAL[3])
            self.plot6_kp200_line[2].setValue(KP200_COREVAL[3])
            self.plot6_kp200_line[3].setValue(KP200_COREVAL[3])
            self.plot6_kp200_line[4].setValue(KP200_COREVAL[4])
            self.plot6_kp200_line[5].setValue(KP200_COREVAL[5])
            self.plot6_kp200_line[6].setValue(KP200_COREVAL[6])
            self.plot6_kp200_line[7].setValue(KP200_COREVAL[6])
            self.plot6_kp200_line[8].setValue(KP200_COREVAL[6])
            self.plot6_kp200_line[9].setValue(KP200_COREVAL[6])
            
            # 종가선 컬러를 살리기위한 임시방편            
            self.plot6_quote_remainder_ratio_base_line.setValue(선물_종가)
            self.plot6_nm_futures_quote_remainder_ratio_bottom_line.setValue(선물_종가)
            self.plot6_nm_futures_quote_remainder_ratio_upper_line.setValue(선물_종가)

            self.plot6_option_quote_remainder_ratio_bottom_line.setValue(선물_종가)
            self.plot6_option_quote_remainder_ratio_upper_line.setValue(선물_종가)

            for i in range(9):
                self.plot6_mv_line[i].setValue(선물_종가)

            self.plot6_center_val_lower_line.setValue(선물_종가)
            self.plot6_center_val_line.setValue(선물_종가)
            self.plot6_center_val_upper_line.setValue(선물_종가)

            self.plot6_ovc_open_line.setValue(선물_종가)
            self.plot6_ovc_jl_line.setValue(선물_종가)
            self.plot6_ovc_jh_line.setValue(선물_종가)
            self.plot6_ovc_pivot_line.setValue(선물_종가)
            self.plot6_ovc_low_line.setValue(선물_종가)
            self.plot6_ovc_high_line.setValue(선물_종가)
            self.plot6_ovc_close_line.setValue(선물_종가)

            self.plot6_cci_plus_100_line.setValue(선물_종가)
            self.plot6_cci_minus_100_line.setValue(선물_종가)

            txt = ' {0} '.format(선물_전저)
            self.label_61.setText(txt) 
            self.plot6_fut_jl_line.setValue(선물_전저)
            
            txt = ' {0} '.format(선물_전고)
            self.label_62.setText(txt)
            self.plot6_fut_jh_line.setValue(선물_전고)
            
            txt = ' {0} '.format(선물_종가)
            self.label_63.setText(txt)
            self.plot6_fut_close_line.setValue(선물_종가)
            
            txt = ' {0} '.format(선물_피봇)
            self.label_64.setText(txt)
            self.plot6_fut_pivot_line.setValue(선물_피봇)

            txt = ' {0} '.format(선물_시가)
            self.label_65.setText(txt)
            self.plot6_fut_open_line.setValue(선물_시가)

            txt = ' {0} '.format(선물_저가)
            self.label_66.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_66.setText(txt)
            self.plot6_fut_low_line.setValue(선물_저가)
            
            self.label_67.setText(" 000.00 (전일대비, 등락율, 진폭), kp200 : 000.00 ")

            txt = ' {0} '.format(선물_고가)
            self.label_68.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_68.setText(txt)
            self.plot6_fut_high_line.setValue(선물_고가)
        
        # 선옵잔량비
        elif comboindex6 == 3:

            self.label_61.setText(" - ")
            self.label_62.setText(" - ")
            self.label_63.setText(" - ")
            self.label_64.setText(" - ")
            self.label_65.setText(" - ")

            self.label_66.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_66.setText(" 풋잔량비 ")

            self.label_67.setText(" 선물잔량비 ")

            self.label_68.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_68.setText(" 콜잔량비 ")
            
            self.label_p6_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p6_2.setText(" BB Upper\n BB Middle\n BB Lower ")

            self.label_p6_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p6_3.setText(" PSAR\n MAMA ")

            self.label_p6_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p6_4.setText(" ONE EYE ")

            self.plot6_quote_remainder_ratio_base_line.setValue(1.0)
            self.plot6_nm_futures_quote_remainder_ratio_bottom_line.setValue(1.0)
            self.plot6_nm_futures_quote_remainder_ratio_upper_line.setValue(1.0)

            self.plot6_option_quote_remainder_ratio_bottom_line.setValue(1.0)
            self.plot6_option_quote_remainder_ratio_upper_line.setValue(1.0)

        # 선옵체결
        elif comboindex6 == 4:

            self.label_61.setText(" - ")
            self.label_62.setText(" - ")
            self.label_63.setText(" - ")
            self.label_64.setText(" - ")
            self.label_65.setText(" - ")

            self.label_66.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_66.setText(" 풋체결량 ")

            self.label_67.setText(" 선물체결량 ")

            self.label_68.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_68.setText(" 콜체결량 ")
            
            self.label_p6_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p6_2.setText(" BB Upper\n BB Middle\n BB Lower ")

            self.label_p6_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p6_3.setText(" PSAR\n MAMA ")

            self.label_p6_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p6_4.setText(" ONE EYE ")
        
        # 옵션가격
        elif comboindex6 == 5:

            self.label_61.setText(" 등가: 행사가 ")
            self.label_62.setText(" 시작 중심가 ")
            self.label_63.setText(" 중심가 하단 ")
            self.label_64.setText(" 중심가 상단 ")
            self.label_65.setText(" - ")
            self.label_66.setText(" 풋현재가 ")
            self.label_67.setText(" 중심가 ")
            self.label_68.setText(" 콜현재가 ")
            
            self.label_p6_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p6_2.setText(" BB Upper\n BB Middle\n BB Lower ")

            self.label_p6_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p6_3.setText(" PSAR\n MAMA ")

            self.label_p6_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p6_4.setText(" ONE EYE ")

            # 대맥점 표시
            self.plot6_mv_line[1].setValue(2.5)
            self.plot6_mv_line[2].setValue(3.5)
            self.plot6_mv_line[3].setValue(4.85)

            self.plot6_center_val_lower_line.setValue(옵션_중심가/GOLDEN_RATIO)
            self.plot6_center_val_line.setValue(옵션_중심가)
            self.plot6_center_val_upper_line.setValue(옵션_중심가*GOLDEN_RATIO)

        # 옵션잔량비    
        elif comboindex6 == 6:

            self.label_61.setText(" - ")
            self.label_62.setText(" - ")
            self.label_63.setText(" - ")
            self.label_64.setText(" - ")
            self.label_65.setText(" - ")

            self.label_66.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_66.setText(" 풋잔량비 ")

            self.label_67.setText(" - ")

            self.label_68.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_68.setText(" 콜잔량비 ")
            
            self.label_p6_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p6_2.setText(" BB Upper\n BB Middle\n BB Lower ")

            self.label_p6_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p6_3.setText(" PSAR\n MAMA ")

            self.label_p6_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p6_4.setText(" ONE EYE ")

            self.plot6_quote_remainder_ratio_base_line.setValue(1.0)
            self.plot6_nm_futures_quote_remainder_ratio_bottom_line.setValue(1.0)
            self.plot6_nm_futures_quote_remainder_ratio_upper_line.setValue(1.0)

            self.plot6_option_quote_remainder_ratio_bottom_line.setValue(1.0)
            self.plot6_option_quote_remainder_ratio_upper_line.setValue(1.0)     

        # 옵션미결
        elif comboindex6 == 7:

            self.label_61.setText(" - ")
            self.label_62.setText(" - ")
            self.label_63.setText(" - ")
            self.label_64.setText(" - ")
            self.label_65.setText(" - ")

            self.label_66.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_66.setText(" 풋미결 ")

            self.label_67.setText(" - ")

            self.label_68.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_68.setText(" 콜미결 ")
            
            self.label_p6_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p6_2.setText(" BB Upper\n BB Middle\n BB Lower ")

            self.label_p6_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p6_3.setText(" PSAR\n MAMA ")

            self.label_p6_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p6_4.setText(" ONE EYE ")
        
        # 등락율비
        elif comboindex6 == 8:

            self.label_61.setText(" - ")
            self.label_62.setText(" - ")
            self.label_63.setText(" - ")
            self.label_64.setText(" - ")

            self.label_65.setStyleSheet('background-color: lime; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_65.setText(" DOW등락율 ")

            self.label_66.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_66.setText(" 풋등락율 ")

            self.label_67.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_67.setText(" 선물등락율 ")

            self.label_68.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_68.setText(" 콜등락율 ")
            
            self.label_p6_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p6_2.setText(" BB Upper\n BB Middle\n BB Lower ")

            self.label_p6_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p6_3.setText(" PSAR\n MAMA ")

            self.label_p6_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_p6_4.setText(" ONE EYE ")
        
        # 수급종합
        elif comboindex6 == 10:

            self.label_61.setText(" - ")
            self.label_62.setText(" - ")
            self.label_63.setText(" - ")
            self.label_64.setText(" - ")
            self.label_65.setText(" - ")

            self.label_66.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_66.setText(" Prog/F.S ")

            self.label_67.setText(" 선물체결량 ")

            self.label_68.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_68.setText(" S.S/F.F ")

        # 외인수급
        elif comboindex6 == 11:

            pass
            '''
            self.label_61.setText(" - ")
            self.label_62.setText(" - ")
            self.label_63.setText(" - ")
            self.label_64.setText(" - ")
            self.label_65.setText(" - ")

            self.label_66.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_66.setText(" 외인현물 ")

            self.label_67.setText(" 선물체결량 ")

            self.label_68.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_68.setText(" 외인선물 ")
            '''

        # SP500
        elif comboindex6 == 13:

            if SP500_전저 == 0:
                sp500_전저 = SP500_전일종가
            else:
                sp500_전저 = SP500_전저

            if SP500_전고 == 0:
                sp500_전고 = SP500_전일종가
            else:
                sp500_전고 = SP500_전고              

            if SP500_피봇 == 0:
                sp500_피봇 = SP500_전일종가
            else:
                sp500_피봇 = SP500_피봇            

            if SP500_시가 == 0:
                sp500_시가 = SP500_전일종가
            else:
                sp500_시가 = SP500_시가

            if SP500_저가 == 0:
                sp500_저가 = SP500_전일종가
            else:
                sp500_저가 = SP500_저가

            if SP500_고가 == 0:
                sp500_고가 = SP500_전일종가
            else:
                sp500_고가 = SP500_고가

            self.plot6_quote_remainder_ratio_base_line.setValue(SP500_전일종가)
            self.plot6_nm_futures_quote_remainder_ratio_bottom_line.setValue(SP500_전일종가)
            self.plot6_nm_futures_quote_remainder_ratio_upper_line.setValue(SP500_전일종가)

            self.plot6_option_quote_remainder_ratio_bottom_line.setValue(SP500_전일종가)
            self.plot6_option_quote_remainder_ratio_upper_line.setValue(SP500_전일종가)
            
            for i in range(10):
                self.plot6_kp200_line[i].setValue(SP500_전일종가)

            for i in range(9):
                self.plot6_mv_line[i].setValue(SP500_전일종가)

            self.plot6_center_val_lower_line.setValue(SP500_전일종가)
            self.plot6_center_val_line.setValue(SP500_전일종가)
            self.plot6_center_val_upper_line.setValue(SP500_전일종가)
            
            self.plot6_fut_jl_line.setValue(SP500_전일종가)
            self.plot6_fut_jh_line.setValue(SP500_전일종가)
            self.plot6_fut_close_line.setValue(SP500_전일종가)
            self.plot6_fut_pivot_line.setValue(SP500_전일종가)
            self.plot6_fut_open_line.setValue(SP500_전일종가)
            self.plot6_fut_low_line.setValue(SP500_전일종가)
            self.plot6_fut_high_line.setValue(SP500_전일종가)

            self.plot6_cci_plus_100_line.setValue(SP500_전일종가)
            self.plot6_cci_minus_100_line.setValue(SP500_전일종가)
                
            txt = ' {0} '.format(format(sp500_전저, ','))
            self.label_61.setText(txt)
            self.plot6_ovc_jl_line.setValue(sp500_전저)

            txt = ' {0} '.format(format(sp500_전고, ','))
            self.label_62.setText(txt)
            self.plot6_ovc_jh_line.setValue(sp500_전고)
            
            txt = ' {0} '.format(format(SP500_전일종가, ','))
            self.label_63.setText(txt)
            self.plot6_ovc_close_line.setValue(SP500_전일종가)

            txt = ' {0} '.format(format(sp500_피봇, ','))
            self.label_64.setText(txt)
            self.plot6_ovc_pivot_line.setValue(sp500_피봇)
            
            txt = ' {0} '.format(format(sp500_시가, ','))
            self.label_65.setText(txt)
            self.plot6_ovc_open_line.setValue(sp500_시가)

            txt = ' {0} '.format(format(sp500_저가, ','))
            self.label_66.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_66.setText(txt)
            self.plot6_ovc_low_line.setValue(sp500_저가)

            self.label_67.setText(" 0,000.00 (전일대비, 등락율, 진폭) ")

            txt = ' {0} '.format(format(sp500_고가, ','))
            self.label_68.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_68.setText(txt)
            self.plot6_ovc_high_line.setValue(sp500_고가)

        # DOW
        elif comboindex6 == 14:

            if DOW_전저 == 0:
                dow_전저 = DOW_전일종가
            else:
                dow_전저 = DOW_전저

            if DOW_전고 == 0:
                dow_전고 = DOW_전일종가
            else:
                dow_전고 = DOW_전고

            if DOW_피봇 == 0:
                dow_피봇 = DOW_전일종가
            else:
                dow_피봇 = DOW_피봇

            if DOW_시가 == 0:
                dow_시가 = DOW_전일종가
            else:
                dow_시가 = DOW_시가

            if DOW_저가 == 0:
                dow_저가 = DOW_전일종가
            else:
                dow_저가 = DOW_저가

            if DOW_고가 == 0:
                dow_고가 = DOW_전일종가
            else:
                dow_고가 = DOW_고가

            self.plot6_quote_remainder_ratio_base_line.setValue(DOW_전일종가)
            self.plot6_nm_futures_quote_remainder_ratio_bottom_line.setValue(DOW_전일종가)
            self.plot6_nm_futures_quote_remainder_ratio_upper_line.setValue(DOW_전일종가)

            self.plot6_option_quote_remainder_ratio_bottom_line.setValue(DOW_전일종가)
            self.plot6_option_quote_remainder_ratio_upper_line.setValue(DOW_전일종가)
            
            for i in range(10):
                self.plot6_kp200_line[i].setValue(DOW_전일종가)

            for i in range(9):
                self.plot6_mv_line[i].setValue(DOW_전일종가)

            self.plot6_center_val_lower_line.setValue(DOW_전일종가)
            self.plot6_center_val_line.setValue(DOW_전일종가)
            self.plot6_center_val_upper_line.setValue(DOW_전일종가)
            
            self.plot6_fut_jl_line.setValue(DOW_전일종가)
            self.plot6_fut_jh_line.setValue(DOW_전일종가)
            self.plot6_fut_close_line.setValue(DOW_전일종가)
            self.plot6_fut_pivot_line.setValue(DOW_전일종가)
            self.plot6_fut_open_line.setValue(DOW_전일종가)
            self.plot6_fut_low_line.setValue(DOW_전일종가)
            self.plot6_fut_high_line.setValue(DOW_전일종가)

            self.plot6_cci_plus_100_line.setValue(DOW_전일종가)
            self.plot6_cci_minus_100_line.setValue(DOW_전일종가)
                
            txt = ' {0} '.format(format(dow_전저, ','))
            self.label_61.setText(txt)
            self.plot6_ovc_jl_line.setValue(dow_전저)

            txt = ' {0} '.format(format(dow_전고, ','))
            self.label_62.setText(txt)
            self.plot6_ovc_jh_line.setValue(dow_전고)
            
            txt = ' {0} '.format(format(DOW_전일종가, ','))
            self.label_63.setText(txt)
            self.plot6_ovc_close_line.setValue(DOW_전일종가)

            txt = ' {0} '.format(format(dow_피봇, ','))
            self.label_64.setText(txt)
            self.plot6_ovc_pivot_line.setValue(dow_피봇)
            
            txt = ' {0} '.format(format(dow_시가, ','))
            self.label_65.setText(txt)
            self.plot6_ovc_open_line.setValue(dow_시가)

            txt = ' {0} '.format(format(dow_저가, ','))
            self.label_66.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_66.setText(txt)
            self.plot6_ovc_low_line.setValue(dow_저가)

            self.label_67.setText(" 00,000 (전일대비, 등락율, 진폭) ")

            txt = ' {0} '.format(format(dow_고가, ','))
            self.label_68.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_68.setText(txt)
            self.plot6_ovc_high_line.setValue(dow_고가)

        # NASDAQ
        elif comboindex6 == 15:

            if NASDAQ_전저 == 0:
                nasdaq_전저 = NASDAQ_전일종가
            else:
                nasdaq_전저 = NASDAQ_전저

            if NASDAQ_전고 == 0:
                nasdaq_전고 = NASDAQ_전일종가
            else:
                nasdaq_전고 = NASDAQ_전고

            if NASDAQ_피봇 == 0:
                nasdaq_피봇 = NASDAQ_전일종가
            else:
                nasdaq_피봇 = NASDAQ_피봇

            if NASDAQ_시가 == 0:
                nasdaq_시가 = NASDAQ_전일종가
            else:
                nasdaq_시가 = NASDAQ_시가

            if NASDAQ_저가 == 0:
                nasdaq_저가 = NASDAQ_전일종가
            else:
                nasdaq_저가 = NASDAQ_저가

            if NASDAQ_고가 == 0:
                nasdaq_고가 = NASDAQ_전일종가
            else:
                nasdaq_고가 = NASDAQ_고가

            self.plot6_quote_remainder_ratio_base_line.setValue(NASDAQ_전일종가)
            self.plot6_nm_futures_quote_remainder_ratio_bottom_line.setValue(NASDAQ_전일종가)
            self.plot6_nm_futures_quote_remainder_ratio_upper_line.setValue(NASDAQ_전일종가)

            self.plot6_option_quote_remainder_ratio_bottom_line.setValue(NASDAQ_전일종가)
            self.plot6_option_quote_remainder_ratio_upper_line.setValue(NASDAQ_전일종가)
            
            for i in range(10):
                self.plot6_kp200_line[i].setValue(NASDAQ_전일종가)

            for i in range(9):
                self.plot6_mv_line[i].setValue(NASDAQ_전일종가)

            self.plot6_center_val_lower_line.setValue(NASDAQ_전일종가)
            self.plot6_center_val_line.setValue(NASDAQ_전일종가)
            self.plot6_center_val_upper_line.setValue(NASDAQ_전일종가)
            
            self.plot6_fut_jl_line.setValue(NASDAQ_전일종가)
            self.plot6_fut_jh_line.setValue(NASDAQ_전일종가)
            self.plot6_fut_close_line.setValue(NASDAQ_전일종가)
            self.plot6_fut_pivot_line.setValue(NASDAQ_전일종가)
            self.plot6_fut_open_line.setValue(NASDAQ_전일종가)
            self.plot6_fut_low_line.setValue(NASDAQ_전일종가)
            self.plot6_fut_high_line.setValue(NASDAQ_전일종가)

            self.plot6_cci_plus_100_line.setValue(NASDAQ_전일종가)
            self.plot6_cci_minus_100_line.setValue(NASDAQ_전일종가)
                
            txt = ' {0} '.format(format(nasdaq_전저, ','))
            self.label_61.setText(txt)
            self.plot6_ovc_jl_line.setValue(nasdaq_전저)

            txt = ' {0} '.format(format(nasdaq_전고, ','))
            self.label_62.setText(txt)
            self.plot6_ovc_jh_line.setValue(nasdaq_전고)
            
            txt = ' {0} '.format(format(NASDAQ_전일종가, ','))
            self.label_63.setText(txt)
            self.plot6_ovc_close_line.setValue(NASDAQ_전일종가)

            txt = ' {0} '.format(format(nasdaq_피봇, ','))
            self.label_64.setText(txt)
            self.plot6_ovc_pivot_line.setValue(nasdaq_피봇)
            
            txt = ' {0} '.format(format(nasdaq_시가, ','))
            self.label_65.setText(txt)
            self.plot6_ovc_open_line.setValue(nasdaq_시가)

            txt = ' {0} '.format(format(nasdaq_저가, ','))
            self.label_66.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_66.setText(txt)
            self.plot6_ovc_low_line.setValue(nasdaq_저가)

            self.label_67.setText(" 0,000.00 (전일대비, 등락율, 진폭) ")

            txt = ' {0} '.format(format(nasdaq_고가, ','))
            self.label_68.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_68.setText(txt)
            self.plot6_ovc_high_line.setValue(nasdaq_고가)            

        elif comboindex6 == 16:

            if HANGSENG_전저 == 0:
                hsi_전저 = HANGSENG_전일종가
            else:
                hsi_전저 = HANGSENG_전저

            if HANGSENG_전고 == 0:
                hsi_전고 = HANGSENG_전일종가
            else:
                hsi_전고 = HANGSENG_전고

            if HANGSENG_피봇 == 0:
                hsi_피봇 = HANGSENG_전일종가
            else:
                hsi_피봇 = HANGSENG_피봇

            if HANGSENG_시가 == 0:
                hsi_시가 = HANGSENG_전일종가
            else:
                hsi_시가 = HANGSENG_시가

            if HANGSENG_저가 == 0:
                hsi_저가 = HANGSENG_전일종가
            else:
                hsi_저가 = HANGSENG_저가

            if HANGSENG_고가 == 0:
                hsi_고가 = HANGSENG_전일종가
            else:
                hsi_고가 = HANGSENG_고가

            self.plot6_quote_remainder_ratio_base_line.setValue(HANGSENG_전일종가)
            self.plot6_nm_futures_quote_remainder_ratio_bottom_line.setValue(HANGSENG_전일종가)
            self.plot6_nm_futures_quote_remainder_ratio_upper_line.setValue(HANGSENG_전일종가)

            self.plot6_option_quote_remainder_ratio_bottom_line.setValue(HANGSENG_전일종가)
            self.plot6_option_quote_remainder_ratio_upper_line.setValue(HANGSENG_전일종가)
            
            for i in range(10):
                self.plot6_kp200_line[i].setValue(HANGSENG_전일종가)

            for i in range(9):
                self.plot6_mv_line[i].setValue(HANGSENG_전일종가)

            self.plot6_center_val_lower_line.setValue(HANGSENG_전일종가)
            self.plot6_center_val_line.setValue(HANGSENG_전일종가)
            self.plot6_center_val_upper_line.setValue(HANGSENG_전일종가)
            
            self.plot6_fut_jl_line.setValue(HANGSENG_전일종가)
            self.plot6_fut_jh_line.setValue(HANGSENG_전일종가)
            self.plot6_fut_close_line.setValue(HANGSENG_전일종가)
            self.plot6_fut_pivot_line.setValue(HANGSENG_전일종가)
            self.plot6_fut_open_line.setValue(HANGSENG_전일종가)
            self.plot6_fut_low_line.setValue(HANGSENG_전일종가)
            self.plot6_fut_high_line.setValue(HANGSENG_전일종가)

            self.plot6_cci_plus_100_line.setValue(HANGSENG_전일종가)
            self.plot6_cci_minus_100_line.setValue(HANGSENG_전일종가)
                
            txt = ' {0} '.format(format(hsi_전저, ','))
            self.label_61.setText(txt)
            self.plot6_ovc_jl_line.setValue(hsi_전저)

            txt = ' {0} '.format(format(hsi_전고, ','))
            self.label_62.setText(txt)
            self.plot6_ovc_jh_line.setValue(hsi_전고)
            
            txt = ' {0} '.format(format(HANGSENG_전일종가, ','))
            self.label_63.setText(txt)
            self.plot6_ovc_close_line.setValue(HANGSENG_전일종가)

            txt = ' {0} '.format(format(hsi_피봇, ','))
            self.label_64.setText(txt)
            self.plot6_ovc_pivot_line.setValue(hsi_피봇)
            
            txt = ' {0} '.format(format(hsi_시가, ','))
            self.label_65.setText(txt)
            self.plot6_ovc_open_line.setValue(hsi_시가)

            txt = ' {0} '.format(format(hsi_저가, ','))
            self.label_66.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_66.setText(txt)
            self.plot6_ovc_low_line.setValue(hsi_저가)

            self.label_67.setText(" 00.00 (전일대비, 등락율, 진폭) ")

            txt = ' {0} '.format(format(hsi_고가, ','))
            self.label_68.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_68.setText(txt)
            self.plot6_ovc_high_line.setValue(hsi_고가)

        # WTI
        elif comboindex6 == 17:

            if WTI_전저 == 0:
                wti_전저 = WTI_전일종가
            else:
                wti_전저 = WTI_전저

            if WTI_전고 == 0:
                wti_전고 = WTI_전일종가
            else:
                wti_전고 = WTI_전고

            if WTI_피봇 == 0:
                wti_피봇 = WTI_전일종가
            else:
                wti_피봇 = WTI_피봇

            if WTI_시가 == 0:
                wti_시가 = WTI_전일종가
            else:
                wti_시가 = WTI_시가

            if WTI_저가 == 0:
                wti_저가 = WTI_전일종가
            else:
                wti_저가 = WTI_저가

            if WTI_고가 == 0:
                wti_고가 = WTI_전일종가
            else:
                wti_고가 = WTI_고가

            self.plot6_quote_remainder_ratio_base_line.setValue(WTI_전일종가)
            self.plot6_nm_futures_quote_remainder_ratio_bottom_line.setValue(WTI_전일종가)
            self.plot6_nm_futures_quote_remainder_ratio_upper_line.setValue(WTI_전일종가)

            self.plot6_option_quote_remainder_ratio_bottom_line.setValue(WTI_전일종가)
            self.plot6_option_quote_remainder_ratio_upper_line.setValue(WTI_전일종가)
            
            for i in range(10):
                self.plot6_kp200_line[i].setValue(WTI_전일종가)

            for i in range(9):
                self.plot6_mv_line[i].setValue(WTI_전일종가)

            self.plot6_center_val_lower_line.setValue(WTI_전일종가)
            self.plot6_center_val_line.setValue(WTI_전일종가)
            self.plot6_center_val_upper_line.setValue(WTI_전일종가)
            
            self.plot6_fut_jl_line.setValue(WTI_전일종가)
            self.plot6_fut_jh_line.setValue(WTI_전일종가)
            self.plot6_fut_close_line.setValue(WTI_전일종가)
            self.plot6_fut_pivot_line.setValue(WTI_전일종가)
            self.plot6_fut_open_line.setValue(WTI_전일종가)
            self.plot6_fut_low_line.setValue(WTI_전일종가)
            self.plot6_fut_high_line.setValue(WTI_전일종가)

            self.plot6_cci_plus_100_line.setValue(WTI_전일종가)
            self.plot6_cci_minus_100_line.setValue(WTI_전일종가) 
                
            txt = ' {0} '.format(format(wti_전저, ','))
            self.label_61.setText(txt)
            self.plot6_ovc_jl_line.setValue(wti_전저)

            txt = ' {0} '.format(format(wti_전고, ','))
            self.label_62.setText(txt)
            self.plot6_ovc_jh_line.setValue(wti_전고)
            
            txt = ' {0} '.format(format(WTI_전일종가, ','))
            self.label_63.setText(txt)
            self.plot6_ovc_close_line.setValue(WTI_전일종가)

            txt = ' {0} '.format(format(wti_피봇, ','))
            self.label_64.setText(txt)
            self.plot6_ovc_pivot_line.setValue(wti_피봇)
            
            txt = ' {0} '.format(format(wti_시가, ','))
            self.label_65.setText(txt)
            self.plot6_ovc_open_line.setValue(wti_시가)

            txt = ' {0} '.format(format(wti_저가, ','))
            self.label_66.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_66.setText(txt)
            self.plot6_ovc_low_line.setValue(wti_저가)

            self.label_67.setText(" 00.00 (전일대비, 등락율, 진폭) ")

            txt = ' {0} '.format(format(wti_고가, ','))
            self.label_68.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_68.setText(txt)
            self.plot6_ovc_high_line.setValue(wti_고가)
        
        elif comboindex6 == 18:

            if GOLD_전저 == 0:
                gold_전저 = GOLD_전일종가
            else:
                gold_전저 = GOLD_전저

            if GOLD_전고 == 0:
                gold_전고 = GOLD_전일종가
            else:
                gold_전고 = GOLD_전고

            if GOLD_피봇 == 0:
                gold_피봇 = GOLD_전일종가
            else:
                gold_피봇 = GOLD_피봇

            if GOLD_시가 == 0:
                gold_시가 = GOLD_전일종가
            else:
                gold_시가 = GOLD_시가

            if GOLD_저가 == 0:
                gold_저가 = GOLD_전일종가
            else:
                gold_저가 = GOLD_저가

            if GOLD_고가 == 0:
                gold_고가 = GOLD_전일종가
            else:
                gold_고가 = GOLD_고가

            self.plot6_quote_remainder_ratio_base_line.setValue(GOLD_전일종가)
            self.plot6_nm_futures_quote_remainder_ratio_bottom_line.setValue(GOLD_전일종가)
            self.plot6_nm_futures_quote_remainder_ratio_upper_line.setValue(GOLD_전일종가)

            self.plot6_option_quote_remainder_ratio_bottom_line.setValue(GOLD_전일종가)
            self.plot6_option_quote_remainder_ratio_upper_line.setValue(GOLD_전일종가)
            
            for i in range(10):
                self.plot6_kp200_line[i].setValue(GOLD_전일종가)

            for i in range(9):
                self.plot6_mv_line[i].setValue(GOLD_전일종가)

            self.plot6_center_val_lower_line.setValue(GOLD_전일종가)
            self.plot6_center_val_line.setValue(GOLD_전일종가)
            self.plot6_center_val_upper_line.setValue(GOLD_전일종가)
            
            self.plot6_fut_jl_line.setValue(GOLD_전일종가)
            self.plot6_fut_jh_line.setValue(GOLD_전일종가)
            self.plot6_fut_close_line.setValue(GOLD_전일종가)
            self.plot6_fut_pivot_line.setValue(GOLD_전일종가)
            self.plot6_fut_open_line.setValue(GOLD_전일종가)
            self.plot6_fut_low_line.setValue(GOLD_전일종가)
            self.plot6_fut_high_line.setValue(GOLD_전일종가)

            self.plot6_cci_plus_100_line.setValue(GOLD_전일종가)
            self.plot6_cci_minus_100_line.setValue(GOLD_전일종가)
                
            txt = ' {0} '.format(format(gold_전저, ','))
            self.label_61.setText(txt)
            self.plot6_ovc_jl_line.setValue(gold_전저)

            txt = ' {0} '.format(format(gold_전고, ','))
            self.label_62.setText(txt)
            self.plot6_ovc_jh_line.setValue(gold_전고)
            
            txt = ' {0} '.format(format(GOLD_전일종가, ','))
            self.label_63.setText(txt)
            self.plot6_ovc_close_line.setValue(GOLD_전일종가)

            txt = ' {0} '.format(format(gold_피봇, ','))
            self.label_64.setText(txt)
            self.plot6_ovc_pivot_line.setValue(gold_피봇)
            
            txt = ' {0} '.format(format(gold_시가, ','))
            self.label_65.setText(txt)
            self.plot6_ovc_open_line.setValue(gold_시가)

            txt = ' {0} '.format(format(gold_저가, ','))
            self.label_66.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_66.setText(txt)
            self.plot6_ovc_low_line.setValue(gold_저가)

            self.label_67.setText(" 00.00 (전일대비, 등락율, 진폭) ")

            txt = ' {0} '.format(format(gold_고가, ','))
            self.label_68.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_68.setText(txt)
            self.plot6_ovc_high_line.setValue(gold_고가)

        elif comboindex6 == 19:

            if EURO_전저 == 0:
                euro_전저 = EURO_전일종가
            else:
                euro_전저 = EURO_전저

            if EURO_전고 == 0:
                euro_전고 = EURO_전일종가
            else:
                euro_전고 = EURO_전고

            if EURO_피봇 == 0:
                euro_피봇 = EURO_전일종가
            else:
                euro_피봇 = EURO_피봇

            if EURO_시가 == 0:
                euro_시가 = EURO_전일종가
            else:
                euro_시가 = EURO_시가

            if EURO_저가 == 0:
                euro_저가 = EURO_전일종가
            else:
                euro_저가 = EURO_저가

            if EURO_고가 == 0:
                euro_고가 = EURO_전일종가
            else:
                euro_고가 = EURO_고가

            self.plot6_quote_remainder_ratio_base_line.setValue(EURO_전일종가)
            self.plot6_nm_futures_quote_remainder_ratio_bottom_line.setValue(EURO_전일종가)
            self.plot6_nm_futures_quote_remainder_ratio_upper_line.setValue(EURO_전일종가)

            self.plot6_option_quote_remainder_ratio_bottom_line.setValue(EURO_전일종가)
            self.plot6_option_quote_remainder_ratio_upper_line.setValue(EURO_전일종가)
            
            for i in range(10):
                self.plot6_kp200_line[i].setValue(EURO_전일종가)

            for i in range(9):
                self.plot6_mv_line[i].setValue(EURO_전일종가)

            self.plot6_center_val_lower_line.setValue(EURO_전일종가)
            self.plot6_center_val_line.setValue(EURO_전일종가)
            self.plot6_center_val_upper_line.setValue(EURO_전일종가)
            
            self.plot6_fut_jl_line.setValue(EURO_전일종가)
            self.plot6_fut_jh_line.setValue(EURO_전일종가)
            self.plot6_fut_close_line.setValue(EURO_전일종가)
            self.plot6_fut_pivot_line.setValue(EURO_전일종가)
            self.plot6_fut_open_line.setValue(EURO_전일종가)
            self.plot6_fut_low_line.setValue(EURO_전일종가)
            self.plot6_fut_high_line.setValue(EURO_전일종가)

            self.plot6_cci_plus_100_line.setValue(EURO_전일종가)
            self.plot6_cci_minus_100_line.setValue(EURO_전일종가)
                
            txt = ' {0:.5f} '.format(euro_전저)
            self.label_61.setText(txt)
            self.plot6_ovc_jl_line.setValue(euro_전저)

            txt = ' {0:.5f} '.format(euro_전고)
            self.label_62.setText(txt)
            self.plot6_ovc_jh_line.setValue(euro_전고)
            
            txt = ' {0:.5f} '.format(EURO_전일종가)
            self.label_63.setText(txt)
            self.plot6_ovc_close_line.setValue(EURO_전일종가)

            txt = ' {0:.5f} '.format(euro_피봇)
            self.label_64.setText(txt)
            self.plot6_ovc_pivot_line.setValue(euro_피봇)
            
            txt = ' {0:.5f} '.format(euro_시가)
            self.label_65.setText(txt)
            self.plot6_ovc_open_line.setValue(euro_시가)

            txt = ' {0:.5f} '.format(euro_저가)
            self.label_66.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_66.setText(txt)
            self.plot6_ovc_low_line.setValue(euro_저가)

            self.label_67.setText(" 00.00 (전일대비, 등락율, 진폭) ")

            txt = ' {0:.5f} '.format(euro_고가)
            self.label_68.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_68.setText(txt)
            self.plot6_ovc_high_line.setValue(euro_고가)

        elif comboindex6 == 20:

            if YEN_전저 == 0:
                yen_전저 = YEN_전일종가
            else:
                yen_전저 = YEN_전저

            if YEN_전고 == 0:
                yen_전고 = YEN_전일종가
            else:
                yen_전고 = YEN_전고

            if YEN_피봇 == 0:
                yen_피봇 = YEN_전일종가
            else:
                yen_피봇 = YEN_피봇

            if YEN_시가 == 0:
                yen_시가 = YEN_전일종가
            else:
                yen_시가 = YEN_시가

            if YEN_저가 == 0:
                yen_저가 = YEN_전일종가
            else:
                yen_저가 = YEN_저가

            if YEN_고가 == 0:
                yen_고가 = YEN_전일종가
            else:
                yen_고가 = YEN_고가

            self.plot6_quote_remainder_ratio_base_line.setValue(YEN_전일종가)
            self.plot6_nm_futures_quote_remainder_ratio_bottom_line.setValue(YEN_전일종가)
            self.plot6_nm_futures_quote_remainder_ratio_upper_line.setValue(YEN_전일종가)

            self.plot6_option_quote_remainder_ratio_bottom_line.setValue(YEN_전일종가)
            self.plot6_option_quote_remainder_ratio_upper_line.setValue(YEN_전일종가)
            
            for i in range(10):
                self.plot6_kp200_line[i].setValue(YEN_전일종가)

            for i in range(9):
                self.plot6_mv_line[i].setValue(YEN_전일종가)

            self.plot6_center_val_lower_line.setValue(YEN_전일종가)
            self.plot6_center_val_line.setValue(YEN_전일종가)
            self.plot6_center_val_upper_line.setValue(YEN_전일종가)
            
            self.plot6_fut_jl_line.setValue(YEN_전일종가)
            self.plot6_fut_jh_line.setValue(YEN_전일종가)
            self.plot6_fut_close_line.setValue(YEN_전일종가)
            self.plot6_fut_pivot_line.setValue(YEN_전일종가)
            self.plot6_fut_open_line.setValue(YEN_전일종가)
            self.plot6_fut_low_line.setValue(YEN_전일종가)
            self.plot6_fut_high_line.setValue(YEN_전일종가)

            self.plot6_cci_plus_100_line.setValue(YEN_전일종가)
            self.plot6_cci_minus_100_line.setValue(YEN_전일종가)
                
            txt = ' {0} '.format(format(yen_전저, ','))
            self.label_61.setText(txt)
            self.plot6_ovc_jl_line.setValue(yen_전저)

            txt = ' {0} '.format(format(yen_전고, ','))
            self.label_62.setText(txt)
            self.plot6_ovc_jh_line.setValue(yen_전고)
            
            txt = ' {0} '.format(format(YEN_전일종가, ','))
            self.label_63.setText(txt)
            self.plot6_ovc_close_line.setValue(YEN_전일종가)

            txt = ' {0} '.format(format(yen_피봇, ','))
            self.label_64.setText(txt)
            self.plot6_ovc_pivot_line.setValue(yen_피봇)
            
            txt = ' {0} '.format(format(yen_시가, ','))
            self.label_65.setText(txt)
            self.plot6_ovc_open_line.setValue(yen_시가)

            txt = ' {0} '.format(format(yen_저가, ','))
            self.label_66.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_66.setText(txt)
            self.plot6_ovc_low_line.setValue(yen_저가)

            self.label_67.setText(" 00.00 (전일대비, 등락율, 진폭) ")

            txt = ' {0} '.format(format(yen_고가, ','))
            self.label_68.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_68.setText(txt)
            self.plot6_ovc_high_line.setValue(yen_고가)
        
        elif comboindex6 == 21:

            if ADI_전저 == 0:
                adi_전저 = ADI_전일종가
            else:
                adi_전저 = ADI_전저

            if ADI_전고 == 0:
                adi_전고 = ADI_전일종가
            else:
                adi_전고 = ADI_전고

            if ADI_피봇 == 0:
                adi_피봇 = ADI_전일종가
            else:
                adi_피봇 = ADI_피봇

            if ADI_시가 == 0:
                adi_시가 = ADI_전일종가
            else:
                adi_시가 = ADI_시가

            if ADI_저가 == 0:
                adi_저가 = ADI_전일종가
            else:
                adi_저가 = ADI_저가

            if ADI_고가 == 0:
                adi_고가 = ADI_전일종가
            else:
                adi_고가 = ADI_고가

            self.plot6_quote_remainder_ratio_base_line.setValue(ADI_전일종가)
            self.plot6_nm_futures_quote_remainder_ratio_bottom_line.setValue(ADI_전일종가)
            self.plot6_nm_futures_quote_remainder_ratio_upper_line.setValue(ADI_전일종가)

            self.plot6_option_quote_remainder_ratio_bottom_line.setValue(ADI_전일종가)
            self.plot6_option_quote_remainder_ratio_upper_line.setValue(ADI_전일종가)
            
            for i in range(10):
                self.plot6_kp200_line[i].setValue(ADI_전일종가)

            for i in range(9):
                self.plot6_mv_line[i].setValue(ADI_전일종가)

            self.plot6_center_val_lower_line.setValue(ADI_전일종가)
            self.plot6_center_val_line.setValue(ADI_전일종가)
            self.plot6_center_val_upper_line.setValue(ADI_전일종가) 
            
            self.plot6_fut_jl_line.setValue(ADI_전일종가)
            self.plot6_fut_jh_line.setValue(ADI_전일종가)
            self.plot6_fut_close_line.setValue(ADI_전일종가)
            self.plot6_fut_pivot_line.setValue(ADI_전일종가)
            self.plot6_fut_open_line.setValue(ADI_전일종가)
            self.plot6_fut_low_line.setValue(ADI_전일종가)
            self.plot6_fut_high_line.setValue(ADI_전일종가)

            self.plot6_cci_plus_100_line.setValue(ADI_전일종가)
            self.plot6_cci_minus_100_line.setValue(ADI_전일종가)           
                
            txt = ' {0:.5f} '.format(adi_전저)
            self.label_61.setText(txt)
            self.plot6_ovc_jl_line.setValue(adi_전저)

            txt = ' {0:.5f} '.format(adi_전고)
            self.label_62.setText(txt)
            self.plot6_ovc_jh_line.setValue(adi_전고)
            
            txt = ' {0:.5f} '.format(ADI_전일종가)
            self.label_63.setText(txt)
            self.plot6_ovc_close_line.setValue(ADI_전일종가)

            txt = ' {0:.5f} '.format(adi_피봇)
            self.label_64.setText(txt)
            self.plot6_ovc_pivot_line.setValue(adi_피봇)
            
            txt = ' {0:.5f} '.format(adi_시가)
            self.label_65.setText(txt)
            self.plot6_ovc_open_line.setValue(adi_시가)

            txt = ' {0:.5f} '.format(adi_저가)
            self.label_66.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_66.setText(txt)
            self.plot6_ovc_low_line.setValue(adi_저가)

            self.label_67.setText(" 00.00 (전일대비, 등락율, 진폭) ")

            txt = ' {0:.5f} '.format(adi_고가)
            self.label_68.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_68.setText(txt)
            self.plot6_ovc_high_line.setValue(adi_고가)
        else:
            pass

    #####################################################################################################################################################################
    # Alligator
    #####################################################################################################################################################################
    def Calc_Alligator(
        self,
        ohlc: DataFrame,
        period_jaws=13,
        period_teeth=8,
        period_lips=5,
        shift_jaws=8,
        shift_teeth=5,
        shift_lips=3,
        column_name_jaws="alligator_jaws",
        column_name_teeth="alligator_teeth",
        column_name_lips="alligator_lips",
    ):
        """
        Alligator Definition with Smoothed & Shifted Moving Average

        MEDIAN PRICE = (HIGH + LOW) / 2
        ALLIGATORS JAW = SMMA (MEDEAN PRICE, 13, 8)
        ALLIGATORS TEETH = SMMA (MEDEAN PRICE, 8, 5)
        ALLIGATORS LIPS = SMMA (MEDEAN PRICE, 5, 3)
        
        https://www.metatrader4.com/en/trading-platform/help/analytics/tech_indicators/alligator

        SUM1 = SUM(CLOSE, N)
        SMMA1 = SUM1/N

        PREVSUM = SMMA(i - 1) * N
        SMMA(i) = (PREVSUM - SMMA(i - 1) + CLOSE(i)) / N

        Where:
        SUM1 – is the total sum of closing prices for N periods;
        PREVSUM – smoothed sum of previous bar;
        SMMA1 – is the smoothed moving average of the first bar;
        SMMA(i) – is the smoothed moving average of the current bar (except for the first one);
        CLOSE(i) – is the current closing price;
        N – is the smoothing period.

        SMMA (i) = (SMMA(i - 1) * (N - 1) + CLOSE (i)) / N

        >>> Indicators.alligator(period_jaws=13, period_teeth=8, period_lips=5, shift_jaws=8, shift_teeth=5, shift_lips=3, column_name_jaws='alligator_jaws', column_name_teeth='alligator_teeth', column_name_lips='alligator_lips')

        :param int period_jaws: Period for Alligator' Jaws, default: 13
        :param int period_teeth: Period for Alligator' Teeth, default: 8
        :param int period_lips: Period for Alligator' Lips, default: 5
        :param int shift_jaws: Period for Alligator' Jaws, default: 8
        :param int shift_teeth: Period for Alligator' Teeth, default: 5
        :param int shift_lips: Period for Alligator' Lips, default: 3
        :param str column_name_jaws: Column Name for Alligator' Jaws, default: alligator_jaws
        :param str column_name_teeth: Column Name for Alligator' Teeth, default: alligator_teeth
        :param str column_name_lips: Column Name for Alligator' Lips, default: alligator_lips
        :return: None
        """

        '''
        df_median = self.df[[self._columns["High"], self._columns["Low"]]]
        median_col = "median_col"
        df_median = df_median.assign(
            median_col=lambda x: (x[self._columns["High"]] + x[self._columns["Low"]]) / 2
        )
        '''

        df_median = self.df[[ohlc["High"], ohlc["Low"]]]
        median_col = "median_col"
        df_median = df_median.assign(
            median_col=lambda x: (x[ohlc["High"]] + x[ohlc["Low"]]) / 2
        )

        df_j = self.Calculate_SMMA(df_median, period_jaws, column_name_jaws, median_col)
        df_t = self.Calculate_SMMA(df_median, period_teeth, column_name_teeth, median_col)
        df_l = self.Calculate_SMMA(df_median, period_lips, column_name_lips, median_col)

        # Shift SSMAs
        df_j[column_name_jaws] = df_j[column_name_jaws].shift(shift_jaws)
        df_t[column_name_teeth] = df_t[column_name_teeth].shift(shift_teeth)
        df_l[column_name_lips] = df_l[column_name_lips].shift(shift_lips)

        #self.df = self.df.merge(df_j, left_index=True, right_index=True)
        #self.df = self.df.merge(df_t, left_index=True, right_index=True)
        #self.df = self.df.merge(df_l, left_index=True, right_index=True)

        return df_j[column_name_jaws], df_t[column_name_teeth], df_l[column_name_lips]
    #####################################################################################################################################################################
    # SSMA(Smoothed Simple Moving Average)
    #####################################################################################################################################################################
    def Calculate_SMMA(self, df, period, column_name, apply_to):
        """
        Smoothed Simple Moving Average.

        :param ohlc: data
        :param period: range
        :param column: open/close/high/low column of the DataFrame
        :return: result Series

        Smoothed Moving Average used by Wilder in his 1978 book `New Concepts in
        Technical Trading`

        Defined in his book originally as:

        - new_value = (old_value * (period - 1) + new_data) / period

        Which is a moving average that smoothes data exponentially over time.

        - Exponential Smotthing factor: alpha = 1 / period

        Formula
        - prev = mean(data, period)
        - movav = prev * (1.0 - alpha) + newdata * alpha
        - (or alternatively #  movav = prev + alpha(new - prev))

        See also:
        - http://en.wikipedia.org/wiki/Moving_average#Modified_moving_average
        """

        df_tmp = df[[apply_to]]
        first_val = df_tmp[apply_to].iloc[:period].mean()
        df_tmp = df_tmp.assign(column_name=None)
        df_tmp.at[period, column_name] = first_val
    
        for index, row in df_tmp.iterrows():
            if index > period:
                smma_val = (df_tmp.at[index - 1, column_name] *
                            (period - 1) + row[apply_to]) / period
                df_tmp.at[index, column_name] = smma_val

        df_tmp = df_tmp[[column_name]]

        return df_tmp

    def Calc_SMMA(
        self,
        ohlc: DataFrame,
        period: int = 9,
        column: str = "Close",
        adjust: bool = True,
    ) -> Series:        

        return pd.Series(
            ohlc[column]
            .ewm(ignore_na=False, alpha=1.0 / period, min_periods=0, adjust=adjust)
            .mean(),
            name="{0} period SSMA".format(period),
        )

    def SMMA(self, candles_list, n_smoothing_periods, future_shift):
        '''
        :param candles_list: list with candles to get median prices
                candles indicies: 0 - Open time, 1 - Open, 2 - High, 3 - Low, 4 - Close, 5 - Volume, 6 - Close time
                candles_list is at least as long as future_shift
        :param n_smoothing_periods: amount of periods for calculating moving average
        :return: list of SMMAs from n_smoothing_periods position to the (end of list + future_shift)
                elements 0-5 are sma of previouse periods, 6 - SMA for current periods - the rest - future_shift
        '''

        if len(candles_list) < n_smoothing_periods:
            print('too short')
            return

        #create a list of median prices
        self.median_prices_list = []
        for i in range(len(candles_list)):
            median_price = (float(candles_list[i][2]) + float(candles_list[i][3])) / 2  # (high + low) / 2
            self.median_prices_list.append(median_price)

        #print(len('median prices list', self.median_prices_list))

        self.start_len = len(self.median_prices_list)

        for i in range(n_smoothing_periods, len(candles_list) + future_shift):
            #print(self.median_prices_list[-n_smoothing_periods:-1])
            sum_prices = sum(self.median_prices_list[i-n_smoothing_periods:i])
            smma = sum_prices / n_smoothing_periods
            self.median_prices_list.append(smma)

        #print('median_prices_list after smma add', len(self.median_prices_list))
        return self.median_prices_list[-(self.start_len + n_smoothing_periods): -1]
    #####################################################################################################################################################################
    # Plot Update
    #####################################################################################################################################################################

    @pyqtSlot()    
    def plot1_update(self):

        global flag_plot_update_interval_changed

        if flag_plot_update_interval_changed:
            self.timer1.setInterval(chart_update_interval)
            self.timer2.setInterval(chart_update_interval)
            self.timer3.setInterval(chart_update_interval)
            self.timer4.setInterval(chart_update_interval)
            self.timer5.setInterval(chart_update_interval)
            self.timer6.setInterval(chart_update_interval)

            flag_plot_update_interval_changed = False
        else:
            pass

        if self.timer1.isActive():
            if not flag_screen_update_is_running and not flag_plot1_update_is_running:
                self.label_time_1.setStyleSheet('background-color: lawngreen; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                QApplication.processEvents()
                self.update_plot1()
                QApplication.processEvents()
            else:
                self.label_time_1.setStyleSheet('background-color: yellow; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
        else:
            self.label_time_1.setStyleSheet('background-color: black; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_time_1.setText('Timer1 is dead...')                            

    @pyqtSlot()    
    def plot2_update(self):

        if self.timer2.isActive():
            if not flag_screen_update_is_running and not flag_plot2_update_is_running:
                self.label_time_2.setStyleSheet('background-color: lawngreen; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                QApplication.processEvents()
                self.update_plot2()
                QApplication.processEvents()
            else:
                self.label_time_2.setStyleSheet('background-color: yellow; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
        else:
            self.label_time_2.setStyleSheet('background-color: black; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_time_2.setText('Timer2 is dead...')

    @pyqtSlot()    
    def plot3_update(self):

        if self.timer3.isActive():
            if not flag_screen_update_is_running and not flag_plot3_update_is_running:
                self.label_time_3.setStyleSheet('background-color: lawngreen; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                QApplication.processEvents()
                self.update_plot3()
                QApplication.processEvents()
            else:
                self.label_time_3.setStyleSheet('background-color: yellow; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
        else:
            self.label_time_3.setStyleSheet('background-color: black; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_time_3.setText('Timer3 is dead...')

    @pyqtSlot()    
    def plot4_update(self):

        if self.timer4.isActive():
            if not flag_screen_update_is_running and not flag_plot4_update_is_running:
                self.label_time_4.setStyleSheet('background-color: lawngreen; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                QApplication.processEvents()
                self.update_plot4()
                QApplication.processEvents()
            else:
                self.label_time_4.setStyleSheet('background-color: yellow; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
        else:
            self.label_time_4.setStyleSheet('background-color: black; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_time_4.setText('Timer4 is dead...')

    @pyqtSlot()    
    def plot5_update(self):

        if self.timer5.isActive():
            if not flag_screen_update_is_running and not flag_plot5_update_is_running:
                self.label_time_5.setStyleSheet('background-color: lawngreen; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                QApplication.processEvents()
                self.update_plot5()
                QApplication.processEvents()
            else:
                self.label_time_5.setStyleSheet('background-color: yellow; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
        else:
            self.label_time_5.setStyleSheet('background-color: black; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_time_5.setText('Timer5 is dead...')

    @pyqtSlot()    
    def plot6_update(self):

        if self.timer6.isActive():
            if not flag_screen_update_is_running and not flag_plot6_update_is_running:
                self.label_time_6.setStyleSheet('background-color: lawngreen; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                QApplication.processEvents()
                self.update_plot6()
                QApplication.processEvents()
            else:
                self.label_time_6.setStyleSheet('background-color: yellow; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
        else:
            self.label_time_6.setStyleSheet('background-color: black; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
            self.label_time_6.setText('Timer6 is dead...')

    @logging_time_plot1  
    #@pyqtSlot()    
    def update_plot1(self):

        global flag_plot1_update_is_running        
        global flag_calltable_checkstate_changed, flag_puttable_checkstate_changed        
                
        try:        
            dt = datetime.now()

            flag_plot1_update_is_running = True                        

            # Plot1 그래프 그리기
            if comboindex1 == 2:
                
                self.plot1_time_line.setValue(plot_time_index)

                txt = ' {0} '.format(근월물_선물_피봇)
                self.label_14.setText(txt)

                txt = ' {0}/{1} '.format(근월물_선물_시가, 차월물_선물_시가)
                self.label_15.setText(txt)
                
                txt = ' {0} '.format(근월물_선물_저가)
                self.label_16.setText(txt)

                과거가 =  self.label_17.text().split()[0]

                if 근월물_선물_현재가 > float(과거가):

                    txt = " {0} ▲ ({1:.2f}, {2:0.1f}%, {3:.2f}), kp200 : {4:.2f} ".format(근월물_선물_현재가, 근월물_선물_종가대비, 근월물_선물_종가대비_등락율, 근월물_선물_진폭, kp200_현재가)

                    if 근월물_선물_종가대비 > 0:
                        self.label_17.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif 근월물_선물_종가대비 < 0:
                        self.label_17.setStyleSheet('background-color: pink; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_17.setStyleSheet('background-color: pink; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_17.setText(txt)

                elif 근월물_선물_현재가 < float(과거가):

                    txt = " {0} ▼ ({1:.2f}, {2:0.1f}%, {3:.2f}), kp200 : {4:.2f} ".format(근월물_선물_현재가, 근월물_선물_종가대비, 근월물_선물_종가대비_등락율, 근월물_선물_진폭, kp200_현재가)

                    if 근월물_선물_종가대비 > 0:
                        self.label_17.setStyleSheet('background-color: skyblue; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif 근월물_선물_종가대비 < 0:
                        self.label_17.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_17.setStyleSheet('background-color: skyblue; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_17.setText(txt)
                else:
                    pass

                txt = ' {0} '.format(근월물_선물_고가)
                self.label_18.setText(txt)

                self.plot1_kp200_line[3].setValue(KP200_COREVAL[3])
                self.plot1_kp200_line[4].setValue(KP200_COREVAL[4])
                self.plot1_kp200_line[5].setValue(KP200_COREVAL[5])
                self.plot1_kp200_line[6].setValue(KP200_COREVAL[6])                

                if 근월물_선물_저가 < KP200_COREVAL[3] or kp200_저가 < KP200_COREVAL[3]:
                    self.plot1_kp200_line[2].setValue(KP200_COREVAL[2])
                else:
                    pass

                if 근월물_선물_저가 < KP200_COREVAL[2] or kp200_저가 < KP200_COREVAL[2]:
                    self.plot1_kp200_line[1].setValue(KP200_COREVAL[1])
                else:
                    pass
                
                if 근월물_선물_고가 > KP200_COREVAL[6] or kp200_고가 > KP200_COREVAL[6]:
                    self.plot1_kp200_line[7].setValue(KP200_COREVAL[7])
                else:
                    pass

                if 근월물_선물_고가 > KP200_COREVAL[7] or kp200_고가 > KP200_COREVAL[7]:
                    self.plot1_kp200_line[8].setValue(KP200_COREVAL[8])
                else:
                    pass                
                
                self.plot1_fut_jl_line.setValue(근월물_선물_전저)
                self.plot1_fut_jh_line.setValue(근월물_선물_전고)
                self.plot1_fut_close_line.setValue(근월물_선물_종가)                
                self.plot1_fut_open_line.setValue(근월물_선물_시가)
                self.plot1_fut_low_line.setValue(근월물_선물_저가)
                self.plot1_fut_pivot_line.setValue(근월물_선물_피봇)
                self.plot1_fut_high_line.setValue(근월물_선물_고가)
                
                if DayTime:
                    self.plot1_kp200_curve.setData(df_kp200_graph['Price'].astype(float))
                    self.plot1_fut_cm_price_curve.setData(df_futures_cm_graph['Price'].astype(float))
                    self.plot1_fut_nm_price_curve.setData(df_futures_nm_graph['Price'].astype(float))
                else:
                    pass

                if flag_checkBox_plot1_bband:

                    self.parent.Calc_Bollinger('FUT')

                    self.plot1_bollinger_1st_upper_curve.setData(df_futures_cm_ta_graph['BBUpper_1st'].astype(float))
                    self.plot1_bollinger_1st_middle_curve.setData(df_futures_cm_ta_graph['BBMiddle_1st'].astype(float))
                    self.plot1_bollinger_1st_lower_curve.setData(df_futures_cm_ta_graph['BBLower_1st'].astype(float))
                    self.plot1_bollinger_2nd_upper_curve.setData(df_futures_cm_ta_graph['BBUpper_2nd'].astype(float))
                    self.plot1_bollinger_2nd_middle_curve.setData(df_futures_cm_ta_graph['BBMiddle_2nd'].astype(float))
                    self.plot1_bollinger_2nd_lower_curve.setData(df_futures_cm_ta_graph['BBLower_2nd'].astype(float))

                    self.plot1_fibonacci_line1.setValue(futures_fibonacci_levels[1])
                    self.plot1_fibonacci_line2.setValue(futures_fibonacci_levels[2])
                    self.plot1_fibonacci_line3.setValue(futures_fibonacci_levels[3])
                    self.plot1_fibonacci_line4.setValue(futures_fibonacci_levels[4])
                    self.plot1_fibonacci_line5.setValue(futures_fibonacci_levels[5])

                    if df_futures_cm_ta_graph.at[plot_time_index, 'BBMiddle_2nd'] >= df_futures_cm_ta_graph.at[plot_time_index, 'Price']:
                        self.label_p1_2.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p1_2.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " BB U: {0:.2f}\n BB M: {1:.2f}\n BB L: {2:.2f} ".format\
                        (df_futures_cm_ta_graph.at[plot_time_index, 'BBUpper_2nd'], df_futures_cm_ta_graph.at[plot_time_index, 'BBMiddle_2nd'], df_futures_cm_ta_graph.at[plot_time_index, 'BBLower_2nd'])
                    self.label_p1_2.setText(txt)
                else:                    
                    self.plot1_fibonacci_line1.setValue(근월물_선물_종가)
                    self.plot1_fibonacci_line2.setValue(근월물_선물_종가)
                    self.plot1_fibonacci_line3.setValue(근월물_선물_종가)
                    self.plot1_fibonacci_line4.setValue(근월물_선물_종가)
                    self.plot1_fibonacci_line5.setValue(근월물_선물_종가)

                    self.label_p1_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p1_2.setText(" BB Upper\n BB Middle\n BB Lower ")                

                if flag_checkBox_plot1_psar:

                    self.parent.Calc_PSAR_MAMA('FUT')

                    self.plot1_psar_curve.setData(df_futures_cm_ta_graph['PSAR'][0:plot_time_index+1].astype(float))

                    #self.plot1_sslup_curve.setData(df_futures_cm_ta_graph['SSLUp'][0:plot_time_index+1].astype(float))
                    #self.plot1_ssldown_curve.setData(df_futures_cm_ta_graph['SSLDown'][0:plot_time_index+1].astype(float))

                    self.plot1_mama_curve.setData(df_futures_cm_ta_graph['MAMA'].astype(float))
                    df = df_futures_cm_ta_graph['FAMA'].apply(lambda x: 근월물_선물_저가 if x < 근월물_선물_저가 else x)
                    self.plot1_fama_curve.setData(df.astype(float))

                    if df_futures_cm_ta_graph.at[plot_time_index, 'PSAR'] > df_futures_cm_ta_graph.at[plot_time_index, 'Price'] and df_futures_cm_ta_graph.at[plot_time_index, 'MAMA'] < df_futures_cm_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p1_3.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_futures_cm_ta_graph.at[plot_time_index, 'PSAR'] < df_futures_cm_ta_graph.at[plot_time_index, 'Price'] and df_futures_cm_ta_graph.at[plot_time_index, 'MAMA'] > df_futures_cm_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p1_3.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold') 
                    else:
                        self.label_p1_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " PSAR: {0:.2f}\n MAMA: {1:.2f}\n FAMA: {2:.2f} ".format(df_futures_cm_ta_graph.at[plot_time_index, 'PSAR'], df_futures_cm_ta_graph.at[plot_time_index, 'MAMA'], df_futures_cm_ta_graph.at[plot_time_index, 'FAMA'])
                    self.label_p1_3.setText(txt)
                else:
                    self.label_p1_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p1_3.setText(" PSAR\n MAMA ")

                if flag_checkBox_plot1_one_eye:

                    self.plot1_oe_conv_curve.setData(df_futures_cm_ta_graph['OE_CONV'].astype(float))
                    self.plot1_oe_base_curve.setData(df_futures_cm_ta_graph['OE_BASE'].astype(float))
                    self.plot1_span_a_curve.setData(df_futures_cm_ta_graph['SPAN_A'].astype(float))
                    self.plot1_span_b_curve.setData(df_futures_cm_ta_graph['SPAN_B'].astype(float))

                    if flag_one_eye_lagging_span:
                        self.plot1_lagging_span_curve.setData(df_futures_cm_ta_graph['LAGGING_SPAN'].astype(float))

                    if df_futures_cm_ta_graph.at[plot_time_index, 'OE_CONV'] < df_futures_cm_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_futures_cm_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] < df_futures_cm_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p1_4.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_futures_cm_ta_graph.at[plot_time_index, 'OE_CONV'] > df_futures_cm_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_futures_cm_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] > df_futures_cm_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p1_4.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p1_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " 기준선: {0:.2f}\n 전환선: {1:.2f}\n SPAN A: {2:.2f} \n SPAN B: {3:.2f} ".format\
                        (df_futures_cm_ta_graph.at[plot_time_index, 'OE_BASE'], df_futures_cm_ta_graph.at[plot_time_index, 'OE_CONV'], \
                            df_futures_cm_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'], df_futures_cm_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B'])
                    self.label_p1_4.setText(txt)                    
                else:
                    self.label_p1_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p1_4.setText(" ONE EYE ")
            
            elif comboindex1 == 3:
                
                self.plot1_time_line.setValue(plot_time_index)                

                txt = " {0:.2f}({1:.0f}/{2:.0f}) ".format(풋잔량비, put_quote['매수잔량'], put_quote['매도잔량'])
                self.label_16.setText(txt)

                txt = " CM: {0:.2f}({1:.0f}/{2:.0f}), NM: {3:.2f}({4:.0f}/{5:.0f}), [▼: {6:.2f}, ▲: {7:.2f}] ".format(\
                    선물_근월물_호가_잔량비, 근월물_매수호가_총수량, 근월물_매도호가_총수량, 선물_차월물_호가_잔량비, \
                    차월물_매수호가_총수량, 차월물_매도호가_총수량, 차월물_선물_호가잔량비_최소, 차월물_선물_호가잔량비_최대)

                if fut_quote_energy_direction == 'call':
                    self.label_17.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                elif fut_quote_energy_direction == 'put':
                    self.label_17.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                else:
                    self.label_17.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                self.label_17.setText(txt)
                
                txt = " {0:.2f}({1:.0f}/{2:.0f}) ".format(콜잔량비, call_quote['매수잔량'], call_quote['매도잔량'])
                self.label_18.setText(txt)

                self.plot1_call_quote_curve.setData(df_call_information_graph['quote_remainder_ratio'].astype(float))
                self.plot1_put_quote_curve.setData(df_put_information_graph['quote_remainder_ratio'].astype(float))

                if DayTime:
                    self.plot1_fut_cm_quote_remainder_ratio_curve.setData(df_futures_cm_graph['c_quote_remainder_ratio'].astype(float))
                    self.plot1_fut_nm_quote_remainder_ratio_curve.setData(df_futures_cm_graph['n_quote_remainder_ratio'].astype(float))
                    self.plot1_nm_futures_quote_remainder_ratio_bottom_line.setValue(차월물_선물_호가잔량비_최소)
                    self.plot1_nm_futures_quote_remainder_ratio_upper_line.setValue(차월물_선물_호가잔량비_최대)
                else:
                    pass

            elif comboindex1 == 4:

                self.plot1_time_line.setValue(plot_time_index)

                txt = " {0:.0f} ".format(put_volume_power)
                self.label_16.setText(txt)

                txt = " {0:.0f} ".format(fut_cm_volume_power)

                if fut_cm_volume_power > 0:
                    self.label_17.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                else:
                    self.label_17.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                self.label_17.setText(txt)
                
                txt = " {0:.0f} ".format(call_volume_power)
                self.label_18.setText(txt)

                if DayTime:
                    self.plot1_fut_volume_curve.setData(df_futures_cm_graph['Volume'].astype(float))
                else:
                    pass
                                
                self.plot1_call_volume_curve.setData(df_call_information_graph['Volume'].astype(float))
                self.plot1_put_volume_curve.setData(df_put_information_graph['Volume'].astype(float))

            # 옵션가격
            elif comboindex1 == 5:
                
                self.plot1_time_line.setValue(plot_time_index)

                if DayTime:

                    # 등가표시
                    txt = ' 등가: {0} '.format(atm_txt)
                    self.label_11.setText(txt)
                    
                    txt = ' 시작 중심가: {0:.2f} '.format(INIT_CENTER_VAL)
                    self.label_12.setText(txt)

                    txt = ' 하단: {0:.2f} '.format(옵션_중심가/GOLDEN_RATIO)                        

                    self.label_13.setText(txt)

                    txt = ' 상단: {0:.2f} '.format(옵션_중심가*GOLDEN_RATIO)
                    self.label_14.setText(txt)

                    txt = ' {0:.2f}({1:.2f}, {2:.2f}%) '.format(put_atm_value, df_put.at[ATM_INDEX, '대비'], (put_atm_value / df_put.at[ATM_INDEX, '시가'] - 1) * 100)
                    self.label_16.setText(txt)

                    txt = ' 중심가: {0:.2f} '.format(옵션_중심가)
                    self.label_17.setText(txt)

                    txt = ' {0:.2f}({1:.2f}, {2:.2f}%) '.format(call_atm_value, df_call.at[ATM_INDEX, '대비'], (call_atm_value / df_call.at[ATM_INDEX, '시가'] - 1) * 100)
                    self.label_18.setText(txt)
                else:
                    pass

                if flag_calltable_checkstate_changed:
                    flag_calltable_checkstate_changed = False
                    for i in range(option_pairs_count):
                        self.plot1_call_curve[i].clear()
                else:
                    pass

                if flag_puttable_checkstate_changed:
                    flag_puttable_checkstate_changed = False
                    for i in range(option_pairs_count):
                        self.plot1_put_curve[i].clear()
                else:
                    pass
                                
                # 선택된 콜그래프 그리기
                if selected_call:
                    for i in range(len(selected_call)):
                        self.plot1_call_curve[i].setData(df_call_graph[selected_call[i]]['Price'].astype(float))
                else:
                    pass                 

                # 선택된 풋그래프 그리기
                if selected_put:
                    for i in range(len(selected_put)):
                        self.plot1_put_curve[i].setData(df_put_graph[selected_put[i]]['Price'].astype(float))
                else:
                    pass

                if DayTime:
                    self.plot1_center_val_lower_line.setValue(옵션_중심가/GOLDEN_RATIO)
                    self.plot1_center_val_line.setValue(옵션_중심가)
                    self.plot1_center_val_upper_line.setValue(옵션_중심가*GOLDEN_RATIO)

                    self.plot1_center_val_curve.setData(df_call_information_graph['centerval'].astype(float))
                else:
                    pass
            
            elif comboindex1 == 6:
                
                self.plot1_time_line.setValue(plot_time_index)

                txt = " {0:.2f}({1:.0f}/{2:.0f}), [▼, ▲: {4:.2f}] ".format(풋잔량비, put_quote['매수잔량'], put_quote['매도잔량'], 풋_잔량비_최소, 풋_잔량비_최대)
                self.label_16.setText(txt)
                
                txt = " {0:.2f}({1:.0f}/{2:.0f}), [▼, ▲: {4:.2f}] ".format(콜잔량비, call_quote['매수잔량'], call_quote['매도잔량'], 콜_잔량비_최소, 콜_잔량비_최대)
                self.label_18.setText(txt)

                self.plot1_call_quote_curve.setData(df_call_information_graph['quote_remainder_ratio'].astype(float))
                self.plot1_put_quote_curve.setData(df_put_information_graph['quote_remainder_ratio'].astype(float))
                
                self.plot1_option_quote_remainder_ratio_bottom_line.setValue(옵션_잔량비_최소)
                self.plot1_option_quote_remainder_ratio_upper_line.setValue(옵션_잔량비_최대)

            elif comboindex1 == 7:
                
                self.plot1_time_line.setValue(plot_time_index)

                txt = " {0:.2f}({1:.2f}) ".format(풋_수정미결퍼센트, put_oi_init_percent)
                self.label_16.setText(txt)
                
                txt = " {0:.2f}({1:.2f}) ".format(콜_수정미결퍼센트, call_oi_init_percent)
                self.label_18.setText(txt)

                self.plot1_call_oi_curve.setData(df_call_information_graph['open_interest'].astype(float))
                self.plot1_put_oi_curve.setData(df_put_information_graph['open_interest'].astype(float))
                        
            elif comboindex1 == 8:
                
                self.plot1_time_line.setValue(plot_time_index)

                txt = " {0:.2f}({1}) {2:.2f} ".format(SP500_시가대비_등락율, SP500_현재가, SP500_FUT_시가_등락율비)
                self.label_15.setText(txt)

                txt = " {0:.2f}({1}) ".format(put_otm_cdb_percent_mean, put_atm_value)
                self.label_16.setText(txt)

                txt = " {0:.2f}({1}) ".format(call_otm_cdb_percent_mean, call_atm_value)
                self.label_18.setText(txt)              

                self.plot1_call_drate_curve.setData(df_call_information_graph['Drate'].astype(float))
                self.plot1_put_drate_curve.setData(df_put_information_graph['Drate'].astype(float))

                self.plot1_cme_drate_curve.setData(SP500_FUT_시가_등락율비 * df_sp500_graph['Drate'].astype(float) + DRATE_OFFSET)
                
                if DayTime:

                    txt = " {0:.2f}({1}), Gap : {2:.2f} ".format(근월물_선물_시가대비_등락율, 근월물_선물_현재가, drate_gap)

                    if drate_gap > 0:
                        self.label_17.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif drate_gap < 0:
                        self.label_17.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_17.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_17.setText(txt)

                    if not np.isnan(df_futures_cm_graph.at[plot_time_index, 'Drate']):
                        self.plot1_fut_cm_drate_curve.setData(plot_drate_scale_factor * df_futures_cm_graph['Drate'].astype(float))

                    if not np.isnan(df_futures_nm_graph.at[plot_time_index, 'Drate']):
                        self.plot1_fut_nm_drate_curve.setData(plot_drate_scale_factor * df_futures_nm_graph['Drate'].astype(float))                        
                else:
                    pass                              
            
            elif comboindex1 == 10:
                
                self.plot1_time_line.setValue(plot_time_index)                

                if DayTime:
                    txt = " 기관현물: {0} ".format(기관현물_순매수)
                    self.label_11.setText(txt)

                    txt = " 기관선물: {0} ".format(기관선물_순매수)
                    self.label_12.setText(txt)

                    txt = " 개인현물: {0} ".format(개인현물_순매수)
                    self.label_13.setText(txt)

                    txt = " 개인선물: {0} ".format(개인선물_순매수)
                    self.label_14.setText(txt)

                    if 프로그램_순매수 > 0 and 현물_총순매수 > 0:

                        if 외인선물_순매수 < 0 and 외인현물_순매수 < 0:
                            txt = ' - '
                            self.label_15.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                            self.label_15.setText(txt)

                        if (외인선물_순매수 < 0 and 외인현물_순매수 > 0) or (외인선물_순매수 > 0 and 외인현물_순매수 < 0):
                            txt = ' 외인수급 Cross '
                            self.label_15.setStyleSheet('background-color: black; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                            self.label_15.setText(txt)

                        if 외인선물_순매수 > 0 and 외인현물_순매수 > 0:
                            txt = ' 수급 Call! '
                            self.label_15.setStyleSheet('background-color: magenta; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                            self.label_15.setText(txt)

                    elif 프로그램_순매수 < 0 and 현물_총순매수 < 0:

                        if 외인선물_순매수 > 0 and 외인현물_순매수 > 0:
                            txt = ' - '
                            self.label_15.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                            self.label_15.setText(txt)

                        if (외인선물_순매수 > 0 and 외인현물_순매수 < 0) or (외인선물_순매수 < 0 and 외인현물_순매수 > 0):
                            txt = ' 외인수급 Cross '
                            self.label_15.setStyleSheet('background-color: black; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                            self.label_15.setText(txt)          

                        if 외인선물_순매수 < 0 and 외인현물_순매수 < 0:
                            txt = ' 수급 Put! '
                            self.label_15.setStyleSheet('background-color: cyan; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                            self.label_15.setText(txt)
                    else:
                        txt = ' 수급종합 Cross '
                        self.label_15.setStyleSheet('background-color: black; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                        self.label_15.setText(txt)

                    if not np.isnan(프로그램_순매수):
                        txt = " Prog/F.S: {0:.0f}/{1:.0f} ".format(프로그램_순매수, 외인현물_순매수)

                        if 프로그램_순매수 <= 0:
                            self.label_16.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                        else:
                            self.label_16.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                        self.label_16.setText(txt)
                    else:
                        pass

                    txt = " {0:.0f} ".format(fut_cm_volume_power)

                    if fut_cm_volume_power > 0:
                        self.label_17.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_17.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_17.setText(txt)

                    if not np.isnan(현물_총순매수):
                        txt = " S.S/F.F: {0:.0f}/{1:.0f} ".format(현물_총순매수, 외인선물_순매수)

                        if 현물_총순매수 <= 0:
                            self.label_18.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                        else:
                            self.label_18.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                        self.label_18.setText(txt)
                    else:
                        pass

                    self.plot1_fut_volume_curve.setData(df_futures_cm_graph['Volume'].astype(float))
                    self.plot1_program_curve.setData(df_demand_supply_graph['Program'].astype(float))

                    df = df_demand_supply_graph['kospi_total'].apply(lambda x: np.nan if x == 0 else x)
                    df.at[0] = 0

                    self.plot1_kospi_total_curve.setData(df.astype(float))

                    self.plot1_kospi_foreigner_curve.setData(df_demand_supply_graph['kospi_foreigner'].astype(float))
                    self.plot1_futures_foreigner_curve.setData(df_demand_supply_graph['futures_foreigner'].astype(float).astype(float))
                else:
                    pass

            elif comboindex1 == 11:

                pass
                '''
                self.plot1_time_line.setValue(plot_time_index)

                if DayTime:
                    txt = " 기관현물 : {0} ".format(기관현물_순매수)
                    self.label_11.setText(txt)

                    txt = " 기관선물 : {0} ".format(기관선물_순매수)
                    self.label_12.setText(txt)

                    txt = " 개인현물 : {0} ".format(개인현물_순매수)
                    self.label_13.setText(txt)

                    txt = " 개인선물 : {0} ".format(개인선물_순매수)
                    self.label_14.setText(txt)

                    if 프로그램_순매수 > 0 and 현물_총순매수 > 0:

                        if 외인선물_순매수 < 0 and 외인현물_순매수 < 0:
                            txt = ' - '
                            self.label_15.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                            self.label_15.setText(txt)

                        if (외인선물_순매수 < 0 and 외인현물_순매수 > 0) or (외인선물_순매수 > 0 and 외인현물_순매수 < 0):
                            txt = ' 외인수급 Cross '
                            self.label_15.setStyleSheet('background-color: black; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                            self.label_15.setText(txt)

                        if 외인선물_순매수 > 0 and 외인현물_순매수 > 0:
                            txt = ' 수급 Call! '
                            self.label_15.setStyleSheet('background-color: magenta; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                            self.label_15.setText(txt)

                    elif 프로그램_순매수 < 0 and 현물_총순매수 < 0:

                        if 외인선물_순매수 > 0 and 외인현물_순매수 > 0:
                            txt = ' - '
                            self.label_15.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                            self.label_15.setText(txt)

                        if (외인선물_순매수 > 0 and 외인현물_순매수 < 0) or (외인선물_순매수 < 0 and 외인현물_순매수 > 0):
                            txt = ' 외인수급 Cross '
                            self.label_15.setStyleSheet('background-color: black; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                            self.label_15.setText(txt)          

                        if 외인선물_순매수 < 0 and 외인현물_순매수 < 0:
                            txt = ' 수급 Put! '
                            self.label_15.setStyleSheet('background-color: cyan; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                            self.label_15.setText(txt)
                    else:
                        txt = ' 수급종합 Cross '
                        self.label_15.setStyleSheet('background-color: black; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                        self.label_15.setText(txt)

                    if not np.isnan(외인현물_순매수):
                        txt = " 외인현물 : {0:.0f} ".format(외인현물_순매수)

                        if 외인현물_순매수 <= 0:
                            self.label_16.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                        else:
                            self.label_16.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                        self.label_16.setText(txt)
                    else:
                        pass

                    txt = " {0:.0f} ".format(fut_cm_volume_power)

                    if fut_cm_volume_power > 0:
                        self.label_17.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_17.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_17.setText(txt)
                    
                    if not np.isnan(외인선물_순매수):
                        txt = " 외인선물 : {0:.0f} ".format(외인선물_순매수)

                        if 외인선물_순매수 <= 0:
                            self.label_18.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                        else:
                            self.label_18.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                        self.label_18.setText(txt)
                    else:
                        pass

                    self.plot1_fut_volume_curve.setData(df_futures_cm_graph['Volume'].astype(float))
                    self.plot1_kospi_foreigner_curve.setData(df_demand_supply_graph['kospi_foreigner'].astype(float))
                    self.plot1_futures_foreigner_curve.setData(df_demand_supply_graph['futures_foreigner'].astype(float).astype(float))                    
                else:
                    pass
                '''

            elif comboindex1 == 13:
                
                self.plot1_time_line.setValue(plot_time_index)

                txt = ' {0} '.format(format(SP500_저가, ','))
                self.label_16.setText(txt)

                tmp = self.label_17.text().split()[0]
                과거가 =  tmp.replace(',', '')               

                if SP500_현재가 > float(과거가):

                    txt = " {0} ▲ ({1}, {2:0.1f}%, {3}) ".format(format(SP500_현재가, ','), SP500_종가대비, SP500_등락율, SP500_진폭_틱)

                    if SP500_종가대비 > 0:
                        self.label_17.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif SP500_종가대비 < 0:
                        self.label_17.setStyleSheet('background-color: pink; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_17.setStyleSheet('background-color: pink; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_17.setText(txt)

                elif SP500_현재가 < float(과거가):

                    txt = " {0} ▼ ({1}, {2:0.1f}%, {3}) ".format(format(SP500_현재가, ','), SP500_종가대비, SP500_등락율, SP500_진폭_틱)

                    if SP500_종가대비 > 0:
                        self.label_17.setStyleSheet('background-color: skyblue; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif SP500_종가대비 < 0:
                        self.label_17.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_17.setStyleSheet('background-color: skyblue; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_17.setText(txt)
                else:
                    pass

                txt = ' {0} '.format(format(SP500_고가, ','))
                self.label_18.setText(txt)

                self.plot1_ovc_jl_line.setValue(SP500_전저)
                self.plot1_ovc_jh_line.setValue(SP500_전고)
                self.plot1_ovc_close_line.setValue(SP500_전일종가)
                self.plot1_ovc_open_line.setValue(SP500_시가)
                self.plot1_ovc_pivot_line.setValue(SP500_피봇)
                self.plot1_ovc_low_line.setValue(SP500_저가)
                self.plot1_ovc_high_line.setValue(SP500_고가)                                

                self.plot1_sp500_curve.setData(df_sp500_graph['Price'].astype(float))
                #item = CandlestickItem(df_sp500_tick_ohlc)
                #self.plot1.addItem(item)

                if flag_checkBox_plot1_bband:

                    self.parent.Calc_Bollinger('SP500')

                    self.plot1_bollinger_1st_upper_curve.setData(df_sp500_ta_graph['BBUpper_1st'].astype(float))
                    self.plot1_bollinger_1st_middle_curve.setData(df_sp500_ta_graph['BBMiddle_1st'].astype(float))
                    self.plot1_bollinger_1st_lower_curve.setData(df_sp500_ta_graph['BBLower_1st'].astype(float))
                    self.plot1_bollinger_2nd_upper_curve.setData(df_sp500_ta_graph['BBUpper_2nd'].astype(float))
                    self.plot1_bollinger_2nd_middle_curve.setData(df_sp500_ta_graph['BBMiddle_2nd'].astype(float))
                    self.plot1_bollinger_2nd_lower_curve.setData(df_sp500_ta_graph['BBLower_2nd'].astype(float))

                    self.plot1_fibonacci_line1.setValue(sp500_fibonacci_levels[1])
                    self.plot1_fibonacci_line2.setValue(sp500_fibonacci_levels[2])
                    self.plot1_fibonacci_line3.setValue(sp500_fibonacci_levels[3])
                    self.plot1_fibonacci_line4.setValue(sp500_fibonacci_levels[4])
                    self.plot1_fibonacci_line5.setValue(sp500_fibonacci_levels[5])

                    if df_sp500_ta_graph.at[plot_time_index, 'BBMiddle_2nd'] >= df_sp500_ta_graph.at[plot_time_index, 'Price']:
                        self.label_p1_2.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p1_2.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " BB U: {0:.2f}\n BB M: {1:.2f}\n BB L: {2:.2f} ".format\
                        (df_sp500_ta_graph.at[plot_time_index, 'BBUpper_2nd'], df_sp500_ta_graph.at[plot_time_index, 'BBMiddle_2nd'], df_sp500_ta_graph.at[plot_time_index, 'BBLower_2nd'])
                    self.label_p1_2.setText(txt)
                else:                    
                    self.plot1_fibonacci_line1.setValue(SP500_전일종가)
                    self.plot1_fibonacci_line2.setValue(SP500_전일종가)
                    self.plot1_fibonacci_line3.setValue(SP500_전일종가)
                    self.plot1_fibonacci_line4.setValue(SP500_전일종가)
                    self.plot1_fibonacci_line5.setValue(SP500_전일종가)

                    self.label_p1_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p1_2.setText(" BB Upper\n BB Middle\n BB Lower ")

                if flag_checkBox_plot1_psar:

                    self.parent.Calc_PSAR_MAMA('SP500')

                    self.plot1_psar_curve.setData(df_sp500_ta_graph['PSAR'][0:plot_time_index+1].astype(float))

                    #self.plot1_sslup_curve.setData(df_sp500_ta_graph['SSLUp'][0:plot_time_index+1].astype(float))
                    #self.plot1_ssldown_curve.setData(df_sp500_ta_graph['SSLDown'][0:plot_time_index+1].astype(float))

                    self.plot1_mama_curve.setData(df_sp500_ta_graph['MAMA'].astype(float))
                    df = df_sp500_ta_graph['FAMA'].apply(lambda x: SP500_저가 if x < SP500_저가 else x)
                    self.plot1_fama_curve.setData(df.astype(float))

                    if df_sp500_ta_graph.at[plot_time_index, 'PSAR'] > df_sp500_ta_graph.at[plot_time_index, 'Price'] and df_sp500_ta_graph.at[plot_time_index, 'MAMA'] < df_sp500_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p1_3.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_sp500_ta_graph.at[plot_time_index, 'PSAR'] < df_sp500_ta_graph.at[plot_time_index, 'Price'] and df_sp500_ta_graph.at[plot_time_index, 'MAMA'] > df_sp500_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p1_3.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold') 
                    else:
                        self.label_p1_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " PSAR: {0:.2f}\n MAMA: {1:.2f}\n FAMA: {2:.2f} ".format(df_sp500_ta_graph.at[plot_time_index, 'PSAR'], df_sp500_ta_graph.at[plot_time_index, 'MAMA'], df_sp500_ta_graph.at[plot_time_index, 'FAMA'])
                    self.label_p1_3.setText(txt)
                else:
                    self.label_p1_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p1_3.setText(" PSAR\n MAMA ")
                
                if flag_checkBox_plot1_one_eye:

                    self.plot1_oe_conv_curve.setData(df_sp500_ta_graph['OE_CONV'].astype(float))
                    self.plot1_oe_base_curve.setData(df_sp500_ta_graph['OE_BASE'].astype(float))
                    self.plot1_span_a_curve.setData(df_sp500_ta_graph['SPAN_A'].astype(float))
                    self.plot1_span_b_curve.setData(df_sp500_ta_graph['SPAN_B'].astype(float))

                    if flag_one_eye_lagging_span:
                        self.plot1_lagging_span_curve.setData(df_sp500_ta_graph['LAGGING_SPAN'].astype(float))

                    if df_sp500_ta_graph.at[plot_time_index, 'OE_CONV'] < df_sp500_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_sp500_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] < df_sp500_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p1_4.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_sp500_ta_graph.at[plot_time_index, 'OE_CONV'] > df_sp500_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_sp500_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] > df_sp500_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p1_4.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p1_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " 기준선: {0:.2f}\n 전환선: {1:.2f}\n SPAN A: {2:.2f} \n SPAN B: {3:.2f} ".format\
                        (df_sp500_ta_graph.at[plot_time_index, 'OE_BASE'], df_sp500_ta_graph.at[plot_time_index, 'OE_CONV'], \
                            df_sp500_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'], df_sp500_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B'])
                    self.label_p1_4.setText(txt)                    

                else:
                    self.label_p1_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p1_4.setText(" ONE EYE ")
            
            elif comboindex1 == 14:
                
                self.plot1_time_line.setValue(plot_time_index)

                txt = ' {0} '.format(format(DOW_저가, ','))
                self.label_16.setText(txt)

                tmp = self.label_17.text().split()[0]
                과거가 =  tmp.replace(',', '')

                if DOW_현재가 > float(과거가):

                    txt = " {0} ▲ ({1}, {2:0.1f}%, {3}) ".format(format(DOW_현재가, ','), format(DOW_종가대비, ','), DOW_등락율, DOW_진폭_틱)

                    if DOW_종가대비 > 0:
                        self.label_17.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif DOW_종가대비 < 0:
                        self.label_17.setStyleSheet('background-color: pink; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_17.setStyleSheet('background-color: pink; color: black')

                    self.label_17.setText(txt)

                elif DOW_현재가 < float(과거가):

                    txt = " {0} ▼ ({1}, {2:0.1f}%, {3}) ".format(format(DOW_현재가, ','), format(DOW_종가대비, ','), DOW_등락율, DOW_진폭_틱)

                    if DOW_종가대비 > 0:
                        self.label_17.setStyleSheet('background-color: skyblue; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif DOW_종가대비 < 0:
                        self.label_17.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_17.setStyleSheet('background-color: skyblue; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_17.setText(txt)
                else:
                    pass
                
                txt = ' {0} '.format(format(DOW_고가, ','))
                self.label_18.setText(txt)

                self.plot1_ovc_jl_line.setValue(DOW_전저)
                self.plot1_ovc_jh_line.setValue(DOW_전고)
                self.plot1_ovc_close_line.setValue(DOW_전일종가)
                self.plot1_ovc_open_line.setValue(DOW_시가)
                self.plot1_ovc_pivot_line.setValue(DOW_피봇)
                self.plot1_ovc_low_line.setValue(DOW_저가)
                self.plot1_ovc_high_line.setValue(DOW_고가)                                      

                self.plot1_dow_curve.setData(df_dow_graph['Price'].astype(float))

                if flag_checkBox_plot1_bband:

                    self.parent.Calc_Bollinger('DOW')            

                    self.plot1_bollinger_1st_upper_curve.setData(df_dow_ta_graph['BBUpper_1st'].astype(float))
                    self.plot1_bollinger_1st_middle_curve.setData(df_dow_ta_graph['BBMiddle_1st'].astype(float))
                    self.plot1_bollinger_1st_lower_curve.setData(df_dow_ta_graph['BBLower_1st'].astype(float))
                    self.plot1_bollinger_2nd_upper_curve.setData(df_dow_ta_graph['BBUpper_2nd'].astype(float))
                    self.plot1_bollinger_2nd_middle_curve.setData(df_dow_ta_graph['BBMiddle_2nd'].astype(float))
                    self.plot1_bollinger_2nd_lower_curve.setData(df_dow_ta_graph['BBLower_2nd'].astype(float))

                    self.plot1_fibonacci_line1.setValue(dow_fibonacci_levels[1])
                    self.plot1_fibonacci_line2.setValue(dow_fibonacci_levels[2])
                    self.plot1_fibonacci_line3.setValue(dow_fibonacci_levels[3])
                    self.plot1_fibonacci_line4.setValue(dow_fibonacci_levels[4])
                    self.plot1_fibonacci_line5.setValue(dow_fibonacci_levels[5])

                    if df_dow_ta_graph.at[plot_time_index, 'BBMiddle_2nd'] >= df_dow_ta_graph.at[plot_time_index, 'Price']:
                        self.label_p1_2.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p1_2.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " BB U: {0:.0f}\n BB M: {1:.0f}\n BB L: {2:.0f} ".format\
                        (df_dow_ta_graph.at[plot_time_index, 'BBUpper_2nd'], df_dow_ta_graph.at[plot_time_index, 'BBMiddle_2nd'], df_dow_ta_graph.at[plot_time_index, 'BBLower_2nd'])
                    self.label_p1_2.setText(txt)
                else:
                    self.plot1_fibonacci_line1.setValue(DOW_전일종가)
                    self.plot1_fibonacci_line2.setValue(DOW_전일종가)
                    self.plot1_fibonacci_line3.setValue(DOW_전일종가)
                    self.plot1_fibonacci_line4.setValue(DOW_전일종가)
                    self.plot1_fibonacci_line5.setValue(DOW_전일종가)

                    self.label_p1_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p1_2.setText(" BB Upper\n BB Middle\n BB Lower ")

                if flag_checkBox_plot1_psar:

                    self.parent.Calc_PSAR_MAMA('DOW')

                    self.plot1_psar_curve.setData(df_dow_ta_graph['PSAR'][0:plot_time_index+1].astype(float))

                    #self.plot1_sslup_curve.setData(df_dow_ta_graph['SSLUp'][0:plot_time_index+1].astype(float))
                    #self.plot1_ssldown_curve.setData(df_dow_ta_graph['SSLDown'][0:plot_time_index+1].astype(float))

                    self.plot1_mama_curve.setData(df_dow_ta_graph['MAMA'].astype(float))
                    df = df_dow_ta_graph['FAMA'].apply(lambda x: DOW_저가 if x < DOW_저가 else x)
                    self.plot1_fama_curve.setData(df.astype(float))                        

                    if df_dow_ta_graph.at[plot_time_index, 'PSAR'] > df_dow_ta_graph.at[plot_time_index, 'Price'] and df_dow_ta_graph.at[plot_time_index, 'MAMA'] < df_dow_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p1_3.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_dow_ta_graph.at[plot_time_index, 'PSAR'] < df_dow_ta_graph.at[plot_time_index, 'Price'] and df_dow_ta_graph.at[plot_time_index, 'MAMA'] > df_dow_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p1_3.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold') 
                    else:
                        self.label_p1_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " PSAR: {0:.0f}\n MAMA: {1:.0f}\n FAMA: {2:.0f} ".format(df_dow_ta_graph.at[plot_time_index, 'PSAR'], df_dow_ta_graph.at[plot_time_index, 'MAMA'], df_dow_ta_graph.at[plot_time_index, 'FAMA'])
                    self.label_p1_3.setText(txt)
                else:
                    self.label_p1_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p1_3.setText(" PSAR\n MAMA ")
                
                if flag_checkBox_plot1_one_eye:

                    self.plot1_oe_conv_curve.setData(df_dow_ta_graph['OE_CONV'].astype(float))
                    self.plot1_oe_base_curve.setData(df_dow_ta_graph['OE_BASE'].astype(float))
                    self.plot1_span_a_curve.setData(df_dow_ta_graph['SPAN_A'].astype(float))
                    self.plot1_span_b_curve.setData(df_dow_ta_graph['SPAN_B'].astype(float))

                    if flag_one_eye_lagging_span:
                        self.plot1_lagging_span_curve.setData(df_dow_ta_graph['LAGGING_SPAN'].astype(float))

                    if df_dow_ta_graph.at[plot_time_index, 'OE_CONV'] < df_dow_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_dow_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] < df_dow_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p1_4.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_dow_ta_graph.at[plot_time_index, 'OE_CONV'] > df_dow_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_dow_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] > df_dow_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p1_4.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p1_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " 기준선: {0:.0f}\n 전환선: {1:.0f}\n SPAN A: {2:.0f} \n SPAN B: {3:.0f} ".format\
                        (df_dow_ta_graph.at[plot_time_index, 'OE_BASE'], df_dow_ta_graph.at[plot_time_index, 'OE_CONV'], \
                            df_dow_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'], df_dow_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B'])
                    self.label_p1_4.setText(txt)
                    
                else:
                    self.label_p1_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p1_4.setText(" ONE EYE ")

            elif comboindex1 == 15:
                
                self.plot1_time_line.setValue(plot_time_index)

                txt = ' {0} '.format(format(NASDAQ_저가, ','))
                self.label_16.setText(txt)

                tmp = self.label_17.text().split()[0]
                과거가 =  tmp.replace(',', '')                

                if NASDAQ_현재가 > float(과거가):

                    txt = " {0} ▲ ({1}, {2:0.1f}%, {3}) ".format(format(NASDAQ_현재가, ','), format(NASDAQ_종가대비, ','), NASDAQ_등락율, NASDAQ_진폭_틱)

                    if NASDAQ_종가대비 > 0:
                        self.label_17.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif NASDAQ_종가대비 < 0:
                        self.label_17.setStyleSheet('background-color: pink; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_17.setStyleSheet('background-color: pink; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_17.setText(txt)

                elif NASDAQ_현재가 < float(과거가):

                    txt = " {0} ▼ ({1}, {2:0.1f}%, {3}) ".format(format(NASDAQ_현재가, ','), format(NASDAQ_종가대비, ','), NASDAQ_등락율, NASDAQ_진폭_틱)

                    if NASDAQ_종가대비 > 0:
                        self.label_17.setStyleSheet('background-color: skyblue; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif NASDAQ_종가대비 < 0:
                        self.label_17.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_17.setStyleSheet('background-color: skyblue; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_17.setText(txt)
                else:
                    pass

                txt = ' {0} '.format(format(NASDAQ_고가, ','))
                self.label_18.setText(txt)

                self.plot1_ovc_jl_line.setValue(NASDAQ_전저)
                self.plot1_ovc_jh_line.setValue(NASDAQ_전고)
                self.plot1_ovc_close_line.setValue(NASDAQ_전일종가)
                self.plot1_ovc_open_line.setValue(NASDAQ_시가)
                self.plot1_ovc_pivot_line.setValue(NASDAQ_피봇)
                self.plot1_ovc_low_line.setValue(NASDAQ_저가)
                self.plot1_ovc_high_line.setValue(NASDAQ_고가)                 

                self.plot1_nasdaq_curve.setData(df_nasdaq_graph['Price'].astype(float))

                if flag_checkBox_plot1_bband:

                    self.parent.Calc_Bollinger('NASDAQ')            

                    self.plot1_bollinger_1st_upper_curve.setData(df_nasdaq_ta_graph['BBUpper_1st'].astype(float))
                    self.plot1_bollinger_1st_middle_curve.setData(df_nasdaq_ta_graph['BBMiddle_1st'].astype(float))
                    self.plot1_bollinger_1st_lower_curve.setData(df_nasdaq_ta_graph['BBLower_1st'].astype(float))
                    self.plot1_bollinger_2nd_upper_curve.setData(df_nasdaq_ta_graph['BBUpper_2nd'].astype(float))
                    self.plot1_bollinger_2nd_middle_curve.setData(df_nasdaq_ta_graph['BBMiddle_2nd'].astype(float))
                    self.plot1_bollinger_2nd_lower_curve.setData(df_nasdaq_ta_graph['BBLower_2nd'].astype(float))

                    self.plot1_fibonacci_line1.setValue(nasdaq_fibonacci_levels[1])
                    self.plot1_fibonacci_line2.setValue(nasdaq_fibonacci_levels[2])
                    self.plot1_fibonacci_line3.setValue(nasdaq_fibonacci_levels[3])
                    self.plot1_fibonacci_line4.setValue(nasdaq_fibonacci_levels[4])
                    self.plot1_fibonacci_line5.setValue(nasdaq_fibonacci_levels[5])

                    if df_nasdaq_ta_graph.at[plot_time_index, 'BBMiddle_2nd'] >= df_nasdaq_ta_graph.at[plot_time_index, 'Price']:
                        self.label_p1_2.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p1_2.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " BB U: {0:.2f}\n BB M: {1:.2f}\n BB L: {2:.2f} ".format\
                        (df_nasdaq_ta_graph.at[plot_time_index, 'BBUpper_2nd'], df_nasdaq_ta_graph.at[plot_time_index, 'BBMiddle_2nd'], df_nasdaq_ta_graph.at[plot_time_index, 'BBLower_2nd'])
                    self.label_p1_2.setText(txt)
                else:
                    self.plot1_fibonacci_line1.setValue(NASDAQ_전일종가)
                    self.plot1_fibonacci_line2.setValue(NASDAQ_전일종가)
                    self.plot1_fibonacci_line3.setValue(NASDAQ_전일종가)
                    self.plot1_fibonacci_line4.setValue(NASDAQ_전일종가)
                    self.plot1_fibonacci_line5.setValue(NASDAQ_전일종가)

                    self.label_p1_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p1_2.setText(" BB Upper\n BB Middle\n BB Lower ")

                if flag_checkBox_plot1_psar:

                    self.parent.Calc_PSAR_MAMA('NASDAQ')

                    self.plot1_psar_curve.setData(df_nasdaq_ta_graph['PSAR'][0:plot_time_index+1].astype(float))

                    #self.plot1_sslup_curve.setData(df_nasdaq_ta_graph['SSLUp'][0:plot_time_index+1].astype(float))
                    #self.plot1_ssldown_curve.setData(df_nasdaq_ta_graph['SSLDown'][0:plot_time_index+1].astype(float))

                    self.plot1_mama_curve.setData(df_nasdaq_ta_graph['MAMA'].astype(float))
                    df = df_nasdaq_ta_graph['FAMA'].apply(lambda x: NASDAQ_저가 if x < NASDAQ_저가 else x)
                    self.plot1_fama_curve.setData(df.astype(float))                        

                    if df_nasdaq_ta_graph.at[plot_time_index, 'PSAR'] > df_nasdaq_ta_graph.at[plot_time_index, 'Price'] and df_nasdaq_ta_graph.at[plot_time_index, 'MAMA'] < df_nasdaq_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p1_3.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_nasdaq_ta_graph.at[plot_time_index, 'PSAR'] < df_nasdaq_ta_graph.at[plot_time_index, 'Price'] and df_nasdaq_ta_graph.at[plot_time_index, 'MAMA'] > df_nasdaq_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p1_3.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold') 
                    else:
                        self.label_p1_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " PSAR: {0:.2f}\n MAMA: {1:.2f}\n FAMA: {2:.2f} ".format(df_nasdaq_ta_graph.at[plot_time_index, 'PSAR'], df_nasdaq_ta_graph.at[plot_time_index, 'MAMA'], df_nasdaq_ta_graph.at[plot_time_index, 'FAMA'])
                    self.label_p1_3.setText(txt)
                else:
                    self.label_p1_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p1_3.setText(" PSAR\n MAMA ")
                
                if flag_checkBox_plot1_one_eye:

                    self.plot1_oe_conv_curve.setData(df_nasdaq_ta_graph['OE_CONV'].astype(float))
                    self.plot1_oe_base_curve.setData(df_nasdaq_ta_graph['OE_BASE'].astype(float))
                    self.plot1_span_a_curve.setData(df_nasdaq_ta_graph['SPAN_A'].astype(float))
                    self.plot1_span_b_curve.setData(df_nasdaq_ta_graph['SPAN_B'].astype(float))

                    if flag_one_eye_lagging_span:
                        self.plot1_lagging_span_curve.setData(df_nasdaq_ta_graph['LAGGING_SPAN'].astype(float))

                    if df_nasdaq_ta_graph.at[plot_time_index, 'OE_CONV'] < df_nasdaq_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_nasdaq_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] < df_nasdaq_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p1_4.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_nasdaq_ta_graph.at[plot_time_index, 'OE_CONV'] > df_nasdaq_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_nasdaq_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] > df_nasdaq_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p1_4.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p1_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " 기준선: {0:.2f}\n 전환선: {1:.2f}\n SPAN A: {2:.2f} \n SPAN B: {3:.2f} ".format\
                        (df_nasdaq_ta_graph.at[plot_time_index, 'OE_BASE'], df_nasdaq_ta_graph.at[plot_time_index, 'OE_CONV'], \
                            df_nasdaq_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'], df_nasdaq_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B'])
                    self.label_p1_4.setText(txt)
                    
                else:
                    self.label_p1_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p1_4.setText(" ONE EYE ")

            elif comboindex1 == 16:
                
                self.plot1_time_line.setValue(plot_time_index)

                txt = ' {0} '.format(format(HANGSENG_저가, ','))
                self.label_16.setText(txt)

                tmp = self.label_17.text().split()[0]
                과거가 =  tmp.replace(',', '')     

                if HANGSENG_현재가 > float(과거가):

                    txt = " {0} ▲ ({1}, {2:0.1f}%, {3}) ".format(format(HANGSENG_현재가, ','), HANGSENG_종가대비, HANGSENG_등락율, HANGSENG_진폭_틱)

                    if HANGSENG_종가대비 > 0:
                        self.label_17.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif HANGSENG_종가대비 < 0:
                        self.label_17.setStyleSheet('background-color: pink; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_17.setStyleSheet('background-color: pink; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_17.setText(txt)

                elif HANGSENG_현재가 < float(과거가):

                    txt = " {0} ▼ ({1}, {2:0.1f}%, {3}) ".format(format(HANGSENG_현재가, ','), HANGSENG_종가대비, HANGSENG_등락율, HANGSENG_진폭_틱)

                    if HANGSENG_종가대비 > 0:
                        self.label_17.setStyleSheet('background-color: skyblue; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif HANGSENG_종가대비 < 0:
                        self.label_17.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_17.setStyleSheet('background-color: skyblue; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_17.setText(txt)
                else:
                    pass

                txt = ' {0} '.format(format(HANGSENG_고가, ','))
                self.label_18.setText(txt)

                self.plot1_ovc_jl_line.setValue(HANGSENG_전저)
                self.plot1_ovc_jh_line.setValue(HANGSENG_전고)
                self.plot1_ovc_close_line.setValue(HANGSENG_전일종가)
                self.plot1_ovc_open_line.setValue(HANGSENG_시가)
                self.plot1_ovc_pivot_line.setValue(HANGSENG_피봇)
                self.plot1_ovc_low_line.setValue(HANGSENG_저가)
                self.plot1_ovc_high_line.setValue(HANGSENG_고가)                 

                self.plot1_hsi_curve.setData(df_hsi_graph['Price'].astype(float))

                if flag_checkBox_plot1_bband:

                    self.parent.Calc_Bollinger('HSI')            

                    self.plot1_bollinger_1st_upper_curve.setData(df_hsi_ta_graph['BBUpper_1st'].astype(float))
                    self.plot1_bollinger_1st_middle_curve.setData(df_hsi_ta_graph['BBMiddle_1st'].astype(float))
                    self.plot1_bollinger_1st_lower_curve.setData(df_hsi_ta_graph['BBLower_1st'].astype(float))
                    self.plot1_bollinger_2nd_upper_curve.setData(df_hsi_ta_graph['BBUpper_2nd'].astype(float))
                    self.plot1_bollinger_2nd_middle_curve.setData(df_hsi_ta_graph['BBMiddle_2nd'].astype(float))
                    self.plot1_bollinger_2nd_lower_curve.setData(df_hsi_ta_graph['BBLower_2nd'].astype(float))

                    self.plot1_fibonacci_line1.setValue(hsi_fibonacci_levels[1])
                    self.plot1_fibonacci_line2.setValue(hsi_fibonacci_levels[2])
                    self.plot1_fibonacci_line3.setValue(hsi_fibonacci_levels[3])
                    self.plot1_fibonacci_line4.setValue(hsi_fibonacci_levels[4])
                    self.plot1_fibonacci_line5.setValue(hsi_fibonacci_levels[5])

                    if df_hsi_ta_graph.at[plot_time_index, 'BBMiddle_2nd'] >= df_hsi_ta_graph.at[plot_time_index, 'Price']:
                        self.label_p1_2.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p1_2.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " BB U: {0:.0f}\n BB M: {1:.0f}\n BB L: {2:.0f} ".format\
                        (df_hsi_ta_graph.at[plot_time_index, 'BBUpper_2nd'], df_hsi_ta_graph.at[plot_time_index, 'BBMiddle_2nd'], df_hsi_ta_graph.at[plot_time_index, 'BBLower_2nd'])
                    self.label_p1_2.setText(txt)
                else:
                    self.plot1_fibonacci_line1.setValue(HANGSENG_전일종가)
                    self.plot1_fibonacci_line2.setValue(HANGSENG_전일종가)
                    self.plot1_fibonacci_line3.setValue(HANGSENG_전일종가)
                    self.plot1_fibonacci_line4.setValue(HANGSENG_전일종가)
                    self.plot1_fibonacci_line5.setValue(HANGSENG_전일종가)

                    self.label_p1_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p1_2.setText(" BB Upper\n BB Middle\n BB Lower ")

                if flag_checkBox_plot1_psar:

                    self.parent.Calc_PSAR_MAMA('HSI')

                    self.plot1_psar_curve.setData(df_hsi_ta_graph['PSAR'][0:plot_time_index+1].astype(float))

                    #self.plot1_sslup_curve.setData(df_hsi_ta_graph['SSLUp'][0:plot_time_index+1].astype(float))
                    #self.plot1_ssldown_curve.setData(df_hsi_ta_graph['SSLDown'][0:plot_time_index+1].astype(float))

                    self.plot1_mama_curve.setData(df_hsi_ta_graph['MAMA'].astype(float))
                    df = df_hsi_ta_graph['FAMA'].apply(lambda x: HANGSENG_저가 if x < HANGSENG_저가 else x)
                    self.plot1_fama_curve.setData(df.astype(float))                        

                    if df_hsi_ta_graph.at[plot_time_index, 'PSAR'] > df_hsi_ta_graph.at[plot_time_index, 'Price'] and df_hsi_ta_graph.at[plot_time_index, 'MAMA'] < df_hsi_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p1_3.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_hsi_ta_graph.at[plot_time_index, 'PSAR'] < df_hsi_ta_graph.at[plot_time_index, 'Price'] and df_hsi_ta_graph.at[plot_time_index, 'MAMA'] > df_hsi_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p1_3.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold') 
                    else:
                        self.label_p1_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " PSAR: {0:.0f}\n MAMA: {1:.0f}\n FAMA: {2:.0f} ".format(df_hsi_ta_graph.at[plot_time_index, 'PSAR'], df_hsi_ta_graph.at[plot_time_index, 'MAMA'], df_hsi_ta_graph.at[plot_time_index, 'FAMA'])
                    self.label_p1_3.setText(txt)
                else:
                    self.label_p1_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p1_3.setText(" PSAR\n MAMA ")
                
                if flag_checkBox_plot1_one_eye:

                    self.plot1_oe_conv_curve.setData(df_hsi_ta_graph['OE_CONV'].astype(float))
                    self.plot1_oe_base_curve.setData(df_hsi_ta_graph['OE_BASE'].astype(float))
                    self.plot1_span_a_curve.setData(df_hsi_ta_graph['SPAN_A'].astype(float))
                    self.plot1_span_b_curve.setData(df_hsi_ta_graph['SPAN_B'].astype(float))

                    if flag_one_eye_lagging_span:
                        self.plot1_lagging_span_curve.setData(df_hsi_ta_graph['LAGGING_SPAN'].astype(float))

                    if df_hsi_ta_graph.at[plot_time_index, 'OE_CONV'] < df_hsi_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_hsi_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] < df_hsi_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p1_4.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_hsi_ta_graph.at[plot_time_index, 'OE_CONV'] > df_hsi_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_hsi_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] > df_hsi_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p1_4.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p1_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " 기준선: {0:.0f}\n 전환선: {1:.0f}\n SPAN A: {2:.0f} \n SPAN B: {3:.0f} ".format\
                        (df_hsi_ta_graph.at[plot_time_index, 'OE_BASE'], df_hsi_ta_graph.at[plot_time_index, 'OE_CONV'], \
                            df_hsi_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'], df_hsi_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B'])
                    self.label_p1_4.setText(txt)
                    
                else:
                    self.label_p1_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p1_4.setText(" ONE EYE ")

            elif comboindex1 == 17:
                
                self.plot1_time_line.setValue(plot_time_index)

                txt = ' {0} '.format(format(WTI_저가, ','))
                self.label_16.setText(txt)

                과거가 =  self.label_17.text().split()[0]     

                if WTI_현재가 > float(과거가):

                    txt = " {0} ▲ ({1}, {2:0.1f}%, {3}) ".format(WTI_현재가, WTI_종가대비, WTI_등락율, WTI_진폭_틱)

                    if WTI_종가대비 > 0:
                        self.label_17.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif WTI_종가대비 < 0:
                        self.label_17.setStyleSheet('background-color: pink; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_17.setStyleSheet('background-color: pink; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_17.setText(txt)

                elif WTI_현재가 < float(과거가):

                    txt = " {0} ▼ ({1}, {2:0.1f}%, {3}) ".format(WTI_현재가, WTI_종가대비, WTI_등락율, WTI_진폭_틱)

                    if WTI_종가대비 > 0:
                        self.label_17.setStyleSheet('background-color: skyblue; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif WTI_종가대비 < 0:
                        self.label_17.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_17.setStyleSheet('background-color: skyblue; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_17.setText(txt)
                else:
                    pass

                txt = ' {0} '.format(format(WTI_고가, ','))
                self.label_18.setText(txt)

                self.plot1_ovc_jl_line.setValue(WTI_전저)
                self.plot1_ovc_jh_line.setValue(WTI_전고)
                self.plot1_ovc_close_line.setValue(WTI_전일종가)
                self.plot1_ovc_open_line.setValue(WTI_시가)
                self.plot1_ovc_pivot_line.setValue(WTI_피봇)
                self.plot1_ovc_low_line.setValue(WTI_저가)
                self.plot1_ovc_high_line.setValue(WTI_고가)                 

                self.plot1_wti_curve.setData(df_wti_graph['Price'].astype(float))

                if flag_checkBox_plot1_bband:

                    self.parent.Calc_Bollinger('WTI')
            
                    self.plot1_bollinger_1st_upper_curve.setData(df_wti_ta_graph['BBUpper_1st'].astype(float))
                    self.plot1_bollinger_1st_middle_curve.setData(df_wti_ta_graph['BBMiddle_1st'].astype(float))
                    self.plot1_bollinger_1st_lower_curve.setData(df_wti_ta_graph['BBLower_1st'].astype(float))
                    self.plot1_bollinger_2nd_upper_curve.setData(df_wti_ta_graph['BBUpper_2nd'].astype(float))
                    self.plot1_bollinger_2nd_middle_curve.setData(df_wti_ta_graph['BBMiddle_2nd'].astype(float))
                    self.plot1_bollinger_2nd_lower_curve.setData(df_wti_ta_graph['BBLower_2nd'].astype(float))

                    self.plot1_fibonacci_line1.setValue(wti_fibonacci_levels[1])
                    self.plot1_fibonacci_line2.setValue(wti_fibonacci_levels[2])
                    self.plot1_fibonacci_line3.setValue(wti_fibonacci_levels[3])
                    self.plot1_fibonacci_line4.setValue(wti_fibonacci_levels[4])
                    self.plot1_fibonacci_line5.setValue(wti_fibonacci_levels[5])

                    if df_wti_ta_graph.at[plot_time_index, 'BBMiddle_2nd'] >= df_wti_ta_graph.at[plot_time_index, 'Price']:
                        self.label_p1_2.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p1_2.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " BB U: {0:.2f}\n BB M: {1:.2f}\n BB L: {2:.2f} ".format\
                        (df_wti_ta_graph.at[plot_time_index, 'BBUpper_2nd'], df_wti_ta_graph.at[plot_time_index, 'BBMiddle_2nd'], df_wti_ta_graph.at[plot_time_index, 'BBLower_2nd'])
                    self.label_p1_2.setText(txt)
                else:
                    self.plot1_fibonacci_line1.setValue(WTI_전일종가)
                    self.plot1_fibonacci_line2.setValue(WTI_전일종가)
                    self.plot1_fibonacci_line3.setValue(WTI_전일종가)
                    self.plot1_fibonacci_line4.setValue(WTI_전일종가)
                    self.plot1_fibonacci_line5.setValue(WTI_전일종가)

                    self.label_p1_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p1_2.setText(" BB Upper\n BB Middle\n BB Lower ")

                if flag_checkBox_plot1_psar:

                    self.parent.Calc_PSAR_MAMA('WTI')

                    self.plot1_psar_curve.setData(df_wti_ta_graph['PSAR'][0:plot_time_index+1].astype(float))

                    #self.plot1_sslup_curve.setData(df_wti_ta_graph['SSLUp'][0:plot_time_index+1].astype(float))
                    #self.plot1_ssldown_curve.setData(df_wti_ta_graph['SSLDown'][0:plot_time_index+1].astype(float))

                    self.plot1_mama_curve.setData(df_wti_ta_graph['MAMA'].astype(float))
                    df = df_wti_ta_graph['FAMA'].apply(lambda x: WTI_저가 if x < WTI_저가 else x)
                    self.plot1_fama_curve.setData(df.astype(float))                        

                    if df_wti_ta_graph.at[plot_time_index, 'PSAR'] > df_wti_ta_graph.at[plot_time_index, 'Price'] and df_wti_ta_graph.at[plot_time_index, 'MAMA'] < df_wti_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p1_3.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_wti_ta_graph.at[plot_time_index, 'PSAR'] < df_wti_ta_graph.at[plot_time_index, 'Price'] and df_wti_ta_graph.at[plot_time_index, 'MAMA'] > df_wti_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p1_3.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold') 
                    else:
                        self.label_p1_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " PSAR: {0:.2f}\n MAMA: {1:.2f}\n FAMA: {2:.2f} ".format(df_wti_ta_graph.at[plot_time_index, 'PSAR'], df_wti_ta_graph.at[plot_time_index, 'MAMA'], df_wti_ta_graph.at[plot_time_index, 'FAMA'])
                    self.label_p1_3.setText(txt)
                else:
                    self.label_p1_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p1_3.setText(" PSAR\n MAMA ")
                
                if flag_checkBox_plot1_one_eye:

                    self.plot1_oe_conv_curve.setData(df_wti_ta_graph['OE_CONV'].astype(float))
                    self.plot1_oe_base_curve.setData(df_wti_ta_graph['OE_BASE'].astype(float))
                    self.plot1_span_a_curve.setData(df_wti_ta_graph['SPAN_A'].astype(float))
                    self.plot1_span_b_curve.setData(df_wti_ta_graph['SPAN_B'].astype(float))

                    if flag_one_eye_lagging_span:
                        self.plot1_lagging_span_curve.setData(df_wti_ta_graph['LAGGING_SPAN'].astype(float))

                    if df_wti_ta_graph.at[plot_time_index, 'OE_CONV'] < df_wti_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_wti_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] < df_wti_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p1_4.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_wti_ta_graph.at[plot_time_index, 'OE_CONV'] > df_wti_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_wti_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] > df_wti_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p1_4.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p1_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " 기준선: {0:.2f}\n 전환선: {1:.2f}\n SPAN A: {2:.2f} \n SPAN B: {3:.2f} ".format\
                        (df_wti_ta_graph.at[plot_time_index, 'OE_BASE'], df_wti_ta_graph.at[plot_time_index, 'OE_CONV'], \
                            df_wti_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'], df_wti_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B'])
                    self.label_p1_4.setText(txt)
                    
                else:
                    self.label_p1_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p1_4.setText(" ONE EYE ")
            
            elif comboindex1 == 18:
                
                self.plot1_time_line.setValue(plot_time_index)

                txt = ' {0} '.format(format(GOLD_저가, ','))
                self.label_16.setText(txt)

                tmp = self.label_17.text().split()[0]
                과거가 =  tmp.replace(',', '')     

                if GOLD_현재가 > float(과거가):

                    txt = " {0} ▲ ({1:.1f}, {2:.1f}%, {3}) ".format(format(GOLD_현재가, ','), GOLD_종가대비, GOLD_등락율, GOLD_진폭_틱)

                    if GOLD_종가대비 > 0:
                        self.label_17.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif GOLD_종가대비 < 0:
                        self.label_17.setStyleSheet('background-color: pink; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_17.setStyleSheet('background-color: pink; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_17.setText(txt)

                elif GOLD_현재가 < float(과거가):

                    txt = " {0} ▼ ({1:.1f}, {2:.1f}%, {3}) ".format(format(GOLD_현재가, ','), GOLD_종가대비, GOLD_등락율, GOLD_진폭_틱)

                    if GOLD_종가대비 > 0:
                        self.label_17.setStyleSheet('background-color: skyblue; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif GOLD_종가대비 < 0:
                        self.label_17.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_17.setStyleSheet('background-color: skyblue; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_17.setText(txt)
                else:
                    pass

                txt = ' {0} '.format(format(GOLD_고가, ','))
                self.label_18.setText(txt)

                self.plot1_ovc_jl_line.setValue(GOLD_전저)
                self.plot1_ovc_jh_line.setValue(GOLD_전고)
                self.plot1_ovc_close_line.setValue(GOLD_전일종가)
                self.plot1_ovc_open_line.setValue(GOLD_시가)
                self.plot1_ovc_pivot_line.setValue(GOLD_피봇)
                self.plot1_ovc_low_line.setValue(GOLD_저가)
                self.plot1_ovc_high_line.setValue(GOLD_고가)                 

                self.plot1_gold_curve.setData(df_gold_graph['Price'].astype(float))

                if flag_checkBox_plot1_bband:

                    self.parent.Calc_Bollinger('GOLD')
            
                    self.plot1_bollinger_1st_upper_curve.setData(df_gold_ta_graph['BBUpper_1st'].astype(float))
                    self.plot1_bollinger_1st_middle_curve.setData(df_gold_ta_graph['BBMiddle_1st'].astype(float))
                    self.plot1_bollinger_1st_lower_curve.setData(df_gold_ta_graph['BBLower_1st'].astype(float))
                    self.plot1_bollinger_2nd_upper_curve.setData(df_gold_ta_graph['BBUpper_2nd'].astype(float))
                    self.plot1_bollinger_2nd_middle_curve.setData(df_gold_ta_graph['BBMiddle_2nd'].astype(float))
                    self.plot1_bollinger_2nd_lower_curve.setData(df_gold_ta_graph['BBLower_2nd'].astype(float))

                    self.plot1_fibonacci_line1.setValue(gold_fibonacci_levels[1])
                    self.plot1_fibonacci_line2.setValue(gold_fibonacci_levels[2])
                    self.plot1_fibonacci_line3.setValue(gold_fibonacci_levels[3])
                    self.plot1_fibonacci_line4.setValue(gold_fibonacci_levels[4])
                    self.plot1_fibonacci_line5.setValue(gold_fibonacci_levels[5])

                    if df_gold_ta_graph.at[plot_time_index, 'BBMiddle_2nd'] >= df_gold_ta_graph.at[plot_time_index, 'Price']:
                        self.label_p1_2.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p1_2.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " BB U: {0:.1f}\n BB M: {1:.1f}\n BB L: {2:.1f} ".format\
                        (df_gold_ta_graph.at[plot_time_index, 'BBUpper_2nd'], df_gold_ta_graph.at[plot_time_index, 'BBMiddle_2nd'], df_gold_ta_graph.at[plot_time_index, 'BBLower_2nd'])
                    self.label_p1_2.setText(txt)
                else:
                    self.plot1_fibonacci_line1.setValue(GOLD_전일종가)
                    self.plot1_fibonacci_line2.setValue(GOLD_전일종가)
                    self.plot1_fibonacci_line3.setValue(GOLD_전일종가)
                    self.plot1_fibonacci_line4.setValue(GOLD_전일종가)
                    self.plot1_fibonacci_line5.setValue(GOLD_전일종가)

                    self.label_p1_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p1_2.setText(" BB Upper\n BB Middle\n BB Lower ")

                if flag_checkBox_plot1_psar:

                    self.parent.Calc_PSAR_MAMA('GOLD')

                    self.plot1_psar_curve.setData(df_gold_ta_graph['PSAR'][0:plot_time_index+1].astype(float))

                    #self.plot1_sslup_curve.setData(df_gold_ta_graph['SSLUp'][0:plot_time_index+1].astype(float))
                    #self.plot1_ssldown_curve.setData(df_gold_ta_graph['SSLDown'][0:plot_time_index+1].astype(float))

                    self.plot1_mama_curve.setData(df_gold_ta_graph['MAMA'].astype(float))
                    df = df_gold_ta_graph['FAMA'].apply(lambda x: GOLD_저가 if x < GOLD_저가 else x)
                    self.plot1_fama_curve.setData(df.astype(float))                        

                    if df_gold_ta_graph.at[plot_time_index, 'PSAR'] > df_gold_ta_graph.at[plot_time_index, 'Price'] and df_gold_ta_graph.at[plot_time_index, 'MAMA'] < df_gold_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p1_3.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_gold_ta_graph.at[plot_time_index, 'PSAR'] < df_gold_ta_graph.at[plot_time_index, 'Price'] and df_gold_ta_graph.at[plot_time_index, 'MAMA'] > df_gold_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p1_3.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold') 
                    else:
                        self.label_p1_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " PSAR: {0:.1f}\n MAMA: {1:.1f}\n FAMA: {2:.1f} ".format(df_gold_ta_graph.at[plot_time_index, 'PSAR'], df_gold_ta_graph.at[plot_time_index, 'MAMA'], df_gold_ta_graph.at[plot_time_index, 'FAMA'])
                    self.label_p1_3.setText(txt)
                else:
                    self.label_p1_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p1_3.setText(" PSAR\n MAMA ")
                
                if flag_checkBox_plot1_one_eye:

                    self.plot1_oe_conv_curve.setData(df_gold_ta_graph['OE_CONV'].astype(float))
                    self.plot1_oe_base_curve.setData(df_gold_ta_graph['OE_BASE'].astype(float))
                    self.plot1_span_a_curve.setData(df_gold_ta_graph['SPAN_A'].astype(float))
                    self.plot1_span_b_curve.setData(df_gold_ta_graph['SPAN_B'].astype(float))

                    if flag_one_eye_lagging_span:
                        self.plot1_lagging_span_curve.setData(df_gold_ta_graph['LAGGING_SPAN'].astype(float))

                    if df_gold_ta_graph.at[plot_time_index, 'OE_CONV'] < df_gold_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_gold_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] < df_gold_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p1_4.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_gold_ta_graph.at[plot_time_index, 'OE_CONV'] > df_gold_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_gold_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] > df_gold_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p1_4.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p1_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " 기준선: {0:.1f}\n 전환선: {1:.1f}\n SPAN A: {2:.1f} \n SPAN B: {3:.1f} ".format\
                        (df_gold_ta_graph.at[plot_time_index, 'OE_BASE'], df_gold_ta_graph.at[plot_time_index, 'OE_CONV'], \
                            df_gold_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'], df_gold_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B'])
                    self.label_p1_4.setText(txt)
                    
                else:
                    self.label_p1_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p1_4.setText(" ONE EYE ")

            elif comboindex1 == 19:
                
                self.plot1_time_line.setValue(plot_time_index)

                txt = ' {0:.5f} '.format(EURO_저가)
                self.label_16.setText(txt)

                과거가 =  self.label_17.text().split()[0]     

                if EURO_현재가 > float(과거가):

                    txt = " {0:.5f} ▲ ({1:.5f}, {2:0.1f}%, {3}) ".format(EURO_현재가, EURO_종가대비, EURO_등락율, EURO_진폭_틱)

                    if EURO_종가대비 > 0:
                        self.label_17.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif EURO_종가대비 < 0:
                        self.label_17.setStyleSheet('background-color: pink; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_17.setStyleSheet('background-color: pink; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_17.setText(txt)

                elif EURO_현재가 < float(과거가):

                    txt = " {0:.5f} ▼ ({1:.5f}, {2:0.1f}%, {3}) ".format(EURO_현재가, EURO_종가대비, EURO_등락율, EURO_진폭_틱)

                    if EURO_종가대비 > 0:
                        self.label_17.setStyleSheet('background-color: skyblue; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif EURO_종가대비 < 0:
                        self.label_17.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_17.setStyleSheet('background-color: skyblue; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_17.setText(txt)
                else:
                    pass

                txt = ' {0:.5f} '.format(EURO_고가)
                self.label_18.setText(txt)

                self.plot1_ovc_jl_line.setValue(EURO_전저)
                self.plot1_ovc_jh_line.setValue(EURO_전고)
                self.plot1_ovc_close_line.setValue(EURO_전일종가)
                self.plot1_ovc_open_line.setValue(EURO_시가)
                self.plot1_ovc_pivot_line.setValue(EURO_피봇)
                self.plot1_ovc_low_line.setValue(EURO_저가)
                self.plot1_ovc_high_line.setValue(EURO_고가)                 

                self.plot1_euro_curve.setData(df_euro_graph['Price'].astype(float))

                if flag_checkBox_plot1_bband:

                    self.parent.Calc_Bollinger('EURO')
            
                    self.plot1_bollinger_1st_upper_curve.setData(df_euro_ta_graph['BBUpper_1st'].astype(float))
                    self.plot1_bollinger_1st_middle_curve.setData(df_euro_ta_graph['BBMiddle_1st'].astype(float))
                    self.plot1_bollinger_1st_lower_curve.setData(df_euro_ta_graph['BBLower_1st'].astype(float))
                    self.plot1_bollinger_2nd_upper_curve.setData(df_euro_ta_graph['BBUpper_2nd'].astype(float))
                    self.plot1_bollinger_2nd_middle_curve.setData(df_euro_ta_graph['BBMiddle_2nd'].astype(float))
                    self.plot1_bollinger_2nd_lower_curve.setData(df_euro_ta_graph['BBLower_2nd'].astype(float))

                    self.plot1_fibonacci_line1.setValue(euro_fibonacci_levels[1])
                    self.plot1_fibonacci_line2.setValue(euro_fibonacci_levels[2])
                    self.plot1_fibonacci_line3.setValue(euro_fibonacci_levels[3])
                    self.plot1_fibonacci_line4.setValue(euro_fibonacci_levels[4])
                    self.plot1_fibonacci_line5.setValue(euro_fibonacci_levels[5])

                    if df_euro_ta_graph.at[plot_time_index, 'BBMiddle_2nd'] >= df_euro_ta_graph.at[plot_time_index, 'Price']:
                        self.label_p1_2.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p1_2.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " BB U: {0:.5f}\n BB M: {1:.5f}\n BB L: {2:.5f} ".format\
                        (df_euro_ta_graph.at[plot_time_index, 'BBUpper_2nd'], df_euro_ta_graph.at[plot_time_index, 'BBMiddle_2nd'], df_euro_ta_graph.at[plot_time_index, 'BBLower_2nd'])
                    self.label_p1_2.setText(txt)
                else:
                    self.plot1_fibonacci_line1.setValue(EURO_전일종가)
                    self.plot1_fibonacci_line2.setValue(EURO_전일종가)
                    self.plot1_fibonacci_line3.setValue(EURO_전일종가)
                    self.plot1_fibonacci_line4.setValue(EURO_전일종가)
                    self.plot1_fibonacci_line5.setValue(EURO_전일종가)

                    self.label_p1_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p1_2.setText(" BB Upper\n BB Middle\n BB Lower ")

                if flag_checkBox_plot1_psar:

                    self.parent.Calc_PSAR_MAMA('EURO')

                    self.plot1_psar_curve.setData(df_euro_ta_graph['PSAR'][0:plot_time_index+1].astype(float))

                    #self.plot1_sslup_curve.setData(df_euro_ta_graph['SSLUp'][0:plot_time_index+1].astype(float))
                    #self.plot1_ssldown_curve.setData(df_euro_ta_graph['SSLDown'][0:plot_time_index+1].astype(float))

                    self.plot1_mama_curve.setData(df_euro_ta_graph['MAMA'].astype(float))
                    df = df_euro_ta_graph['FAMA'].apply(lambda x: EURO_저가 if x < EURO_저가 else x)
                    self.plot1_fama_curve.setData(df.astype(float))                        

                    if df_euro_ta_graph.at[plot_time_index, 'PSAR'] > df_euro_ta_graph.at[plot_time_index, 'Price'] and df_euro_ta_graph.at[plot_time_index, 'MAMA'] < df_euro_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p1_3.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_euro_ta_graph.at[plot_time_index, 'PSAR'] < df_euro_ta_graph.at[plot_time_index, 'Price'] and df_euro_ta_graph.at[plot_time_index, 'MAMA'] > df_euro_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p1_3.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold') 
                    else:
                        self.label_p1_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " PSAR: {0:.5f}\n MAMA: {1:.5f}\n FAMA: {2:.5f} ".format(df_euro_ta_graph.at[plot_time_index, 'PSAR'], df_euro_ta_graph.at[plot_time_index, 'MAMA'], df_euro_ta_graph.at[plot_time_index, 'FAMA'])
                    self.label_p1_3.setText(txt)
                else:
                    self.label_p1_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p1_3.setText(" PSAR\n MAMA ")
                
                if flag_checkBox_plot1_one_eye:

                    self.plot1_oe_conv_curve.setData(df_euro_ta_graph['OE_CONV'].astype(float))
                    self.plot1_oe_base_curve.setData(df_euro_ta_graph['OE_BASE'].astype(float))
                    self.plot1_span_a_curve.setData(df_euro_ta_graph['SPAN_A'].astype(float))
                    self.plot1_span_b_curve.setData(df_euro_ta_graph['SPAN_B'].astype(float))

                    if flag_one_eye_lagging_span:
                        self.plot1_lagging_span_curve.setData(df_euro_ta_graph['LAGGING_SPAN'].astype(float))

                    if df_euro_ta_graph.at[plot_time_index, 'OE_CONV'] < df_euro_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_euro_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] < df_euro_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p1_4.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_euro_ta_graph.at[plot_time_index, 'OE_CONV'] > df_euro_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_euro_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] > df_euro_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p1_4.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p1_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " 기준선: {0:.5f}\n 전환선: {1:.5f}\n SPAN A: {2:.5f} \n SPAN B: {3:.5f} ".format\
                        (df_euro_ta_graph.at[plot_time_index, 'OE_BASE'], df_euro_ta_graph.at[plot_time_index, 'OE_CONV'], \
                            df_euro_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'], df_euro_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B'])
                    self.label_p1_4.setText(txt)
                    
                else:
                    self.label_p1_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p1_4.setText(" ONE EYE ")

            elif comboindex1 == 20:
                
                self.plot1_time_line.setValue(plot_time_index)

                txt = ' {0} '.format(format(YEN_저가, ','))
                self.label_16.setText(txt)

                tmp = self.label_17.text().split()[0]
                과거가 =  tmp.replace(',', '')     

                if YEN_현재가 > float(과거가):

                    txt = " {0} ▲ ({1:.1f}, {2:.1f}%, {3}) ".format(format(YEN_현재가, ','), YEN_종가대비, YEN_등락율, YEN_진폭_틱)

                    if YEN_종가대비 > 0:
                        self.label_17.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif YEN_종가대비 < 0:
                        self.label_17.setStyleSheet('background-color: pink; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_17.setStyleSheet('background-color: pink; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_17.setText(txt)

                elif YEN_현재가 < float(과거가):

                    txt = " {0} ▼ ({1:.1f}, {2:.1f}%, {3}) ".format(format(YEN_현재가, ','), YEN_종가대비, YEN_등락율, YEN_진폭_틱)

                    if YEN_종가대비 > 0:
                        self.label_17.setStyleSheet('background-color: skyblue; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif YEN_종가대비 < 0:
                        self.label_17.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_17.setStyleSheet('background-color: skyblue; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_17.setText(txt)
                else:
                    pass

                txt = ' {0} '.format(format(YEN_고가, ','))
                self.label_18.setText(txt)

                self.plot1_ovc_jl_line.setValue(YEN_전저)
                self.plot1_ovc_jh_line.setValue(YEN_전고)
                self.plot1_ovc_close_line.setValue(YEN_전일종가)
                self.plot1_ovc_open_line.setValue(YEN_시가)
                self.plot1_ovc_pivot_line.setValue(YEN_피봇)
                self.plot1_ovc_low_line.setValue(YEN_저가)
                self.plot1_ovc_high_line.setValue(YEN_고가)                 

                self.plot1_yen_curve.setData(df_yen_graph['Price'].astype(float))

                if flag_checkBox_plot1_bband:

                    self.parent.Calc_Bollinger('YEN')

                    self.plot1_bollinger_1st_upper_curve.setData(df_yen_ta_graph['BBUpper_1st'].astype(float))
                    self.plot1_bollinger_1st_middle_curve.setData(df_yen_ta_graph['BBMiddle_1st'].astype(float))
                    self.plot1_bollinger_1st_lower_curve.setData(df_yen_ta_graph['BBLower_1st'].astype(float))
                    self.plot1_bollinger_2nd_upper_curve.setData(df_yen_ta_graph['BBUpper_2nd'].astype(float))
                    self.plot1_bollinger_2nd_middle_curve.setData(df_yen_ta_graph['BBMiddle_2nd'].astype(float))
                    self.plot1_bollinger_2nd_lower_curve.setData(df_yen_ta_graph['BBLower_2nd'].astype(float))

                    self.plot1_fibonacci_line1.setValue(yen_fibonacci_levels[1])
                    self.plot1_fibonacci_line2.setValue(yen_fibonacci_levels[2])
                    self.plot1_fibonacci_line3.setValue(yen_fibonacci_levels[3])
                    self.plot1_fibonacci_line4.setValue(yen_fibonacci_levels[4])
                    self.plot1_fibonacci_line5.setValue(yen_fibonacci_levels[5])

                    if df_yen_ta_graph.at[plot_time_index, 'BBMiddle_2nd'] >= df_yen_ta_graph.at[plot_time_index, 'Price']:
                        self.label_p1_2.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p1_2.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " BB U: {0:.1f}\n BB M: {1:.1f}\n BB L: {2:.1f} ".format\
                        (df_yen_ta_graph.at[plot_time_index, 'BBUpper_2nd'], df_yen_ta_graph.at[plot_time_index, 'BBMiddle_2nd'], df_yen_ta_graph.at[plot_time_index, 'BBLower_2nd'])
                    self.label_p1_2.setText(txt)
                else:
                    self.plot1_fibonacci_line1.setValue(YEN_전일종가)
                    self.plot1_fibonacci_line2.setValue(YEN_전일종가)
                    self.plot1_fibonacci_line3.setValue(YEN_전일종가)
                    self.plot1_fibonacci_line4.setValue(YEN_전일종가)
                    self.plot1_fibonacci_line5.setValue(YEN_전일종가)

                    self.label_p1_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p1_2.setText(" BB Upper\n BB Middle\n BB Lower ")

                if flag_checkBox_plot1_psar:

                    self.parent.Calc_PSAR_MAMA('YEN')

                    self.plot1_psar_curve.setData(df_yen_ta_graph['PSAR'][0:plot_time_index+1].astype(float))

                    #self.plot1_sslup_curve.setData(df_yen_ta_graph['SSLUp'][0:plot_time_index+1].astype(float))
                    #self.plot1_ssldown_curve.setData(df_yen_ta_graph['SSLDown'][0:plot_time_index+1].astype(float))

                    self.plot1_mama_curve.setData(df_yen_ta_graph['MAMA'].astype(float))
                    df = df_yen_ta_graph['FAMA'].apply(lambda x: YEN_저가 if x < YEN_저가 else x)
                    self.plot1_fama_curve.setData(df.astype(float))                        

                    if df_yen_ta_graph.at[plot_time_index, 'PSAR'] > df_yen_ta_graph.at[plot_time_index, 'Price'] and df_yen_ta_graph.at[plot_time_index, 'MAMA'] < df_yen_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p1_3.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_yen_ta_graph.at[plot_time_index, 'PSAR'] < df_yen_ta_graph.at[plot_time_index, 'Price'] and df_yen_ta_graph.at[plot_time_index, 'MAMA'] > df_yen_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p1_3.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold') 
                    else:
                        self.label_p1_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " PSAR: {0:.1f}\n MAMA: {1:.1f}\n FAMA: {2:.1f} ".format(df_yen_ta_graph.at[plot_time_index, 'PSAR'], df_yen_ta_graph.at[plot_time_index, 'MAMA'], df_yen_ta_graph.at[plot_time_index, 'FAMA'])
                    self.label_p1_3.setText(txt)
                else:
                    self.label_p1_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p1_3.setText(" PSAR\n MAMA ")
                
                if flag_checkBox_plot1_one_eye:

                    self.plot1_oe_conv_curve.setData(df_yen_ta_graph['OE_CONV'].astype(float))
                    self.plot1_oe_base_curve.setData(df_yen_ta_graph['OE_BASE'].astype(float))
                    self.plot1_span_a_curve.setData(df_yen_ta_graph['SPAN_A'].astype(float))
                    self.plot1_span_b_curve.setData(df_yen_ta_graph['SPAN_B'].astype(float))

                    if flag_one_eye_lagging_span:
                        self.plot1_lagging_span_curve.setData(df_yen_ta_graph['LAGGING_SPAN'].astype(float))

                    if df_yen_ta_graph.at[plot_time_index, 'OE_CONV'] < df_yen_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_yen_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] < df_yen_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p1_4.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_yen_ta_graph.at[plot_time_index, 'OE_CONV'] > df_yen_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_yen_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] > df_yen_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p1_4.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p1_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " 기준선: {0:.1f}\n 전환선: {1:.1f}\n SPAN A: {2:.1f} \n SPAN B: {3:.1f} ".format\
                        (df_yen_ta_graph.at[plot_time_index, 'OE_BASE'], df_yen_ta_graph.at[plot_time_index, 'OE_CONV'], \
                            df_yen_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'], df_yen_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B'])
                    self.label_p1_4.setText(txt)
                    
                else:
                    self.label_p1_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p1_4.setText(" ONE EYE ")
            
            elif comboindex1 == 21:

                self.plot1_time_line.setValue(plot_time_index)

                txt = ' {0:.5f} '.format(ADI_저가)
                self.label_16.setText(txt)

                과거가 =  self.label_17.text().split()[0]    

                if ADI_현재가 > float(과거가):

                    txt = " {0:.5f} ▲ ({1:.5f}, {2:.1f}%, {3}) ".format(ADI_현재가, ADI_종가대비, ADI_등락율, ADI_진폭_틱)

                    if ADI_종가대비 > 0:
                        self.label_17.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif ADI_종가대비 < 0:
                        self.label_17.setStyleSheet('background-color: pink; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_17.setStyleSheet('background-color: pink; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_17.setText(txt)

                elif ADI_현재가 < float(과거가):

                    txt = " {0:.5f} ▼ ({1:.5f}, {2:.1f}%, {3}) ".format(ADI_현재가, ADI_종가대비, ADI_등락율, ADI_진폭_틱)

                    if ADI_종가대비 > 0:
                        self.label_17.setStyleSheet('background-color: skyblue; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif ADI_종가대비 < 0:
                        self.label_17.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_17.setStyleSheet('background-color: skyblue; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_17.setText(txt)
                else:
                    pass

                txt = ' {0:.5f} '.format(ADI_고가)
                self.label_18.setText(txt)

                if ADI_전저 > 0:
                    self.plot1_ovc_jl_line.setValue(ADI_전저)

                if ADI_전고 > 0:
                    self.plot1_ovc_jh_line.setValue(ADI_전고)

                self.plot1_ovc_close_line.setValue(ADI_전일종가)
                self.plot1_ovc_open_line.setValue(ADI_시가)

                if ADI_피봇 > 0:
                    self.plot1_ovc_pivot_line.setValue(ADI_피봇)

                self.plot1_ovc_low_line.setValue(ADI_저가)
                self.plot1_ovc_high_line.setValue(ADI_고가)                 

                self.plot1_adi_curve.setData(df_adi_graph['Price'].astype(float))

                if flag_checkBox_plot1_bband:

                    self.parent.Calc_Bollinger('ADI')

                    self.plot1_bollinger_1st_upper_curve.setData(df_adi_ta_graph['BBUpper_1st'].astype(float))
                    self.plot1_bollinger_1st_middle_curve.setData(df_adi_ta_graph['BBMiddle_1st'].astype(float))
                    self.plot1_bollinger_1st_lower_curve.setData(df_adi_ta_graph['BBLower_1st'].astype(float))
                    self.plot1_bollinger_2nd_upper_curve.setData(df_adi_ta_graph['BBUpper_2nd'].astype(float))
                    self.plot1_bollinger_2nd_middle_curve.setData(df_adi_ta_graph['BBMiddle_2nd'].astype(float))
                    self.plot1_bollinger_2nd_lower_curve.setData(df_adi_ta_graph['BBLower_2nd'].astype(float))

                    self.plot1_fibonacci_line1.setValue(adi_fibonacci_levels[1])
                    self.plot1_fibonacci_line2.setValue(adi_fibonacci_levels[2])
                    self.plot1_fibonacci_line3.setValue(adi_fibonacci_levels[3])
                    self.plot1_fibonacci_line4.setValue(adi_fibonacci_levels[4])
                    self.plot1_fibonacci_line5.setValue(adi_fibonacci_levels[5])

                    if df_adi_ta_graph.at[plot_time_index, 'BBMiddle_2nd'] >= df_adi_ta_graph.at[plot_time_index, 'Price']:
                        self.label_p1_2.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p1_2.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " BB U: {0:.5f}\n BB M: {1:.5f}\n BB L: {2:.5f} ".format\
                        (df_adi_ta_graph.at[plot_time_index, 'BBUpper_2nd'], df_adi_ta_graph.at[plot_time_index, 'BBMiddle_2nd'], df_adi_ta_graph.at[plot_time_index, 'BBLower_2nd'])
                    self.label_p1_2.setText(txt)
                else:
                    self.plot1_fibonacci_line1.setValue(ADI_전일종가)
                    self.plot1_fibonacci_line2.setValue(ADI_전일종가)
                    self.plot1_fibonacci_line3.setValue(ADI_전일종가)
                    self.plot1_fibonacci_line4.setValue(ADI_전일종가)
                    self.plot1_fibonacci_line5.setValue(ADI_전일종가)

                    self.label_p1_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p1_2.setText(" BB Upper\n BB Middle\n BB Lower ")

                if flag_checkBox_plot1_psar:

                    self.parent.Calc_PSAR_MAMA('ADI')

                    self.plot1_psar_curve.setData(df_adi_ta_graph['PSAR'][0:plot_time_index+1].astype(float))

                    #self.plot1_sslup_curve.setData(df_adi_ta_graph['SSLUp'][0:plot_time_index+1].astype(float))
                    #self.plot1_ssldown_curve.setData(df_adi_ta_graph['SSLDown'][0:plot_time_index+1].astype(float))

                    self.plot1_mama_curve.setData(df_adi_ta_graph['MAMA'].astype(float))
                    df = df_adi_ta_graph['FAMA'].apply(lambda x: ADI_저가 if x < ADI_저가 else x)
                    self.plot1_fama_curve.setData(df.astype(float))                        

                    if df_adi_ta_graph.at[plot_time_index, 'PSAR'] > df_adi_ta_graph.at[plot_time_index, 'Price'] and df_adi_ta_graph.at[plot_time_index, 'MAMA'] < df_adi_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p1_3.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_adi_ta_graph.at[plot_time_index, 'PSAR'] < df_adi_ta_graph.at[plot_time_index, 'Price'] and df_adi_ta_graph.at[plot_time_index, 'MAMA'] > df_adi_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p1_3.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold') 
                    else:
                        self.label_p1_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " PSAR: {0:.5f}\n MAMA: {1:.5f}\n FAMA: {2:.5f} ".format(df_adi_ta_graph.at[plot_time_index, 'PSAR'], df_adi_ta_graph.at[plot_time_index, 'MAMA'], df_adi_ta_graph.at[plot_time_index, 'FAMA'])
                    self.label_p1_3.setText(txt)
                else:
                    self.label_p1_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p1_3.setText(" PSAR\n MAMA ")
                
                if flag_checkBox_plot1_one_eye:

                    self.plot1_oe_conv_curve.setData(df_adi_ta_graph['OE_CONV'].astype(float))
                    self.plot1_oe_base_curve.setData(df_adi_ta_graph['OE_BASE'].astype(float))
                    self.plot1_span_a_curve.setData(df_adi_ta_graph['SPAN_A'].astype(float))
                    self.plot1_span_b_curve.setData(df_adi_ta_graph['SPAN_B'].astype(float))

                    if flag_one_eye_lagging_span:
                        self.plot1_lagging_span_curve.setData(df_adi_ta_graph['LAGGING_SPAN'].astype(float))

                    if df_adi_ta_graph.at[plot_time_index, 'OE_CONV'] < df_adi_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_adi_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] < df_adi_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p1_4.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_adi_ta_graph.at[plot_time_index, 'OE_CONV'] > df_adi_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_adi_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] > df_adi_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p1_4.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p1_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " 기준선: {0:.5f}\n 전환선: {1:.5f}\n SPAN A: {2:.5f} \n SPAN B: {3:.5f} ".format\
                        (df_adi_ta_graph.at[plot_time_index, 'OE_BASE'], df_adi_ta_graph.at[plot_time_index, 'OE_CONV'], \
                            df_adi_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'], df_adi_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B'])
                    self.label_p1_4.setText(txt)
                    
                else:
                    self.label_p1_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p1_4.setText(" ONE EYE ")

            elif comboindex1 == 23:

                self.plot1_time_line.setValue(plot_time_index)

                df_futures_cm_ta_graph['CCI1'] = talib.CCI(df_futures_cm_ta_graph['High'], df_futures_cm_ta_graph['Low'], df_futures_cm_ta_graph['Close'], timeperiod=CCI1_PERIOD)                
                df_futures_cm_ta_graph['CCI2'] = talib.CCI(df_futures_cm_ta_graph['High'], df_futures_cm_ta_graph['Low'], df_futures_cm_ta_graph['Close'], timeperiod=CCI2_PERIOD)
                df_futures_cm_ta_graph['RSI'] = (talib.RSI(df_futures_cm_ta_graph['Close'], timeperiod=RSI_PERIOD) - RSI_OFFSET) * RSI_SCALE_FACTOR

                txt = " CCI1: {0:.0f}, CCI2: {1:.0f}, RSI: {2:.0f} ".format(df_futures_cm_ta_graph.at[plot_time_index, 'CCI1'], df_futures_cm_ta_graph.at[plot_time_index, 'CCI2'], df_futures_cm_ta_graph.at[plot_time_index, 'RSI'])

                if df_futures_cm_ta_graph.at[plot_time_index, 'CCI2'] > 0:
                    self.label_17.setStyleSheet('background-color: yellow; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                elif df_futures_cm_ta_graph.at[plot_time_index, 'CCI2'] < 0:
                    self.label_17.setStyleSheet('background-color: yellow; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                else:
                    self.label_17.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                self.label_17.setText(txt)

                self.plot1_cci_plus_100_line.setValue(100)
                self.plot1_cci_minus_100_line.setValue(-100)
                                
                self.plot1_futures_cci1_curve.setData(df_futures_cm_ta_graph['CCI1'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot1_futures_cci2_curve.setData(df_futures_cm_ta_graph['CCI2'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot1_futures_rsi_curve.setData(df_futures_cm_ta_graph['RSI'].astype(float))

            elif comboindex1 == 24:

                self.plot1_time_line.setValue(plot_time_index)

                df_sp500_ta_graph['CCI1'] = talib.CCI(df_sp500_ta_graph['High'], df_sp500_ta_graph['Low'], df_sp500_ta_graph['Close'], timeperiod=CCI1_PERIOD)
                df_sp500_ta_graph['CCI2'] = talib.CCI(df_sp500_ta_graph['High'], df_sp500_ta_graph['Low'], df_sp500_ta_graph['Close'], timeperiod=CCI2_PERIOD)
                df_sp500_ta_graph['RSI'] = (talib.RSI(df_sp500_ta_graph['Close'], timeperiod=RSI_PERIOD) - RSI_OFFSET) * RSI_SCALE_FACTOR

                txt = " CCI1: {0:.0f}, CCI2: {1:.0f}, RSI: {2:.0f} ".format(df_sp500_ta_graph.at[plot_time_index, 'CCI1'], df_sp500_ta_graph.at[plot_time_index, 'CCI2'], df_sp500_ta_graph.at[plot_time_index, 'RSI'])

                if df_sp500_ta_graph.at[plot_time_index, 'CCI2'] > 0:
                    self.label_17.setStyleSheet('background-color: yellow; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                elif df_sp500_ta_graph.at[plot_time_index, 'CCI2'] < 0:
                    self.label_17.setStyleSheet('background-color: yellow; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                else:
                    self.label_17.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                self.label_17.setText(txt)

                self.plot1_cci_plus_100_line.setValue(100)
                self.plot1_cci_minus_100_line.setValue(-100)
                
                self.plot1_sp500_cci1_curve.setData(df_sp500_ta_graph['CCI1'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot1_sp500_cci2_curve.setData(df_sp500_ta_graph['CCI2'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot1_sp500_rsi_curve.setData(df_sp500_ta_graph['RSI'].astype(float))

            elif comboindex1 == 25:

                self.plot1_time_line.setValue(plot_time_index)

                df_dow_ta_graph['CCI1'] = talib.CCI(df_dow_ta_graph['High'], df_dow_ta_graph['Low'], df_dow_ta_graph['Close'], timeperiod=CCI1_PERIOD)
                df_dow_ta_graph['CCI2'] = talib.CCI(df_dow_ta_graph['High'], df_dow_ta_graph['Low'], df_dow_ta_graph['Close'], timeperiod=CCI2_PERIOD)
                df_dow_ta_graph['RSI'] = (talib.RSI(df_dow_ta_graph['Close'], timeperiod=RSI_PERIOD) - RSI_OFFSET) * RSI_SCALE_FACTOR

                txt = " CCI1: {0:.0f}, CCI2: {1:.0f}, RSI: {2:.0f} ".format(df_dow_ta_graph.at[plot_time_index, 'CCI1'], df_dow_ta_graph.at[plot_time_index, 'CCI2'], df_dow_ta_graph.at[plot_time_index, 'RSI'])

                if df_dow_ta_graph.at[plot_time_index, 'CCI2'] > 0:
                    self.label_17.setStyleSheet('background-color: yellow; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                elif df_dow_ta_graph.at[plot_time_index, 'CCI2'] < 0:
                    self.label_17.setStyleSheet('background-color: yellow; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                else:
                    self.label_17.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                self.label_17.setText(txt)

                self.plot1_cci_plus_100_line.setValue(100)
                self.plot1_cci_minus_100_line.setValue(-100)
                
                self.plot1_dow_cci1_curve.setData(df_dow_ta_graph['CCI1'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot1_dow_cci2_curve.setData(df_dow_ta_graph['CCI2'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot1_dow_rsi_curve.setData(df_dow_ta_graph['RSI'].astype(float))

            elif comboindex1 == 26:

                self.plot1_time_line.setValue(plot_time_index)

                df_nasdaq_ta_graph['CCI1'] = talib.CCI(df_nasdaq_ta_graph['High'], df_nasdaq_ta_graph['Low'], df_nasdaq_ta_graph['Close'], timeperiod=CCI1_PERIOD)
                df_nasdaq_ta_graph['CCI2'] = talib.CCI(df_nasdaq_ta_graph['High'], df_nasdaq_ta_graph['Low'], df_nasdaq_ta_graph['Close'], timeperiod=CCI2_PERIOD)
                df_nasdaq_ta_graph['RSI'] = (talib.RSI(df_nasdaq_ta_graph['Close'], timeperiod=RSI_PERIOD) - RSI_OFFSET) * RSI_SCALE_FACTOR

                txt = " CCI1: {0:.0f}, CCI2: {1:.0f}, RSI: {2:.0f} ".format(df_nasdaq_ta_graph.at[plot_time_index, 'CCI1'], df_nasdaq_ta_graph.at[plot_time_index, 'CCI2'], df_nasdaq_ta_graph.at[plot_time_index, 'RSI'])

                if df_nasdaq_ta_graph.at[plot_time_index, 'CCI2'] > 0:
                    self.label_17.setStyleSheet('background-color: yellow; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                elif df_nasdaq_ta_graph.at[plot_time_index, 'CCI2'] < 0:
                    self.label_17.setStyleSheet('background-color: yellow; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                else:
                    self.label_17.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                self.label_17.setText(txt)

                self.plot1_cci_plus_100_line.setValue(100)
                self.plot1_cci_minus_100_line.setValue(-100)
                
                self.plot1_nasdaq_cci1_curve.setData(df_nasdaq_ta_graph['CCI1'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot1_nasdaq_cci2_curve.setData(df_nasdaq_ta_graph['CCI2'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot1_nasdaq_rsi_curve.setData(df_nasdaq_ta_graph['RSI'].astype(float))

            elif comboindex1 == 27:

                self.plot1_time_line.setValue(plot_time_index)

                df_hsi_ta_graph['CCI1'] = talib.CCI(df_hsi_ta_graph['High'], df_hsi_ta_graph['Low'], df_hsi_ta_graph['Close'], timeperiod=CCI1_PERIOD)
                df_hsi_ta_graph['CCI2'] = talib.CCI(df_hsi_ta_graph['High'], df_hsi_ta_graph['Low'], df_hsi_ta_graph['Close'], timeperiod=CCI2_PERIOD)
                df_hsi_ta_graph['RSI'] = (talib.RSI(df_hsi_ta_graph['Close'], timeperiod=RSI_PERIOD) - RSI_OFFSET) * RSI_SCALE_FACTOR

                txt = " CCI1: {0:.0f}, CCI2: {1:.0f}, RSI: {2:.0f} ".format(df_hsi_ta_graph.at[plot_time_index, 'CCI1'], df_hsi_ta_graph.at[plot_time_index, 'CCI2'], df_hsi_ta_graph.at[plot_time_index, 'RSI'])

                if df_hsi_ta_graph.at[plot_time_index, 'CCI2'] > 0:
                    self.label_17.setStyleSheet('background-color: yellow; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                elif df_hsi_ta_graph.at[plot_time_index, 'CCI2'] < 0:
                    self.label_17.setStyleSheet('background-color: yellow; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                else:
                    self.label_17.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                self.label_17.setText(txt)

                self.plot1_cci_plus_100_line.setValue(100)
                self.plot1_cci_minus_100_line.setValue(-100)
                
                self.plot1_hsi_cci1_curve.setData(df_hsi_ta_graph['CCI1'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot1_hsi_cci2_curve.setData(df_hsi_ta_graph['CCI2'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot1_hsi_rsi_curve.setData(df_hsi_ta_graph['RSI'].astype(float))

            elif comboindex1 == 28:

                self.plot1_time_line.setValue(plot_time_index)

                df_wti_ta_graph['CCI1'] = talib.CCI(df_wti_ta_graph['High'], df_wti_ta_graph['Low'], df_wti_ta_graph['Close'], timeperiod=CCI1_PERIOD)
                df_wti_ta_graph['CCI2'] = talib.CCI(df_wti_ta_graph['High'], df_wti_ta_graph['Low'], df_wti_ta_graph['Close'], timeperiod=CCI2_PERIOD)
                df_wti_ta_graph['RSI'] = (talib.RSI(df_wti_ta_graph['Close'], timeperiod=RSI_PERIOD) - RSI_OFFSET) * RSI_SCALE_FACTOR

                txt = " CCI1: {0:.0f}, CCI2: {1:.0f}, RSI: {2:.0f} ".format(df_wti_ta_graph.at[plot_time_index, 'CCI1'], df_wti_ta_graph.at[plot_time_index, 'CCI2'], df_wti_ta_graph.at[plot_time_index, 'RSI'])

                if df_wti_ta_graph.at[plot_time_index, 'CCI2'] > 0:
                    self.label_17.setStyleSheet('background-color: yellow; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                elif df_wti_ta_graph.at[plot_time_index, 'CCI2'] < 0:
                    self.label_17.setStyleSheet('background-color: yellow; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                else:
                    self.label_17.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                self.label_17.setText(txt)

                self.plot1_cci_plus_100_line.setValue(100)
                self.plot1_cci_minus_100_line.setValue(-100)
                
                self.plot1_wti_cci1_curve.setData(df_wti_ta_graph['CCI1'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot1_wti_cci2_curve.setData(df_wti_ta_graph['CCI2'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot1_wti_rsi_curve.setData(df_wti_ta_graph['RSI'].astype(float))

            elif comboindex1 == 29:

                self.plot1_time_line.setValue(plot_time_index)

                df_gold_ta_graph['CCI1'] = talib.CCI(df_gold_ta_graph['High'], df_gold_ta_graph['Low'], df_gold_ta_graph['Close'], timeperiod=CCI1_PERIOD)
                df_gold_ta_graph['CCI2'] = talib.CCI(df_gold_ta_graph['High'], df_gold_ta_graph['Low'], df_gold_ta_graph['Close'], timeperiod=CCI2_PERIOD)
                df_gold_ta_graph['RSI'] = (talib.RSI(df_gold_ta_graph['Close'], timeperiod=RSI_PERIOD) - RSI_OFFSET) * RSI_SCALE_FACTOR

                txt = " CCI1: {0:.0f}, CCI2: {1:.0f}, RSI: {2:.0f} ".format(df_gold_ta_graph.at[plot_time_index, 'CCI1'], df_gold_ta_graph.at[plot_time_index, 'CCI2'], df_gold_ta_graph.at[plot_time_index, 'RSI'])

                if df_gold_ta_graph.at[plot_time_index, 'CCI2'] > 0:
                    self.label_17.setStyleSheet('background-color: yellow; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                elif df_gold_ta_graph.at[plot_time_index, 'CCI2'] < 0:
                    self.label_17.setStyleSheet('background-color: yellow; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                else:
                    self.label_17.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                self.label_17.setText(txt)

                self.plot1_cci_plus_100_line.setValue(100)
                self.plot1_cci_minus_100_line.setValue(-100)
                
                self.plot1_gold_cci1_curve.setData(df_gold_ta_graph['CCI1'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot1_gold_cci2_curve.setData(df_gold_ta_graph['CCI2'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot1_gold_rsi_curve.setData(df_gold_ta_graph['RSI'].astype(float))

            elif comboindex1 == 30:

                self.plot1_time_line.setValue(plot_time_index)

                df_euro_ta_graph['CCI1'] = talib.CCI(df_euro_ta_graph['High'], df_euro_ta_graph['Low'], df_euro_ta_graph['Close'], timeperiod=CCI1_PERIOD)
                df_euro_ta_graph['CCI2'] = talib.CCI(df_euro_ta_graph['High'], df_euro_ta_graph['Low'], df_euro_ta_graph['Close'], timeperiod=CCI2_PERIOD)
                df_euro_ta_graph['RSI'] = (talib.RSI(df_euro_ta_graph['Close'], timeperiod=RSI_PERIOD) - RSI_OFFSET) * RSI_SCALE_FACTOR

                txt = " CCI1: {0:.0f}, CCI2: {1:.0f}, RSI: {2:.0f} ".format(df_euro_ta_graph.at[plot_time_index, 'CCI1'], df_euro_ta_graph.at[plot_time_index, 'CCI2'], df_euro_ta_graph.at[plot_time_index, 'RSI'])

                if df_euro_ta_graph.at[plot_time_index, 'CCI2'] > 0:
                    self.label_17.setStyleSheet('background-color: yellow; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                elif df_euro_ta_graph.at[plot_time_index, 'CCI2'] < 0:
                    self.label_17.setStyleSheet('background-color: yellow; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                else:
                    self.label_17.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                self.label_17.setText(txt)

                self.plot1_cci_plus_100_line.setValue(100)
                self.plot1_cci_minus_100_line.setValue(-100)
                
                self.plot1_euro_cci1_curve.setData(df_euro_ta_graph['CCI1'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot1_euro_cci2_curve.setData(df_euro_ta_graph['CCI2'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot1_euro_rsi_curve.setData(df_euro_ta_graph['RSI'].astype(float))

            elif comboindex1 == 31:

                self.plot1_time_line.setValue(plot_time_index)

                df_yen_ta_graph['CCI1'] = talib.CCI(df_yen_ta_graph['High'], df_yen_ta_graph['Low'], df_yen_ta_graph['Close'], timeperiod=CCI1_PERIOD)
                df_yen_ta_graph['CCI2'] = talib.CCI(df_yen_ta_graph['High'], df_yen_ta_graph['Low'], df_yen_ta_graph['Close'], timeperiod=CCI2_PERIOD)
                df_yen_ta_graph['RSI'] = (talib.RSI(df_yen_ta_graph['Close'], timeperiod=RSI_PERIOD) - RSI_OFFSET) * RSI_SCALE_FACTOR

                txt = " CCI1: {0:.0f}, CCI2: {1:.0f}, RSI: {2:.0f} ".format(df_yen_ta_graph.at[plot_time_index, 'CCI1'], df_yen_ta_graph.at[plot_time_index, 'CCI2'], df_yen_ta_graph.at[plot_time_index, 'RSI'])

                if df_yen_ta_graph.at[plot_time_index, 'CCI2'] > 0:
                    self.label_17.setStyleSheet('background-color: yellow; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                elif df_yen_ta_graph.at[plot_time_index, 'CCI2'] < 0:
                    self.label_17.setStyleSheet('background-color: yellow; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                else:
                    self.label_17.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                self.label_17.setText(txt)
                
                self.plot1_cci_plus_100_line.setValue(100)
                self.plot1_cci_minus_100_line.setValue(-100)
                
                self.plot1_yen_cci1_curve.setData(df_yen_ta_graph['CCI1'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot1_yen_cci2_curve.setData(df_yen_ta_graph['CCI2'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot1_yen_rsi_curve.setData(df_yen_ta_graph['RSI'].astype(float))

            elif comboindex1 == 32:

                self.plot1_time_line.setValue(plot_time_index)

                df_adi_ta_graph['CCI1'] = talib.CCI(df_adi_ta_graph['High'], df_adi_ta_graph['Low'], df_adi_ta_graph['Close'], timeperiod=CCI1_PERIOD)
                df_adi_ta_graph['CCI2'] = talib.CCI(df_adi_ta_graph['High'], df_adi_ta_graph['Low'], df_adi_ta_graph['Close'], timeperiod=CCI2_PERIOD)
                df_adi_ta_graph['RSI'] = (talib.RSI(df_adi_ta_graph['Close'], timeperiod=RSI_PERIOD) - RSI_OFFSET) * RSI_SCALE_FACTOR

                txt = " CCI1: {0:.0f}, CCI2: {1:.0f}, RSI: {2:.0f} ".format(df_adi_ta_graph.at[plot_time_index, 'CCI1'], df_adi_ta_graph.at[plot_time_index, 'CCI2'], df_adi_ta_graph.at[plot_time_index, 'RSI'])

                if df_adi_ta_graph.at[plot_time_index, 'CCI2'] > 0:
                    self.label_17.setStyleSheet('background-color: yellow; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                elif df_adi_ta_graph.at[plot_time_index, 'CCI2'] < 0:
                    self.label_17.setStyleSheet('background-color: yellow; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                else:
                    self.label_17.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                self.label_17.setText(txt)
                
                self.plot1_cci_plus_100_line.setValue(100)
                self.plot1_cci_minus_100_line.setValue(-100)
                
                self.plot1_adi_cci1_curve.setData(df_adi_ta_graph['CCI1'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot1_adi_cci2_curve.setData(df_adi_ta_graph['CCI2'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot1_adi_rsi_curve.setData(df_adi_ta_graph['RSI'].astype(float))
            else:
                pass

        except Exception as e:

            txt = '[{0:02d}:{1:02d}:{2:02d}] Exception : update_plot1 에서 {3} \n상기 오류가 발생했습니다.\r'.format(dt.hour, dt.minute, dt.second, traceback.format_exc())
            self.parent.textBrowser.append(txt)

        finally:
            # 해외선물 한국시간 표시
            if CME_체결시간 == '000000':
                txt = ' [{0:02d}:{1:02d}:{2:02d}] {3:.2f} ms '.format(dt.hour, dt.minute, dt.second, plot1_processing_time)
            else:                
                if flag_call_low_in_fixed_coreval:
                    self.label_time_1.setStyleSheet('background-color: black; color: yellow; font-family: Consolas; font-size: 9pt; font: Bold')
                    txt = ' [{0:02d}:{1:02d}:{2:02d}] ♦ CL({3}) {4:.2f} ms '.format(dt.hour, dt.minute, dt.second, call_low_val_in_fixed_coreval, plot1_processing_time)
                else:
                    self.label_time_1.setStyleSheet('background-color: lawngreen; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    txt = ' [{0:02d}:{1:02d}:{2:02d}] {3:.2f} ms '.format(dt.hour, dt.minute, dt.second, plot1_processing_time)    

            self.label_time_1.setText(txt)

            flag_plot1_update_is_running = False      
        
    @logging_time_plot2
    #@pyqtSlot()    
    def update_plot2(self):

        global flag_plot2_update_is_running        
        global flag_calltable_checkstate_changed, flag_puttable_checkstate_changed        

        try:        
            dt = datetime.now()

            flag_plot2_update_is_running = True                        

            # Plot2 그래프 그리기
            # 선물가격
            if comboindex2 == 2:
                
                self.plot2_time_line.setValue(plot_time_index)

                txt = ' {0} '.format(근월물_선물_피봇)
                self.label_24.setText(txt)

                txt = ' {0}/{1} '.format(근월물_선물_시가, 차월물_선물_시가)
                self.label_25.setText(txt)

                txt = ' {0} '.format(근월물_선물_저가)
                self.label_26.setText(txt)       

                과거가 =  self.label_27.text().split()[0]

                if 근월물_선물_현재가 > float(과거가):

                    txt = " {0} ▲ ({1:.2f}, {2:0.1f}%, {3:.2f}), kp200 : {4:.2f} ".format(근월물_선물_현재가, 근월물_선물_종가대비, 근월물_선물_종가대비_등락율, 근월물_선물_진폭, kp200_현재가)


                    if 근월물_선물_종가대비 > 0:
                        self.label_27.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif 근월물_선물_종가대비 < 0:
                        self.label_27.setStyleSheet('background-color: pink; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_27.setStyleSheet('background-color: pink; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_27.setText(txt)

                elif 근월물_선물_현재가 < float(과거가):

                    txt = " {0} ▼ ({1:.2f}, {2:0.1f}%, {3:.2f}), kp200 : {4:.2f} ".format(근월물_선물_현재가, 근월물_선물_종가대비, 근월물_선물_종가대비_등락율, 근월물_선물_진폭, kp200_현재가)

                    if 근월물_선물_종가대비 > 0:
                        self.label_27.setStyleSheet('background-color: skyblue; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif 근월물_선물_종가대비 < 0:
                        self.label_27.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_27.setStyleSheet('background-color: skyblue; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_27.setText(txt)
                else:
                    pass

                txt = ' {0} '.format(근월물_선물_고가)
                self.label_28.setText(txt)                
                
                self.plot2_kp200_line[3].setValue(KP200_COREVAL[3])
                self.plot2_kp200_line[4].setValue(KP200_COREVAL[4])
                self.plot2_kp200_line[5].setValue(KP200_COREVAL[5])
                self.plot2_kp200_line[6].setValue(KP200_COREVAL[6])                
                
                if 근월물_선물_저가 < KP200_COREVAL[3] or kp200_저가 < KP200_COREVAL[3]:
                    self.plot2_kp200_line[2].setValue(KP200_COREVAL[2])
                else:
                    pass

                if 근월물_선물_저가 < KP200_COREVAL[2] or kp200_저가 < KP200_COREVAL[2]:
                    self.plot2_kp200_line[1].setValue(KP200_COREVAL[1])
                else:
                    pass
                
                if 근월물_선물_고가 > KP200_COREVAL[6] or kp200_고가 > KP200_COREVAL[6]:
                    self.plot2_kp200_line[7].setValue(KP200_COREVAL[7])
                else:
                    pass

                if 근월물_선물_고가 > KP200_COREVAL[7] or kp200_고가 > KP200_COREVAL[7]:
                    self.plot2_kp200_line[8].setValue(KP200_COREVAL[8])
                else:
                    pass                
                
                self.plot2_fut_jl_line.setValue(근월물_선물_전저)
                self.plot2_fut_jh_line.setValue(근월물_선물_전고)
                self.plot2_fut_close_line.setValue(근월물_선물_종가)                
                self.plot2_fut_open_line.setValue(근월물_선물_시가)
                self.plot2_fut_low_line.setValue(근월물_선물_저가)
                self.plot2_fut_pivot_line.setValue(근월물_선물_피봇)
                self.plot2_fut_high_line.setValue(근월물_선물_고가)                             

                if DayTime:
                    self.plot2_kp200_curve.setData(df_kp200_graph['Price'].astype(float))
                    self.plot2_fut_cm_price_curve.setData(df_futures_cm_graph['Price'].astype(float))
                    self.plot2_fut_nm_price_curve.setData(df_futures_nm_graph['Price'].astype(float))
                else:
                    pass

                if flag_checkBox_plot2_bband:

                    self.parent.Calc_Bollinger('FUT')
                
                    self.plot2_bollinger_1st_upper_curve.setData(df_futures_cm_ta_graph['BBUpper_1st'].astype(float))
                    self.plot2_bollinger_1st_middle_curve.setData(df_futures_cm_ta_graph['BBMiddle_1st'].astype(float))
                    self.plot2_bollinger_1st_lower_curve.setData(df_futures_cm_ta_graph['BBLower_1st'].astype(float))
                    self.plot2_bollinger_2nd_upper_curve.setData(df_futures_cm_ta_graph['BBUpper_2nd'].astype(float))
                    self.plot2_bollinger_2nd_middle_curve.setData(df_futures_cm_ta_graph['BBMiddle_2nd'].astype(float))
                    self.plot2_bollinger_2nd_lower_curve.setData(df_futures_cm_ta_graph['BBLower_2nd'].astype(float))

                    self.plot2_fibonacci_line1.setValue(futures_fibonacci_levels[1])
                    self.plot2_fibonacci_line2.setValue(futures_fibonacci_levels[2])
                    self.plot2_fibonacci_line3.setValue(futures_fibonacci_levels[3])
                    self.plot2_fibonacci_line4.setValue(futures_fibonacci_levels[4])
                    self.plot2_fibonacci_line5.setValue(futures_fibonacci_levels[5])

                    if df_futures_cm_ta_graph.at[plot_time_index, 'BBMiddle_2nd'] >= df_futures_cm_ta_graph.at[plot_time_index, 'Price']:
                        self.label_p2_2.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p2_2.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " BB U: {0:.2f}\n BB M: {1:.2f}\n BB L: {2:.2f} ".format\
                        (df_futures_cm_ta_graph.at[plot_time_index, 'BBUpper_2nd'], df_futures_cm_ta_graph.at[plot_time_index, 'BBMiddle_2nd'], df_futures_cm_ta_graph.at[plot_time_index, 'BBLower_2nd'])
                    self.label_p2_2.setText(txt)
                else:
                    self.plot2_fibonacci_line1.setValue(근월물_선물_종가)
                    self.plot2_fibonacci_line2.setValue(근월물_선물_종가)
                    self.plot2_fibonacci_line3.setValue(근월물_선물_종가)
                    self.plot2_fibonacci_line4.setValue(근월물_선물_종가)
                    self.plot2_fibonacci_line5.setValue(근월물_선물_종가)

                    self.label_p2_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p2_2.setText(" BB Upper\n BB Middle\n BB Lower ")

                if flag_checkBox_plot2_psar:

                    self.parent.Calc_PSAR_MAMA('FUT')

                    self.plot2_psar_curve.setData(df_futures_cm_ta_graph['PSAR'][0:plot_time_index+1].astype(float))

                    #self.plot2_sslup_curve.setData(df_futures_cm_ta_graph['SSLUp'][0:plot_time_index+1].astype(float))
                    #self.plot2_ssldown_curve.setData(df_futures_cm_ta_graph['SSLDown'][0:plot_time_index+1].astype(float))

                    self.plot2_mama_curve.setData(df_futures_cm_ta_graph['MAMA'].astype(float))
                    df = df_futures_cm_ta_graph['FAMA'].apply(lambda x: 근월물_선물_저가 if x < 근월물_선물_저가 else x)
                    self.plot2_fama_curve.setData(df.astype(float))

                    if df_futures_cm_ta_graph.at[plot_time_index, 'PSAR'] > df_futures_cm_ta_graph.at[plot_time_index, 'Price'] and df_futures_cm_ta_graph.at[plot_time_index, 'MAMA'] < df_futures_cm_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p2_3.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_futures_cm_ta_graph.at[plot_time_index, 'PSAR'] < df_futures_cm_ta_graph.at[plot_time_index, 'Price'] and df_futures_cm_ta_graph.at[plot_time_index, 'MAMA'] > df_futures_cm_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p2_3.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold') 
                    else:
                        self.label_p2_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " PSAR: {0:.2f}\n MAMA: {1:.2f}\n FAMA: {2:.2f} ".format(df_futures_cm_ta_graph.at[plot_time_index, 'PSAR'], df_futures_cm_ta_graph.at[plot_time_index, 'MAMA'], df_futures_cm_ta_graph.at[plot_time_index, 'FAMA'])
                    self.label_p2_3.setText(txt)
                else:
                    self.label_p2_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p2_3.setText(" PSAR\n MAMA ")
                
                if flag_checkBox_plot2_one_eye:

                    self.plot2_oe_conv_curve.setData(df_futures_cm_ta_graph['OE_CONV'].astype(float))
                    self.plot2_oe_base_curve.setData(df_futures_cm_ta_graph['OE_BASE'].astype(float))
                    self.plot2_span_a_curve.setData(df_futures_cm_ta_graph['SPAN_A'].astype(float))
                    self.plot2_span_b_curve.setData(df_futures_cm_ta_graph['SPAN_B'].astype(float))

                    if flag_one_eye_lagging_span:
                        self.plot2_lagging_span_curve.setData(df_futures_cm_ta_graph['LAGGING_SPAN'].astype(float))

                    if df_futures_cm_ta_graph.at[plot_time_index, 'OE_CONV'] < df_futures_cm_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_futures_cm_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] < df_futures_cm_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p2_4.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_futures_cm_ta_graph.at[plot_time_index, 'OE_CONV'] > df_futures_cm_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_futures_cm_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] > df_futures_cm_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p2_4.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p2_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " 기준선: {0:.2f}\n 전환선: {1:.2f}\n SPAN A: {2:.2f} \n SPAN B: {3:.2f} ".format\
                        (df_futures_cm_ta_graph.at[plot_time_index, 'OE_BASE'], df_futures_cm_ta_graph.at[plot_time_index, 'OE_CONV'], \
                            df_futures_cm_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'], df_futures_cm_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B'])
                    self.label_p2_4.setText(txt)
                    
                else:
                    self.label_p2_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p2_4.setText(" ONE EYE ")

            elif comboindex2 == 3:
                
                self.plot2_time_line.setValue(plot_time_index)

                txt = " {0:.2f}({1:.0f}/{2:.0f}) ".format(풋잔량비, put_quote['매수잔량'], put_quote['매도잔량'])
                self.label_26.setText(txt)

                txt = " CM: {0:.2f}({1:.0f}/{2:.0f}), NM: {3:.2f}({4:.0f}/{5:.0f}), [▼: {6:.2f}, ▲: {7:.2f}] ".format(\
                    선물_근월물_호가_잔량비, 근월물_매수호가_총수량, 근월물_매도호가_총수량, 선물_차월물_호가_잔량비, \
                    차월물_매수호가_총수량, 차월물_매도호가_총수량, 차월물_선물_호가잔량비_최소, 차월물_선물_호가잔량비_최대)

                if fut_quote_energy_direction == 'call':
                    self.label_27.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                elif fut_quote_energy_direction == 'put':
                    self.label_27.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                else:
                    self.label_27.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                self.label_27.setText(txt)
                
                txt = " {0:.2f}({1:.0f}/{2:.0f}) ".format(콜잔량비, call_quote['매수잔량'], call_quote['매도잔량'])
                self.label_28.setText(txt)

                self.plot2_call_quote_curve.setData(df_call_information_graph['quote_remainder_ratio'].astype(float))
                self.plot2_put_quote_curve.setData(df_put_information_graph['quote_remainder_ratio'].astype(float))

                if DayTime:
                    self.plot2_fut_cm_quote_remainder_ratio_curve.setData(df_futures_cm_graph['c_quote_remainder_ratio'].astype(float))
                    self.plot2_fut_nm_quote_remainder_ratio_curve.setData(df_futures_cm_graph['n_quote_remainder_ratio'].astype(float))
                    self.plot2_nm_futures_quote_remainder_ratio_bottom_line.setValue(차월물_선물_호가잔량비_최소)
                    self.plot2_nm_futures_quote_remainder_ratio_upper_line.setValue(차월물_선물_호가잔량비_최대)
                else:
                    pass

            elif comboindex2 == 4:

                self.plot2_time_line.setValue(plot_time_index)

                txt = " {0:.0f} ".format(put_volume_power)
                self.label_26.setText(txt)

                txt = " {0:.0f} ".format(fut_cm_volume_power)

                if fut_cm_volume_power > 0:
                    self.label_27.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                else:
                    self.label_27.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                self.label_27.setText(txt)
                
                txt = " {0:.0f} ".format(call_volume_power)
                self.label_28.setText(txt)

                if DayTime:
                    self.plot2_fut_volume_curve.setData(df_futures_cm_graph['Volume'].astype(float))
                else:
                    pass
                                
                self.plot2_call_volume_curve.setData(df_call_information_graph['Volume'].astype(float))
                self.plot2_put_volume_curve.setData(df_put_information_graph['Volume'].astype(float))

            # 옵션가격
            elif comboindex2 == 5:
                
                self.plot2_time_line.setValue(plot_time_index)

                if DayTime:

                    # 등가표시
                    txt = ' 등가: {0} '.format(atm_txt)
                    self.label_21.setText(txt)
                    
                    txt = ' 시작 중심가: {0:.2f} '.format(INIT_CENTER_VAL)
                    self.label_22.setText(txt)

                    txt = ' 하단: {0:.2f} '.format(옵션_중심가/GOLDEN_RATIO)                        

                    self.label_23.setText(txt)

                    txt = ' 상단: {0:.2f} '.format(옵션_중심가*GOLDEN_RATIO)
                    self.label_24.setText(txt)

                    txt = ' {0:.2f}({1:.2f}, {2:.2f}%) '.format(put_atm_value, df_put.at[ATM_INDEX, '대비'], (put_atm_value / df_put.at[ATM_INDEX, '시가'] - 1) * 100)
                    self.label_26.setText(txt)

                    txt = ' 중심가: {0:.2f} '.format(옵션_중심가)
                    self.label_27.setText(txt)

                    txt = ' {0:.2f}({1:.2f}, {2:.2f}%) '.format(call_atm_value, df_call.at[ATM_INDEX, '대비'], (call_atm_value / df_call.at[ATM_INDEX, '시가'] - 1) * 100)
                    self.label_28.setText(txt)
                else:
                    pass

                if flag_calltable_checkstate_changed:
                    flag_calltable_checkstate_changed = False
                    for i in range(option_pairs_count):
                        self.plot2_call_curve[i].clear()
                else:
                    pass

                if flag_puttable_checkstate_changed:
                    flag_puttable_checkstate_changed = False
                    for i in range(option_pairs_count):
                        self.plot2_put_curve[i].clear()
                else:
                    pass
                                
                # 선택된 콜그래프 그리기
                if selected_call:
                    for i in range(len(selected_call)):
                        self.plot2_call_curve[i].setData(df_call_graph[selected_call[i]]['Price'].astype(float))
                else:
                    pass                 

                # 선택된 풋그래프 그리기
                if selected_put:
                    for i in range(len(selected_put)):
                        self.plot2_put_curve[i].setData(df_put_graph[selected_put[i]]['Price'].astype(float))
                else:
                    pass

                if DayTime:
                    self.plot2_center_val_lower_line.setValue(옵션_중심가/GOLDEN_RATIO)
                    self.plot2_center_val_line.setValue(옵션_중심가)
                    self.plot2_center_val_upper_line.setValue(옵션_중심가*GOLDEN_RATIO)

                    self.plot2_center_val_curve.setData(df_call_information_graph['centerval'].astype(float))
                else:
                    pass

            elif comboindex2 == 6:
                
                self.plot2_time_line.setValue(plot_time_index)

                txt = " {0:.2f}({1:.0f}/{2:.0f}), [▼, ▲: {4:.2f}] ".format(풋잔량비, put_quote['매수잔량'], put_quote['매도잔량'], 풋_잔량비_최소, 풋_잔량비_최대)
                self.label_26.setText(txt)
                
                txt = " {0:.2f}({1:.0f}/{2:.0f}), [▼, ▲: {4:.2f}] ".format(콜잔량비, call_quote['매수잔량'], call_quote['매도잔량'], 콜_잔량비_최소, 콜_잔량비_최대)
                self.label_28.setText(txt)
                
                self.plot2_call_quote_curve.setData(df_call_information_graph['quote_remainder_ratio'].astype(float))
                self.plot2_put_quote_curve.setData(df_put_information_graph['quote_remainder_ratio'].astype(float))

                self.plot2_option_quote_remainder_ratio_bottom_line.setValue(옵션_잔량비_최소)
                self.plot2_option_quote_remainder_ratio_upper_line.setValue(옵션_잔량비_최대)        

            elif comboindex2 == 7:
                
                self.plot2_time_line.setValue(plot_time_index)

                txt = " {0:.2f}({1:.2f}) ".format(풋_수정미결퍼센트, put_oi_init_percent)
                self.label_26.setText(txt)
                
                txt = " {0:.2f}({1:.2f}) ".format(콜_수정미결퍼센트, call_oi_init_percent)
                self.label_28.setText(txt)

                self.plot2_call_oi_curve.setData(df_call_information_graph['open_interest'].astype(float))
                self.plot2_put_oi_curve.setData(df_put_information_graph['open_interest'].astype(float))
            
            elif comboindex2 == 8:
                
                self.plot2_time_line.setValue(plot_time_index)

                txt = " {0:.2f}({1}) {2:.2f} ".format(SP500_시가대비_등락율, SP500_현재가, SP500_FUT_시가_등락율비)
                self.label_25.setText(txt)

                txt = " {0:.2f}({1}) ".format(put_otm_cdb_percent_mean, put_atm_value)
                self.label_26.setText(txt)

                txt = " {0:.2f}({1}) ".format(call_otm_cdb_percent_mean, call_atm_value)
                self.label_28.setText(txt)
                
                self.plot2_call_drate_curve.setData(df_call_information_graph['Drate'].astype(float))
                self.plot2_put_drate_curve.setData(df_put_information_graph['Drate'].astype(float))

                self.plot2_cme_drate_curve.setData(SP500_FUT_시가_등락율비 * df_sp500_graph['Drate'].astype(float) + DRATE_OFFSET)
                
                if DayTime:

                    txt = " {0:.2f}({1}), Gap : {2:.2f} ".format(근월물_선물_시가대비_등락율, 근월물_선물_현재가, drate_gap)

                    if drate_gap > 0:
                        self.label_27.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif drate_gap < 0:
                        self.label_27.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_27.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_27.setText(txt)

                    if not np.isnan(df_futures_cm_graph.at[plot_time_index, 'Drate']):
                        self.plot2_fut_cm_drate_curve.setData(plot_drate_scale_factor * df_futures_cm_graph['Drate'].astype(float))

                    if not np.isnan(df_futures_nm_graph.at[plot_time_index, 'Drate']):
                        self.plot2_fut_nm_drate_curve.setData(plot_drate_scale_factor * df_futures_nm_graph['Drate'].astype(float))                        
                else:
                    pass
            
            elif comboindex2 == 10:
                
                self.plot2_time_line.setValue(plot_time_index)

                if DayTime:
                    txt = " 기관현물: {0} ".format(기관현물_순매수)
                    self.label_21.setText(txt)

                    txt = " 기관선물: {0} ".format(기관선물_순매수)
                    self.label_22.setText(txt)

                    txt = " 개인현물: {0} ".format(개인현물_순매수)
                    self.label_23.setText(txt)

                    txt = " 개인선물: {0} ".format(개인선물_순매수)
                    self.label_24.setText(txt)

                    if 프로그램_순매수 > 0 and 현물_총순매수 > 0:

                        if 외인선물_순매수 < 0 and 외인현물_순매수 < 0:
                            txt = ' - '
                            self.label_25.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                            self.label_25.setText(txt)

                        if (외인선물_순매수 < 0 and 외인현물_순매수 > 0) or (외인선물_순매수 > 0 and 외인현물_순매수 < 0):
                            txt = ' 외인수급 Cross '
                            self.label_25.setStyleSheet('background-color: black; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                            self.label_25.setText(txt)

                        if 외인선물_순매수 > 0 and 외인현물_순매수 > 0:
                            txt = ' 수급 Call! '
                            self.label_25.setStyleSheet('background-color: magenta; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                            self.label_25.setText(txt)

                    elif 프로그램_순매수 < 0 and 현물_총순매수 < 0:

                        if 외인선물_순매수 > 0 and 외인현물_순매수 > 0:
                            txt = ' - '
                            self.label_25.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                            self.label_25.setText(txt)

                        if (외인선물_순매수 > 0 and 외인현물_순매수 < 0) or (외인선물_순매수 < 0 and 외인현물_순매수 > 0):
                            txt = ' 외인수급 Cross '
                            self.label_25.setStyleSheet('background-color: black; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                            self.label_25.setText(txt)          

                        if 외인선물_순매수 < 0 and 외인현물_순매수 < 0:
                            txt = ' 수급 Put! '
                            self.label_25.setStyleSheet('background-color: cyan; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                            self.label_25.setText(txt)
                    else:
                        txt = ' 수급종합 Cross '
                        self.label_25.setStyleSheet('background-color: black; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                        self.label_25.setText(txt)

                    if not np.isnan(프로그램_순매수):
                        txt = " Prog/F.S: {0:.0f}/{1:.0f} ".format(프로그램_순매수, 외인현물_순매수)

                        if 프로그램_순매수 <= 0:
                            self.label_26.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                        else:
                            self.label_26.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                        self.label_26.setText(txt)
                    else:
                        pass

                    txt = " {0:.0f} ".format(fut_cm_volume_power)

                    if fut_cm_volume_power > 0:
                        self.label_27.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_27.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_27.setText(txt)
                    
                    if not np.isnan(현물_총순매수):
                        txt = " S.S/F.F: {0:.0f}/{1:.0f} ".format(현물_총순매수, 외인선물_순매수)

                        if 현물_총순매수 <= 0:
                            self.label_28.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                        else:
                            self.label_28.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                        self.label_28.setText(txt)
                    else:
                        pass

                    self.plot2_fut_volume_curve.setData(df_futures_cm_graph['Volume'].astype(float))
                    self.plot2_program_curve.setData(df_demand_supply_graph['Program'].astype(float))

                    df = df_demand_supply_graph['kospi_total'].apply(lambda x: np.nan if x == 0 else x)
                    df.at[0] = 0

                    self.plot2_kospi_total_curve.setData(df.astype(float))

                    self.plot2_kospi_foreigner_curve.setData(df_demand_supply_graph['kospi_foreigner'].astype(float))
                    self.plot2_futures_foreigner_curve.setData(df_demand_supply_graph['futures_foreigner'].astype(float))
                else:
                    pass

            elif comboindex2 == 11:
                
                pass
                '''
                self.plot2_time_line.setValue(plot_time_index)

                if DayTime:
                    txt = " 기관현물 : {0} ".format(기관현물_순매수)
                    self.label_21.setText(txt)

                    txt = " 기관선물 : {0} ".format(기관선물_순매수)
                    self.label_22.setText(txt)

                    txt = " 개인현물 : {0} ".format(개인현물_순매수)
                    self.label_23.setText(txt)

                    txt = " 개인선물 : {0} ".format(개인선물_순매수)
                    self.label_24.setText(txt)

                    if 프로그램_순매수 > 0 and 현물_총순매수 > 0:

                        if 외인선물_순매수 < 0 and 외인현물_순매수 < 0:
                            txt = ' - '
                            self.label_25.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                            self.label_25.setText(txt)

                        if (외인선물_순매수 < 0 and 외인현물_순매수 > 0) or (외인선물_순매수 > 0 and 외인현물_순매수 < 0):
                            txt = ' 외인수급 Cross '
                            self.label_25.setStyleSheet('background-color: black; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                            self.label_25.setText(txt)

                        if 외인선물_순매수 > 0 and 외인현물_순매수 > 0:
                            txt = ' 수급 Call! '
                            self.label_25.setStyleSheet('background-color: magenta; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                            self.label_25.setText(txt)

                    elif 프로그램_순매수 < 0 and 현물_총순매수 < 0:

                        if 외인선물_순매수 > 0 and 외인현물_순매수 > 0:
                            txt = ' - '
                            self.label_25.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                            self.label_25.setText(txt)

                        if (외인선물_순매수 > 0 and 외인현물_순매수 < 0) or (외인선물_순매수 < 0 and 외인현물_순매수 > 0):
                            txt = ' 외인수급 Cross '
                            self.label_25.setStyleSheet('background-color: black; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                            self.label_25.setText(txt)          

                        if 외인선물_순매수 < 0 and 외인현물_순매수 < 0:
                            txt = ' 수급 Put! '
                            self.label_25.setStyleSheet('background-color: cyan; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                            self.label_25.setText(txt)
                    else:
                        txt = ' 수급종합 Cross '
                        self.label_25.setStyleSheet('background-color: black; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                        self.label_25.setText(txt)

                    if not np.isnan(외인현물_순매수):
                        txt = " 외인현물 : {0:.0f} ".format(외인현물_순매수)

                        if 외인현물_순매수 <= 0:
                            self.label_26.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                        else:
                            self.label_26.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                        self.label_26.setText(txt)
                    else:
                        pass

                    txt = " {0:.0f} ".format(fut_cm_volume_power)

                    if fut_cm_volume_power > 0:
                        self.label_27.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_27.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_27.setText(txt)
                    
                    if not np.isnan(외인선물_순매수):
                        txt = " 외인선물 : {0:.0f} ".format(외인선물_순매수)

                        if 외인선물_순매수 <= 0:
                            self.label_28.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                        else:
                            self.label_28.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                        self.label_28.setText(txt)
                    else:
                        pass

                    self.plot2_fut_volume_curve.setData(df_futures_cm_graph['Volume'].astype(float))
                    self.plot2_kospi_foreigner_curve.setData(df_demand_supply_graph['kospi_foreigner'].astype(float))
                    self.plot2_futures_foreigner_curve.setData(df_demand_supply_graph['futures_foreigner'].astype(float))                    
                else:
                    pass
                '''

            elif comboindex2 == 13:
                
                self.plot2_time_line.setValue(plot_time_index)

                txt = ' {0} '.format(format(SP500_저가, ','))
                self.label_26.setText(txt)

                tmp = self.label_27.text().split()[0]
                과거가 =  tmp.replace(',', '')                

                if SP500_현재가 > float(과거가):

                    txt = " {0} ▲ ({1}, {2:0.1f}%, {3}) ".format(format(SP500_현재가, ','), SP500_종가대비, SP500_등락율, SP500_진폭_틱)

                    if SP500_종가대비 > 0:
                        self.label_27.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif SP500_종가대비 < 0:
                        self.label_27.setStyleSheet('background-color: pink; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_27.setStyleSheet('background-color: pink; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_27.setText(txt)

                elif SP500_현재가 < float(과거가):

                    txt = " {0} ▼ ({1}, {2:0.1f}%, {3}) ".format(format(SP500_현재가, ','), SP500_종가대비, SP500_등락율, SP500_진폭_틱)

                    if SP500_종가대비 > 0:
                        self.label_27.setStyleSheet('background-color: skyblue; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif SP500_종가대비 < 0:
                        self.label_27.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_27.setStyleSheet('background-color: skyblue; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_27.setText(txt)
                else:
                    pass

                txt = ' {0} '.format(format(SP500_고가, ','))
                self.label_28.setText(txt)

                self.plot2_ovc_jl_line.setValue(SP500_전저)
                self.plot2_ovc_jh_line.setValue(SP500_전고)
                self.plot2_ovc_close_line.setValue(SP500_전일종가)
                self.plot2_ovc_open_line.setValue(SP500_시가)
                self.plot2_ovc_pivot_line.setValue(SP500_피봇)
                self.plot2_ovc_low_line.setValue(SP500_저가)
                self.plot2_ovc_high_line.setValue(SP500_고가)                             

                self.plot2_sp500_curve.setData(df_sp500_graph['Price'].astype(float))

                if flag_checkBox_plot2_bband:

                    self.parent.Calc_Bollinger('SP500')

                    self.plot2_bollinger_1st_upper_curve.setData(df_sp500_ta_graph['BBUpper_1st'].astype(float))
                    self.plot2_bollinger_1st_middle_curve.setData(df_sp500_ta_graph['BBMiddle_1st'].astype(float))
                    self.plot2_bollinger_1st_lower_curve.setData(df_sp500_ta_graph['BBLower_1st'].astype(float))
                    self.plot2_bollinger_2nd_upper_curve.setData(df_sp500_ta_graph['BBUpper_2nd'].astype(float))
                    self.plot2_bollinger_2nd_middle_curve.setData(df_sp500_ta_graph['BBMiddle_2nd'].astype(float))
                    self.plot2_bollinger_2nd_lower_curve.setData(df_sp500_ta_graph['BBLower_2nd'].astype(float))

                    self.plot2_fibonacci_line1.setValue(sp500_fibonacci_levels[1])
                    self.plot2_fibonacci_line2.setValue(sp500_fibonacci_levels[2])
                    self.plot2_fibonacci_line3.setValue(sp500_fibonacci_levels[3])
                    self.plot2_fibonacci_line4.setValue(sp500_fibonacci_levels[4])
                    self.plot2_fibonacci_line5.setValue(sp500_fibonacci_levels[5])

                    if df_sp500_ta_graph.at[plot_time_index, 'BBMiddle_2nd'] >= df_sp500_ta_graph.at[plot_time_index, 'Price']:
                        self.label_p2_2.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p2_2.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " BB U: {0:.2f}\n BB M: {1:.2f}\n BB L: {2:.2f} ".format\
                        (df_sp500_ta_graph.at[plot_time_index, 'BBUpper_2nd'], df_sp500_ta_graph.at[plot_time_index, 'BBMiddle_2nd'], df_sp500_ta_graph.at[plot_time_index, 'BBLower_2nd'])
                    self.label_p2_2.setText(txt)
                else:
                    self.plot2_fibonacci_line1.setValue(SP500_전일종가)
                    self.plot2_fibonacci_line2.setValue(SP500_전일종가)
                    self.plot2_fibonacci_line3.setValue(SP500_전일종가)
                    self.plot2_fibonacci_line4.setValue(SP500_전일종가)
                    self.plot2_fibonacci_line5.setValue(SP500_전일종가)

                    self.label_p2_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p2_2.setText(" BB Upper\n BB Middle\n BB Lower ")

                if flag_checkBox_plot2_psar:

                    self.parent.Calc_PSAR_MAMA('SP500')

                    self.plot2_psar_curve.setData(df_sp500_ta_graph['PSAR'][0:plot_time_index+1].astype(float))

                    #self.plot2_sslup_curve.setData(df_sp500_ta_graph['SSLUp'][0:plot_time_index+1].astype(float))
                    #self.plot2_ssldown_curve.setData(df_sp500_ta_graph['SSLDown'][0:plot_time_index+1].astype(float))

                    self.plot2_mama_curve.setData(df_sp500_ta_graph['MAMA'].astype(float))
                    df = df_sp500_ta_graph['FAMA'].apply(lambda x: SP500_저가 if x < SP500_저가 else x)
                    self.plot2_fama_curve.setData(df.astype(float))

                    if df_sp500_ta_graph.at[plot_time_index, 'PSAR'] > df_sp500_ta_graph.at[plot_time_index, 'Price'] and df_sp500_ta_graph.at[plot_time_index, 'MAMA'] < df_sp500_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p2_3.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_sp500_ta_graph.at[plot_time_index, 'PSAR'] < df_sp500_ta_graph.at[plot_time_index, 'Price'] and df_sp500_ta_graph.at[plot_time_index, 'MAMA'] > df_sp500_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p2_3.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold') 
                    else:
                        self.label_p2_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " PSAR: {0:.2f}\n MAMA: {1:.2f}\n FAMA: {2:.2f} ".format(df_sp500_ta_graph.at[plot_time_index, 'PSAR'], df_sp500_ta_graph.at[plot_time_index, 'MAMA'], df_sp500_ta_graph.at[plot_time_index, 'FAMA'])
                    self.label_p2_3.setText(txt)
                else:
                    self.label_p2_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p2_3.setText(" PSAR\n MAMA ")
                
                if flag_checkBox_plot2_one_eye:

                    self.plot2_oe_conv_curve.setData(df_sp500_ta_graph['OE_CONV'].astype(float))
                    self.plot2_oe_base_curve.setData(df_sp500_ta_graph['OE_BASE'].astype(float))
                    self.plot2_span_a_curve.setData(df_sp500_ta_graph['SPAN_A'].astype(float))
                    self.plot2_span_b_curve.setData(df_sp500_ta_graph['SPAN_B'].astype(float))

                    if flag_one_eye_lagging_span:
                        self.plot2_lagging_span_curve.setData(df_sp500_ta_graph['LAGGING_SPAN'].astype(float))

                    if df_sp500_ta_graph.at[plot_time_index, 'OE_CONV'] < df_sp500_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_sp500_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] < df_sp500_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p2_4.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_sp500_ta_graph.at[plot_time_index, 'OE_CONV'] > df_sp500_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_sp500_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] > df_sp500_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p2_4.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p2_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " 기준선: {0:.2f}\n 전환선: {1:.2f}\n SPAN A: {2:.2f} \n SPAN B: {3:.2f} ".format\
                        (df_sp500_ta_graph.at[plot_time_index, 'OE_BASE'], df_sp500_ta_graph.at[plot_time_index, 'OE_CONV'], \
                            df_sp500_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'], df_sp500_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B'])
                    self.label_p2_4.setText(txt)
                    
                else:
                    self.label_p2_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p2_4.setText(" ONE EYE ")
            
            elif comboindex2 == 14:
                
                self.plot2_time_line.setValue(plot_time_index)

                txt = ' {0} '.format(format(DOW_저가, ','))
                self.label_26.setText(txt)

                tmp = self.label_27.text().split()[0]
                과거가 =  tmp.replace(',', '')               

                if DOW_현재가 > float(과거가):

                    txt = " {0} ▲ ({1}, {2:0.1f}%, {3}) ".format(format(DOW_현재가, ','), format(DOW_종가대비, ','), DOW_등락율, DOW_진폭_틱)

                    if DOW_종가대비 > 0:
                        self.label_27.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif DOW_종가대비 < 0:
                        self.label_27.setStyleSheet('background-color: pink; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_27.setStyleSheet('background-color: pink; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_27.setText(txt)

                elif DOW_현재가 < float(과거가):

                    txt = " {0} ▼ ({1}, {2:0.1f}%, {3}) ".format(format(DOW_현재가, ','), format(DOW_종가대비, ','), DOW_등락율, DOW_진폭_틱)

                    if DOW_종가대비 > 0:
                        self.label_27.setStyleSheet('background-color: skyblue; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif DOW_종가대비 < 0:
                        self.label_27.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_27.setStyleSheet('background-color: skyblue; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_27.setText(txt)
                else:
                    pass

                txt = ' {0} '.format(format(DOW_고가, ','))
                self.label_28.setText(txt)

                self.plot2_ovc_jl_line.setValue(DOW_전저)
                self.plot2_ovc_jh_line.setValue(DOW_전고)
                self.plot2_ovc_close_line.setValue(DOW_전일종가)
                self.plot2_ovc_open_line.setValue(DOW_시가)
                self.plot2_ovc_pivot_line.setValue(DOW_피봇)
                self.plot2_ovc_low_line.setValue(DOW_저가)
                self.plot2_ovc_high_line.setValue(DOW_고가)                                 

                self.plot2_dow_curve.setData(df_dow_graph['Price'].astype(float))

                if flag_checkBox_plot2_bband:

                    self.parent.Calc_Bollinger('DOW')
            
                    self.plot2_bollinger_1st_upper_curve.setData(df_dow_ta_graph['BBUpper_1st'].astype(float))
                    self.plot2_bollinger_1st_middle_curve.setData(df_dow_ta_graph['BBMiddle_1st'].astype(float))
                    self.plot2_bollinger_1st_lower_curve.setData(df_dow_ta_graph['BBLower_1st'].astype(float))
                    self.plot2_bollinger_2nd_upper_curve.setData(df_dow_ta_graph['BBUpper_2nd'].astype(float))
                    self.plot2_bollinger_2nd_middle_curve.setData(df_dow_ta_graph['BBMiddle_2nd'].astype(float))
                    self.plot2_bollinger_2nd_lower_curve.setData(df_dow_ta_graph['BBLower_2nd'].astype(float))

                    self.plot2_fibonacci_line1.setValue(dow_fibonacci_levels[1])
                    self.plot2_fibonacci_line2.setValue(dow_fibonacci_levels[2])
                    self.plot2_fibonacci_line3.setValue(dow_fibonacci_levels[3])
                    self.plot2_fibonacci_line4.setValue(dow_fibonacci_levels[4])
                    self.plot2_fibonacci_line5.setValue(dow_fibonacci_levels[5])

                    if df_dow_ta_graph.at[plot_time_index, 'BBMiddle_2nd'] >= df_dow_ta_graph.at[plot_time_index, 'Price']:
                        self.label_p2_2.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p2_2.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " BB U: {0:.0f}\n BB M: {1:.0f}\n BB L: {2:.0f} ".format\
                        (df_dow_ta_graph.at[plot_time_index, 'BBUpper_2nd'], df_dow_ta_graph.at[plot_time_index, 'BBMiddle_2nd'], df_dow_ta_graph.at[plot_time_index, 'BBLower_2nd'])
                    self.label_p2_2.setText(txt)
                else:
                    self.plot2_fibonacci_line1.setValue(DOW_전일종가)
                    self.plot2_fibonacci_line2.setValue(DOW_전일종가)
                    self.plot2_fibonacci_line3.setValue(DOW_전일종가)
                    self.plot2_fibonacci_line4.setValue(DOW_전일종가)
                    self.plot2_fibonacci_line5.setValue(DOW_전일종가)

                    self.label_p2_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p2_2.setText(" BB Upper\n BB Middle\n BB Lower ")

                if flag_checkBox_plot2_psar:

                    self.parent.Calc_PSAR_MAMA('DOW')

                    self.plot2_psar_curve.setData(df_dow_ta_graph['PSAR'][0:plot_time_index+1].astype(float))

                    #self.plot2_sslup_curve.setData(df_dow_ta_graph['SSLUp'][0:plot_time_index+1].astype(float))
                    #self.plot2_ssldown_curve.setData(df_dow_ta_graph['SSLDown'][0:plot_time_index+1].astype(float))

                    self.plot2_mama_curve.setData(df_dow_ta_graph['MAMA'].astype(float))
                    df = df_dow_ta_graph['FAMA'].apply(lambda x: DOW_저가 if x < DOW_저가 else x)
                    self.plot2_fama_curve.setData(df.astype(float))                        

                    if df_dow_ta_graph.at[plot_time_index, 'PSAR'] > df_dow_ta_graph.at[plot_time_index, 'Price'] and df_dow_ta_graph.at[plot_time_index, 'MAMA'] < df_dow_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p2_3.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_dow_ta_graph.at[plot_time_index, 'PSAR'] < df_dow_ta_graph.at[plot_time_index, 'Price'] and df_dow_ta_graph.at[plot_time_index, 'MAMA'] > df_dow_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p2_3.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold') 
                    else:
                        self.label_p2_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " PSAR: {0:.0f}\n MAMA: {1:.0f}\n FAMA: {2:.0f} ".format(df_dow_ta_graph.at[plot_time_index, 'PSAR'], df_dow_ta_graph.at[plot_time_index, 'MAMA'], df_dow_ta_graph.at[plot_time_index, 'FAMA'])
                    self.label_p2_3.setText(txt)
                else:
                    self.label_p2_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p2_3.setText(" PSAR\n MAMA ")
                
                if flag_checkBox_plot2_one_eye:

                    self.plot2_oe_conv_curve.setData(df_dow_ta_graph['OE_CONV'].astype(float))
                    self.plot2_oe_base_curve.setData(df_dow_ta_graph['OE_BASE'].astype(float))
                    self.plot2_span_a_curve.setData(df_dow_ta_graph['SPAN_A'].astype(float))
                    self.plot2_span_b_curve.setData(df_dow_ta_graph['SPAN_B'].astype(float))

                    if flag_one_eye_lagging_span:
                        self.plot2_lagging_span_curve.setData(df_dow_ta_graph['LAGGING_SPAN'].astype(float))

                    if df_dow_ta_graph.at[plot_time_index, 'OE_CONV'] < df_dow_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_dow_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] < df_dow_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p2_4.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_dow_ta_graph.at[plot_time_index, 'OE_CONV'] > df_dow_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_dow_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] > df_dow_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p2_4.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p2_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " 기준선: {0:.0f}\n 전환선: {1:.0f}\n SPAN A: {2:.0f} \n SPAN B: {3:.0f} ".format\
                        (df_dow_ta_graph.at[plot_time_index, 'OE_BASE'], df_dow_ta_graph.at[plot_time_index, 'OE_CONV'], \
                            df_dow_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'], df_dow_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B'])
                    self.label_p2_4.setText(txt)
                    
                else:
                    self.label_p2_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p2_4.setText(" ONE EYE ")

            elif comboindex2 == 15:
                
                self.plot2_time_line.setValue(plot_time_index)
                
                txt = ' {0} '.format(format(NASDAQ_저가, ','))
                self.label_26.setText(txt)

                tmp = self.label_27.text().split()[0]
                과거가 =  tmp.replace(',', '')                

                if NASDAQ_현재가 > float(과거가):

                    txt = " {0} ▲ ({1}, {2:0.1f}%, {3}) ".format(format(NASDAQ_현재가, ','), format(NASDAQ_종가대비, ','), NASDAQ_등락율, NASDAQ_진폭_틱)

                    if NASDAQ_종가대비 > 0:
                        self.label_27.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif NASDAQ_종가대비 < 0:
                        self.label_27.setStyleSheet('background-color: pink; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_27.setStyleSheet('background-color: pink; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_27.setText(txt)

                elif NASDAQ_현재가 < float(과거가):

                    txt = " {0} ▼ ({1}, {2:0.1f}%, {3}) ".format(format(NASDAQ_현재가, ','), format(NASDAQ_종가대비, ','), NASDAQ_등락율, NASDAQ_진폭_틱)

                    if NASDAQ_종가대비 > 0:
                        self.label_27.setStyleSheet('background-color: skyblue; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif NASDAQ_종가대비 < 0:
                        self.label_27.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_27.setStyleSheet('background-color: skyblue; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_27.setText(txt)
                else:
                    pass

                txt = ' {0} '.format(format(NASDAQ_고가, ','))
                self.label_28.setText(txt)

                self.plot2_ovc_jl_line.setValue(NASDAQ_전저)
                self.plot2_ovc_jh_line.setValue(NASDAQ_전고)
                self.plot2_ovc_close_line.setValue(NASDAQ_전일종가)
                self.plot2_ovc_open_line.setValue(NASDAQ_시가)
                self.plot2_ovc_pivot_line.setValue(NASDAQ_피봇)
                self.plot2_ovc_low_line.setValue(NASDAQ_저가)
                self.plot2_ovc_high_line.setValue(NASDAQ_고가)

                self.plot2_nasdaq_curve.setData(df_nasdaq_graph['Price'].astype(float))

                if flag_checkBox_plot2_bband:

                    self.parent.Calc_Bollinger('NASDAQ')
            
                    self.plot2_bollinger_1st_upper_curve.setData(df_nasdaq_ta_graph['BBUpper_1st'].astype(float))
                    self.plot2_bollinger_1st_middle_curve.setData(df_nasdaq_ta_graph['BBMiddle_1st'].astype(float))
                    self.plot2_bollinger_1st_lower_curve.setData(df_nasdaq_ta_graph['BBLower_1st'].astype(float))
                    self.plot2_bollinger_2nd_upper_curve.setData(df_nasdaq_ta_graph['BBUpper_2nd'].astype(float))
                    self.plot2_bollinger_2nd_middle_curve.setData(df_nasdaq_ta_graph['BBMiddle_2nd'].astype(float))
                    self.plot2_bollinger_2nd_lower_curve.setData(df_nasdaq_ta_graph['BBLower_2nd'].astype(float))

                    self.plot2_fibonacci_line1.setValue(nasdaq_fibonacci_levels[1])
                    self.plot2_fibonacci_line2.setValue(nasdaq_fibonacci_levels[2])
                    self.plot2_fibonacci_line3.setValue(nasdaq_fibonacci_levels[3])
                    self.plot2_fibonacci_line4.setValue(nasdaq_fibonacci_levels[4])
                    self.plot2_fibonacci_line5.setValue(nasdaq_fibonacci_levels[5])

                    if df_nasdaq_ta_graph.at[plot_time_index, 'BBMiddle_2nd'] >= df_nasdaq_ta_graph.at[plot_time_index, 'Price']:
                        self.label_p2_2.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p2_2.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " BB U: {0:.2f}\n BB M: {1:.2f}\n BB L: {2:.2f} ".format\
                        (df_nasdaq_ta_graph.at[plot_time_index, 'BBUpper_2nd'], df_nasdaq_ta_graph.at[plot_time_index, 'BBMiddle_2nd'], df_nasdaq_ta_graph.at[plot_time_index, 'BBLower_2nd'])
                    self.label_p2_2.setText(txt)
                else:
                    self.plot2_fibonacci_line1.setValue(NASDAQ_전일종가)
                    self.plot2_fibonacci_line2.setValue(NASDAQ_전일종가)
                    self.plot2_fibonacci_line3.setValue(NASDAQ_전일종가)
                    self.plot2_fibonacci_line4.setValue(NASDAQ_전일종가)
                    self.plot2_fibonacci_line5.setValue(NASDAQ_전일종가)

                    self.label_p2_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p2_2.setText(" BB Upper\n BB Middle\n BB Lower ")

                if flag_checkBox_plot2_psar:

                    self.parent.Calc_PSAR_MAMA('NASDAQ')

                    self.plot2_psar_curve.setData(df_nasdaq_ta_graph['PSAR'][0:plot_time_index+1].astype(float))

                    #self.plot2_sslup_curve.setData(df_nasdaq_ta_graph['SSLUp'][0:plot_time_index+1].astype(float))
                    #self.plot2_ssldown_curve.setData(df_nasdaq_ta_graph['SSLDown'][0:plot_time_index+1].astype(float))

                    self.plot2_mama_curve.setData(df_nasdaq_ta_graph['MAMA'].astype(float))
                    df = df_nasdaq_ta_graph['FAMA'].apply(lambda x: NASDAQ_저가 if x < NASDAQ_저가 else x)
                    self.plot2_fama_curve.setData(df.astype(float))                        

                    if df_nasdaq_ta_graph.at[plot_time_index, 'PSAR'] > df_nasdaq_ta_graph.at[plot_time_index, 'Price'] and df_nasdaq_ta_graph.at[plot_time_index, 'MAMA'] < df_nasdaq_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p2_3.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_nasdaq_ta_graph.at[plot_time_index, 'PSAR'] < df_nasdaq_ta_graph.at[plot_time_index, 'Price'] and df_nasdaq_ta_graph.at[plot_time_index, 'MAMA'] > df_nasdaq_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p2_3.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold') 
                    else:
                        self.label_p2_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " PSAR: {0:.2f}\n MAMA: {1:.2f}\n FAMA: {2:.2f} ".format(df_nasdaq_ta_graph.at[plot_time_index, 'PSAR'], df_nasdaq_ta_graph.at[plot_time_index, 'MAMA'], df_nasdaq_ta_graph.at[plot_time_index, 'FAMA'])
                    self.label_p2_3.setText(txt)
                else:
                    self.label_p2_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p2_3.setText(" PSAR\n MAMA ")
                
                if flag_checkBox_plot2_one_eye:

                    self.plot2_oe_conv_curve.setData(df_nasdaq_ta_graph['OE_CONV'].astype(float))
                    self.plot2_oe_base_curve.setData(df_nasdaq_ta_graph['OE_BASE'].astype(float))
                    self.plot2_span_a_curve.setData(df_nasdaq_ta_graph['SPAN_A'].astype(float))
                    self.plot2_span_b_curve.setData(df_nasdaq_ta_graph['SPAN_B'].astype(float))

                    if flag_one_eye_lagging_span:
                        self.plot2_lagging_span_curve.setData(df_nasdaq_ta_graph['LAGGING_SPAN'].astype(float))

                    if df_nasdaq_ta_graph.at[plot_time_index, 'OE_CONV'] < df_nasdaq_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_nasdaq_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] < df_nasdaq_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p2_4.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_nasdaq_ta_graph.at[plot_time_index, 'OE_CONV'] > df_nasdaq_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_nasdaq_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] > df_nasdaq_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p2_4.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p2_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " 기준선: {0:.2f}\n 전환선: {1:.2f}\n SPAN A: {2:.2f} \n SPAN B: {3:.2f} ".format\
                        (df_nasdaq_ta_graph.at[plot_time_index, 'OE_BASE'], df_nasdaq_ta_graph.at[plot_time_index, 'OE_CONV'], \
                            df_nasdaq_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'], df_nasdaq_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B'])
                    self.label_p2_4.setText(txt)
                    
                else:
                    self.label_p2_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p2_4.setText(" ONE EYE ")

            elif comboindex2 == 16:
                
                self.plot2_time_line.setValue(plot_time_index)

                txt = ' {0} '.format(format(HANGSENG_저가, ','))
                self.label_26.setText(txt)

                tmp = self.label_27.text().split()[0]
                과거가 =  tmp.replace(',', '')    

                if HANGSENG_현재가 > float(과거가):

                    txt = " {0} ▲ ({1}, {2:0.1f}%, {3}) ".format(format(HANGSENG_현재가, ','), HANGSENG_종가대비, HANGSENG_등락율, HANGSENG_진폭_틱)

                    if HANGSENG_종가대비 > 0:
                        self.label_27.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif HANGSENG_종가대비 < 0:
                        self.label_27.setStyleSheet('background-color: pink; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_27.setStyleSheet('background-color: pink; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_27.setText(txt)

                elif HANGSENG_현재가 < float(과거가):

                    txt = " {0} ▼ ({1}, {2:0.1f}%, {3}) ".format(format(HANGSENG_현재가, ','), HANGSENG_종가대비, HANGSENG_등락율, HANGSENG_진폭_틱)

                    if HANGSENG_종가대비 > 0:
                        self.label_27.setStyleSheet('background-color: skyblue; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif HANGSENG_종가대비 < 0:
                        self.label_27.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_27.setStyleSheet('background-color: skyblue; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_27.setText(txt)
                else:
                    pass

                txt = ' {0} '.format(format(HANGSENG_고가, ','))
                self.label_28.setText(txt)

                self.plot2_ovc_jl_line.setValue(HANGSENG_전저)
                self.plot2_ovc_jh_line.setValue(HANGSENG_전고)
                self.plot2_ovc_close_line.setValue(HANGSENG_전일종가)
                self.plot2_ovc_open_line.setValue(HANGSENG_시가)
                self.plot2_ovc_pivot_line.setValue(HANGSENG_피봇)
                self.plot2_ovc_low_line.setValue(HANGSENG_저가)
                self.plot2_ovc_high_line.setValue(HANGSENG_고가)                 

                self.plot2_hsi_curve.setData(df_hsi_graph['Price'].astype(float))                

                if flag_checkBox_plot2_bband:

                    self.parent.Calc_Bollinger('HSI')
            
                    self.plot2_bollinger_1st_upper_curve.setData(df_hsi_ta_graph['BBUpper_1st'].astype(float))
                    self.plot2_bollinger_1st_middle_curve.setData(df_hsi_ta_graph['BBMiddle_1st'].astype(float))
                    self.plot2_bollinger_1st_lower_curve.setData(df_hsi_ta_graph['BBLower_1st'].astype(float))
                    self.plot2_bollinger_2nd_upper_curve.setData(df_hsi_ta_graph['BBUpper_2nd'].astype(float))
                    self.plot2_bollinger_2nd_middle_curve.setData(df_hsi_ta_graph['BBMiddle_2nd'].astype(float))
                    self.plot2_bollinger_2nd_lower_curve.setData(df_hsi_ta_graph['BBLower_2nd'].astype(float))

                    self.plot2_fibonacci_line1.setValue(hsi_fibonacci_levels[1])
                    self.plot2_fibonacci_line2.setValue(hsi_fibonacci_levels[2])
                    self.plot2_fibonacci_line3.setValue(hsi_fibonacci_levels[3])
                    self.plot2_fibonacci_line4.setValue(hsi_fibonacci_levels[4])
                    self.plot2_fibonacci_line5.setValue(hsi_fibonacci_levels[5])

                    if df_hsi_ta_graph.at[plot_time_index, 'BBMiddle_2nd'] >= df_hsi_ta_graph.at[plot_time_index, 'Price']:
                        self.label_p2_2.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p2_2.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " BB U: {0:.0f}\n BB M: {1:.0f}\n BB L: {2:.0f} ".format\
                        (df_hsi_ta_graph.at[plot_time_index, 'BBUpper_2nd'], df_hsi_ta_graph.at[plot_time_index, 'BBMiddle_2nd'], df_hsi_ta_graph.at[plot_time_index, 'BBLower_2nd'])
                    self.label_p2_2.setText(txt)
                else:
                    self.plot2_fibonacci_line1.setValue(HANGSENG_전일종가)
                    self.plot2_fibonacci_line2.setValue(HANGSENG_전일종가)
                    self.plot2_fibonacci_line3.setValue(HANGSENG_전일종가)
                    self.plot2_fibonacci_line4.setValue(HANGSENG_전일종가)
                    self.plot2_fibonacci_line5.setValue(HANGSENG_전일종가)

                    self.label_p2_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p2_2.setText(" BB Upper\n BB Middle\n BB Lower ")

                if flag_checkBox_plot2_psar:

                    self.parent.Calc_PSAR_MAMA('HSI')

                    self.plot2_psar_curve.setData(df_hsi_ta_graph['PSAR'][0:plot_time_index+1].astype(float))

                    #self.plot2_sslup_curve.setData(df_hsi_ta_graph['SSLUp'][0:plot_time_index+1].astype(float))
                    #self.plot2_ssldown_curve.setData(df_hsi_ta_graph['SSLDown'][0:plot_time_index+1].astype(float))

                    self.plot2_mama_curve.setData(df_hsi_ta_graph['MAMA'].astype(float))
                    df = df_hsi_ta_graph['FAMA'].apply(lambda x: HANGSENG_저가 if x < HANGSENG_저가 else x)
                    self.plot2_fama_curve.setData(df.astype(float))                        

                    if df_hsi_ta_graph.at[plot_time_index, 'PSAR'] > df_hsi_ta_graph.at[plot_time_index, 'Price'] and df_hsi_ta_graph.at[plot_time_index, 'MAMA'] < df_hsi_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p2_3.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_hsi_ta_graph.at[plot_time_index, 'PSAR'] < df_hsi_ta_graph.at[plot_time_index, 'Price'] and df_hsi_ta_graph.at[plot_time_index, 'MAMA'] > df_hsi_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p2_3.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold') 
                    else:
                        self.label_p2_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " PSAR: {0:.0f}\n MAMA: {1:.0f}\n FAMA: {2:.0f} ".format(df_hsi_ta_graph.at[plot_time_index, 'PSAR'], df_hsi_ta_graph.at[plot_time_index, 'MAMA'], df_hsi_ta_graph.at[plot_time_index, 'FAMA'])
                    self.label_p2_3.setText(txt)
                else:
                    self.label_p2_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p2_3.setText(" PSAR\n MAMA ")
                
                if flag_checkBox_plot2_one_eye:

                    self.plot2_oe_conv_curve.setData(df_hsi_ta_graph['OE_CONV'].astype(float))
                    self.plot2_oe_base_curve.setData(df_hsi_ta_graph['OE_BASE'].astype(float))
                    self.plot2_span_a_curve.setData(df_hsi_ta_graph['SPAN_A'].astype(float))
                    self.plot2_span_b_curve.setData(df_hsi_ta_graph['SPAN_B'].astype(float))

                    if flag_one_eye_lagging_span:
                        self.plot2_lagging_span_curve.setData(df_hsi_ta_graph['LAGGING_SPAN'].astype(float))

                    if df_hsi_ta_graph.at[plot_time_index, 'OE_CONV'] < df_hsi_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_hsi_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] < df_hsi_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p2_4.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_hsi_ta_graph.at[plot_time_index, 'OE_CONV'] > df_hsi_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_hsi_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] > df_hsi_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p2_4.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p2_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " 기준선: {0:.0f}\n 전환선: {1:.0f}\n SPAN A: {2:.0f} \n SPAN B: {3:.0f} ".format\
                        (df_hsi_ta_graph.at[plot_time_index, 'OE_BASE'], df_hsi_ta_graph.at[plot_time_index, 'OE_CONV'], \
                            df_hsi_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'], df_hsi_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B'])
                    self.label_p2_4.setText(txt)
                    
                else:
                    self.label_p2_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p2_4.setText(" ONE EYE ")

            elif comboindex2 == 17:
                
                self.plot2_time_line.setValue(plot_time_index)
                
                txt = ' {0} '.format(format(WTI_저가, ','))
                self.label_26.setText(txt)

                과거가 =  self.label_27.text().split()[0]             

                if WTI_현재가 > float(과거가):

                    txt = " {0} ▲ ({1}, {2:0.1f}%, {3}) ".format(WTI_현재가, WTI_종가대비, WTI_등락율, WTI_진폭_틱)

                    if WTI_종가대비 > 0:
                        self.label_27.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif WTI_종가대비 < 0:
                        self.label_27.setStyleSheet('background-color: pink; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_27.setStyleSheet('background-color: pink; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_27.setText(txt)

                elif WTI_현재가 < float(과거가):

                    txt = " {0} ▼ ({1}, {2:0.1f}%, {3}) ".format(WTI_현재가, WTI_종가대비, WTI_등락율, WTI_진폭_틱)

                    if WTI_종가대비 > 0:
                        self.label_27.setStyleSheet('background-color: skyblue; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif WTI_종가대비 < 0:
                        self.label_27.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_27.setStyleSheet('background-color: skyblue; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_27.setText(txt)
                else:
                    pass

                txt = ' {0} '.format(format(WTI_고가, ','))
                self.label_28.setText(txt)

                self.plot2_ovc_jl_line.setValue(WTI_전저)
                self.plot2_ovc_jh_line.setValue(WTI_전고)
                self.plot2_ovc_close_line.setValue(WTI_전일종가)
                self.plot2_ovc_open_line.setValue(WTI_시가)
                self.plot2_ovc_pivot_line.setValue(WTI_피봇)
                self.plot2_ovc_low_line.setValue(WTI_저가)
                self.plot2_ovc_high_line.setValue(WTI_고가) 

                self.plot2_wti_curve.setData(df_wti_graph['Price'].astype(float))

                if flag_checkBox_plot2_bband:

                    self.parent.Calc_Bollinger('WTI')
            
                    self.plot2_bollinger_1st_upper_curve.setData(df_wti_ta_graph['BBUpper_1st'].astype(float))
                    self.plot2_bollinger_1st_middle_curve.setData(df_wti_ta_graph['BBMiddle_1st'].astype(float))
                    self.plot2_bollinger_1st_lower_curve.setData(df_wti_ta_graph['BBLower_1st'].astype(float))
                    self.plot2_bollinger_2nd_upper_curve.setData(df_wti_ta_graph['BBUpper_2nd'].astype(float))
                    self.plot2_bollinger_2nd_middle_curve.setData(df_wti_ta_graph['BBMiddle_2nd'].astype(float))
                    self.plot2_bollinger_2nd_lower_curve.setData(df_wti_ta_graph['BBLower_2nd'].astype(float))

                    self.plot2_fibonacci_line1.setValue(wti_fibonacci_levels[1])
                    self.plot2_fibonacci_line2.setValue(wti_fibonacci_levels[2])
                    self.plot2_fibonacci_line3.setValue(wti_fibonacci_levels[3])
                    self.plot2_fibonacci_line4.setValue(wti_fibonacci_levels[4])
                    self.plot2_fibonacci_line5.setValue(wti_fibonacci_levels[5])

                    if df_wti_ta_graph.at[plot_time_index, 'BBMiddle_2nd'] >= df_wti_ta_graph.at[plot_time_index, 'Price']:
                        self.label_p2_2.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p2_2.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " BB U: {0:.2f}\n BB M: {1:.2f}\n BB L: {2:.2f} ".format\
                        (df_wti_ta_graph.at[plot_time_index, 'BBUpper_2nd'], df_wti_ta_graph.at[plot_time_index, 'BBMiddle_2nd'], df_wti_ta_graph.at[plot_time_index, 'BBLower_2nd'])
                    self.label_p2_2.setText(txt)
                else:
                    self.plot2_fibonacci_line1.setValue(WTI_전일종가)
                    self.plot2_fibonacci_line2.setValue(WTI_전일종가)
                    self.plot2_fibonacci_line3.setValue(WTI_전일종가)
                    self.plot2_fibonacci_line4.setValue(WTI_전일종가)
                    self.plot2_fibonacci_line5.setValue(WTI_전일종가)

                    self.label_p2_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p2_2.setText(" BB Upper\n BB Middle\n BB Lower ")

                if flag_checkBox_plot2_psar:

                    self.parent.Calc_PSAR_MAMA('WTI')

                    self.plot2_psar_curve.setData(df_wti_ta_graph['PSAR'][0:plot_time_index+1].astype(float))

                    #self.plot2_sslup_curve.setData(df_wti_ta_graph['SSLUp'][0:plot_time_index+1].astype(float))
                    #self.plot2_ssldown_curve.setData(df_wti_ta_graph['SSLDown'][0:plot_time_index+1].astype(float))

                    self.plot2_mama_curve.setData(df_wti_ta_graph['MAMA'].astype(float))
                    df = df_wti_ta_graph['FAMA'].apply(lambda x: WTI_저가 if x < WTI_저가 else x)
                    self.plot2_fama_curve.setData(df.astype(float))                        

                    if df_wti_ta_graph.at[plot_time_index, 'PSAR'] > df_wti_ta_graph.at[plot_time_index, 'Price'] and df_wti_ta_graph.at[plot_time_index, 'MAMA'] < df_wti_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p2_3.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_wti_ta_graph.at[plot_time_index, 'PSAR'] < df_wti_ta_graph.at[plot_time_index, 'Price'] and df_wti_ta_graph.at[plot_time_index, 'MAMA'] > df_wti_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p2_3.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold') 
                    else:
                        self.label_p2_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " PSAR: {0:.2f}\n MAMA: {1:.2f}\n FAMA: {2:.2f} ".format(df_wti_ta_graph.at[plot_time_index, 'PSAR'], df_wti_ta_graph.at[plot_time_index, 'MAMA'], df_wti_ta_graph.at[plot_time_index, 'FAMA'])
                    self.label_p2_3.setText(txt)
                else:
                    self.label_p2_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p2_3.setText(" PSAR\n MAMA ")
                
                if flag_checkBox_plot2_one_eye:

                    self.plot2_oe_conv_curve.setData(df_wti_ta_graph['OE_CONV'].astype(float))
                    self.plot2_oe_base_curve.setData(df_wti_ta_graph['OE_BASE'].astype(float))
                    self.plot2_span_a_curve.setData(df_wti_ta_graph['SPAN_A'].astype(float))
                    self.plot2_span_b_curve.setData(df_wti_ta_graph['SPAN_B'].astype(float))

                    if flag_one_eye_lagging_span:
                        self.plot2_lagging_span_curve.setData(df_wti_ta_graph['LAGGING_SPAN'].astype(float))

                    if df_wti_ta_graph.at[plot_time_index, 'OE_CONV'] < df_wti_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_wti_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] < df_wti_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p2_4.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_wti_ta_graph.at[plot_time_index, 'OE_CONV'] > df_wti_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_wti_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] > df_wti_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p2_4.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p2_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " 기준선: {0:.2f}\n 전환선: {1:.2f}\n SPAN A: {2:.2f} \n SPAN B: {3:.2f} ".format\
                        (df_wti_ta_graph.at[plot_time_index, 'OE_BASE'], df_wti_ta_graph.at[plot_time_index, 'OE_CONV'], \
                            df_wti_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'], df_wti_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B'])
                    self.label_p2_4.setText(txt)
                    
                else:
                    self.label_p2_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p2_4.setText(" ONE EYE ")
            
            elif comboindex2 == 18:
                
                self.plot2_time_line.setValue(plot_time_index)

                txt = ' {0} '.format(format(GOLD_저가, ','))
                self.label_26.setText(txt)

                tmp = self.label_27.text().split()[0]
                과거가 =  tmp.replace(',', '')

                if GOLD_현재가 > float(과거가):

                    txt = " {0} ▲ ({1:.1f}, {2:.1f}%, {3}) ".format(format(GOLD_현재가, ','), GOLD_종가대비, GOLD_등락율, GOLD_진폭_틱)

                    if GOLD_종가대비 > 0:
                        self.label_27.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif GOLD_종가대비 < 0:
                        self.label_27.setStyleSheet('background-color: pink; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_27.setStyleSheet('background-color: pink; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_27.setText(txt)

                elif GOLD_현재가 < float(과거가):

                    txt = " {0} ▼ ({1:.1f}, {2:.1f}%, {3}) ".format(format(GOLD_현재가, ','), GOLD_종가대비, GOLD_등락율, GOLD_진폭_틱)

                    if GOLD_종가대비 > 0:
                        self.label_27.setStyleSheet('background-color: skyblue; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif GOLD_종가대비 < 0:
                        self.label_27.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_27.setStyleSheet('background-color: skyblue; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_27.setText(txt)
                else:
                    pass

                txt = ' {0} '.format(format(GOLD_고가, ','))
                self.label_28.setText(txt)

                self.plot2_ovc_jl_line.setValue(GOLD_전저)
                self.plot2_ovc_jh_line.setValue(GOLD_전고)
                self.plot2_ovc_close_line.setValue(GOLD_전일종가)
                self.plot2_ovc_open_line.setValue(GOLD_시가)
                self.plot2_ovc_pivot_line.setValue(GOLD_피봇)
                self.plot2_ovc_low_line.setValue(GOLD_저가)
                self.plot2_ovc_high_line.setValue(GOLD_고가)                 

                self.plot2_gold_curve.setData(df_gold_graph['Price'].astype(float))

                if flag_checkBox_plot2_bband:

                    self.parent.Calc_Bollinger('GOLD')
            
                    self.plot2_bollinger_1st_upper_curve.setData(df_gold_ta_graph['BBUpper_1st'].astype(float))
                    self.plot2_bollinger_1st_middle_curve.setData(df_gold_ta_graph['BBMiddle_1st'].astype(float))
                    self.plot2_bollinger_1st_lower_curve.setData(df_gold_ta_graph['BBLower_1st'].astype(float))
                    self.plot2_bollinger_2nd_upper_curve.setData(df_gold_ta_graph['BBUpper_2nd'].astype(float))
                    self.plot2_bollinger_2nd_middle_curve.setData(df_gold_ta_graph['BBMiddle_2nd'].astype(float))
                    self.plot2_bollinger_2nd_lower_curve.setData(df_gold_ta_graph['BBLower_2nd'].astype(float))

                    self.plot2_fibonacci_line1.setValue(gold_fibonacci_levels[1])
                    self.plot2_fibonacci_line2.setValue(gold_fibonacci_levels[2])
                    self.plot2_fibonacci_line3.setValue(gold_fibonacci_levels[3])
                    self.plot2_fibonacci_line4.setValue(gold_fibonacci_levels[4])
                    self.plot2_fibonacci_line5.setValue(gold_fibonacci_levels[5])

                    if df_gold_ta_graph.at[plot_time_index, 'BBMiddle_2nd'] >= df_gold_ta_graph.at[plot_time_index, 'Price']:
                        self.label_p2_2.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p2_2.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " BB U: {0:.1f}\n BB M: {1:.1f}\n BB L: {2:.1f} ".format\
                        (df_gold_ta_graph.at[plot_time_index, 'BBUpper_2nd'], df_gold_ta_graph.at[plot_time_index, 'BBMiddle_2nd'], df_gold_ta_graph.at[plot_time_index, 'BBLower_2nd'])
                    self.label_p2_2.setText(txt)
                else:
                    self.plot2_fibonacci_line1.setValue(GOLD_전일종가)
                    self.plot2_fibonacci_line2.setValue(GOLD_전일종가)
                    self.plot2_fibonacci_line3.setValue(GOLD_전일종가)
                    self.plot2_fibonacci_line4.setValue(GOLD_전일종가)
                    self.plot2_fibonacci_line5.setValue(GOLD_전일종가)

                    self.label_p2_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p2_2.setText(" BB Upper\n BB Middle\n BB Lower ")

                if flag_checkBox_plot2_psar:

                    self.parent.Calc_PSAR_MAMA('GOLD')

                    self.plot2_psar_curve.setData(df_gold_ta_graph['PSAR'][0:plot_time_index+1].astype(float))

                    #self.plot2_sslup_curve.setData(df_gold_ta_graph['SSLUp'][0:plot_time_index+1].astype(float))
                    #self.plot2_ssldown_curve.setData(df_gold_ta_graph['SSLDown'][0:plot_time_index+1].astype(float))

                    self.plot2_mama_curve.setData(df_gold_ta_graph['MAMA'].astype(float))
                    df = df_gold_ta_graph['FAMA'].apply(lambda x: GOLD_저가 if x < GOLD_저가 else x)
                    self.plot2_fama_curve.setData(df.astype(float))                        

                    if df_gold_ta_graph.at[plot_time_index, 'PSAR'] > df_gold_ta_graph.at[plot_time_index, 'Price'] and df_gold_ta_graph.at[plot_time_index, 'MAMA'] < df_gold_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p2_3.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_gold_ta_graph.at[plot_time_index, 'PSAR'] < df_gold_ta_graph.at[plot_time_index, 'Price'] and df_gold_ta_graph.at[plot_time_index, 'MAMA'] > df_gold_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p2_3.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold') 
                    else:
                        self.label_p2_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " PSAR: {0:.1f}\n MAMA: {1:.1f}\n FAMA: {2:.1f} ".format(df_gold_ta_graph.at[plot_time_index, 'PSAR'], df_gold_ta_graph.at[plot_time_index, 'MAMA'], df_gold_ta_graph.at[plot_time_index, 'FAMA'])
                    self.label_p2_3.setText(txt)
                else:
                    self.label_p2_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p2_3.setText(" PSAR\n MAMA ")
                
                if flag_checkBox_plot2_one_eye:

                    self.plot2_oe_conv_curve.setData(df_gold_ta_graph['OE_CONV'].astype(float))
                    self.plot2_oe_base_curve.setData(df_gold_ta_graph['OE_BASE'].astype(float))
                    self.plot2_span_a_curve.setData(df_gold_ta_graph['SPAN_A'].astype(float))
                    self.plot2_span_b_curve.setData(df_gold_ta_graph['SPAN_B'].astype(float))

                    if flag_one_eye_lagging_span:
                        self.plot2_lagging_span_curve.setData(df_gold_ta_graph['LAGGING_SPAN'].astype(float))

                    if df_gold_ta_graph.at[plot_time_index, 'OE_CONV'] < df_gold_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_gold_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] < df_gold_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p2_4.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_gold_ta_graph.at[plot_time_index, 'OE_CONV'] > df_gold_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_gold_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] > df_gold_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p2_4.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p2_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " 기준선: {0:.1f}\n 전환선: {1:.1f}\n SPAN A: {2:.1f} \n SPAN B: {3:.1f} ".format\
                        (df_gold_ta_graph.at[plot_time_index, 'OE_BASE'], df_gold_ta_graph.at[plot_time_index, 'OE_CONV'], \
                            df_gold_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'], df_gold_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B'])
                    self.label_p2_4.setText(txt)
                    
                else:
                    self.label_p2_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p2_4.setText(" ONE EYE ")

            elif comboindex2 == 19:
                
                self.plot2_time_line.setValue(plot_time_index)

                txt = ' {0:.5f} '.format(EURO_저가)
                self.label_26.setText(txt)

                과거가 =  self.label_27.text().split()[0]     

                if EURO_현재가 > float(과거가):

                    txt = " {0:.5f} ▲ ({1:.5f}, {2:0.1f}%, {3}) ".format(EURO_현재가, EURO_종가대비, EURO_등락율, EURO_진폭_틱)

                    if EURO_종가대비 > 0:
                        self.label_27.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif EURO_종가대비 < 0:
                        self.label_27.setStyleSheet('background-color: pink; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_27.setStyleSheet('background-color: pink; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_27.setText(txt)

                elif EURO_현재가 < float(과거가):

                    txt = " {0:.5f} ▼ ({1:.5f}, {2:0.1f}%, {3}) ".format(EURO_현재가, EURO_종가대비, EURO_등락율, EURO_진폭_틱)

                    if EURO_종가대비 > 0:
                        self.label_27.setStyleSheet('background-color: skyblue; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif EURO_종가대비 < 0:
                        self.label_27.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_27.setStyleSheet('background-color: skyblue; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_27.setText(txt)
                else:
                    pass

                txt = ' {0:.5f} '.format(EURO_고가)
                self.label_28.setText(txt)

                self.plot2_ovc_jl_line.setValue(EURO_전저)
                self.plot2_ovc_jh_line.setValue(EURO_전고)
                self.plot2_ovc_close_line.setValue(EURO_전일종가)
                self.plot2_ovc_open_line.setValue(EURO_시가)
                self.plot2_ovc_pivot_line.setValue(EURO_피봇)
                self.plot2_ovc_low_line.setValue(EURO_저가)
                self.plot2_ovc_high_line.setValue(EURO_고가)                 

                self.plot2_euro_curve.setData(df_euro_graph['Price'].astype(float))

                if flag_checkBox_plot2_bband:

                    self.parent.Calc_Bollinger('EURO')
            
                    self.plot2_bollinger_1st_upper_curve.setData(df_euro_ta_graph['BBUpper_1st'].astype(float))
                    self.plot2_bollinger_1st_middle_curve.setData(df_euro_ta_graph['BBMiddle_1st'].astype(float))
                    self.plot2_bollinger_1st_lower_curve.setData(df_euro_ta_graph['BBLower_1st'].astype(float))
                    self.plot2_bollinger_2nd_upper_curve.setData(df_euro_ta_graph['BBUpper_2nd'].astype(float))
                    self.plot2_bollinger_2nd_middle_curve.setData(df_euro_ta_graph['BBMiddle_2nd'].astype(float))
                    self.plot2_bollinger_2nd_lower_curve.setData(df_euro_ta_graph['BBLower_2nd'].astype(float))

                    self.plot2_fibonacci_line1.setValue(euro_fibonacci_levels[1])
                    self.plot2_fibonacci_line2.setValue(euro_fibonacci_levels[2])
                    self.plot2_fibonacci_line3.setValue(euro_fibonacci_levels[3])
                    self.plot2_fibonacci_line4.setValue(euro_fibonacci_levels[4])
                    self.plot2_fibonacci_line5.setValue(euro_fibonacci_levels[5])

                    if df_euro_ta_graph.at[plot_time_index, 'BBMiddle_2nd'] >= df_euro_ta_graph.at[plot_time_index, 'Price']:
                        self.label_p2_2.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p2_2.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " BB U: {0:.5f}\n BB M: {1:.5f}\n BB L: {2:.5f} ".format\
                        (df_euro_ta_graph.at[plot_time_index, 'BBUpper_2nd'], df_euro_ta_graph.at[plot_time_index, 'BBMiddle_2nd'], df_euro_ta_graph.at[plot_time_index, 'BBLower_2nd'])
                    self.label_p2_2.setText(txt)
                else:
                    self.plot2_fibonacci_line1.setValue(EURO_전일종가)
                    self.plot2_fibonacci_line2.setValue(EURO_전일종가)
                    self.plot2_fibonacci_line3.setValue(EURO_전일종가)
                    self.plot2_fibonacci_line4.setValue(EURO_전일종가)
                    self.plot2_fibonacci_line5.setValue(EURO_전일종가)

                    self.label_p2_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p2_2.setText(" BB Upper\n BB Middle\n BB Lower ")

                if flag_checkBox_plot2_psar:

                    self.parent.Calc_PSAR_MAMA('EURO')

                    self.plot2_psar_curve.setData(df_euro_ta_graph['PSAR'][0:plot_time_index+1].astype(float))

                    #self.plot2_sslup_curve.setData(df_euro_ta_graph['SSLUp'][0:plot_time_index+1].astype(float))
                    #self.plot2_ssldown_curve.setData(df_euro_ta_graph['SSLDown'][0:plot_time_index+1].astype(float))

                    self.plot2_mama_curve.setData(df_euro_ta_graph['MAMA'].astype(float))
                    df = df_euro_ta_graph['FAMA'].apply(lambda x: EURO_저가 if x < EURO_저가 else x)
                    self.plot2_fama_curve.setData(df.astype(float))                        

                    if df_euro_ta_graph.at[plot_time_index, 'PSAR'] > df_euro_ta_graph.at[plot_time_index, 'Price'] and df_euro_ta_graph.at[plot_time_index, 'MAMA'] < df_euro_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p2_3.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_euro_ta_graph.at[plot_time_index, 'PSAR'] < df_euro_ta_graph.at[plot_time_index, 'Price'] and df_euro_ta_graph.at[plot_time_index, 'MAMA'] > df_euro_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p2_3.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold') 
                    else:
                        self.label_p2_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " PSAR: {0:.5f}\n MAMA: {1:.5f}\n FAMA: {2:.5f} ".format(df_euro_ta_graph.at[plot_time_index, 'PSAR'], df_euro_ta_graph.at[plot_time_index, 'MAMA'], df_euro_ta_graph.at[plot_time_index, 'FAMA'])
                    self.label_p2_3.setText(txt)
                else:
                    self.label_p2_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p2_3.setText(" PSAR\n MAMA ")
                
                if flag_checkBox_plot2_one_eye:

                    self.plot2_oe_conv_curve.setData(df_euro_ta_graph['OE_CONV'].astype(float))
                    self.plot2_oe_base_curve.setData(df_euro_ta_graph['OE_BASE'].astype(float))
                    self.plot2_span_a_curve.setData(df_euro_ta_graph['SPAN_A'].astype(float))
                    self.plot2_span_b_curve.setData(df_euro_ta_graph['SPAN_B'].astype(float))

                    if flag_one_eye_lagging_span:
                        self.plot2_lagging_span_curve.setData(df_euro_ta_graph['LAGGING_SPAN'].astype(float))

                    if df_euro_ta_graph.at[plot_time_index, 'OE_CONV'] < df_euro_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_euro_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] < df_euro_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p2_4.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_euro_ta_graph.at[plot_time_index, 'OE_CONV'] > df_euro_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_euro_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] > df_euro_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p2_4.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p2_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " 기준선: {0:.5f}\n 전환선: {1:.5f}\n SPAN A: {2:.5f} \n SPAN B: {3:.5f} ".format\
                        (df_euro_ta_graph.at[plot_time_index, 'OE_BASE'], df_euro_ta_graph.at[plot_time_index, 'OE_CONV'], \
                            df_euro_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'], df_euro_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B'])
                    self.label_p2_4.setText(txt)
                    
                else:
                    self.label_p2_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p2_4.setText(" ONE EYE ")

            elif comboindex2 == 20:
                
                self.plot2_time_line.setValue(plot_time_index)

                txt = ' {0} '.format(format(YEN_저가, ','))
                self.label_26.setText(txt)

                tmp = self.label_27.text().split()[0]
                과거가 =  tmp.replace(',', '')     

                if YEN_현재가 > float(과거가):

                    txt = " {0} ▲ ({1:.1f}, {2:.1f}%, {3}) ".format(format(YEN_현재가, ','), YEN_종가대비, YEN_등락율, YEN_진폭_틱)

                    if YEN_종가대비 > 0:
                        self.label_27.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif YEN_종가대비 < 0:
                        self.label_27.setStyleSheet('background-color: pink; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_27.setStyleSheet('background-color: pink; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_27.setText(txt)

                elif YEN_현재가 < float(과거가):

                    txt = " {0} ▼ ({1:.1f}, {2:.1f}%, {3}) ".format(format(YEN_현재가, ','), YEN_종가대비, YEN_등락율, YEN_진폭_틱)

                    if YEN_종가대비 > 0:
                        self.label_27.setStyleSheet('background-color: skyblue; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif YEN_종가대비 < 0:
                        self.label_27.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_27.setStyleSheet('background-color: skyblue; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_27.setText(txt)
                else:
                    pass

                txt = ' {0} '.format(format(YEN_고가, ','))
                self.label_28.setText(txt)

                self.plot2_ovc_jl_line.setValue(YEN_전저)
                self.plot2_ovc_jh_line.setValue(YEN_전고)
                self.plot2_ovc_close_line.setValue(YEN_전일종가)
                self.plot2_ovc_open_line.setValue(YEN_시가)
                self.plot2_ovc_pivot_line.setValue(YEN_피봇)
                self.plot2_ovc_low_line.setValue(YEN_저가)
                self.plot2_ovc_high_line.setValue(YEN_고가)                 

                self.plot2_yen_curve.setData(df_yen_graph['Price'].astype(float))

                if flag_checkBox_plot2_bband:

                    self.parent.Calc_Bollinger('YEN')

                    self.plot2_bollinger_1st_upper_curve.setData(df_yen_ta_graph['BBUpper_1st'].astype(float))
                    self.plot2_bollinger_1st_middle_curve.setData(df_yen_ta_graph['BBMiddle_1st'].astype(float))
                    self.plot2_bollinger_1st_lower_curve.setData(df_yen_ta_graph['BBLower_1st'].astype(float))
                    self.plot2_bollinger_2nd_upper_curve.setData(df_yen_ta_graph['BBUpper_2nd'].astype(float))
                    self.plot2_bollinger_2nd_middle_curve.setData(df_yen_ta_graph['BBMiddle_2nd'].astype(float))
                    self.plot2_bollinger_2nd_lower_curve.setData(df_yen_ta_graph['BBLower_2nd'].astype(float))

                    self.plot2_fibonacci_line1.setValue(yen_fibonacci_levels[1])
                    self.plot2_fibonacci_line2.setValue(yen_fibonacci_levels[2])
                    self.plot2_fibonacci_line3.setValue(yen_fibonacci_levels[3])
                    self.plot2_fibonacci_line4.setValue(yen_fibonacci_levels[4])
                    self.plot2_fibonacci_line5.setValue(yen_fibonacci_levels[5])

                    if df_yen_ta_graph.at[plot_time_index, 'BBMiddle_2nd'] >= df_yen_ta_graph.at[plot_time_index, 'Price']:
                        self.label_p2_2.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p2_2.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " BB U: {0:.1f}\n BB M: {1:.1f}\n BB L: {2:.1f} ".format\
                        (df_yen_ta_graph.at[plot_time_index, 'BBUpper_2nd'], df_yen_ta_graph.at[plot_time_index, 'BBMiddle_2nd'], df_yen_ta_graph.at[plot_time_index, 'BBLower_2nd'])
                    self.label_p2_2.setText(txt)
                else:
                    self.plot2_fibonacci_line1.setValue(YEN_전일종가)
                    self.plot2_fibonacci_line2.setValue(YEN_전일종가)
                    self.plot2_fibonacci_line3.setValue(YEN_전일종가)
                    self.plot2_fibonacci_line4.setValue(YEN_전일종가)
                    self.plot2_fibonacci_line5.setValue(YEN_전일종가)

                    self.label_p2_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p2_2.setText(" BB Upper\n BB Middle\n BB Lower ")

                if flag_checkBox_plot2_psar:

                    self.parent.Calc_PSAR_MAMA('YEN')

                    self.plot2_psar_curve.setData(df_yen_ta_graph['PSAR'][0:plot_time_index+1].astype(float))

                    #self.plot2_sslup_curve.setData(df_yen_ta_graph['SSLUp'][0:plot_time_index+1].astype(float))
                    #self.plot2_ssldown_curve.setData(df_yen_ta_graph['SSLDown'][0:plot_time_index+1].astype(float))

                    self.plot2_mama_curve.setData(df_yen_ta_graph['MAMA'].astype(float))
                    df = df_yen_ta_graph['FAMA'].apply(lambda x: YEN_저가 if x < YEN_저가 else x)
                    self.plot2_fama_curve.setData(df.astype(float))                        

                    if df_yen_ta_graph.at[plot_time_index, 'PSAR'] > df_yen_ta_graph.at[plot_time_index, 'Price'] and df_yen_ta_graph.at[plot_time_index, 'MAMA'] < df_yen_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p2_3.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_yen_ta_graph.at[plot_time_index, 'PSAR'] < df_yen_ta_graph.at[plot_time_index, 'Price'] and df_yen_ta_graph.at[plot_time_index, 'MAMA'] > df_yen_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p2_3.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold') 
                    else:
                        self.label_p2_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " PSAR: {0:.1f}\n MAMA: {1:.1f}\n FAMA: {2:.1f} ".format(df_yen_ta_graph.at[plot_time_index, 'PSAR'], df_yen_ta_graph.at[plot_time_index, 'MAMA'], df_yen_ta_graph.at[plot_time_index, 'FAMA'])
                    self.label_p2_3.setText(txt)
                else:
                    self.label_p2_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p2_3.setText(" PSAR\n MAMA ")
                
                if flag_checkBox_plot2_one_eye:

                    self.plot2_oe_conv_curve.setData(df_yen_ta_graph['OE_CONV'].astype(float))
                    self.plot2_oe_base_curve.setData(df_yen_ta_graph['OE_BASE'].astype(float))
                    self.plot2_span_a_curve.setData(df_yen_ta_graph['SPAN_A'].astype(float))
                    self.plot2_span_b_curve.setData(df_yen_ta_graph['SPAN_B'].astype(float))

                    if flag_one_eye_lagging_span:
                        self.plot2_lagging_span_curve.setData(df_yen_ta_graph['LAGGING_SPAN'].astype(float))

                    if df_yen_ta_graph.at[plot_time_index, 'OE_CONV'] < df_yen_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_yen_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] < df_yen_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p2_4.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_yen_ta_graph.at[plot_time_index, 'OE_CONV'] > df_yen_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_yen_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] > df_yen_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p2_4.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p2_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " 기준선: {0:.1f}\n 전환선: {1:.1f}\n SPAN A: {2:.1f} \n SPAN B: {3:.1f} ".format\
                        (df_yen_ta_graph.at[plot_time_index, 'OE_BASE'], df_yen_ta_graph.at[plot_time_index, 'OE_CONV'], \
                            df_yen_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'], df_yen_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B'])
                    self.label_p2_4.setText(txt)
                    
                else:
                    self.label_p2_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p2_4.setText(" ONE EYE ")
            
            elif comboindex2 == 21:

                self.plot2_time_line.setValue(plot_time_index)

                txt = ' {0:.5f} '.format(ADI_저가)
                self.label_26.setText(txt)
 
                과거가 =  self.label_27.text().split()[0]    

                if ADI_현재가 > float(과거가):

                    txt = " {0:.5f} ▲ ({1:.5f}, {2:.1f}%, {3}) ".format(ADI_현재가, ADI_종가대비, ADI_등락율, ADI_진폭_틱)

                    if ADI_종가대비 > 0:
                        self.label_27.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif ADI_종가대비 < 0:
                        self.label_27.setStyleSheet('background-color: pink; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_27.setStyleSheet('background-color: pink; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_27.setText(txt)

                elif ADI_현재가 < float(과거가):

                    txt = " {0:.5f} ▼ ({1:.5f}, {2:.1f}%, {3}) ".format(ADI_현재가, ADI_종가대비, ADI_등락율, ADI_진폭_틱)

                    if ADI_종가대비 > 0:
                        self.label_27.setStyleSheet('background-color: skyblue; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif ADI_종가대비 < 0:
                        self.label_27.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_27.setStyleSheet('background-color: skyblue; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_27.setText(txt)
                else:
                    pass

                txt = ' {0:.5f} '.format(ADI_고가)
                self.label_28.setText(txt)

                if ADI_전저 > 0:
                    self.plot2_ovc_jl_line.setValue(ADI_전저)

                if ADI_전고 > 0:
                    self.plot2_ovc_jh_line.setValue(ADI_전고)

                self.plot2_ovc_close_line.setValue(ADI_전일종가)
                self.plot2_ovc_open_line.setValue(ADI_시가)

                if ADI_피봇 > 0:
                    self.plot2_ovc_pivot_line.setValue(ADI_피봇)
                    
                self.plot2_ovc_low_line.setValue(ADI_저가)
                self.plot2_ovc_high_line.setValue(ADI_고가)                 

                self.plot2_adi_curve.setData(df_adi_graph['Price'].astype(float))

                if flag_checkBox_plot2_bband:

                    self.parent.Calc_Bollinger('ADI')

                    self.plot2_bollinger_1st_upper_curve.setData(df_adi_ta_graph['BBUpper_1st'].astype(float))
                    self.plot2_bollinger_1st_middle_curve.setData(df_adi_ta_graph['BBMiddle_1st'].astype(float))
                    self.plot2_bollinger_1st_lower_curve.setData(df_adi_ta_graph['BBLower_1st'].astype(float))
                    self.plot2_bollinger_2nd_upper_curve.setData(df_adi_ta_graph['BBUpper_2nd'].astype(float))
                    self.plot2_bollinger_2nd_middle_curve.setData(df_adi_ta_graph['BBMiddle_2nd'].astype(float))
                    self.plot2_bollinger_2nd_lower_curve.setData(df_adi_ta_graph['BBLower_2nd'].astype(float))

                    self.plot2_fibonacci_line1.setValue(adi_fibonacci_levels[1])
                    self.plot2_fibonacci_line2.setValue(adi_fibonacci_levels[2])
                    self.plot2_fibonacci_line3.setValue(adi_fibonacci_levels[3])
                    self.plot2_fibonacci_line4.setValue(adi_fibonacci_levels[4])
                    self.plot2_fibonacci_line5.setValue(adi_fibonacci_levels[5])

                    if df_adi_ta_graph.at[plot_time_index, 'BBMiddle_2nd'] >= df_adi_ta_graph.at[plot_time_index, 'Price']:
                        self.label_p2_2.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p2_2.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " BB U: {0:.5f}\n BB M: {1:.5f}\n BB L: {2:.5f} ".format\
                        (df_adi_ta_graph.at[plot_time_index, 'BBUpper_2nd'], df_adi_ta_graph.at[plot_time_index, 'BBMiddle_2nd'], df_adi_ta_graph.at[plot_time_index, 'BBLower_2nd'])
                    self.label_p2_2.setText(txt)
                else:
                    self.plot2_fibonacci_line1.setValue(ADI_전일종가)
                    self.plot2_fibonacci_line2.setValue(ADI_전일종가)
                    self.plot2_fibonacci_line3.setValue(ADI_전일종가)
                    self.plot2_fibonacci_line4.setValue(ADI_전일종가)
                    self.plot2_fibonacci_line5.setValue(ADI_전일종가)

                    self.label_p2_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p2_2.setText(" BB Upper\n BB Middle\n BB Lower ")

                if flag_checkBox_plot2_psar:

                    self.parent.Calc_PSAR_MAMA('ADI')

                    self.plot2_psar_curve.setData(df_adi_ta_graph['PSAR'][0:plot_time_index+1].astype(float))

                    #self.plot2_sslup_curve.setData(df_adi_ta_graph['SSLUp'][0:plot_time_index+1].astype(float))
                    #self.plot2_ssldown_curve.setData(df_adi_ta_graph['SSLDown'][0:plot_time_index+1].astype(float))

                    self.plot2_mama_curve.setData(df_adi_ta_graph['MAMA'].astype(float))
                    df = df_adi_ta_graph['FAMA'].apply(lambda x: ADI_저가 if x < ADI_저가 else x)
                    self.plot2_fama_curve.setData(df.astype(float))                        

                    if df_adi_ta_graph.at[plot_time_index, 'PSAR'] > df_adi_ta_graph.at[plot_time_index, 'Price'] and df_adi_ta_graph.at[plot_time_index, 'MAMA'] < df_adi_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p2_3.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_adi_ta_graph.at[plot_time_index, 'PSAR'] < df_adi_ta_graph.at[plot_time_index, 'Price'] and df_adi_ta_graph.at[plot_time_index, 'MAMA'] > df_adi_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p2_3.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold') 
                    else:
                        self.label_p2_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " PSAR: {0:.5f}\n MAMA: {1:.5f}\n FAMA: {2:.5f} ".format(df_adi_ta_graph.at[plot_time_index, 'PSAR'], df_adi_ta_graph.at[plot_time_index, 'MAMA'], df_adi_ta_graph.at[plot_time_index, 'FAMA'])
                    self.label_p2_3.setText(txt)
                else:
                    self.label_p2_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p2_3.setText(" PSAR\n MAMA ")
                
                if flag_checkBox_plot2_one_eye:

                    self.plot2_oe_conv_curve.setData(df_adi_ta_graph['OE_CONV'].astype(float))
                    self.plot2_oe_base_curve.setData(df_adi_ta_graph['OE_BASE'].astype(float))
                    self.plot2_span_a_curve.setData(df_adi_ta_graph['SPAN_A'].astype(float))
                    self.plot2_span_b_curve.setData(df_adi_ta_graph['SPAN_B'].astype(float))

                    if flag_one_eye_lagging_span:
                        self.plot2_lagging_span_curve.setData(df_adi_ta_graph['LAGGING_SPAN'].astype(float))

                    if df_adi_ta_graph.at[plot_time_index, 'OE_CONV'] < df_adi_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_adi_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] < df_adi_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p2_4.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_adi_ta_graph.at[plot_time_index, 'OE_CONV'] > df_adi_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_adi_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] > df_adi_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p2_4.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p2_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " 기준선: {0:.5f}\n 전환선: {1:.5f}\n SPAN A: {2:.5f} \n SPAN B: {3:.5f} ".format\
                        (df_adi_ta_graph.at[plot_time_index, 'OE_BASE'], df_adi_ta_graph.at[plot_time_index, 'OE_CONV'], \
                            df_adi_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'], df_adi_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B'])
                    self.label_p2_4.setText(txt)
                    
                else:
                    self.label_p2_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p2_4.setText(" ONE EYE ")
            
            elif comboindex2 == 23:

                self.plot2_time_line.setValue(plot_time_index)

                df_futures_cm_ta_graph['CCI1'] = talib.CCI(df_futures_cm_ta_graph['High'], df_futures_cm_ta_graph['Low'], df_futures_cm_ta_graph['Close'], timeperiod=CCI1_PERIOD)                
                df_futures_cm_ta_graph['CCI2'] = talib.CCI(df_futures_cm_ta_graph['High'], df_futures_cm_ta_graph['Low'], df_futures_cm_ta_graph['Close'], timeperiod=CCI2_PERIOD)
                df_futures_cm_ta_graph['RSI'] = (talib.RSI(df_futures_cm_ta_graph['Close'], timeperiod=RSI_PERIOD) - RSI_OFFSET) * RSI_SCALE_FACTOR

                txt = " CCI1: {0:.0f}, CCI2: {1:.0f}, RSI: {2:.0f} ".format(df_futures_cm_ta_graph.at[plot_time_index, 'CCI1'], df_futures_cm_ta_graph.at[plot_time_index, 'CCI2'], df_futures_cm_ta_graph.at[plot_time_index, 'RSI'])

                if df_futures_cm_ta_graph.at[plot_time_index, 'CCI2'] > 0:
                    self.label_27.setStyleSheet('background-color: yellow; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                elif df_futures_cm_ta_graph.at[plot_time_index, 'CCI2'] < 0:
                    self.label_27.setStyleSheet('background-color: yellow; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                else:
                    self.label_27.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                self.label_27.setText(txt)

                self.plot2_cci_plus_100_line.setValue(100)
                self.plot2_cci_minus_100_line.setValue(-100)
                                
                self.plot2_futures_cci1_curve.setData(df_futures_cm_ta_graph['CCI1'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot2_futures_cci2_curve.setData(df_futures_cm_ta_graph['CCI2'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot2_futures_rsi_curve.setData(df_futures_cm_ta_graph['RSI'].astype(float))

            elif comboindex2 == 24:

                self.plot2_time_line.setValue(plot_time_index)

                df_sp500_ta_graph['CCI1'] = talib.CCI(df_sp500_ta_graph['High'], df_sp500_ta_graph['Low'], df_sp500_ta_graph['Close'], timeperiod=CCI1_PERIOD)
                df_sp500_ta_graph['CCI2'] = talib.CCI(df_sp500_ta_graph['High'], df_sp500_ta_graph['Low'], df_sp500_ta_graph['Close'], timeperiod=CCI2_PERIOD)
                df_sp500_ta_graph['RSI'] = (talib.RSI(df_sp500_ta_graph['Close'], timeperiod=RSI_PERIOD) - RSI_OFFSET) * RSI_SCALE_FACTOR

                txt = " CCI1: {0:.0f}, CCI2: {1:.0f}, RSI: {2:.0f} ".format(df_sp500_ta_graph.at[plot_time_index, 'CCI1'], df_sp500_ta_graph.at[plot_time_index, 'CCI2'], df_sp500_ta_graph.at[plot_time_index, 'RSI'])

                if df_sp500_ta_graph.at[plot_time_index, 'CCI2'] > 0:
                    self.label_27.setStyleSheet('background-color: yellow; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                elif df_sp500_ta_graph.at[plot_time_index, 'CCI2'] < 0:
                    self.label_27.setStyleSheet('background-color: yellow; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                else:
                    self.label_27.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                self.label_27.setText(txt)

                self.plot2_cci_plus_100_line.setValue(100)
                self.plot2_cci_minus_100_line.setValue(-100)
                
                self.plot2_sp500_cci1_curve.setData(df_sp500_ta_graph['CCI1'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot2_sp500_cci2_curve.setData(df_sp500_ta_graph['CCI2'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot2_sp500_rsi_curve.setData(df_sp500_ta_graph['RSI'].astype(float))

            elif comboindex2 == 25:

                self.plot2_time_line.setValue(plot_time_index)

                df_dow_ta_graph['CCI1'] = talib.CCI(df_dow_ta_graph['High'], df_dow_ta_graph['Low'], df_dow_ta_graph['Close'], timeperiod=CCI1_PERIOD)
                df_dow_ta_graph['CCI2'] = talib.CCI(df_dow_ta_graph['High'], df_dow_ta_graph['Low'], df_dow_ta_graph['Close'], timeperiod=CCI2_PERIOD)
                df_dow_ta_graph['RSI'] = (talib.RSI(df_dow_ta_graph['Close'], timeperiod=RSI_PERIOD) - RSI_OFFSET) * RSI_SCALE_FACTOR

                txt = " CCI1: {0:.0f}, CCI2: {1:.0f}, RSI: {2:.0f} ".format(df_dow_ta_graph.at[plot_time_index, 'CCI1'], df_dow_ta_graph.at[plot_time_index, 'CCI2'], df_dow_ta_graph.at[plot_time_index, 'RSI'])

                if df_dow_ta_graph.at[plot_time_index, 'CCI2'] > 0:
                    self.label_27.setStyleSheet('background-color: yellow; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                elif df_dow_ta_graph.at[plot_time_index, 'CCI2'] < 0:
                    self.label_27.setStyleSheet('background-color: yellow; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                else:
                    self.label_27.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                self.label_27.setText(txt)

                self.plot2_cci_plus_100_line.setValue(100)
                self.plot2_cci_minus_100_line.setValue(-100)
                
                self.plot2_dow_cci1_curve.setData(df_dow_ta_graph['CCI1'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot2_dow_cci2_curve.setData(df_dow_ta_graph['CCI2'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot2_dow_rsi_curve.setData(df_dow_ta_graph['RSI'].astype(float))

            elif comboindex2 == 26:

                self.plot2_time_line.setValue(plot_time_index)

                df_nasdaq_ta_graph['CCI1'] = talib.CCI(df_nasdaq_ta_graph['High'], df_nasdaq_ta_graph['Low'], df_nasdaq_ta_graph['Close'], timeperiod=CCI1_PERIOD)
                df_nasdaq_ta_graph['CCI2'] = talib.CCI(df_nasdaq_ta_graph['High'], df_nasdaq_ta_graph['Low'], df_nasdaq_ta_graph['Close'], timeperiod=CCI2_PERIOD)
                df_nasdaq_ta_graph['RSI'] = (talib.RSI(df_nasdaq_ta_graph['Close'], timeperiod=RSI_PERIOD) - RSI_OFFSET) * RSI_SCALE_FACTOR

                txt = " CCI1: {0:.0f}, CCI2: {1:.0f}, RSI: {2:.0f} ".format(df_nasdaq_ta_graph.at[plot_time_index, 'CCI1'], df_nasdaq_ta_graph.at[plot_time_index, 'CCI2'], df_nasdaq_ta_graph.at[plot_time_index, 'RSI'])

                if df_nasdaq_ta_graph.at[plot_time_index, 'CCI2'] > 0:
                    self.label_27.setStyleSheet('background-color: yellow; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                elif df_nasdaq_ta_graph.at[plot_time_index, 'CCI2'] < 0:
                    self.label_27.setStyleSheet('background-color: yellow; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                else:
                    self.label_27.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                self.label_27.setText(txt)

                self.plot2_cci_plus_100_line.setValue(100)
                self.plot2_cci_minus_100_line.setValue(-100)
                
                self.plot2_nasdaq_cci1_curve.setData(df_nasdaq_ta_graph['CCI1'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot2_nasdaq_cci2_curve.setData(df_nasdaq_ta_graph['CCI2'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot2_nasdaq_rsi_curve.setData(df_nasdaq_ta_graph['RSI'].astype(float))

            elif comboindex2 == 27:

                self.plot2_time_line.setValue(plot_time_index)

                df_hsi_ta_graph['CCI1'] = talib.CCI(df_hsi_ta_graph['High'], df_hsi_ta_graph['Low'], df_hsi_ta_graph['Close'], timeperiod=CCI1_PERIOD)
                df_hsi_ta_graph['CCI2'] = talib.CCI(df_hsi_ta_graph['High'], df_hsi_ta_graph['Low'], df_hsi_ta_graph['Close'], timeperiod=CCI2_PERIOD)
                df_hsi_ta_graph['RSI'] = (talib.RSI(df_hsi_ta_graph['Close'], timeperiod=RSI_PERIOD) - RSI_OFFSET) * RSI_SCALE_FACTOR

                txt = " CCI1: {0:.0f}, CCI2: {1:.0f}, RSI: {2:.0f} ".format(df_hsi_ta_graph.at[plot_time_index, 'CCI1'], df_hsi_ta_graph.at[plot_time_index, 'CCI2'], df_hsi_ta_graph.at[plot_time_index, 'RSI'])

                if df_hsi_ta_graph.at[plot_time_index, 'CCI2'] > 0:
                    self.label_27.setStyleSheet('background-color: yellow; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                elif df_hsi_ta_graph.at[plot_time_index, 'CCI2'] < 0:
                    self.label_27.setStyleSheet('background-color: yellow; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                else:
                    self.label_27.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                self.label_27.setText(txt)

                self.plot2_cci_plus_100_line.setValue(100)
                self.plot2_cci_minus_100_line.setValue(-100)
                
                self.plot2_hsi_cci1_curve.setData(df_hsi_ta_graph['CCI1'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot2_hsi_cci2_curve.setData(df_hsi_ta_graph['CCI2'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot2_hsi_rsi_curve.setData(df_hsi_ta_graph['RSI'].astype(float))

            elif comboindex2 == 28:

                self.plot2_time_line.setValue(plot_time_index)

                df_wti_ta_graph['CCI1'] = talib.CCI(df_wti_ta_graph['High'], df_wti_ta_graph['Low'], df_wti_ta_graph['Close'], timeperiod=CCI1_PERIOD)
                df_wti_ta_graph['CCI2'] = talib.CCI(df_wti_ta_graph['High'], df_wti_ta_graph['Low'], df_wti_ta_graph['Close'], timeperiod=CCI2_PERIOD)
                df_wti_ta_graph['RSI'] = (talib.RSI(df_wti_ta_graph['Close'], timeperiod=RSI_PERIOD) - RSI_OFFSET) * RSI_SCALE_FACTOR

                txt = " CCI1: {0:.0f}, CCI2: {1:.0f}, RSI: {2:.0f} ".format(df_wti_ta_graph.at[plot_time_index, 'CCI1'], df_wti_ta_graph.at[plot_time_index, 'CCI2'], df_wti_ta_graph.at[plot_time_index, 'RSI'])

                if df_wti_ta_graph.at[plot_time_index, 'CCI2'] > 0:
                    self.label_27.setStyleSheet('background-color: yellow; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                elif df_wti_ta_graph.at[plot_time_index, 'CCI2'] < 0:
                    self.label_27.setStyleSheet('background-color: yellow; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                else:
                    self.label_27.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                self.label_27.setText(txt)

                self.plot2_cci_plus_100_line.setValue(100)
                self.plot2_cci_minus_100_line.setValue(-100)
                
                self.plot2_wti_cci1_curve.setData(df_wti_ta_graph['CCI1'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot2_wti_cci2_curve.setData(df_wti_ta_graph['CCI2'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot2_wti_rsi_curve.setData(df_wti_ta_graph['RSI'].astype(float))

            elif comboindex2 == 29:

                self.plot2_time_line.setValue(plot_time_index)

                df_gold_ta_graph['CCI1'] = talib.CCI(df_gold_ta_graph['High'], df_gold_ta_graph['Low'], df_gold_ta_graph['Close'], timeperiod=CCI1_PERIOD)
                df_gold_ta_graph['CCI2'] = talib.CCI(df_gold_ta_graph['High'], df_gold_ta_graph['Low'], df_gold_ta_graph['Close'], timeperiod=CCI2_PERIOD)
                df_gold_ta_graph['RSI'] = (talib.RSI(df_gold_ta_graph['Close'], timeperiod=RSI_PERIOD) - RSI_OFFSET) * RSI_SCALE_FACTOR

                txt = " CCI1: {0:.0f}, CCI2: {1:.0f}, RSI: {2:.0f} ".format(df_gold_ta_graph.at[plot_time_index, 'CCI1'], df_gold_ta_graph.at[plot_time_index, 'CCI2'], df_gold_ta_graph.at[plot_time_index, 'RSI'])

                if df_gold_ta_graph.at[plot_time_index, 'CCI2'] > 0:
                    self.label_27.setStyleSheet('background-color: yellow; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                elif df_gold_ta_graph.at[plot_time_index, 'CCI2'] < 0:
                    self.label_27.setStyleSheet('background-color: yellow; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                else:
                    self.label_27.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                self.label_27.setText(txt)

                self.plot2_cci_plus_100_line.setValue(100)
                self.plot2_cci_minus_100_line.setValue(-100)
                
                self.plot2_gold_cci1_curve.setData(df_gold_ta_graph['CCI1'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot2_gold_cci2_curve.setData(df_gold_ta_graph['CCI2'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot2_gold_rsi_curve.setData(df_gold_ta_graph['RSI'].astype(float))

            elif comboindex2 == 30:

                self.plot2_time_line.setValue(plot_time_index)

                df_euro_ta_graph['CCI1'] = talib.CCI(df_euro_ta_graph['High'], df_euro_ta_graph['Low'], df_euro_ta_graph['Close'], timeperiod=CCI1_PERIOD)
                df_euro_ta_graph['CCI2'] = talib.CCI(df_euro_ta_graph['High'], df_euro_ta_graph['Low'], df_euro_ta_graph['Close'], timeperiod=CCI2_PERIOD)
                df_euro_ta_graph['RSI'] = (talib.RSI(df_euro_ta_graph['Close'], timeperiod=RSI_PERIOD) - RSI_OFFSET) * RSI_SCALE_FACTOR

                txt = " CCI1: {0:.0f}, CCI2: {1:.0f}, RSI: {2:.0f} ".format(df_euro_ta_graph.at[plot_time_index, 'CCI1'], df_euro_ta_graph.at[plot_time_index, 'CCI2'], df_euro_ta_graph.at[plot_time_index, 'RSI'])

                if df_euro_ta_graph.at[plot_time_index, 'CCI2'] > 0:
                    self.label_27.setStyleSheet('background-color: yellow; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                elif df_euro_ta_graph.at[plot_time_index, 'CCI2'] < 0:
                    self.label_27.setStyleSheet('background-color: yellow; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                else:
                    self.label_27.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                self.label_27.setText(txt)

                self.plot2_cci_plus_100_line.setValue(100)
                self.plot2_cci_minus_100_line.setValue(-100)
                
                self.plot2_euro_cci1_curve.setData(df_euro_ta_graph['CCI1'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot2_euro_cci2_curve.setData(df_euro_ta_graph['CCI2'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot2_euro_rsi_curve.setData(df_euro_ta_graph['RSI'].astype(float))

            elif comboindex2 == 31:

                self.plot2_time_line.setValue(plot_time_index)

                df_yen_ta_graph['CCI1'] = talib.CCI(df_yen_ta_graph['High'], df_yen_ta_graph['Low'], df_yen_ta_graph['Close'], timeperiod=CCI1_PERIOD)
                df_yen_ta_graph['CCI2'] = talib.CCI(df_yen_ta_graph['High'], df_yen_ta_graph['Low'], df_yen_ta_graph['Close'], timeperiod=CCI2_PERIOD)
                df_yen_ta_graph['RSI'] = (talib.RSI(df_yen_ta_graph['Close'], timeperiod=RSI_PERIOD) - RSI_OFFSET) * RSI_SCALE_FACTOR

                txt = " CCI1: {0:.0f}, CCI2: {1:.0f}, RSI: {2:.0f} ".format(df_yen_ta_graph.at[plot_time_index, 'CCI1'], df_yen_ta_graph.at[plot_time_index, 'CCI2'], df_yen_ta_graph.at[plot_time_index, 'RSI'])

                if df_yen_ta_graph.at[plot_time_index, 'CCI2'] > 0:
                    self.label_27.setStyleSheet('background-color: yellow; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                elif df_yen_ta_graph.at[plot_time_index, 'CCI2'] < 0:
                    self.label_27.setStyleSheet('background-color: yellow; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                else:
                    self.label_27.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                self.label_27.setText(txt)

                self.plot2_cci_plus_100_line.setValue(100)
                self.plot2_cci_minus_100_line.setValue(-100)
                
                self.plot2_yen_cci1_curve.setData(df_yen_ta_graph['CCI1'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot2_yen_cci2_curve.setData(df_yen_ta_graph['CCI2'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot2_yen_rsi_curve.setData(df_yen_ta_graph['RSI'].astype(float))

            elif comboindex2 == 32:

                self.plot2_time_line.setValue(plot_time_index)

                df_adi_ta_graph['CCI1'] = talib.CCI(df_adi_ta_graph['High'], df_adi_ta_graph['Low'], df_adi_ta_graph['Close'], timeperiod=CCI1_PERIOD)
                df_adi_ta_graph['CCI2'] = talib.CCI(df_adi_ta_graph['High'], df_adi_ta_graph['Low'], df_adi_ta_graph['Close'], timeperiod=CCI2_PERIOD)
                df_adi_ta_graph['RSI'] = (talib.RSI(df_adi_ta_graph['Close'], timeperiod=RSI_PERIOD) - RSI_OFFSET) * RSI_SCALE_FACTOR

                txt = " CCI1: {0:.0f}, CCI2: {1:.0f}, RSI: {2:.0f} ".format(df_adi_ta_graph.at[plot_time_index, 'CCI1'], df_adi_ta_graph.at[plot_time_index, 'CCI2'], df_adi_ta_graph.at[plot_time_index, 'RSI'])

                if df_adi_ta_graph.at[plot_time_index, 'CCI2'] > 0:
                    self.label_27.setStyleSheet('background-color: yellow; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                elif df_adi_ta_graph.at[plot_time_index, 'CCI2'] < 0:
                    self.label_27.setStyleSheet('background-color: yellow; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                else:
                    self.label_27.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                self.label_27.setText(txt)

                self.plot2_cci_plus_100_line.setValue(100)
                self.plot2_cci_minus_100_line.setValue(-100)
                
                self.plot2_adi_cci1_curve.setData(df_adi_ta_graph['CCI1'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot2_adi_cci2_curve.setData(df_adi_ta_graph['CCI2'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot2_adi_rsi_curve.setData(df_adi_ta_graph['RSI'].astype(float))
            else:
                pass         
        
        except Exception as e:

            txt = '[{0:02d}:{1:02d}:{2:02d}] Exception : update_plot2 에서 {3} \n상기 오류가 발생했습니다.\r'.format(dt.hour, dt.minute, dt.second, traceback.format_exc())
            self.parent.textBrowser.append(txt)

        finally:
            if CME_체결시간 == '000000':
                txt = ' [{0:02d}:{1:02d}:{2:02d}] {3:.2f} ms '.format(dt.hour, dt.minute, dt.second, plot2_processing_time)
            else:
                if flag_put_low_in_fixed_coreval:
                    self.label_time_2.setStyleSheet('background-color: black; color: yellow; font-family: Consolas; font-size: 9pt; font: Bold')
                    txt = ' ♠ PL({0}) {1:.2f} ms '.format(put_low_val_in_fixed_coreval, plot2_processing_time)
                else:
                    self.label_time_2.setStyleSheet('background-color: lawngreen; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    txt = ' {0:.2f} ms '.format(plot2_processing_time)           

            self.label_time_2.setText(txt)

            flag_plot2_update_is_running = False

    @logging_time_plot3
    #@pyqtSlot()    
    def update_plot3(self):

        global flag_plot3_update_is_running        
        global flag_calltable_checkstate_changed, flag_puttable_checkstate_changed        

        try:        
            dt = datetime.now()

            flag_plot3_update_is_running = True                        

            # Plot3 그래프 그리기
            # 선물가격
            if comboindex3 == 2:
                
                self.plot3_time_line.setValue(plot_time_index)

                txt = ' {0} '.format(근월물_선물_피봇)
                self.label_34.setText(txt)

                txt = ' {0}/{1} '.format(근월물_선물_시가, 차월물_선물_시가)
                self.label_35.setText(txt)
                
                txt = ' {0} '.format(근월물_선물_저가)
                self.label_36.setText(txt)       

                과거가 =  self.label_37.text().split()[0]

                if 근월물_선물_현재가 > float(과거가):

                    txt = " {0} ▲ ({1:.2f}, {2:0.1f}%, {3:.2f}), kp200 : {4:.2f} ".format(근월물_선물_현재가, 근월물_선물_종가대비, 근월물_선물_종가대비_등락율, 근월물_선물_진폭, kp200_현재가)

                    if 근월물_선물_종가대비 > 0:
                        self.label_37.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif 근월물_선물_종가대비 < 0:
                        self.label_37.setStyleSheet('background-color: pink; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_37.setStyleSheet('background-color: pink; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_37.setText(txt)

                elif 근월물_선물_현재가 < float(과거가):

                    txt = " {0} ▼ ({1:.2f}, {2:0.1f}%, {3:.2f}), kp200 : {4:.2f} ".format(근월물_선물_현재가, 근월물_선물_종가대비, 근월물_선물_종가대비_등락율, 근월물_선물_진폭, kp200_현재가)

                    if 근월물_선물_종가대비 > 0:
                        self.label_37.setStyleSheet('background-color: skyblue; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif 근월물_선물_종가대비 < 0:
                        self.label_37.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_37.setStyleSheet('background-color: skyblue; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_37.setText(txt)
                else:
                    pass

                txt = ' {0} '.format(근월물_선물_고가)
                self.label_38.setText(txt)                
                
                self.plot3_kp200_line[3].setValue(KP200_COREVAL[3])
                self.plot3_kp200_line[4].setValue(KP200_COREVAL[4])
                self.plot3_kp200_line[5].setValue(KP200_COREVAL[5])
                self.plot3_kp200_line[6].setValue(KP200_COREVAL[6])                

                if 근월물_선물_저가 < KP200_COREVAL[3] or kp200_저가 < KP200_COREVAL[3]:
                    self.plot3_kp200_line[2].setValue(KP200_COREVAL[2])
                else:
                    pass

                if 근월물_선물_저가 < KP200_COREVAL[2] or kp200_저가 < KP200_COREVAL[2]:
                    self.plot3_kp200_line[1].setValue(KP200_COREVAL[1])
                else:
                    pass
                
                if 근월물_선물_고가 > KP200_COREVAL[6] or kp200_고가 > KP200_COREVAL[6]:
                    self.plot3_kp200_line[7].setValue(KP200_COREVAL[7])
                else:
                    pass

                if 근월물_선물_고가 > KP200_COREVAL[7] or kp200_고가 > KP200_COREVAL[7]:
                    self.plot3_kp200_line[8].setValue(KP200_COREVAL[8])
                else:
                    pass                
                
                self.plot3_fut_jl_line.setValue(근월물_선물_전저)
                self.plot3_fut_jh_line.setValue(근월물_선물_전고)
                self.plot3_fut_close_line.setValue(근월물_선물_종가)                
                self.plot3_fut_open_line.setValue(근월물_선물_시가)
                self.plot3_fut_low_line.setValue(근월물_선물_저가)
                self.plot3_fut_pivot_line.setValue(근월물_선물_피봇)
                self.plot3_fut_high_line.setValue(근월물_선물_고가)                

                if DayTime:
                    self.plot3_kp200_curve.setData(df_kp200_graph['Price'].astype(float))
                    self.plot3_fut_cm_price_curve.setData(df_futures_cm_graph['Price'].astype(float))
                    self.plot3_fut_nm_price_curve.setData(df_futures_nm_graph['Price'].astype(float))
                else:
                    pass

                if flag_checkBox_plot3_bband:

                    self.parent.Calc_Bollinger('FUT')
                
                    self.plot3_bollinger_1st_upper_curve.setData(df_futures_cm_ta_graph['BBUpper_1st'].astype(float))
                    self.plot3_bollinger_1st_middle_curve.setData(df_futures_cm_ta_graph['BBMiddle_1st'].astype(float))
                    self.plot3_bollinger_1st_lower_curve.setData(df_futures_cm_ta_graph['BBLower_1st'].astype(float))
                    self.plot3_bollinger_2nd_upper_curve.setData(df_futures_cm_ta_graph['BBUpper_2nd'].astype(float))
                    self.plot3_bollinger_2nd_middle_curve.setData(df_futures_cm_ta_graph['BBMiddle_2nd'].astype(float))
                    self.plot3_bollinger_2nd_lower_curve.setData(df_futures_cm_ta_graph['BBLower_2nd'].astype(float))

                    self.plot3_fibonacci_line1.setValue(futures_fibonacci_levels[1])
                    self.plot3_fibonacci_line2.setValue(futures_fibonacci_levels[2])
                    self.plot3_fibonacci_line3.setValue(futures_fibonacci_levels[3])
                    self.plot3_fibonacci_line4.setValue(futures_fibonacci_levels[4])
                    self.plot3_fibonacci_line5.setValue(futures_fibonacci_levels[5])

                    if df_futures_cm_ta_graph.at[plot_time_index, 'BBMiddle_2nd'] >= df_futures_cm_ta_graph.at[plot_time_index, 'Price']:
                        self.label_p3_2.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p3_2.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " BB U: {0:.2f}\n BB M: {1:.2f}\n BB L: {2:.2f} ".format\
                        (df_futures_cm_ta_graph.at[plot_time_index, 'BBUpper_2nd'], df_futures_cm_ta_graph.at[plot_time_index, 'BBMiddle_2nd'], df_futures_cm_ta_graph.at[plot_time_index, 'BBLower_2nd'])
                    self.label_p3_2.setText(txt)
                else:
                    self.plot3_fibonacci_line1.setValue(근월물_선물_종가)
                    self.plot3_fibonacci_line2.setValue(근월물_선물_종가)
                    self.plot3_fibonacci_line3.setValue(근월물_선물_종가)
                    self.plot3_fibonacci_line4.setValue(근월물_선물_종가)
                    self.plot3_fibonacci_line5.setValue(근월물_선물_종가)

                    self.label_p3_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p3_2.setText(" BB Upper\n BB Middle\n BB Lower ")

                if flag_checkBox_plot3_psar:

                    self.parent.Calc_PSAR_MAMA('FUT')

                    self.plot3_psar_curve.setData(df_futures_cm_ta_graph['PSAR'][0:plot_time_index+1].astype(float))

                    #self.plot3_sslup_curve.setData(df_futures_cm_ta_graph['SSLUp'][0:plot_time_index+1].astype(float))
                    #self.plot3_ssldown_curve.setData(df_futures_cm_ta_graph['SSLDown'][0:plot_time_index+1].astype(float))

                    self.plot3_mama_curve.setData(df_futures_cm_ta_graph['MAMA'].astype(float))
                    df = df_futures_cm_ta_graph['FAMA'].apply(lambda x: 근월물_선물_저가 if x < 근월물_선물_저가 else x)
                    self.plot3_fama_curve.setData(df.astype(float))

                    if df_futures_cm_ta_graph.at[plot_time_index, 'PSAR'] > df_futures_cm_ta_graph.at[plot_time_index, 'Price'] and df_futures_cm_ta_graph.at[plot_time_index, 'MAMA'] < df_futures_cm_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p3_3.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_futures_cm_ta_graph.at[plot_time_index, 'PSAR'] < df_futures_cm_ta_graph.at[plot_time_index, 'Price'] and df_futures_cm_ta_graph.at[plot_time_index, 'MAMA'] > df_futures_cm_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p3_3.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold') 
                    else:
                        self.label_p3_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " PSAR: {0:.2f}\n MAMA: {1:.2f}\n FAMA: {2:.2f} ".format(df_futures_cm_ta_graph.at[plot_time_index, 'PSAR'], df_futures_cm_ta_graph.at[plot_time_index, 'MAMA'], df_futures_cm_ta_graph.at[plot_time_index, 'FAMA'])
                    self.label_p3_3.setText(txt)
                else:
                    self.label_p3_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p3_3.setText(" PSAR\n MAMA ")
                
                if flag_checkBox_plot3_one_eye:

                    self.plot3_oe_conv_curve.setData(df_futures_cm_ta_graph['OE_CONV'].astype(float))
                    self.plot3_oe_base_curve.setData(df_futures_cm_ta_graph['OE_BASE'].astype(float))
                    self.plot3_span_a_curve.setData(df_futures_cm_ta_graph['SPAN_A'].astype(float))
                    self.plot3_span_b_curve.setData(df_futures_cm_ta_graph['SPAN_B'].astype(float))

                    if flag_one_eye_lagging_span:
                        self.plot3_lagging_span_curve.setData(df_futures_cm_ta_graph['LAGGING_SPAN'].astype(float))

                    if df_futures_cm_ta_graph.at[plot_time_index, 'OE_CONV'] < df_futures_cm_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_futures_cm_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] < df_futures_cm_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p3_4.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_futures_cm_ta_graph.at[plot_time_index, 'OE_CONV'] > df_futures_cm_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_futures_cm_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] > df_futures_cm_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p3_4.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p3_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " 기준선: {0:.2f}\n 전환선: {1:.2f}\n SPAN A: {2:.2f} \n SPAN B: {3:.2f} ".format\
                        (df_futures_cm_ta_graph.at[plot_time_index, 'OE_BASE'], df_futures_cm_ta_graph.at[plot_time_index, 'OE_CONV'], \
                            df_futures_cm_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'], df_futures_cm_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B'])
                    self.label_p3_4.setText(txt)
                    
                else:
                    self.label_p3_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p3_4.setText(" ONE EYE ")

            elif comboindex3 == 3:
                
                self.plot3_time_line.setValue(plot_time_index)

                txt = " {0:.2f}({1:.0f}/{2:.0f}) ".format(풋잔량비, put_quote['매수잔량'], put_quote['매도잔량'])
                self.label_36.setText(txt)

                txt = " CM: {0:.2f}({1:.0f}/{2:.0f}), NM: {3:.2f}({4:.0f}/{5:.0f}), [▼: {6:.2f}, ▲: {7:.2f}] ".format(\
                    선물_근월물_호가_잔량비, 근월물_매수호가_총수량, 근월물_매도호가_총수량, 선물_차월물_호가_잔량비, \
                    차월물_매수호가_총수량, 차월물_매도호가_총수량, 차월물_선물_호가잔량비_최소, 차월물_선물_호가잔량비_최대)

                if fut_quote_energy_direction == 'call':
                    self.label_37.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                elif fut_quote_energy_direction == 'put':
                    self.label_37.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                else:
                    self.label_37.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                self.label_37.setText(txt)
                
                txt = " {0:.2f}({1:.0f}/{2:.0f}) ".format(콜잔량비, call_quote['매수잔량'], call_quote['매도잔량'])
                self.label_38.setText(txt)

                self.plot3_call_quote_curve.setData(df_call_information_graph['quote_remainder_ratio'].astype(float))
                self.plot3_put_quote_curve.setData(df_put_information_graph['quote_remainder_ratio'].astype(float))

                if DayTime:
                    self.plot3_fut_cm_quote_remainder_ratio_curve.setData(df_futures_cm_graph['c_quote_remainder_ratio'].astype(float))
                    self.plot3_fut_nm_quote_remainder_ratio_curve.setData(df_futures_cm_graph['n_quote_remainder_ratio'].astype(float))
                    self.plot3_nm_futures_quote_remainder_ratio_bottom_line.setValue(차월물_선물_호가잔량비_최소)
                    self.plot3_nm_futures_quote_remainder_ratio_upper_line.setValue(차월물_선물_호가잔량비_최대)
                else:
                    pass

            elif comboindex3 == 4:
                
                self.plot3_time_line.setValue(plot_time_index)

                txt = " {0:.0f} ".format(put_volume_power)
                self.label_36.setText(txt)

                txt = " {0:.0f} ".format(fut_cm_volume_power)

                if fut_cm_volume_power > 0:
                    self.label_37.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                else:
                    self.label_37.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                self.label_37.setText(txt)
                
                txt = " {0:.0f} ".format(call_volume_power)
                self.label_38.setText(txt)

                if DayTime:
                    self.plot3_fut_volume_curve.setData(df_futures_cm_graph['Volume'].astype(float))
                else:
                    pass
                                
                self.plot3_call_volume_curve.setData(df_call_information_graph['Volume'].astype(float))
                self.plot3_put_volume_curve.setData(df_put_information_graph['Volume'].astype(float))

            # 옵션가격
            elif comboindex3 == 5:
                
                self.plot3_time_line.setValue(plot_time_index)

                if DayTime:

                    # 등가표시
                    txt = ' 등가: {0} '.format(atm_txt)
                    self.label_31.setText(txt)

                    txt = ' 시작 중심가: {0:.2f} '.format(INIT_CENTER_VAL)
                    self.label_32.setText(txt)

                    txt = ' 하단: {0:.2f} '.format(옵션_중심가/GOLDEN_RATIO)                        

                    self.label_33.setText(txt)

                    txt = ' 상단: {0:.2f} '.format(옵션_중심가*GOLDEN_RATIO)
                    self.label_34.setText(txt)

                    txt = ' {0:.2f}({1:.2f}, {2:.2f}%) '.format(put_atm_value, df_put.at[ATM_INDEX, '대비'], (put_atm_value / df_put.at[ATM_INDEX, '시가'] - 1) * 100)
                    self.label_36.setText(txt)

                    txt = ' 중심가: {0:.2f} '.format(옵션_중심가)
                    self.label_37.setText(txt)

                    txt = ' {0:.2f}({1:.2f}, {2:.2f}%) '.format(call_atm_value, df_call.at[ATM_INDEX, '대비'], (call_atm_value / df_call.at[ATM_INDEX, '시가'] - 1) * 100)
                    self.label_38.setText(txt)
                else:
                    pass

                if flag_calltable_checkstate_changed:
                    flag_calltable_checkstate_changed = False
                    for i in range(option_pairs_count):
                        self.plot3_call_curve[i].clear()
                else:
                    pass

                if flag_puttable_checkstate_changed:
                    flag_puttable_checkstate_changed = False
                    for i in range(option_pairs_count):
                        self.plot3_put_curve[i].clear()
                else:
                    pass
                
                # 선택된 콜그래프 그리기
                if selected_call:
                    for i in range(len(selected_call)):
                        self.plot3_call_curve[i].setData(df_call_graph[selected_call[i]]['Price'].astype(float))
                else:
                    pass                 

                # 선택된 풋그래프 그리기
                if selected_put:
                    for i in range(len(selected_put)):
                        self.plot3_put_curve[i].setData(df_put_graph[selected_put[i]]['Price'].astype(float))
                else:
                    pass

                if DayTime:        
                    self.plot3_center_val_lower_line.setValue(옵션_중심가/GOLDEN_RATIO)
                    self.plot3_center_val_line.setValue(옵션_중심가)
                    self.plot3_center_val_upper_line.setValue(옵션_중심가*GOLDEN_RATIO)

                    # 중심가 그리기
                    self.plot3_center_val_curve.setData(df_call_information_graph['centerval'].astype(float))
                else:
                    pass

            elif comboindex3 == 6:
                
                self.plot3_time_line.setValue(plot_time_index)

                txt = " {0:.2f}({1:.0f}/{2:.0f}), [▼, ▲: {4:.2f}] ".format(풋잔량비, put_quote['매수잔량'], put_quote['매도잔량'], 풋_잔량비_최소, 풋_잔량비_최대)
                self.label_36.setText(txt)
                
                txt = " {0:.2f}({1:.0f}/{2:.0f}), [▼, ▲: {4:.2f}] ".format(콜잔량비, call_quote['매수잔량'], call_quote['매도잔량'], 콜_잔량비_최소, 콜_잔량비_최대)
                self.label_38.setText(txt)

                self.plot3_call_quote_curve.setData(df_call_information_graph['quote_remainder_ratio'].astype(float))
                self.plot3_put_quote_curve.setData(df_put_information_graph['quote_remainder_ratio'].astype(float))

                self.plot3_option_quote_remainder_ratio_bottom_line.setValue(옵션_잔량비_최소)
                self.plot3_option_quote_remainder_ratio_upper_line.setValue(옵션_잔량비_최대)        

            elif comboindex3 == 7:
                
                self.plot3_time_line.setValue(plot_time_index)

                txt = " {0:.2f}({1:.2f}) ".format(풋_수정미결퍼센트, put_oi_init_percent)
                self.label_36.setText(txt)
                
                txt = " {0:.2f}({1:.2f}) ".format(콜_수정미결퍼센트, call_oi_init_percent)
                self.label_38.setText(txt)

                self.plot3_call_oi_curve.setData(df_call_information_graph['open_interest'].astype(float))
                self.plot3_put_oi_curve.setData(df_put_information_graph['open_interest'].astype(float))
            
            elif comboindex3 == 8:
                
                self.plot3_time_line.setValue(plot_time_index)

                txt = " {0:.2f}({1}) {2:.2f} ".format(SP500_시가대비_등락율, SP500_현재가, SP500_FUT_시가_등락율비)
                self.label_35.setText(txt)

                txt = " {0:.2f}({1}) ".format(put_otm_cdb_percent_mean, put_atm_value)
                self.label_36.setText(txt)

                txt = " {0:.2f}({1}) ".format(call_otm_cdb_percent_mean, call_atm_value)
                self.label_38.setText(txt)
                
                self.plot3_call_drate_curve.setData(df_call_information_graph['Drate'].astype(float))
                self.plot3_put_drate_curve.setData(df_put_information_graph['Drate'].astype(float))
                
                self.plot3_cme_drate_curve.setData(SP500_FUT_시가_등락율비 * df_sp500_graph['Drate'].astype(float) + DRATE_OFFSET)
                
                if DayTime:

                    txt = " {0:.2f}({1}), Gap : {2:.2f} ".format(근월물_선물_시가대비_등락율, 근월물_선물_현재가, drate_gap)

                    if drate_gap > 0:
                        self.label_37.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif drate_gap < 0:
                        self.label_37.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_37.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_37.setText(txt)

                    if not np.isnan(df_futures_cm_graph.at[plot_time_index, 'Drate']):
                        self.plot3_fut_cm_drate_curve.setData(plot_drate_scale_factor * df_futures_cm_graph['Drate'].astype(float))

                    if not np.isnan(df_futures_nm_graph.at[plot_time_index, 'Drate']):
                        self.plot3_fut_nm_drate_curve.setData(plot_drate_scale_factor * df_futures_nm_graph['Drate'].astype(float))                        
                else:
                    pass
            
            elif comboindex3 == 10:
                
                self.plot3_time_line.setValue(plot_time_index)

                if DayTime:
                    txt = " 기관현물: {0} ".format(기관현물_순매수)
                    self.label_31.setText(txt)

                    txt = " 기관선물: {0} ".format(기관선물_순매수)
                    self.label_32.setText(txt)

                    txt = " 개인현물: {0} ".format(개인현물_순매수)
                    self.label_33.setText(txt)

                    txt = " 개인선물: {0} ".format(개인선물_순매수)
                    self.label_34.setText(txt)

                    if 프로그램_순매수 > 0 and 현물_총순매수 > 0:

                        if 외인선물_순매수 < 0 and 외인현물_순매수 < 0:
                            txt = ' - '
                            self.label_35.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                            self.label_35.setText(txt)

                        if (외인선물_순매수 < 0 and 외인현물_순매수 > 0) or (외인선물_순매수 > 0 and 외인현물_순매수 < 0):
                            txt = ' 외인수급 Cross '
                            self.label_35.setStyleSheet('background-color: black; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                            self.label_35.setText(txt)

                        if 외인선물_순매수 > 0 and 외인현물_순매수 > 0:
                            txt = ' 수급 Call! '
                            self.label_35.setStyleSheet('background-color: magenta; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                            self.label_35.setText(txt)

                    elif 프로그램_순매수 < 0 and 현물_총순매수 < 0:

                        if 외인선물_순매수 > 0 and 외인현물_순매수 > 0:
                            txt = ' - '
                            self.label_35.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                            self.label_35.setText(txt)

                        if (외인선물_순매수 > 0 and 외인현물_순매수 < 0) or (외인선물_순매수 < 0 and 외인현물_순매수 > 0):
                            txt = ' 외인수급 Cross '
                            self.label_35.setStyleSheet('background-color: black; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                            self.label_35.setText(txt)          

                        if 외인선물_순매수 < 0 and 외인현물_순매수 < 0:
                            txt = ' 수급 Put! '
                            self.label_35.setStyleSheet('background-color: cyan; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                            self.label_35.setText(txt)
                    else:
                        txt = ' 수급종합 Cross '
                        self.label_35.setStyleSheet('background-color: black; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                        self.label_35.setText(txt)

                    if not np.isnan(프로그램_순매수):
                        txt = " Prog/F.S: {0:.0f}/{1:.0f} ".format(프로그램_순매수, 외인현물_순매수)

                        if 프로그램_순매수 <= 0:
                            self.label_36.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                        else:
                            self.label_36.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                        self.label_36.setText(txt)
                    else:
                        pass

                    txt = " {0:.0f} ".format(fut_cm_volume_power)

                    if fut_cm_volume_power > 0:
                        self.label_37.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_37.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_37.setText(txt)
                    
                    if not np.isnan(현물_총순매수):
                        txt = " S.S/F.F: {0:.0f}/{1:.0f} ".format(현물_총순매수, 외인선물_순매수)

                        if 현물_총순매수 <= 0:
                            self.label_38.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                        else:
                            self.label_38.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                        self.label_38.setText(txt)
                    else:
                        pass

                    self.plot3_fut_volume_curve.setData(df_futures_cm_graph['Volume'].astype(float))
                    self.plot3_program_curve.setData(df_demand_supply_graph['Program'].astype(float))

                    df = df_demand_supply_graph['kospi_total'].apply(lambda x: np.nan if x == 0 else x)
                    df.at[0] = 0

                    self.plot3_kospi_total_curve.setData(df.astype(float))

                    self.plot3_kospi_foreigner_curve.setData(df_demand_supply_graph['kospi_foreigner'].astype(float))
                    self.plot3_futures_foreigner_curve.setData(df_demand_supply_graph['futures_foreigner'].astype(float))
                else:
                    pass

            elif comboindex3 == 11:
                
                pass
                '''
                self.plot3_time_line.setValue(plot_time_index)

                if DayTime:
                    txt = " 기관현물 : {0} ".format(기관현물_순매수)
                    self.label_31.setText(txt)

                    txt = " 기관선물 : {0} ".format(기관선물_순매수)
                    self.label_32.setText(txt)

                    txt = " 개인현물 : {0} ".format(개인현물_순매수)
                    self.label_33.setText(txt)

                    txt = " 개인선물 : {0} ".format(개인선물_순매수)
                    self.label_34.setText(txt)

                    if 프로그램_순매수 > 0 and 현물_총순매수 > 0:

                        if 외인선물_순매수 < 0 and 외인현물_순매수 < 0:
                            txt = ' - '
                            self.label_35.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                            self.label_35.setText(txt)

                        if (외인선물_순매수 < 0 and 외인현물_순매수 > 0) or (외인선물_순매수 > 0 and 외인현물_순매수 < 0):
                            txt = ' 외인수급 Cross '
                            self.label_35.setStyleSheet('background-color: black; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                            self.label_35.setText(txt)

                        if 외인선물_순매수 > 0 and 외인현물_순매수 > 0:
                            txt = ' 수급 Call! '
                            self.label_35.setStyleSheet('background-color: magenta; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                            self.label_35.setText(txt)

                    elif 프로그램_순매수 < 0 and 현물_총순매수 < 0:

                        if 외인선물_순매수 > 0 and 외인현물_순매수 > 0:
                            txt = ' - '
                            self.label_35.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                            self.label_35.setText(txt)

                        if (외인선물_순매수 > 0 and 외인현물_순매수 < 0) or (외인선물_순매수 < 0 and 외인현물_순매수 > 0):
                            txt = ' 외인수급 Cross '
                            self.label_35.setStyleSheet('background-color: black; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                            self.label_35.setText(txt)          

                        if 외인선물_순매수 < 0 and 외인현물_순매수 < 0:
                            txt = ' 수급 Put! '
                            self.label_35.setStyleSheet('background-color: cyan; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                            self.label_35.setText(txt)
                    else:
                        txt = ' 수급종합 Cross '
                        self.label_35.setStyleSheet('background-color: black; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                        self.label_35.setText(txt)

                    if not np.isnan(외인현물_순매수):
                        txt = " 외인현물 : {0:.0f} ".format(외인현물_순매수)

                        if 외인현물_순매수 <= 0:
                            self.label_36.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                        else:
                            self.label_36.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                        self.label_36.setText(txt)
                    else:
                        pass

                    txt = " {0:.0f} ".format(fut_cm_volume_power)

                    if fut_cm_volume_power > 0:
                        self.label_37.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_37.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_37.setText(txt)
                    
                    if not np.isnan(외인선물_순매수):
                        txt = " 외인선물 : {0:.0f} ".format(외인선물_순매수)

                        if 외인선물_순매수 <= 0:
                            self.label_38.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                        else:
                            self.label_38.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                        self.label_38.setText(txt)
                    else:
                        pass

                    self.plot3_fut_volume_curve.setData(df_futures_cm_graph['Volume'].astype(float))
                    self.plot3_kospi_foreigner_curve.setData(df_demand_supply_graph['kospi_foreigner'].astype(float))
                    self.plot3_futures_foreigner_curve.setData(df_demand_supply_graph['futures_foreigner'].astype(float))                    
                else:
                    pass
                '''

            elif comboindex3 == 13:
                
                self.plot3_time_line.setValue(plot_time_index)
                
                txt = ' {0} '.format(format(SP500_저가, ','))
                self.label_36.setText(txt)

                tmp = self.label_37.text().split()[0]
                과거가 =  tmp.replace(',', '')                

                if SP500_현재가 > float(과거가):

                    txt = " {0} ▲ ({1}, {2:0.1f}%, {3}) ".format(format(SP500_현재가, ','), SP500_종가대비, SP500_등락율, SP500_진폭_틱)

                    if SP500_종가대비 > 0:
                        self.label_37.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif SP500_종가대비 < 0:
                        self.label_37.setStyleSheet('background-color: pink; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_37.setStyleSheet('background-color: pink; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_37.setText(txt)

                elif SP500_현재가 < float(과거가):

                    txt = " {0} ▼ ({1}, {2:0.1f}%, {3}) ".format(format(SP500_현재가, ','), SP500_종가대비, SP500_등락율, SP500_진폭_틱)

                    if SP500_종가대비 > 0:
                        self.label_37.setStyleSheet('background-color: skyblue; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif SP500_종가대비 < 0:
                        self.label_37.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_37.setStyleSheet('background-color: skyblue; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_37.setText(txt)
                else:
                    pass

                txt = ' {0} '.format(format(SP500_고가, ','))
                self.label_38.setText(txt)

                self.plot3_ovc_jl_line.setValue(SP500_전저)
                self.plot3_ovc_jh_line.setValue(SP500_전고)
                self.plot3_ovc_close_line.setValue(SP500_전일종가)
                self.plot3_ovc_open_line.setValue(SP500_시가)
                self.plot3_ovc_pivot_line.setValue(SP500_피봇)
                self.plot3_ovc_low_line.setValue(SP500_저가)
                self.plot3_ovc_high_line.setValue(SP500_고가)

                self.plot3_sp500_curve.setData(df_sp500_graph['Price'].astype(float))

                if flag_checkBox_plot3_bband:

                    self.parent.Calc_Bollinger('SP500')

                    self.plot3_bollinger_1st_upper_curve.setData(df_sp500_ta_graph['BBUpper_1st'].astype(float))
                    self.plot3_bollinger_1st_middle_curve.setData(df_sp500_ta_graph['BBMiddle_1st'].astype(float))
                    self.plot3_bollinger_1st_lower_curve.setData(df_sp500_ta_graph['BBLower_1st'].astype(float))
                    self.plot3_bollinger_2nd_upper_curve.setData(df_sp500_ta_graph['BBUpper_2nd'].astype(float))
                    self.plot3_bollinger_2nd_middle_curve.setData(df_sp500_ta_graph['BBMiddle_2nd'].astype(float))
                    self.plot3_bollinger_2nd_lower_curve.setData(df_sp500_ta_graph['BBLower_2nd'].astype(float))

                    self.plot3_fibonacci_line1.setValue(sp500_fibonacci_levels[1])
                    self.plot3_fibonacci_line2.setValue(sp500_fibonacci_levels[2])
                    self.plot3_fibonacci_line3.setValue(sp500_fibonacci_levels[3])
                    self.plot3_fibonacci_line4.setValue(sp500_fibonacci_levels[4])
                    self.plot3_fibonacci_line5.setValue(sp500_fibonacci_levels[5])

                    if df_sp500_ta_graph.at[plot_time_index, 'BBMiddle_2nd'] >= df_sp500_ta_graph.at[plot_time_index, 'Price']:
                        self.label_p3_2.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p3_2.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " BB U: {0:.2f}\n BB M: {1:.2f}\n BB L: {2:.2f} ".format\
                        (df_sp500_ta_graph.at[plot_time_index, 'BBUpper_2nd'], df_sp500_ta_graph.at[plot_time_index, 'BBMiddle_2nd'], df_sp500_ta_graph.at[plot_time_index, 'BBLower_2nd'])
                    self.label_p3_2.setText(txt)
                else:
                    self.plot3_fibonacci_line1.setValue(SP500_전일종가)
                    self.plot3_fibonacci_line2.setValue(SP500_전일종가)
                    self.plot3_fibonacci_line3.setValue(SP500_전일종가)
                    self.plot3_fibonacci_line4.setValue(SP500_전일종가)
                    self.plot3_fibonacci_line5.setValue(SP500_전일종가)

                    self.label_p3_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p3_2.setText(" BB Upper\n BB Middle\n BB Lower ")

                if flag_checkBox_plot3_psar:

                    self.parent.Calc_PSAR_MAMA('SP500')

                    self.plot3_psar_curve.setData(df_sp500_ta_graph['PSAR'][0:plot_time_index+1].astype(float))

                    #self.plot3_sslup_curve.setData(df_sp500_ta_graph['SSLUp'][0:plot_time_index+1].astype(float))
                    #self.plot3_ssldown_curve.setData(df_sp500_ta_graph['SSLDown'][0:plot_time_index+1].astype(float))

                    self.plot3_mama_curve.setData(df_sp500_ta_graph['MAMA'].astype(float))
                    df = df_sp500_ta_graph['FAMA'].apply(lambda x: SP500_저가 if x < SP500_저가 else x)
                    self.plot3_fama_curve.setData(df.astype(float))

                    if df_sp500_ta_graph.at[plot_time_index, 'PSAR'] > df_sp500_ta_graph.at[plot_time_index, 'Price'] and df_sp500_ta_graph.at[plot_time_index, 'MAMA'] < df_sp500_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p3_3.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_sp500_ta_graph.at[plot_time_index, 'PSAR'] < df_sp500_ta_graph.at[plot_time_index, 'Price'] and df_sp500_ta_graph.at[plot_time_index, 'MAMA'] > df_sp500_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p3_3.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold') 
                    else:
                        self.label_p3_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " PSAR: {0:.2f}\n MAMA: {1:.2f}\n FAMA: {2:.2f} ".format(df_sp500_ta_graph.at[plot_time_index, 'PSAR'], df_sp500_ta_graph.at[plot_time_index, 'MAMA'], df_sp500_ta_graph.at[plot_time_index, 'FAMA'])
                    self.label_p3_3.setText(txt)
                else:
                    self.label_p3_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p3_3.setText(" PSAR\n MAMA ")
                
                if flag_checkBox_plot3_one_eye:

                    self.plot3_oe_conv_curve.setData(df_sp500_ta_graph['OE_CONV'].astype(float))
                    self.plot3_oe_base_curve.setData(df_sp500_ta_graph['OE_BASE'].astype(float))
                    self.plot3_span_a_curve.setData(df_sp500_ta_graph['SPAN_A'].astype(float))
                    self.plot3_span_b_curve.setData(df_sp500_ta_graph['SPAN_B'].astype(float))

                    if flag_one_eye_lagging_span:
                        self.plot3_lagging_span_curve.setData(df_sp500_ta_graph['LAGGING_SPAN'].astype(float))

                    if df_sp500_ta_graph.at[plot_time_index, 'OE_CONV'] < df_sp500_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_sp500_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] < df_sp500_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p3_4.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_sp500_ta_graph.at[plot_time_index, 'OE_CONV'] > df_sp500_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_sp500_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] > df_sp500_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p3_4.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p3_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " 기준선: {0:.2f}\n 전환선: {1:.2f}\n SPAN A: {2:.2f} \n SPAN B: {3:.2f} ".format\
                        (df_sp500_ta_graph.at[plot_time_index, 'OE_BASE'], df_sp500_ta_graph.at[plot_time_index, 'OE_CONV'], \
                            df_sp500_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'], df_sp500_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B'])
                    self.label_p3_4.setText(txt)
                    
                else:
                    self.label_p3_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p3_4.setText(" ONE EYE ")
            
            elif comboindex3 == 14:
                
                self.plot3_time_line.setValue(plot_time_index)
                
                txt = ' {0} '.format(format(DOW_저가, ','))
                self.label_36.setText(txt)

                tmp = self.label_37.text().split()[0]
                과거가 =  tmp.replace(',', '')               

                if DOW_현재가 > float(과거가):

                    txt = " {0} ▲ ({1}, {2:0.1f}%, {3}) ".format(format(DOW_현재가, ','), format(DOW_종가대비, ','), DOW_등락율, DOW_진폭_틱)

                    if DOW_종가대비 > 0:
                        self.label_37.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif DOW_종가대비 < 0:
                        self.label_37.setStyleSheet('background-color: pink; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_37.setStyleSheet('background-color: pink; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_37.setText(txt)

                elif DOW_현재가 < float(과거가):

                    txt = " {0} ▼ ({1}, {2:0.1f}%, {3}) ".format(format(DOW_현재가, ','), format(DOW_종가대비, ','), DOW_등락율, DOW_진폭_틱)

                    if DOW_종가대비 > 0:
                        self.label_37.setStyleSheet('background-color: skyblue; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif DOW_종가대비 < 0:
                        self.label_37.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_37.setStyleSheet('background-color: skyblue; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_37.setText(txt)
                else:
                    pass

                txt = ' {0} '.format(format(DOW_고가, ','))
                self.label_38.setText(txt)

                self.plot3_ovc_jl_line.setValue(DOW_전저)
                self.plot3_ovc_jh_line.setValue(DOW_전고)
                self.plot3_ovc_close_line.setValue(DOW_전일종가)
                self.plot3_ovc_open_line.setValue(DOW_시가)
                self.plot3_ovc_pivot_line.setValue(DOW_피봇)
                self.plot3_ovc_low_line.setValue(DOW_저가)
                self.plot3_ovc_high_line.setValue(DOW_고가)               

                self.plot3_dow_curve.setData(df_dow_graph['Price'].astype(float))

                if flag_checkBox_plot3_bband:

                    self.parent.Calc_Bollinger('DOW')
            
                    self.plot3_bollinger_1st_upper_curve.setData(df_dow_ta_graph['BBUpper_1st'].astype(float))
                    self.plot3_bollinger_1st_middle_curve.setData(df_dow_ta_graph['BBMiddle_1st'].astype(float))
                    self.plot3_bollinger_1st_lower_curve.setData(df_dow_ta_graph['BBLower_1st'].astype(float))
                    self.plot3_bollinger_2nd_upper_curve.setData(df_dow_ta_graph['BBUpper_2nd'].astype(float))
                    self.plot3_bollinger_2nd_middle_curve.setData(df_dow_ta_graph['BBMiddle_2nd'].astype(float))
                    self.plot3_bollinger_2nd_lower_curve.setData(df_dow_ta_graph['BBLower_2nd'].astype(float))

                    self.plot3_fibonacci_line1.setValue(dow_fibonacci_levels[1])
                    self.plot3_fibonacci_line2.setValue(dow_fibonacci_levels[2])
                    self.plot3_fibonacci_line3.setValue(dow_fibonacci_levels[3])
                    self.plot3_fibonacci_line4.setValue(dow_fibonacci_levels[4])
                    self.plot3_fibonacci_line5.setValue(dow_fibonacci_levels[5])

                    if df_dow_ta_graph.at[plot_time_index, 'BBMiddle_2nd'] >= df_dow_ta_graph.at[plot_time_index, 'Price']:
                        self.label_p3_2.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p3_2.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " BB U: {0:.0f}\n BB M: {1:.0f}\n BB L: {2:.0f} ".format\
                        (df_dow_ta_graph.at[plot_time_index, 'BBUpper_2nd'], df_dow_ta_graph.at[plot_time_index, 'BBMiddle_2nd'], df_dow_ta_graph.at[plot_time_index, 'BBLower_2nd'])
                    self.label_p3_2.setText(txt)
                else:
                    self.plot3_fibonacci_line1.setValue(DOW_전일종가)
                    self.plot3_fibonacci_line2.setValue(DOW_전일종가)
                    self.plot3_fibonacci_line3.setValue(DOW_전일종가)
                    self.plot3_fibonacci_line4.setValue(DOW_전일종가)
                    self.plot3_fibonacci_line5.setValue(DOW_전일종가)

                    self.label_p3_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p3_2.setText(" BB Upper\n BB Middle\n BB Lower ")

                if flag_checkBox_plot3_psar:

                    self.parent.Calc_PSAR_MAMA('DOW')

                    self.plot3_psar_curve.setData(df_dow_ta_graph['PSAR'][0:plot_time_index+1].astype(float))

                    #self.plot3_sslup_curve.setData(df_dow_ta_graph['SSLUp'][0:plot_time_index+1].astype(float))
                    #self.plot3_ssldown_curve.setData(df_dow_ta_graph['SSLDown'][0:plot_time_index+1].astype(float))

                    self.plot3_mama_curve.setData(df_dow_ta_graph['MAMA'].astype(float))
                    df = df_dow_ta_graph['FAMA'].apply(lambda x: DOW_저가 if x < DOW_저가 else x)
                    self.plot3_fama_curve.setData(df.astype(float))                        

                    if df_dow_ta_graph.at[plot_time_index, 'PSAR'] > df_dow_ta_graph.at[plot_time_index, 'Price'] and df_dow_ta_graph.at[plot_time_index, 'MAMA'] < df_dow_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p3_3.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_dow_ta_graph.at[plot_time_index, 'PSAR'] < df_dow_ta_graph.at[plot_time_index, 'Price'] and df_dow_ta_graph.at[plot_time_index, 'MAMA'] > df_dow_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p3_3.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold') 
                    else:
                        self.label_p3_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " PSAR: {0:.0f}\n MAMA: {1:.0f}\n FAMA: {2:.0f} ".format(df_dow_ta_graph.at[plot_time_index, 'PSAR'], df_dow_ta_graph.at[plot_time_index, 'MAMA'], df_dow_ta_graph.at[plot_time_index, 'FAMA'])
                    self.label_p3_3.setText(txt)
                else:
                    self.label_p3_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p3_3.setText(" PSAR\n MAMA ")
                
                if flag_checkBox_plot3_one_eye:

                    self.plot3_oe_conv_curve.setData(df_dow_ta_graph['OE_CONV'].astype(float))
                    self.plot3_oe_base_curve.setData(df_dow_ta_graph['OE_BASE'].astype(float))
                    self.plot3_span_a_curve.setData(df_dow_ta_graph['SPAN_A'].astype(float))
                    self.plot3_span_b_curve.setData(df_dow_ta_graph['SPAN_B'].astype(float))

                    if flag_one_eye_lagging_span:
                        self.plot3_lagging_span_curve.setData(df_dow_ta_graph['LAGGING_SPAN'].astype(float))

                    if df_dow_ta_graph.at[plot_time_index, 'OE_CONV'] < df_dow_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_dow_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] < df_dow_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p3_4.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_dow_ta_graph.at[plot_time_index, 'OE_CONV'] > df_dow_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_dow_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] > df_dow_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p3_4.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p3_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " 기준선: {0:.0f}\n 전환선: {1:.0f}\n SPAN A: {2:.0f} \n SPAN B: {3:.0f} ".format\
                        (df_dow_ta_graph.at[plot_time_index, 'OE_BASE'], df_dow_ta_graph.at[plot_time_index, 'OE_CONV'], \
                            df_dow_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'], df_dow_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B'])
                    self.label_p3_4.setText(txt)
                    
                else:
                    self.label_p3_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p3_4.setText(" ONE EYE ")    

            elif comboindex3 == 15:
                
                self.plot3_time_line.setValue(plot_time_index)
                
                txt = ' {0} '.format(format(NASDAQ_저가, ','))
                self.label_36.setText(txt)

                tmp = self.label_37.text().split()[0]
                과거가 =  tmp.replace(',', '')                

                if NASDAQ_현재가 > float(과거가):

                    txt = " {0} ▲ ({1}, {2:0.1f}%, {3}) ".format(format(NASDAQ_현재가, ','), format(NASDAQ_종가대비, ','), NASDAQ_등락율, NASDAQ_진폭_틱)

                    if NASDAQ_종가대비 > 0:
                        self.label_37.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif NASDAQ_종가대비 < 0:
                        self.label_37.setStyleSheet('background-color: pink; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_37.setStyleSheet('background-color: pink; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_37.setText(txt)

                elif NASDAQ_현재가 < float(과거가):

                    txt = " {0} ▼ ({1}, {2:0.1f}%, {3}) ".format(format(NASDAQ_현재가, ','), format(NASDAQ_종가대비, ','), NASDAQ_등락율, NASDAQ_진폭_틱)

                    if NASDAQ_종가대비 > 0:
                        self.label_37.setStyleSheet('background-color: skyblue; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif NASDAQ_종가대비 < 0:
                        self.label_37.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_37.setStyleSheet('background-color: skyblue; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_37.setText(txt)
                else:
                    pass

                txt = ' {0} '.format(format(NASDAQ_고가, ','))
                self.label_38.setText(txt)

                self.plot3_ovc_jl_line.setValue(NASDAQ_전저)
                self.plot3_ovc_jh_line.setValue(NASDAQ_전고)
                self.plot3_ovc_close_line.setValue(NASDAQ_전일종가)
                self.plot3_ovc_open_line.setValue(NASDAQ_시가)
                self.plot3_ovc_pivot_line.setValue(NASDAQ_피봇)
                self.plot3_ovc_low_line.setValue(NASDAQ_저가)
                self.plot3_ovc_high_line.setValue(NASDAQ_고가)

                self.plot3_nasdaq_curve.setData(df_nasdaq_graph['Price'].astype(float))

                if flag_checkBox_plot3_bband:

                    self.parent.Calc_Bollinger('NASDAQ')
            
                    self.plot3_bollinger_1st_upper_curve.setData(df_nasdaq_ta_graph['BBUpper_1st'].astype(float))
                    self.plot3_bollinger_1st_middle_curve.setData(df_nasdaq_ta_graph['BBMiddle_1st'].astype(float))
                    self.plot3_bollinger_1st_lower_curve.setData(df_nasdaq_ta_graph['BBLower_1st'].astype(float))
                    self.plot3_bollinger_2nd_upper_curve.setData(df_nasdaq_ta_graph['BBUpper_2nd'].astype(float))
                    self.plot3_bollinger_2nd_middle_curve.setData(df_nasdaq_ta_graph['BBMiddle_2nd'].astype(float))
                    self.plot3_bollinger_2nd_lower_curve.setData(df_nasdaq_ta_graph['BBLower_2nd'].astype(float))

                    self.plot3_fibonacci_line1.setValue(nasdaq_fibonacci_levels[1])
                    self.plot3_fibonacci_line2.setValue(nasdaq_fibonacci_levels[2])
                    self.plot3_fibonacci_line3.setValue(nasdaq_fibonacci_levels[3])
                    self.plot3_fibonacci_line4.setValue(nasdaq_fibonacci_levels[4])
                    self.plot3_fibonacci_line5.setValue(nasdaq_fibonacci_levels[5])

                    if df_nasdaq_ta_graph.at[plot_time_index, 'BBMiddle_2nd'] >= df_nasdaq_ta_graph.at[plot_time_index, 'Price']:
                        self.label_p3_2.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p3_2.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " BB U: {0:.2f}\n BB M: {1:.2f}\n BB L: {2:.2f} ".format\
                        (df_nasdaq_ta_graph.at[plot_time_index, 'BBUpper_2nd'], df_nasdaq_ta_graph.at[plot_time_index, 'BBMiddle_2nd'], df_nasdaq_ta_graph.at[plot_time_index, 'BBLower_2nd'])
                    self.label_p3_2.setText(txt)
                else:
                    self.plot3_fibonacci_line1.setValue(NASDAQ_전일종가)
                    self.plot3_fibonacci_line2.setValue(NASDAQ_전일종가)
                    self.plot3_fibonacci_line3.setValue(NASDAQ_전일종가)
                    self.plot3_fibonacci_line4.setValue(NASDAQ_전일종가)
                    self.plot3_fibonacci_line5.setValue(NASDAQ_전일종가)

                    self.label_p3_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p3_2.setText(" BB Upper\n BB Middle\n BB Lower ")

                if flag_checkBox_plot3_psar:

                    self.parent.Calc_PSAR_MAMA('NASDAQ')

                    self.plot3_psar_curve.setData(df_nasdaq_ta_graph['PSAR'][0:plot_time_index+1].astype(float))

                    #self.plot3_sslup_curve.setData(df_nasdaq_ta_graph['SSLUp'][0:plot_time_index+1].astype(float))
                    #self.plot3_ssldown_curve.setData(df_nasdaq_ta_graph['SSLDown'][0:plot_time_index+1].astype(float))

                    self.plot3_mama_curve.setData(df_nasdaq_ta_graph['MAMA'].astype(float))
                    df = df_nasdaq_ta_graph['FAMA'].apply(lambda x: NASDAQ_저가 if x < NASDAQ_저가 else x)
                    self.plot3_fama_curve.setData(df.astype(float))                        

                    if df_nasdaq_ta_graph.at[plot_time_index, 'PSAR'] > df_nasdaq_ta_graph.at[plot_time_index, 'Price'] and df_nasdaq_ta_graph.at[plot_time_index, 'MAMA'] < df_nasdaq_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p3_3.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_nasdaq_ta_graph.at[plot_time_index, 'PSAR'] < df_nasdaq_ta_graph.at[plot_time_index, 'Price'] and df_nasdaq_ta_graph.at[plot_time_index, 'MAMA'] > df_nasdaq_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p3_3.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold') 
                    else:
                        self.label_p3_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " PSAR: {0:.2f}\n MAMA: {1:.2f}\n FAMA: {2:.2f} ".format(df_nasdaq_ta_graph.at[plot_time_index, 'PSAR'], df_nasdaq_ta_graph.at[plot_time_index, 'MAMA'], df_nasdaq_ta_graph.at[plot_time_index, 'FAMA'])
                    self.label_p3_3.setText(txt)
                else:
                    self.label_p3_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p3_3.setText(" PSAR\n MAMA ")
                
                if flag_checkBox_plot3_one_eye:

                    self.plot3_oe_conv_curve.setData(df_nasdaq_ta_graph['OE_CONV'].astype(float))
                    self.plot3_oe_base_curve.setData(df_nasdaq_ta_graph['OE_BASE'].astype(float))
                    self.plot3_span_a_curve.setData(df_nasdaq_ta_graph['SPAN_A'].astype(float))
                    self.plot3_span_b_curve.setData(df_nasdaq_ta_graph['SPAN_B'].astype(float))

                    if flag_one_eye_lagging_span:
                        self.plot3_lagging_span_curve.setData(df_nasdaq_ta_graph['LAGGING_SPAN'].astype(float))

                    if df_nasdaq_ta_graph.at[plot_time_index, 'OE_CONV'] < df_nasdaq_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_nasdaq_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] < df_nasdaq_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p3_4.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_nasdaq_ta_graph.at[plot_time_index, 'OE_CONV'] > df_nasdaq_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_nasdaq_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] > df_nasdaq_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p3_4.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p3_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " 기준선: {0:.2f}\n 전환선: {1:.2f}\n SPAN A: {2:.2f} \n SPAN B: {3:.2f} ".format\
                        (df_nasdaq_ta_graph.at[plot_time_index, 'OE_BASE'], df_nasdaq_ta_graph.at[plot_time_index, 'OE_CONV'], \
                            df_nasdaq_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'], df_nasdaq_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B'])
                    self.label_p3_4.setText(txt)
                    
                else:
                    self.label_p3_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p3_4.setText(" ONE EYE ")

            elif comboindex3 == 16:
                
                self.plot3_time_line.setValue(plot_time_index)

                txt = ' {0} '.format(format(HANGSENG_저가, ','))
                self.label_36.setText(txt)

                tmp = self.label_37.text().split()[0]
                과거가 =  tmp.replace(',', '')     

                if HANGSENG_현재가 > float(과거가):

                    txt = " {0} ▲ ({1}, {2:0.1f}%, {3}) ".format(format(HANGSENG_현재가, ','), HANGSENG_종가대비, HANGSENG_등락율, HANGSENG_진폭_틱)

                    if HANGSENG_종가대비 > 0:
                        self.label_37.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif HANGSENG_종가대비 < 0:
                        self.label_37.setStyleSheet('background-color: pink; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_37.setStyleSheet('background-color: pink; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_37.setText(txt)

                elif HANGSENG_현재가 < float(과거가):

                    txt = " {0} ▼ ({1}, {2:0.1f}%, {3}) ".format(format(HANGSENG_현재가, ','), HANGSENG_종가대비, HANGSENG_등락율, HANGSENG_진폭_틱)

                    if HANGSENG_종가대비 > 0:
                        self.label_37.setStyleSheet('background-color: skyblue; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif HANGSENG_종가대비 < 0:
                        self.label_37.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_37.setStyleSheet('background-color: skyblue; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_37.setText(txt)
                else:
                    pass

                txt = ' {0} '.format(format(HANGSENG_고가, ','))
                self.label_38.setText(txt)

                self.plot3_ovc_jl_line.setValue(HANGSENG_전저)
                self.plot3_ovc_jh_line.setValue(HANGSENG_전고)
                self.plot3_ovc_close_line.setValue(HANGSENG_전일종가)
                self.plot3_ovc_open_line.setValue(HANGSENG_시가)
                self.plot3_ovc_pivot_line.setValue(HANGSENG_피봇)
                self.plot3_ovc_low_line.setValue(HANGSENG_저가)
                self.plot3_ovc_high_line.setValue(HANGSENG_고가)                 

                self.plot3_hsi_curve.setData(df_hsi_graph['Price'].astype(float))           

                if flag_checkBox_plot3_bband:

                    self.parent.Calc_Bollinger('HSI')
            
                    self.plot3_bollinger_1st_upper_curve.setData(df_hsi_ta_graph['BBUpper_1st'].astype(float))
                    self.plot3_bollinger_1st_middle_curve.setData(df_hsi_ta_graph['BBMiddle_1st'].astype(float))
                    self.plot3_bollinger_1st_lower_curve.setData(df_hsi_ta_graph['BBLower_1st'].astype(float))
                    self.plot3_bollinger_2nd_upper_curve.setData(df_hsi_ta_graph['BBUpper_2nd'].astype(float))
                    self.plot3_bollinger_2nd_middle_curve.setData(df_hsi_ta_graph['BBMiddle_2nd'].astype(float))
                    self.plot3_bollinger_2nd_lower_curve.setData(df_hsi_ta_graph['BBLower_2nd'].astype(float))

                    self.plot3_fibonacci_line1.setValue(hsi_fibonacci_levels[1])
                    self.plot3_fibonacci_line2.setValue(hsi_fibonacci_levels[2])
                    self.plot3_fibonacci_line3.setValue(hsi_fibonacci_levels[3])
                    self.plot3_fibonacci_line4.setValue(hsi_fibonacci_levels[4])
                    self.plot3_fibonacci_line5.setValue(hsi_fibonacci_levels[5])

                    if df_hsi_ta_graph.at[plot_time_index, 'BBMiddle_2nd'] >= df_hsi_ta_graph.at[plot_time_index, 'Price']:
                        self.label_p3_2.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p3_2.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " BB U: {0:.0f}\n BB M: {1:.0f}\n BB L: {2:.0f} ".format\
                        (df_hsi_ta_graph.at[plot_time_index, 'BBUpper_2nd'], df_hsi_ta_graph.at[plot_time_index, 'BBMiddle_2nd'], df_hsi_ta_graph.at[plot_time_index, 'BBLower_2nd'])
                    self.label_p3_2.setText(txt)
                else:
                    self.plot3_fibonacci_line1.setValue(HANGSENG_전일종가)
                    self.plot3_fibonacci_line2.setValue(HANGSENG_전일종가)
                    self.plot3_fibonacci_line3.setValue(HANGSENG_전일종가)
                    self.plot3_fibonacci_line4.setValue(HANGSENG_전일종가)
                    self.plot3_fibonacci_line5.setValue(HANGSENG_전일종가)

                    self.label_p3_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p3_2.setText(" BB Upper\n BB Middle\n BB Lower ")

                if flag_checkBox_plot3_psar:

                    self.parent.Calc_PSAR_MAMA('HSI')

                    self.plot3_psar_curve.setData(df_hsi_ta_graph['PSAR'][0:plot_time_index+1].astype(float))

                    #self.plot3_sslup_curve.setData(df_hsi_ta_graph['SSLUp'][0:plot_time_index+1].astype(float))
                    #self.plot3_ssldown_curve.setData(df_hsi_ta_graph['SSLDown'][0:plot_time_index+1].astype(float))

                    self.plot1_mama_curve.setData(df_hsi_ta_graph['MAMA'].astype(float))
                    df = df_hsi_ta_graph['FAMA'].apply(lambda x: HANGSENG_저가 if x < HANGSENG_저가 else x)
                    self.plot3_fama_curve.setData(df.astype(float))                        

                    if df_hsi_ta_graph.at[plot_time_index, 'PSAR'] > df_hsi_ta_graph.at[plot_time_index, 'Price'] and df_hsi_ta_graph.at[plot_time_index, 'MAMA'] < df_hsi_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p3_3.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_hsi_ta_graph.at[plot_time_index, 'PSAR'] < df_hsi_ta_graph.at[plot_time_index, 'Price'] and df_hsi_ta_graph.at[plot_time_index, 'MAMA'] > df_hsi_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p3_3.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold') 
                    else:
                        self.label_p3_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " PSAR: {0:.0f}\n MAMA: {1:.0f}\n FAMA: {2:.0f} ".format(df_hsi_ta_graph.at[plot_time_index, 'PSAR'], df_hsi_ta_graph.at[plot_time_index, 'MAMA'], df_hsi_ta_graph.at[plot_time_index, 'FAMA'])
                    self.label_p3_3.setText(txt)
                else:
                    self.label_p3_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p3_3.setText(" PSAR\n MAMA ")
                
                if flag_checkBox_plot3_one_eye:

                    self.plot3_oe_conv_curve.setData(df_hsi_ta_graph['OE_CONV'].astype(float))
                    self.plot3_oe_base_curve.setData(df_hsi_ta_graph['OE_BASE'].astype(float))
                    self.plot3_span_a_curve.setData(df_hsi_ta_graph['SPAN_A'].astype(float))
                    self.plot3_span_b_curve.setData(df_hsi_ta_graph['SPAN_B'].astype(float))

                    if flag_one_eye_lagging_span:
                        self.plot3_lagging_span_curve.setData(df_hsi_ta_graph['LAGGING_SPAN'].astype(float))

                    if df_hsi_ta_graph.at[plot_time_index, 'OE_CONV'] < df_hsi_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_hsi_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] < df_hsi_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p3_4.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_hsi_ta_graph.at[plot_time_index, 'OE_CONV'] > df_hsi_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_hsi_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] > df_hsi_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p3_4.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p3_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " 기준선: {0:.0f}\n 전환선: {1:.0f}\n SPAN A: {2:.0f} \n SPAN B: {3:.0f} ".format\
                        (df_hsi_ta_graph.at[plot_time_index, 'OE_BASE'], df_hsi_ta_graph.at[plot_time_index, 'OE_CONV'], \
                            df_hsi_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'], df_hsi_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B'])
                    self.label_p3_4.setText(txt)
                    
                else:
                    self.label_p3_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p3_4.setText(" ONE EYE ")

            elif comboindex3 == 17:
                
                self.plot3_time_line.setValue(plot_time_index)
                
                txt = ' {0} '.format(format(WTI_저가, ','))
                self.label_36.setText(txt)

                과거가 =  self.label_37.text().split()[0]             

                if WTI_현재가 > float(과거가):

                    txt = " {0} ▲ ({1}, {2:0.1f}%, {3}) ".format(WTI_현재가, WTI_종가대비, WTI_등락율, WTI_진폭_틱)

                    if WTI_종가대비 > 0:
                        self.label_37.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif WTI_종가대비 < 0:
                        self.label_37.setStyleSheet('background-color: pink; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_37.setStyleSheet('background-color: pink; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_37.setText(txt)

                elif WTI_현재가 < float(과거가):

                    txt = " {0} ▼ ({1}, {2:0.1f}%, {3}) ".format(WTI_현재가, WTI_종가대비, WTI_등락율, WTI_진폭_틱)

                    if WTI_종가대비 > 0:
                        self.label_37.setStyleSheet('background-color: skyblue; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif WTI_종가대비 < 0:
                        self.label_37.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_37.setStyleSheet('background-color: skyblue; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_37.setText(txt)
                else:
                    pass

                txt = ' {0} '.format(format(WTI_고가, ','))
                self.label_38.setText(txt)

                self.plot3_ovc_jl_line.setValue(WTI_전저)
                self.plot3_ovc_jh_line.setValue(WTI_전고)
                self.plot3_ovc_close_line.setValue(WTI_전일종가)
                self.plot3_ovc_open_line.setValue(WTI_시가)
                self.plot3_ovc_pivot_line.setValue(WTI_피봇)
                self.plot3_ovc_low_line.setValue(WTI_저가)
                self.plot3_ovc_high_line.setValue(WTI_고가) 

                self.plot3_wti_curve.setData(df_wti_graph['Price'].astype(float))

                if flag_checkBox_plot3_bband:

                    self.parent.Calc_Bollinger('WTI')
            
                    self.plot3_bollinger_1st_upper_curve.setData(df_wti_ta_graph['BBUpper_1st'].astype(float))
                    self.plot3_bollinger_1st_middle_curve.setData(df_wti_ta_graph['BBMiddle_1st'].astype(float))
                    self.plot3_bollinger_1st_lower_curve.setData(df_wti_ta_graph['BBLower_1st'].astype(float))
                    self.plot3_bollinger_2nd_upper_curve.setData(df_wti_ta_graph['BBUpper_2nd'].astype(float))
                    self.plot3_bollinger_2nd_middle_curve.setData(df_wti_ta_graph['BBMiddle_2nd'].astype(float))
                    self.plot3_bollinger_2nd_lower_curve.setData(df_wti_ta_graph['BBLower_2nd'].astype(float))

                    self.plot3_fibonacci_line1.setValue(wti_fibonacci_levels[1])
                    self.plot3_fibonacci_line2.setValue(wti_fibonacci_levels[2])
                    self.plot3_fibonacci_line3.setValue(wti_fibonacci_levels[3])
                    self.plot3_fibonacci_line4.setValue(wti_fibonacci_levels[4])
                    self.plot3_fibonacci_line5.setValue(wti_fibonacci_levels[5])

                    if df_wti_ta_graph.at[plot_time_index, 'BBMiddle_2nd'] >= df_wti_ta_graph.at[plot_time_index, 'Price']:
                        self.label_p3_2.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p3_2.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " BB U: {0:.2f}\n BB M: {1:.2f}\n BB L: {2:.2f} ".format\
                        (df_wti_ta_graph.at[plot_time_index, 'BBUpper_2nd'], df_wti_ta_graph.at[plot_time_index, 'BBMiddle_2nd'], df_wti_ta_graph.at[plot_time_index, 'BBLower_2nd'])
                    self.label_p3_2.setText(txt)
                else:
                    self.plot3_fibonacci_line1.setValue(WTI_전일종가)
                    self.plot3_fibonacci_line2.setValue(WTI_전일종가)
                    self.plot3_fibonacci_line3.setValue(WTI_전일종가)
                    self.plot3_fibonacci_line4.setValue(WTI_전일종가)
                    self.plot3_fibonacci_line5.setValue(WTI_전일종가)

                    self.label_p3_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p3_2.setText(" BB Upper\n BB Middle\n BB Lower ")

                if flag_checkBox_plot3_psar:

                    self.parent.Calc_PSAR_MAMA('WTI')

                    self.plot3_psar_curve.setData(df_wti_ta_graph['PSAR'][0:plot_time_index+1].astype(float))

                    #self.plot3_sslup_curve.setData(df_wti_ta_graph['SSLUp'][0:plot_time_index+1].astype(float))
                    #self.plot3_ssldown_curve.setData(df_wti_ta_graph['SSLDown'][0:plot_time_index+1].astype(float))

                    self.plot3_mama_curve.setData(df_wti_ta_graph['MAMA'].astype(float))
                    df = df_wti_ta_graph['FAMA'].apply(lambda x: WTI_저가 if x < WTI_저가 else x)
                    self.plot3_fama_curve.setData(df.astype(float))                        

                    if df_wti_ta_graph.at[plot_time_index, 'PSAR'] > df_wti_ta_graph.at[plot_time_index, 'Price'] and df_wti_ta_graph.at[plot_time_index, 'MAMA'] < df_wti_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p3_3.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_wti_ta_graph.at[plot_time_index, 'PSAR'] < df_wti_ta_graph.at[plot_time_index, 'Price'] and df_wti_ta_graph.at[plot_time_index, 'MAMA'] > df_wti_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p3_3.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold') 
                    else:
                        self.label_p3_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " PSAR: {0:.2f}\n MAMA: {1:.2f}\n FAMA: {2:.2f} ".format(df_wti_ta_graph.at[plot_time_index, 'PSAR'], df_wti_ta_graph.at[plot_time_index, 'MAMA'], df_wti_ta_graph.at[plot_time_index, 'FAMA'])
                    self.label_p3_3.setText(txt)
                else:
                    self.label_p3_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p3_3.setText(" PSAR\n MAMA ")
                
                if flag_checkBox_plot3_one_eye:

                    self.plot3_oe_conv_curve.setData(df_wti_ta_graph['OE_CONV'].astype(float))
                    self.plot3_oe_base_curve.setData(df_wti_ta_graph['OE_BASE'].astype(float))
                    self.plot3_span_a_curve.setData(df_wti_ta_graph['SPAN_A'].astype(float))
                    self.plot3_span_b_curve.setData(df_wti_ta_graph['SPAN_B'].astype(float))

                    if flag_one_eye_lagging_span:
                        self.plot3_lagging_span_curve.setData(df_wti_ta_graph['LAGGING_SPAN'].astype(float))

                    if df_wti_ta_graph.at[plot_time_index, 'OE_CONV'] < df_wti_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_wti_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] < df_wti_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p3_4.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_wti_ta_graph.at[plot_time_index, 'OE_CONV'] > df_wti_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_wti_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] > df_wti_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p3_4.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p3_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " 기준선: {0:.2f}\n 전환선: {1:.2f}\n SPAN A: {2:.2f} \n SPAN B: {3:.2f} ".format\
                        (df_wti_ta_graph.at[plot_time_index, 'OE_BASE'], df_wti_ta_graph.at[plot_time_index, 'OE_CONV'], \
                            df_wti_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'], df_wti_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B'])
                    self.label_p3_4.setText(txt)

                else:
                    self.label_p3_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p3_4.setText(" ONE EYE ")
            
            elif comboindex3 == 18:
                
                self.plot3_time_line.setValue(plot_time_index)

                txt = ' {0} '.format(format(GOLD_저가, ','))
                self.label_36.setText(txt)

                tmp = self.label_37.text().split()[0]
                과거가 =  tmp.replace(',', '')

                if GOLD_현재가 > float(과거가):

                    txt = " {0} ▲ ({1:.1f}, {2:.1f}%, {3}) ".format(format(GOLD_현재가, ','), GOLD_종가대비, GOLD_등락율, GOLD_진폭_틱)

                    if GOLD_종가대비 > 0:
                        self.label_37.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif GOLD_종가대비 < 0:
                        self.label_37.setStyleSheet('background-color: pink; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_37.setStyleSheet('background-color: pink; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_37.setText(txt)

                elif GOLD_현재가 < float(과거가):

                    txt = " {0} ▼ ({1:.1f}, {2:.1f}%, {3}) ".format(format(GOLD_현재가, ','), GOLD_종가대비, GOLD_등락율, GOLD_진폭_틱)

                    if GOLD_종가대비 > 0:
                        self.label_37.setStyleSheet('background-color: skyblue; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif GOLD_종가대비 < 0:
                        self.label_37.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_37.setStyleSheet('background-color: skyblue; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_37.setText(txt)
                else:
                    pass

                txt = ' {0} '.format(format(GOLD_고가, ','))
                self.label_38.setText(txt)

                self.plot3_ovc_jl_line.setValue(GOLD_전저)
                self.plot3_ovc_jh_line.setValue(GOLD_전고)
                self.plot3_ovc_close_line.setValue(GOLD_전일종가)
                self.plot3_ovc_open_line.setValue(GOLD_시가)
                self.plot3_ovc_pivot_line.setValue(GOLD_피봇)
                self.plot3_ovc_low_line.setValue(GOLD_저가)
                self.plot3_ovc_high_line.setValue(GOLD_고가)                 

                self.plot3_gold_curve.setData(df_gold_graph['Price'].astype(float))

                if flag_checkBox_plot3_bband:

                    self.parent.Calc_Bollinger('GOLD')
            
                    self.plot3_bollinger_1st_upper_curve.setData(df_gold_ta_graph['BBUpper_1st'].astype(float))
                    self.plot3_bollinger_1st_middle_curve.setData(df_gold_ta_graph['BBMiddle_1st'].astype(float))
                    self.plot3_bollinger_1st_lower_curve.setData(df_gold_ta_graph['BBLower_1st'].astype(float))
                    self.plot3_bollinger_2nd_upper_curve.setData(df_gold_ta_graph['BBUpper_2nd'].astype(float))
                    self.plot3_bollinger_2nd_middle_curve.setData(df_gold_ta_graph['BBMiddle_2nd'].astype(float))
                    self.plot3_bollinger_2nd_lower_curve.setData(df_gold_ta_graph['BBLower_2nd'].astype(float))

                    self.plot3_fibonacci_line1.setValue(gold_fibonacci_levels[1])
                    self.plot3_fibonacci_line2.setValue(gold_fibonacci_levels[2])
                    self.plot3_fibonacci_line3.setValue(gold_fibonacci_levels[3])
                    self.plot3_fibonacci_line4.setValue(gold_fibonacci_levels[4])
                    self.plot3_fibonacci_line5.setValue(gold_fibonacci_levels[5])

                    if df_gold_ta_graph.at[plot_time_index, 'BBMiddle_2nd'] >= df_gold_ta_graph.at[plot_time_index, 'Price']:
                        self.label_p3_2.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p3_2.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " BB U: {0:.1f}\n BB M: {1:.1f}\n BB L: {2:.1f} ".format\
                        (df_gold_ta_graph.at[plot_time_index, 'BBUpper_2nd'], df_gold_ta_graph.at[plot_time_index, 'BBMiddle_2nd'], df_gold_ta_graph.at[plot_time_index, 'BBLower_2nd'])
                    self.label_p3_2.setText(txt)
                else:
                    self.plot3_fibonacci_line1.setValue(GOLD_전일종가)
                    self.plot3_fibonacci_line2.setValue(GOLD_전일종가)
                    self.plot3_fibonacci_line3.setValue(GOLD_전일종가)
                    self.plot3_fibonacci_line4.setValue(GOLD_전일종가)
                    self.plot3_fibonacci_line5.setValue(GOLD_전일종가)

                    self.label_p3_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p3_2.setText(" BB Upper\n BB Middle\n BB Lower ")

                if flag_checkBox_plot3_psar:

                    self.parent.Calc_PSAR_MAMA('GOLD')

                    self.plot3_psar_curve.setData(df_gold_ta_graph['PSAR'][0:plot_time_index+1].astype(float))

                    #self.plot3_sslup_curve.setData(df_gold_ta_graph['SSLUp'][0:plot_time_index+1].astype(float))
                    #self.plot3_ssldown_curve.setData(df_gold_ta_graph['SSLDown'][0:plot_time_index+1].astype(float))

                    self.plot3_mama_curve.setData(df_gold_ta_graph['MAMA'].astype(float))
                    df = df_gold_ta_graph['FAMA'].apply(lambda x: GOLD_저가 if x < GOLD_저가 else x)
                    self.plot3_fama_curve.setData(df.astype(float))                        

                    if df_gold_ta_graph.at[plot_time_index, 'PSAR'] > df_gold_ta_graph.at[plot_time_index, 'Price'] and df_gold_ta_graph.at[plot_time_index, 'MAMA'] < df_gold_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p3_3.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_gold_ta_graph.at[plot_time_index, 'PSAR'] < df_gold_ta_graph.at[plot_time_index, 'Price'] and df_gold_ta_graph.at[plot_time_index, 'MAMA'] > df_gold_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p3_3.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold') 
                    else:
                        self.label_p3_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " PSAR: {0:.1f}\n MAMA: {1:.1f}\n FAMA: {2:.1f} ".format(df_gold_ta_graph.at[plot_time_index, 'PSAR'], df_gold_ta_graph.at[plot_time_index, 'MAMA'], df_gold_ta_graph.at[plot_time_index, 'FAMA'])
                    self.label_p3_3.setText(txt)
                else:
                    self.label_p3_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p3_3.setText(" PSAR\n MAMA ")
                
                if flag_checkBox_plot3_one_eye:

                    self.plot3_oe_conv_curve.setData(df_gold_ta_graph['OE_CONV'].astype(float))
                    self.plot3_oe_base_curve.setData(df_gold_ta_graph['OE_BASE'].astype(float))
                    self.plot3_span_a_curve.setData(df_gold_ta_graph['SPAN_A'].astype(float))
                    self.plot3_span_b_curve.setData(df_gold_ta_graph['SPAN_B'].astype(float))

                    if flag_one_eye_lagging_span:
                        self.plot3_lagging_span_curve.setData(df_gold_ta_graph['LAGGING_SPAN'].astype(float))

                    if df_gold_ta_graph.at[plot_time_index, 'OE_CONV'] < df_gold_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_gold_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] < df_gold_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p3_4.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_gold_ta_graph.at[plot_time_index, 'OE_CONV'] > df_gold_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_gold_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] > df_gold_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p3_4.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p3_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " 기준선: {0:.1f}\n 전환선: {1:.1f}\n SPAN A: {2:.1f} \n SPAN B: {3:.1f} ".format\
                        (df_gold_ta_graph.at[plot_time_index, 'OE_BASE'], df_gold_ta_graph.at[plot_time_index, 'OE_CONV'], \
                            df_gold_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'], df_gold_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B'])
                    self.label_p3_4.setText(txt)
                    
                else:
                    self.label_p3_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p3_4.setText(" ONE EYE ")

            elif comboindex3 == 19:
                
                self.plot3_time_line.setValue(plot_time_index)

                txt = ' {0:.5f} '.format(EURO_저가)
                self.label_36.setText(txt)

                과거가 =  self.label_37.text().split()[0]     

                if EURO_현재가 > float(과거가):

                    txt = " {0:.5f} ▲ ({1:.5f}, {2:0.1f}%, {3}) ".format(EURO_현재가, EURO_종가대비, EURO_등락율, EURO_진폭_틱)

                    if EURO_종가대비 > 0:
                        self.label_37.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif EURO_종가대비 < 0:
                        self.label_37.setStyleSheet('background-color: pink; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_37.setStyleSheet('background-color: pink; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_37.setText(txt)

                elif EURO_현재가 < float(과거가):

                    txt = " {0:.5f} ▼ ({1:.5f}, {2:0.1f}%, {3}) ".format(EURO_현재가, EURO_종가대비, EURO_등락율, EURO_진폭_틱)

                    if EURO_종가대비 > 0:
                        self.label_37.setStyleSheet('background-color: skyblue; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif EURO_종가대비 < 0:
                        self.label_37.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_37.setStyleSheet('background-color: skyblue; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_37.setText(txt)
                else:
                    pass

                txt = ' {0:.5f} '.format(EURO_고가)
                self.label_38.setText(txt)

                self.plot3_ovc_jl_line.setValue(EURO_전저)
                self.plot3_ovc_jh_line.setValue(EURO_전고)
                self.plot3_ovc_close_line.setValue(EURO_전일종가)
                self.plot3_ovc_open_line.setValue(EURO_시가)
                self.plot3_ovc_pivot_line.setValue(EURO_피봇)
                self.plot3_ovc_low_line.setValue(EURO_저가)
                self.plot3_ovc_high_line.setValue(EURO_고가)                 

                self.plot3_euro_curve.setData(df_euro_graph['Price'].astype(float))

                if flag_checkBox_plot3_bband:

                    self.parent.Calc_Bollinger('EURO')
            
                    self.plot3_bollinger_1st_upper_curve.setData(df_euro_ta_graph['BBUpper_1st'].astype(float))
                    self.plot3_bollinger_1st_middle_curve.setData(df_euro_ta_graph['BBMiddle_1st'].astype(float))
                    self.plot3_bollinger_1st_lower_curve.setData(df_euro_ta_graph['BBLower_1st'].astype(float))
                    self.plot3_bollinger_2nd_upper_curve.setData(df_euro_ta_graph['BBUpper_2nd'].astype(float))
                    self.plot3_bollinger_2nd_middle_curve.setData(df_euro_ta_graph['BBMiddle_2nd'].astype(float))
                    self.plot3_bollinger_2nd_lower_curve.setData(df_euro_ta_graph['BBLower_2nd'].astype(float))

                    self.plot3_fibonacci_line1.setValue(euro_fibonacci_levels[1])
                    self.plot3_fibonacci_line2.setValue(euro_fibonacci_levels[2])
                    self.plot3_fibonacci_line3.setValue(euro_fibonacci_levels[3])
                    self.plot3_fibonacci_line4.setValue(euro_fibonacci_levels[4])
                    self.plot3_fibonacci_line5.setValue(euro_fibonacci_levels[5])

                    if df_euro_ta_graph.at[plot_time_index, 'BBMiddle_2nd'] >= df_euro_ta_graph.at[plot_time_index, 'Price']:
                        self.label_p3_2.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p3_2.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " BB U: {0:.5f}\n BB M: {1:.5f}\n BB L: {2:.5f} ".format\
                        (df_euro_ta_graph.at[plot_time_index, 'BBUpper_2nd'], df_euro_ta_graph.at[plot_time_index, 'BBMiddle_2nd'], df_euro_ta_graph.at[plot_time_index, 'BBLower_2nd'])
                    self.label_p3_2.setText(txt)
                else:
                    self.plot3_fibonacci_line1.setValue(EURO_전일종가)
                    self.plot3_fibonacci_line2.setValue(EURO_전일종가)
                    self.plot3_fibonacci_line3.setValue(EURO_전일종가)
                    self.plot3_fibonacci_line4.setValue(EURO_전일종가)
                    self.plot3_fibonacci_line5.setValue(EURO_전일종가)

                    self.label_p3_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p3_2.setText(" BB Upper\n BB Middle\n BB Lower ")

                if flag_checkBox_plot3_psar:

                    self.parent.Calc_PSAR_MAMA('EURO')

                    self.plot3_psar_curve.setData(df_euro_ta_graph['PSAR'][0:plot_time_index+1].astype(float))

                    #self.plot3_sslup_curve.setData(df_euro_ta_graph['SSLUp'][0:plot_time_index+1].astype(float))
                    #self.plot3_ssldown_curve.setData(df_euro_ta_graph['SSLDown'][0:plot_time_index+1].astype(float))

                    self.plot3_mama_curve.setData(df_euro_ta_graph['MAMA'].astype(float))
                    df = df_euro_ta_graph['FAMA'].apply(lambda x: EURO_저가 if x < EURO_저가 else x)
                    self.plot3_fama_curve.setData(df.astype(float))                        

                    if df_euro_ta_graph.at[plot_time_index, 'PSAR'] > df_euro_ta_graph.at[plot_time_index, 'Price'] and df_euro_ta_graph.at[plot_time_index, 'MAMA'] < df_euro_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p3_3.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_euro_ta_graph.at[plot_time_index, 'PSAR'] < df_euro_ta_graph.at[plot_time_index, 'Price'] and df_euro_ta_graph.at[plot_time_index, 'MAMA'] > df_euro_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p3_3.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold') 
                    else:
                        self.label_p3_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " PSAR: {0:.5f}\n MAMA: {1:.5f}\n FAMA: {2:.5f} ".format(df_euro_ta_graph.at[plot_time_index, 'PSAR'], df_euro_ta_graph.at[plot_time_index, 'MAMA'], df_euro_ta_graph.at[plot_time_index, 'FAMA'])
                    self.label_p3_3.setText(txt)
                else:
                    self.label_p3_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p3_3.setText(" PSAR\n MAMA ")
                
                if flag_checkBox_plot3_one_eye:

                    self.plot3_oe_conv_curve.setData(df_euro_ta_graph['OE_CONV'].astype(float))
                    self.plot3_oe_base_curve.setData(df_euro_ta_graph['OE_BASE'].astype(float))
                    self.plot3_span_a_curve.setData(df_euro_ta_graph['SPAN_A'].astype(float))
                    self.plot3_span_b_curve.setData(df_euro_ta_graph['SPAN_B'].astype(float))

                    if flag_one_eye_lagging_span:
                        self.plot3_lagging_span_curve.setData(df_euro_ta_graph['LAGGING_SPAN'].astype(float))

                    if df_euro_ta_graph.at[plot_time_index, 'OE_CONV'] < df_euro_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_euro_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] < df_euro_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p3_4.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_euro_ta_graph.at[plot_time_index, 'OE_CONV'] > df_euro_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_euro_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] > df_euro_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p3_4.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p3_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " 기준선: {0:.5f}\n 전환선: {1:.5f}\n SPAN A: {2:.5f} \n SPAN B: {3:.5f} ".format\
                        (df_euro_ta_graph.at[plot_time_index, 'OE_BASE'], df_euro_ta_graph.at[plot_time_index, 'OE_CONV'], \
                            df_euro_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'], df_euro_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B'])
                    self.label_p3_4.setText(txt)
                    
                else:
                    self.label_p3_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p3_4.setText(" ONE EYE ")

            elif comboindex3 == 20:
                
                self.plot3_time_line.setValue(plot_time_index)

                txt = ' {0} '.format(format(YEN_저가, ','))
                self.label_36.setText(txt)

                tmp = self.label_37.text().split()[0]
                과거가 =  tmp.replace(',', '')     

                if YEN_현재가 > float(과거가):

                    txt = " {0} ▲ ({1:.1f}, {2:.1f}%, {3}) ".format(format(YEN_현재가, ','), YEN_종가대비, YEN_등락율, YEN_진폭_틱)

                    if YEN_종가대비 > 0:
                        self.label_37.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif YEN_종가대비 < 0:
                        self.label_37.setStyleSheet('background-color: pink; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_37.setStyleSheet('background-color: pink; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_37.setText(txt)

                elif YEN_현재가 < float(과거가):

                    txt = " {0} ▼ ({1:.1f}, {2:.1f}%, {3}) ".format(format(YEN_현재가, ','), YEN_종가대비, YEN_등락율, YEN_진폭_틱)

                    if YEN_종가대비 > 0:
                        self.label_37.setStyleSheet('background-color: skyblue; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif YEN_종가대비 < 0:
                        self.label_37.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_37.setStyleSheet('background-color: skyblue; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_37.setText(txt)
                else:
                    pass

                txt = ' {0} '.format(format(YEN_고가, ','))
                self.label_38.setText(txt)

                self.plot3_ovc_jl_line.setValue(YEN_전저)
                self.plot3_ovc_jh_line.setValue(YEN_전고)
                self.plot3_ovc_close_line.setValue(YEN_전일종가)
                self.plot3_ovc_open_line.setValue(YEN_시가)
                self.plot3_ovc_pivot_line.setValue(YEN_피봇)
                self.plot3_ovc_low_line.setValue(YEN_저가)
                self.plot3_ovc_high_line.setValue(YEN_고가)                 

                self.plot3_yen_curve.setData(df_yen_graph['Price'].astype(float))

                if flag_checkBox_plot3_bband:

                    self.parent.Calc_Bollinger('YEN')

                    self.plot3_bollinger_1st_upper_curve.setData(df_yen_ta_graph['BBUpper_1st'].astype(float))
                    self.plot3_bollinger_1st_middle_curve.setData(df_yen_ta_graph['BBMiddle_1st'].astype(float))
                    self.plot3_bollinger_1st_lower_curve.setData(df_yen_ta_graph['BBLower_1st'].astype(float))
                    self.plot3_bollinger_2nd_upper_curve.setData(df_yen_ta_graph['BBUpper_2nd'].astype(float))
                    self.plot3_bollinger_2nd_middle_curve.setData(df_yen_ta_graph['BBMiddle_2nd'].astype(float))
                    self.plot3_bollinger_2nd_lower_curve.setData(df_yen_ta_graph['BBLower_2nd'].astype(float))

                    self.plot3_fibonacci_line1.setValue(yen_fibonacci_levels[1])
                    self.plot3_fibonacci_line2.setValue(yen_fibonacci_levels[2])
                    self.plot3_fibonacci_line3.setValue(yen_fibonacci_levels[3])
                    self.plot3_fibonacci_line4.setValue(yen_fibonacci_levels[4])
                    self.plot3_fibonacci_line5.setValue(yen_fibonacci_levels[5])

                    if df_yen_ta_graph.at[plot_time_index, 'BBMiddle_2nd'] >= df_yen_ta_graph.at[plot_time_index, 'Price']:
                        self.label_p3_2.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p3_2.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " BB U: {0:.1f}\n BB M: {1:.1f}\n BB L: {2:.1f} ".format\
                        (df_yen_ta_graph.at[plot_time_index, 'BBUpper_2nd'], df_yen_ta_graph.at[plot_time_index, 'BBMiddle_2nd'], df_yen_ta_graph.at[plot_time_index, 'BBLower_2nd'])
                    self.label_p3_2.setText(txt)
                else:
                    self.plot3_fibonacci_line1.setValue(YEN_전일종가)
                    self.plot3_fibonacci_line2.setValue(YEN_전일종가)
                    self.plot3_fibonacci_line3.setValue(YEN_전일종가)
                    self.plot3_fibonacci_line4.setValue(YEN_전일종가)
                    self.plot3_fibonacci_line5.setValue(YEN_전일종가)

                    self.label_p3_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p3_2.setText(" BB Upper\n BB Middle\n BB Lower ")

                if flag_checkBox_plot3_psar:

                    self.parent.Calc_PSAR_MAMA('YEN')

                    self.plot3_psar_curve.setData(df_yen_ta_graph['PSAR'][0:plot_time_index+1].astype(float))

                    #self.plot3_sslup_curve.setData(df_yen_ta_graph['SSLUp'][0:plot_time_index+1].astype(float))
                    #self.plot3_ssldown_curve.setData(df_yen_ta_graph['SSLDown'][0:plot_time_index+1].astype(float))

                    self.plot3_mama_curve.setData(df_yen_ta_graph['MAMA'].astype(float))
                    df = df_yen_ta_graph['FAMA'].apply(lambda x: YEN_저가 if x < YEN_저가 else x)
                    self.plot3_fama_curve.setData(df.astype(float))                        

                    if df_yen_ta_graph.at[plot_time_index, 'PSAR'] > df_yen_ta_graph.at[plot_time_index, 'Price'] and df_yen_ta_graph.at[plot_time_index, 'MAMA'] < df_yen_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p3_3.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_yen_ta_graph.at[plot_time_index, 'PSAR'] < df_yen_ta_graph.at[plot_time_index, 'Price'] and df_yen_ta_graph.at[plot_time_index, 'MAMA'] > df_yen_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p3_3.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold') 
                    else:
                        self.label_p3_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " PSAR: {0:.1f}\n MAMA: {1:.1f}\n FAMA: {2:.1f} ".format(df_yen_ta_graph.at[plot_time_index, 'PSAR'], df_yen_ta_graph.at[plot_time_index, 'MAMA'], df_yen_ta_graph.at[plot_time_index, 'FAMA'])
                    self.label_p3_3.setText(txt)
                else:
                    self.label_p3_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p3_3.setText(" PSAR\n MAMA ")
                
                if flag_checkBox_plot3_one_eye:

                    self.plot3_oe_conv_curve.setData(df_yen_ta_graph['OE_CONV'].astype(float))
                    self.plot3_oe_base_curve.setData(df_yen_ta_graph['OE_BASE'].astype(float))
                    self.plot3_span_a_curve.setData(df_yen_ta_graph['SPAN_A'].astype(float))
                    self.plot3_span_b_curve.setData(df_yen_ta_graph['SPAN_B'].astype(float))

                    if flag_one_eye_lagging_span:
                        self.plot3_lagging_span_curve.setData(df_yen_ta_graph['LAGGING_SPAN'].astype(float))

                    if df_yen_ta_graph.at[plot_time_index, 'OE_CONV'] < df_yen_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_yen_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] < df_yen_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p3_4.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_yen_ta_graph.at[plot_time_index, 'OE_CONV'] > df_yen_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_yen_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] > df_yen_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p3_4.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p3_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " 기준선: {0:.1f}\n 전환선: {1:.1f}\n SPAN A: {2:.1f} \n SPAN B: {3:.1f} ".format\
                        (df_yen_ta_graph.at[plot_time_index, 'OE_BASE'], df_yen_ta_graph.at[plot_time_index, 'OE_CONV'], \
                            df_yen_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'], df_yen_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B'])
                    self.label_p3_4.setText(txt)
                    
                else:
                    self.label_p3_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p3_4.setText(" ONE EYE ")
            
            elif comboindex3 == 21:

                self.plot3_time_line.setValue(plot_time_index)

                txt = ' {0:.5f} '.format(ADI_저가)
                self.label_36.setText(txt)

                과거가 =  self.label_37.text().split()[0]     

                if ADI_현재가 > float(과거가):

                    txt = " {0:.5f} ▲ ({1:.5f}, {2:.1f}%, {3}) ".format(ADI_현재가, ADI_종가대비, ADI_등락율, ADI_진폭_틱)

                    if ADI_종가대비 > 0:
                        self.label_37.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif ADI_종가대비 < 0:
                        self.label_37.setStyleSheet('background-color: pink; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_37.setStyleSheet('background-color: pink; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_37.setText(txt)

                elif ADI_현재가 < float(과거가):

                    txt = " {0:.5f} ▼ ({1:.5f}, {2:.1f}%, {3}) ".format(ADI_현재가, ADI_종가대비, ADI_등락율, ADI_진폭_틱)

                    if ADI_종가대비 > 0:
                        self.label_37.setStyleSheet('background-color: skyblue; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif ADI_종가대비 < 0:
                        self.label_37.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_37.setStyleSheet('background-color: skyblue; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_37.setText(txt)
                else:
                    pass

                txt = ' {0:.5f} '.format(ADI_고가)
                self.label_38.setText(txt)

                if ADI_전저 > 0:
                    self.plot3_ovc_jl_line.setValue(ADI_전저)

                if ADI_전고 > 0:
                    self.plot3_ovc_jh_line.setValue(ADI_전고)

                self.plot3_ovc_close_line.setValue(ADI_전일종가)
                self.plot3_ovc_open_line.setValue(ADI_시가)

                if ADI_피봇 > 0:
                    self.plot3_ovc_pivot_line.setValue(ADI_피봇)
                    
                self.plot3_ovc_low_line.setValue(ADI_저가)
                self.plot3_ovc_high_line.setValue(ADI_고가)                 

                self.plot3_adi_curve.setData(df_adi_graph['Price'].astype(float))

                if flag_checkBox_plot3_bband:

                    self.parent.Calc_Bollinger('ADI')

                    self.plot3_bollinger_1st_upper_curve.setData(df_adi_ta_graph['BBUpper_1st'].astype(float))
                    self.plot3_bollinger_1st_middle_curve.setData(df_adi_ta_graph['BBMiddle_1st'].astype(float))
                    self.plot3_bollinger_1st_lower_curve.setData(df_adi_ta_graph['BBLower_1st'].astype(float))
                    self.plot3_bollinger_2nd_upper_curve.setData(df_adi_ta_graph['BBUpper_2nd'].astype(float))
                    self.plot3_bollinger_2nd_middle_curve.setData(df_adi_ta_graph['BBMiddle_2nd'].astype(float))
                    self.plot3_bollinger_2nd_lower_curve.setData(df_adi_ta_graph['BBLower_2nd'].astype(float))

                    self.plot3_fibonacci_line1.setValue(adi_fibonacci_levels[1])
                    self.plot3_fibonacci_line2.setValue(adi_fibonacci_levels[2])
                    self.plot3_fibonacci_line3.setValue(adi_fibonacci_levels[3])
                    self.plot3_fibonacci_line4.setValue(adi_fibonacci_levels[4])
                    self.plot3_fibonacci_line5.setValue(adi_fibonacci_levels[5])

                    if df_adi_ta_graph.at[plot_time_index, 'BBMiddle_2nd'] >= df_adi_ta_graph.at[plot_time_index, 'Price']:
                        self.label_p3_2.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p3_2.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " BB U: {0:.5f}\n BB M: {1:.5f}\n BB L: {2:.5f} ".format\
                        (df_adi_ta_graph.at[plot_time_index, 'BBUpper_2nd'], df_adi_ta_graph.at[plot_time_index, 'BBMiddle_2nd'], df_adi_ta_graph.at[plot_time_index, 'BBLower_2nd'])
                    self.label_p3_2.setText(txt)
                else:
                    self.plot3_fibonacci_line1.setValue(ADI_전일종가)
                    self.plot3_fibonacci_line2.setValue(ADI_전일종가)
                    self.plot3_fibonacci_line3.setValue(ADI_전일종가)
                    self.plot3_fibonacci_line4.setValue(ADI_전일종가)
                    self.plot3_fibonacci_line5.setValue(ADI_전일종가)

                    self.label_p3_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p3_2.setText(" BB Upper\n BB Middle\n BB Lower ")

                if flag_checkBox_plot3_psar:

                    self.parent.Calc_PSAR_MAMA('ADI')

                    self.plot3_psar_curve.setData(df_adi_ta_graph['PSAR'][0:plot_time_index+1].astype(float))

                    #self.plot3_sslup_curve.setData(df_adi_ta_graph['SSLUp'][0:plot_time_index+1].astype(float))
                    #self.plot3_ssldown_curve.setData(df_adi_ta_graph['SSLDown'][0:plot_time_index+1].astype(float))

                    self.plot3_mama_curve.setData(df_adi_ta_graph['MAMA'].astype(float))
                    df = df_adi_ta_graph['FAMA'].apply(lambda x: ADI_저가 if x < ADI_저가 else x)
                    self.plot3_fama_curve.setData(df.astype(float))                        

                    if df_adi_ta_graph.at[plot_time_index, 'PSAR'] > df_adi_ta_graph.at[plot_time_index, 'Price'] and df_adi_ta_graph.at[plot_time_index, 'MAMA'] < df_adi_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p3_3.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_adi_ta_graph.at[plot_time_index, 'PSAR'] < df_adi_ta_graph.at[plot_time_index, 'Price'] and df_adi_ta_graph.at[plot_time_index, 'MAMA'] > df_adi_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p3_3.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold') 
                    else:
                        self.label_p3_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " PSAR: {0:.5f}\n MAMA: {1:.5f}\n FAMA: {2:.5f} ".format(df_adi_ta_graph.at[plot_time_index, 'PSAR'], df_adi_ta_graph.at[plot_time_index, 'MAMA'], df_adi_ta_graph.at[plot_time_index, 'FAMA'])
                    self.label_p3_3.setText(txt)
                else:
                    self.label_p3_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p3_3.setText(" PSAR\n MAMA ")
                
                if flag_checkBox_plot3_one_eye:

                    self.plot3_oe_conv_curve.setData(df_adi_ta_graph['OE_CONV'].astype(float))
                    self.plot3_oe_base_curve.setData(df_adi_ta_graph['OE_BASE'].astype(float))
                    self.plot3_span_a_curve.setData(df_adi_ta_graph['SPAN_A'].astype(float))
                    self.plot3_span_b_curve.setData(df_adi_ta_graph['SPAN_B'].astype(float))

                    if flag_one_eye_lagging_span:
                        self.plot3_lagging_span_curve.setData(df_adi_ta_graph['LAGGING_SPAN'].astype(float))

                    if df_adi_ta_graph.at[plot_time_index, 'OE_CONV'] < df_adi_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_adi_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] < df_adi_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p3_4.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_adi_ta_graph.at[plot_time_index, 'OE_CONV'] > df_adi_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_adi_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] > df_adi_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p3_4.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p3_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " 기준선: {0:.5f}\n 전환선: {1:.5f}\n SPAN A: {2:.5f} \n SPAN B: {3:.5f} ".format\
                        (df_adi_ta_graph.at[plot_time_index, 'OE_BASE'], df_adi_ta_graph.at[plot_time_index, 'OE_CONV'], \
                            df_adi_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'], df_adi_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B'])
                    self.label_p3_4.setText(txt)
                    
                else:
                    self.label_p3_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p3_4.setText(" ONE EYE ")
            
            elif comboindex3 == 23:

                self.plot3_time_line.setValue(plot_time_index)

                df_futures_cm_ta_graph['CCI1'] = talib.CCI(df_futures_cm_ta_graph['High'], df_futures_cm_ta_graph['Low'], df_futures_cm_ta_graph['Close'], timeperiod=CCI1_PERIOD)                
                df_futures_cm_ta_graph['CCI2'] = talib.CCI(df_futures_cm_ta_graph['High'], df_futures_cm_ta_graph['Low'], df_futures_cm_ta_graph['Close'], timeperiod=CCI2_PERIOD)
                df_futures_cm_ta_graph['RSI'] = (talib.RSI(df_futures_cm_ta_graph['Close'], timeperiod=RSI_PERIOD) - RSI_OFFSET) * RSI_SCALE_FACTOR

                txt = " CCI1: {0:.0f}, CCI2: {1:.0f}, RSI: {2:.0f} ".format(df_futures_cm_ta_graph.at[plot_time_index, 'CCI1'], df_futures_cm_ta_graph.at[plot_time_index, 'CCI2'], df_futures_cm_ta_graph.at[plot_time_index, 'RSI'])

                if df_futures_cm_ta_graph.at[plot_time_index, 'CCI2'] > 0:
                    self.label_37.setStyleSheet('background-color: yellow; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                elif df_futures_cm_ta_graph.at[plot_time_index, 'CCI2'] < 0:
                    self.label_37.setStyleSheet('background-color: yellow; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                else:
                    self.label_37.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                self.label_37.setText(txt)

                self.plot3_cci_plus_100_line.setValue(100)
                self.plot3_cci_minus_100_line.setValue(-100)
                                
                self.plot3_futures_cci1_curve.setData(df_futures_cm_ta_graph['CCI1'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot3_futures_cci2_curve.setData(df_futures_cm_ta_graph['CCI2'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot3_futures_rsi_curve.setData(df_futures_cm_ta_graph['RSI'].astype(float))

            elif comboindex3 == 24:

                self.plot3_time_line.setValue(plot_time_index)

                df_sp500_ta_graph['CCI1'] = talib.CCI(df_sp500_ta_graph['High'], df_sp500_ta_graph['Low'], df_sp500_ta_graph['Close'], timeperiod=CCI1_PERIOD)
                df_sp500_ta_graph['CCI2'] = talib.CCI(df_sp500_ta_graph['High'], df_sp500_ta_graph['Low'], df_sp500_ta_graph['Close'], timeperiod=CCI2_PERIOD)
                df_sp500_ta_graph['RSI'] = (talib.RSI(df_sp500_ta_graph['Close'], timeperiod=RSI_PERIOD) - RSI_OFFSET) * RSI_SCALE_FACTOR

                txt = " CCI1: {0:.0f}, CCI2: {1:.0f}, RSI: {2:.0f} ".format(df_sp500_ta_graph.at[plot_time_index, 'CCI1'], df_sp500_ta_graph.at[plot_time_index, 'CCI2'], df_sp500_ta_graph.at[plot_time_index, 'RSI'])

                if df_sp500_ta_graph.at[plot_time_index, 'CCI2'] > 0:
                    self.label_37.setStyleSheet('background-color: yellow; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                elif df_sp500_ta_graph.at[plot_time_index, 'CCI2'] < 0:
                    self.label_37.setStyleSheet('background-color: yellow; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                else:
                    self.label_37.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                self.label_37.setText(txt)

                self.plot3_cci_plus_100_line.setValue(100)
                self.plot3_cci_minus_100_line.setValue(-100)
                
                self.plot3_sp500_cci1_curve.setData(df_sp500_ta_graph['CCI1'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot3_sp500_cci2_curve.setData(df_sp500_ta_graph['CCI2'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot3_sp500_rsi_curve.setData(df_sp500_ta_graph['RSI'].astype(float))

            elif comboindex3 == 25:
                
                self.plot3_time_line.setValue(plot_time_index)

                df_dow_ta_graph['CCI1'] = talib.CCI(df_dow_ta_graph['High'], df_dow_ta_graph['Low'], df_dow_ta_graph['Close'], timeperiod=CCI1_PERIOD)
                df_dow_ta_graph['CCI2'] = talib.CCI(df_dow_ta_graph['High'], df_dow_ta_graph['Low'], df_dow_ta_graph['Close'], timeperiod=CCI2_PERIOD)
                df_dow_ta_graph['RSI'] = (talib.RSI(df_dow_ta_graph['Close'], timeperiod=RSI_PERIOD) - RSI_OFFSET) * RSI_SCALE_FACTOR

                txt = " CCI1: {0:.0f}, CCI2: {1:.0f}, RSI: {2:.0f} ".format(df_dow_ta_graph.at[plot_time_index, 'CCI1'], df_dow_ta_graph.at[plot_time_index, 'CCI2'], df_dow_ta_graph.at[plot_time_index, 'RSI'])

                if df_dow_ta_graph.at[plot_time_index, 'CCI2'] > 0:
                    self.label_37.setStyleSheet('background-color: yellow; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                elif df_dow_ta_graph.at[plot_time_index, 'CCI2'] < 0:
                    self.label_37.setStyleSheet('background-color: yellow; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                else:
                    self.label_37.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                self.label_37.setText(txt)

                self.plot3_cci_plus_100_line.setValue(100)
                self.plot3_cci_minus_100_line.setValue(-100)
                
                self.plot3_dow_cci1_curve.setData(df_dow_ta_graph['CCI1'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot3_dow_cci2_curve.setData(df_dow_ta_graph['CCI2'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot3_dow_rsi_curve.setData(df_dow_ta_graph['RSI'].astype(float))

            elif comboindex3 == 26:
                
                self.plot3_time_line.setValue(plot_time_index)

                df_nasdaq_ta_graph['CCI1'] = talib.CCI(df_nasdaq_ta_graph['High'], df_nasdaq_ta_graph['Low'], df_nasdaq_ta_graph['Close'], timeperiod=CCI1_PERIOD)
                df_nasdaq_ta_graph['CCI2'] = talib.CCI(df_nasdaq_ta_graph['High'], df_nasdaq_ta_graph['Low'], df_nasdaq_ta_graph['Close'], timeperiod=CCI2_PERIOD)
                df_nasdaq_ta_graph['RSI'] = (talib.RSI(df_nasdaq_ta_graph['Close'], timeperiod=RSI_PERIOD) - RSI_OFFSET) * RSI_SCALE_FACTOR

                txt = " CCI1: {0:.0f}, CCI2: {1:.0f}, RSI: {2:.0f} ".format(df_nasdaq_ta_graph.at[plot_time_index, 'CCI1'], df_nasdaq_ta_graph.at[plot_time_index, 'CCI2'], df_nasdaq_ta_graph.at[plot_time_index, 'RSI'])

                if df_nasdaq_ta_graph.at[plot_time_index, 'CCI2'] > 0:
                    self.label_37.setStyleSheet('background-color: yellow; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                elif df_nasdaq_ta_graph.at[plot_time_index, 'CCI2'] < 0:
                    self.label_37.setStyleSheet('background-color: yellow; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                else:
                    self.label_37.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                self.label_37.setText(txt)

                self.plot3_cci_plus_100_line.setValue(100)
                self.plot3_cci_minus_100_line.setValue(-100)
                
                self.plot3_nasdaq_cci1_curve.setData(df_nasdaq_ta_graph['CCI1'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot3_nasdaq_cci2_curve.setData(df_nasdaq_ta_graph['CCI2'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot3_nasdaq_rsi_curve.setData(df_nasdaq_ta_graph['RSI'].astype(float))

            elif comboindex3 == 27:
                
                self.plot3_time_line.setValue(plot_time_index)

                df_hsi_ta_graph['CCI1'] = talib.CCI(df_hsi_ta_graph['High'], df_hsi_ta_graph['Low'], df_hsi_ta_graph['Close'], timeperiod=CCI1_PERIOD)
                df_hsi_ta_graph['CCI2'] = talib.CCI(df_hsi_ta_graph['High'], df_hsi_ta_graph['Low'], df_hsi_ta_graph['Close'], timeperiod=CCI2_PERIOD)
                df_hsi_ta_graph['RSI'] = (talib.RSI(df_hsi_ta_graph['Close'], timeperiod=RSI_PERIOD) - RSI_OFFSET) * RSI_SCALE_FACTOR

                txt = " CCI1: {0:.0f}, CCI2: {1:.0f}, RSI: {2:.0f} ".format(df_hsi_ta_graph.at[plot_time_index, 'CCI1'], df_hsi_ta_graph.at[plot_time_index, 'CCI2'], df_hsi_ta_graph.at[plot_time_index, 'RSI'])

                if df_hsi_ta_graph.at[plot_time_index, 'CCI2'] > 0:
                    self.label_37.setStyleSheet('background-color: yellow; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                elif df_hsi_ta_graph.at[plot_time_index, 'CCI2'] < 0:
                    self.label_37.setStyleSheet('background-color: yellow; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                else:
                    self.label_37.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                self.label_37.setText(txt)

                self.plot3_cci_plus_100_line.setValue(100)
                self.plot3_cci_minus_100_line.setValue(-100)
                
                self.plot3_hsi_cci1_curve.setData(df_hsi_ta_graph['CCI1'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot3_hsi_cci2_curve.setData(df_hsi_ta_graph['CCI2'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot3_hsi_rsi_curve.setData(df_hsi_ta_graph['RSI'].astype(float))

            elif comboindex3 == 28:
                
                self.plot3_time_line.setValue(plot_time_index)

                df_wti_ta_graph['CCI1'] = talib.CCI(df_wti_ta_graph['High'], df_wti_ta_graph['Low'], df_wti_ta_graph['Close'], timeperiod=CCI1_PERIOD)
                df_wti_ta_graph['CCI2'] = talib.CCI(df_wti_ta_graph['High'], df_wti_ta_graph['Low'], df_wti_ta_graph['Close'], timeperiod=CCI2_PERIOD)
                df_wti_ta_graph['RSI'] = (talib.RSI(df_wti_ta_graph['Close'], timeperiod=RSI_PERIOD) - RSI_OFFSET) * RSI_SCALE_FACTOR

                txt = " CCI1: {0:.0f}, CCI2: {1:.0f}, RSI: {2:.0f} ".format(df_wti_ta_graph.at[plot_time_index, 'CCI1'], df_wti_ta_graph.at[plot_time_index, 'CCI2'], df_wti_ta_graph.at[plot_time_index, 'RSI'])

                if df_wti_ta_graph.at[plot_time_index, 'CCI2'] > 0:
                    self.label_37.setStyleSheet('background-color: yellow; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                elif df_wti_ta_graph.at[plot_time_index, 'CCI2'] < 0:
                    self.label_37.setStyleSheet('background-color: yellow; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                else:
                    self.label_37.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                self.label_37.setText(txt)

                self.plot3_cci_plus_100_line.setValue(100)
                self.plot3_cci_minus_100_line.setValue(-100)
                
                self.plot3_wti_cci1_curve.setData(df_wti_ta_graph['CCI1'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot3_wti_cci2_curve.setData(df_wti_ta_graph['CCI2'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot3_wti_rsi_curve.setData(df_wti_ta_graph['RSI'].astype(float))

            elif comboindex3 == 29:
                
                self.plot3_time_line.setValue(plot_time_index)

                df_gold_ta_graph['CCI1'] = talib.CCI(df_gold_ta_graph['High'], df_gold_ta_graph['Low'], df_gold_ta_graph['Close'], timeperiod=CCI1_PERIOD)
                df_gold_ta_graph['CCI2'] = talib.CCI(df_gold_ta_graph['High'], df_gold_ta_graph['Low'], df_gold_ta_graph['Close'], timeperiod=CCI2_PERIOD)
                df_gold_ta_graph['RSI'] = (talib.RSI(df_gold_ta_graph['Close'], timeperiod=RSI_PERIOD) - RSI_OFFSET) * RSI_SCALE_FACTOR

                txt = " CCI1: {0:.0f}, CCI2: {1:.0f}, RSI: {2:.0f} ".format(df_gold_ta_graph.at[plot_time_index, 'CCI1'], df_gold_ta_graph.at[plot_time_index, 'CCI2'], df_gold_ta_graph.at[plot_time_index, 'RSI'])

                if df_gold_ta_graph.at[plot_time_index, 'CCI2'] > 0:
                    self.label_37.setStyleSheet('background-color: yellow; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                elif df_gold_ta_graph.at[plot_time_index, 'CCI2'] < 0:
                    self.label_37.setStyleSheet('background-color: yellow; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                else:
                    self.label_37.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                self.label_37.setText(txt)

                self.plot3_cci_plus_100_line.setValue(100)
                self.plot3_cci_minus_100_line.setValue(-100)
                
                self.plot3_gold_cci1_curve.setData(df_gold_ta_graph['CCI1'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot3_gold_cci2_curve.setData(df_gold_ta_graph['CCI2'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot3_gold_rsi_curve.setData(df_gold_ta_graph['RSI'].astype(float))

            elif comboindex3 == 30:
                
                self.plot3_time_line.setValue(plot_time_index)

                df_euro_ta_graph['CCI1'] = talib.CCI(df_euro_ta_graph['High'], df_euro_ta_graph['Low'], df_euro_ta_graph['Close'], timeperiod=CCI1_PERIOD)
                df_euro_ta_graph['CCI2'] = talib.CCI(df_euro_ta_graph['High'], df_euro_ta_graph['Low'], df_euro_ta_graph['Close'], timeperiod=CCI2_PERIOD)
                df_euro_ta_graph['RSI'] = (talib.RSI(df_euro_ta_graph['Close'], timeperiod=RSI_PERIOD) - RSI_OFFSET) * RSI_SCALE_FACTOR

                txt = " CCI1: {0:.0f}, CCI2: {1:.0f}, RSI: {2:.0f} ".format(df_euro_ta_graph.at[plot_time_index, 'CCI1'], df_euro_ta_graph.at[plot_time_index, 'CCI2'], df_euro_ta_graph.at[plot_time_index, 'RSI'])

                if df_euro_ta_graph.at[plot_time_index, 'CCI2'] > 0:
                    self.label_37.setStyleSheet('background-color: yellow; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                elif df_euro_ta_graph.at[plot_time_index, 'CCI2'] < 0:
                    self.label_37.setStyleSheet('background-color: yellow; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                else:
                    self.label_37.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                self.label_37.setText(txt)

                self.plot3_cci_plus_100_line.setValue(100)
                self.plot3_cci_minus_100_line.setValue(-100)
                
                self.plot3_euro_cci1_curve.setData(df_euro_ta_graph['CCI1'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot3_euro_cci2_curve.setData(df_euro_ta_graph['CCI2'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot3_euro_rsi_curve.setData(df_euro_ta_graph['RSI'].astype(float))

            elif comboindex3 == 31:
                
                self.plot3_time_line.setValue(plot_time_index)

                df_yen_ta_graph['CCI1'] = talib.CCI(df_yen_ta_graph['High'], df_yen_ta_graph['Low'], df_yen_ta_graph['Close'], timeperiod=CCI1_PERIOD)
                df_yen_ta_graph['CCI2'] = talib.CCI(df_yen_ta_graph['High'], df_yen_ta_graph['Low'], df_yen_ta_graph['Close'], timeperiod=CCI2_PERIOD)
                df_yen_ta_graph['RSI'] = (talib.RSI(df_yen_ta_graph['Close'], timeperiod=RSI_PERIOD) - RSI_OFFSET) * RSI_SCALE_FACTOR

                txt = " CCI1: {0:.0f}, CCI2: {1:.0f}, RSI: {2:.0f} ".format(df_yen_ta_graph.at[plot_time_index, 'CCI1'], df_yen_ta_graph.at[plot_time_index, 'CCI2'], df_yen_ta_graph.at[plot_time_index, 'RSI'])

                if df_yen_ta_graph.at[plot_time_index, 'CCI2'] > 0:
                    self.label_37.setStyleSheet('background-color: yellow; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                elif df_yen_ta_graph.at[plot_time_index, 'CCI2'] < 0:
                    self.label_37.setStyleSheet('background-color: yellow; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                else:
                    self.label_37.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                self.label_37.setText(txt)

                self.plot3_cci_plus_100_line.setValue(100)
                self.plot3_cci_minus_100_line.setValue(-100)
                
                self.plot3_yen_cci1_curve.setData(df_yen_ta_graph['CCI1'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot3_yen_cci2_curve.setData(df_yen_ta_graph['CCI2'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot3_yen_rsi_curve.setData(df_yen_ta_graph['RSI'].astype(float))

            elif comboindex3 == 32:
                
                self.plot3_time_line.setValue(plot_time_index)

                df_adi_ta_graph['CCI1'] = talib.CCI(df_adi_ta_graph['High'], df_adi_ta_graph['Low'], df_adi_ta_graph['Close'], timeperiod=CCI1_PERIOD)
                df_adi_ta_graph['CCI2'] = talib.CCI(df_adi_ta_graph['High'], df_adi_ta_graph['Low'], df_adi_ta_graph['Close'], timeperiod=CCI2_PERIOD)
                df_adi_ta_graph['RSI'] = (talib.RSI(df_adi_ta_graph['Close'], timeperiod=RSI_PERIOD) - RSI_OFFSET) * RSI_SCALE_FACTOR

                txt = " CCI1: {0:.0f}, CCI2: {1:.0f}, RSI: {2:.0f} ".format(df_adi_ta_graph.at[plot_time_index, 'CCI1'], df_adi_ta_graph.at[plot_time_index, 'CCI2'], df_adi_ta_graph.at[plot_time_index, 'RSI'])

                if df_adi_ta_graph.at[plot_time_index, 'CCI2'] > 0:
                    self.label_37.setStyleSheet('background-color: yellow; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                elif df_adi_ta_graph.at[plot_time_index, 'CCI2'] < 0:
                    self.label_37.setStyleSheet('background-color: yellow; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                else:
                    self.label_37.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                self.label_37.setText(txt)

                self.plot3_cci_plus_100_line.setValue(100)
                self.plot3_cci_minus_100_line.setValue(-100)
                
                self.plot3_adi_cci1_curve.setData(df_adi_ta_graph['CCI1'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot3_adi_cci2_curve.setData(df_adi_ta_graph['CCI2'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot3_adi_rsi_curve.setData(df_adi_ta_graph['RSI'].astype(float))
            else:
                pass

        except Exception as e:

            txt = '[{0:02d}:{1:02d}:{2:02d}] Exception : update_plot3 에서 {3} \n상기 오류가 발생했습니다.\r'.format(dt.hour, dt.minute, dt.second, traceback.format_exc())
            self.parent.textBrowser.append(txt)

        finally:
            if CME_체결시간 == '000000':
                txt = ' [{0:02d}:{1:02d}:{2:02d}] {3:.2f} ms '.format(dt.hour, dt.minute, dt.second, plot3_processing_time)
            else:
                if flag_kp200_low_node:
                    self.label_time_3.setStyleSheet('background-color: black; color: yellow; font-family: Consolas; font-size: 9pt; font: Bold')
                    txt = ' ★ KL {0:.2f} ms '.format(plot3_processing_time)
                else:
                    self.label_time_3.setStyleSheet('background-color: lawngreen; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    txt = ' {0:.2f} ms '.format(plot3_processing_time)

            self.label_time_3.setText(txt)

            flag_plot3_update_is_running = False

    @logging_time_plot4
    #@pyqtSlot()    
    def update_plot4(self):

        global flag_plot4_update_is_running        
        global flag_calltable_checkstate_changed, flag_puttable_checkstate_changed        

        try:        
            dt = datetime.now()

            flag_plot4_update_is_running = True                        

            # Plot4 그래프 그리기
            if comboindex4 == 2:
                
                self.plot4_time_line.setValue(plot_time_index)

                txt = ' {0} '.format(근월물_선물_피봇)
                self.label_44.setText(txt)

                txt = ' {0}/{1} '.format(근월물_선물_시가, 차월물_선물_시가)
                self.label_45.setText(txt)
                
                txt = ' {0} '.format(근월물_선물_저가)
                self.label_46.setText(txt)    

                과거가 =  self.label_47.text().split()[0]

                if 근월물_선물_현재가 > float(과거가):

                    txt = " {0} ▲ ({1:.2f}, {2:0.1f}%, {3:.2f}), kp200 : {4:.2f} ".format(근월물_선물_현재가, 근월물_선물_종가대비, 근월물_선물_종가대비_등락율, 근월물_선물_진폭, kp200_현재가)

                    if 근월물_선물_종가대비 > 0:
                        self.label_47.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif 근월물_선물_종가대비 < 0:
                        self.label_47.setStyleSheet('background-color: pink; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_47.setStyleSheet('background-color: pink; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_47.setText(txt)

                elif 근월물_선물_현재가 < float(과거가):

                    txt = " {0} ▼ ({1:.2f}, {2:0.1f}%, {3:.2f}), kp200 : {4:.2f} ".format(근월물_선물_현재가, 근월물_선물_종가대비, 근월물_선물_종가대비_등락율, 근월물_선물_진폭, kp200_현재가)

                    if 근월물_선물_종가대비 > 0:
                        self.label_47.setStyleSheet('background-color: skyblue; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif 근월물_선물_종가대비 < 0:
                        self.label_47.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_47.setStyleSheet('background-color: skyblue; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_47.setText(txt)
                else:
                    pass

                txt = ' {0} '.format(근월물_선물_고가)
                self.label_48.setText(txt)                
                
                self.plot4_kp200_line[3].setValue(KP200_COREVAL[3])
                self.plot4_kp200_line[4].setValue(KP200_COREVAL[4])
                self.plot4_kp200_line[5].setValue(KP200_COREVAL[5])
                self.plot4_kp200_line[6].setValue(KP200_COREVAL[6])                

                if 근월물_선물_저가 < KP200_COREVAL[3] or kp200_저가 < KP200_COREVAL[3]:
                    self.plot4_kp200_line[2].setValue(KP200_COREVAL[2])
                else:
                    pass

                if 근월물_선물_저가 < KP200_COREVAL[2] or kp200_저가 < KP200_COREVAL[2]:
                    self.plot4_kp200_line[1].setValue(KP200_COREVAL[1])
                else:
                    pass
                
                if 근월물_선물_고가 > KP200_COREVAL[6] or kp200_고가 > KP200_COREVAL[6]:
                    self.plot4_kp200_line[7].setValue(KP200_COREVAL[7])
                else:
                    pass

                if 근월물_선물_고가 > KP200_COREVAL[7] or kp200_고가 > KP200_COREVAL[7]:
                    self.plot4_kp200_line[8].setValue(KP200_COREVAL[8])
                else:
                    pass                
                
                self.plot4_fut_jl_line.setValue(근월물_선물_전저)
                self.plot4_fut_jh_line.setValue(근월물_선물_전고)
                self.plot4_fut_close_line.setValue(근월물_선물_종가)                
                self.plot4_fut_open_line.setValue(근월물_선물_시가)
                self.plot4_fut_low_line.setValue(근월물_선물_저가)
                self.plot4_fut_pivot_line.setValue(근월물_선물_피봇)
                self.plot4_fut_high_line.setValue(근월물_선물_고가)                

                if DayTime:
                    self.plot4_kp200_curve.setData(df_kp200_graph['Price'].astype(float))
                    self.plot4_fut_cm_price_curve.setData(df_futures_cm_graph['Price'].astype(float))
                    self.plot4_fut_nm_price_curve.setData(df_futures_nm_graph['Price'].astype(float))
                else:
                    pass

                if flag_checkBox_plot4_bband:

                    self.parent.Calc_Bollinger('FUT')
                
                    self.plot4_bollinger_1st_upper_curve.setData(df_futures_cm_ta_graph['BBUpper_1st'].astype(float))
                    self.plot4_bollinger_1st_middle_curve.setData(df_futures_cm_ta_graph['BBMiddle_1st'].astype(float))
                    self.plot4_bollinger_1st_lower_curve.setData(df_futures_cm_ta_graph['BBLower_1st'].astype(float))
                    self.plot4_bollinger_2nd_upper_curve.setData(df_futures_cm_ta_graph['BBUpper_2nd'].astype(float))
                    self.plot4_bollinger_2nd_middle_curve.setData(df_futures_cm_ta_graph['BBMiddle_2nd'].astype(float))
                    self.plot4_bollinger_2nd_lower_curve.setData(df_futures_cm_ta_graph['BBLower_2nd'].astype(float))

                    self.plot4_fibonacci_line1.setValue(futures_fibonacci_levels[1])
                    self.plot4_fibonacci_line2.setValue(futures_fibonacci_levels[2])
                    self.plot4_fibonacci_line3.setValue(futures_fibonacci_levels[3])
                    self.plot4_fibonacci_line4.setValue(futures_fibonacci_levels[4])
                    self.plot4_fibonacci_line5.setValue(futures_fibonacci_levels[5])

                    if df_futures_cm_ta_graph.at[plot_time_index, 'BBMiddle_2nd'] >= df_futures_cm_ta_graph.at[plot_time_index, 'Price']:
                        self.label_p4_2.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p4_2.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " BB U: {0:.2f}\n BB M: {1:.2f}\n BB L: {2:.2f} ".format\
                        (df_futures_cm_ta_graph.at[plot_time_index, 'BBUpper_2nd'], df_futures_cm_ta_graph.at[plot_time_index, 'BBMiddle_2nd'], df_futures_cm_ta_graph.at[plot_time_index, 'BBLower_2nd'])
                    self.label_p4_2.setText(txt)
                else:
                    self.plot4_fibonacci_line1.setValue(근월물_선물_종가)
                    self.plot4_fibonacci_line2.setValue(근월물_선물_종가)
                    self.plot4_fibonacci_line3.setValue(근월물_선물_종가)
                    self.plot4_fibonacci_line4.setValue(근월물_선물_종가)
                    self.plot4_fibonacci_line5.setValue(근월물_선물_종가)

                    self.label_p4_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p4_2.setText(" BB Upper\n BB Middle\n BB Lower ")

                if flag_checkBox_plot4_psar:

                    self.parent.Calc_PSAR_MAMA('FUT')

                    self.plot4_psar_curve.setData(df_futures_cm_ta_graph['PSAR'][0:plot_time_index+1].astype(float))

                    #self.plot4_sslup_curve.setData(df_futures_cm_ta_graph['SSLUp'][0:plot_time_index+1].astype(float))
                    #self.plot4_ssldown_curve.setData(df_futures_cm_ta_graph['SSLDown'][0:plot_time_index+1].astype(float))

                    self.plot4_mama_curve.setData(df_futures_cm_ta_graph['MAMA'].astype(float))
                    df = df_futures_cm_ta_graph['FAMA'].apply(lambda x: 근월물_선물_저가 if x < 근월물_선물_저가 else x)
                    self.plot4_fama_curve.setData(df.astype(float))

                    if df_futures_cm_ta_graph.at[plot_time_index, 'PSAR'] > df_futures_cm_ta_graph.at[plot_time_index, 'Price'] and df_futures_cm_ta_graph.at[plot_time_index, 'MAMA'] < df_futures_cm_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p4_3.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_futures_cm_ta_graph.at[plot_time_index, 'PSAR'] < df_futures_cm_ta_graph.at[plot_time_index, 'Price'] and df_futures_cm_ta_graph.at[plot_time_index, 'MAMA'] > df_futures_cm_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p4_3.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold') 
                    else:
                        self.label_p4_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " PSAR: {0:.2f}\n MAMA: {1:.2f}\n FAMA: {2:.2f} ".format(df_futures_cm_ta_graph.at[plot_time_index, 'PSAR'], df_futures_cm_ta_graph.at[plot_time_index, 'MAMA'], df_futures_cm_ta_graph.at[plot_time_index, 'FAMA'])
                    self.label_p4_3.setText(txt)
                else:
                    self.label_p4_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p4_3.setText(" PSAR\n MAMA ")
                
                if flag_checkBox_plot4_one_eye:

                    self.plot4_oe_conv_curve.setData(df_futures_cm_ta_graph['OE_CONV'].astype(float))
                    self.plot4_oe_base_curve.setData(df_futures_cm_ta_graph['OE_BASE'].astype(float))
                    self.plot4_span_a_curve.setData(df_futures_cm_ta_graph['SPAN_A'].astype(float))
                    self.plot4_span_b_curve.setData(df_futures_cm_ta_graph['SPAN_B'].astype(float))

                    if flag_one_eye_lagging_span:
                        self.plot4_lagging_span_curve.setData(df_futures_cm_ta_graph['LAGGING_SPAN'].astype(float))

                    if df_futures_cm_ta_graph.at[plot_time_index, 'OE_CONV'] < df_futures_cm_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_futures_cm_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] < df_futures_cm_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p4_4.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_futures_cm_ta_graph.at[plot_time_index, 'OE_CONV'] > df_futures_cm_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_futures_cm_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] > df_futures_cm_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p4_4.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p4_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " 기준선: {0:.2f}\n 전환선: {1:.2f}\n SPAN A: {2:.2f} \n SPAN B: {3:.2f} ".format\
                        (df_futures_cm_ta_graph.at[plot_time_index, 'OE_BASE'], df_futures_cm_ta_graph.at[plot_time_index, 'OE_CONV'], \
                            df_futures_cm_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'], df_futures_cm_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B'])
                    self.label_p4_4.setText(txt)
                    
                else:
                    self.label_p4_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p4_4.setText(" ONE EYE ")

            elif comboindex4 == 3:
                
                self.plot4_time_line.setValue(plot_time_index)

                txt = " {0:.2f}({1:.0f}/{2:.0f}) ".format(풋잔량비, put_quote['매수잔량'], put_quote['매도잔량'])
                self.label_46.setText(txt)

                txt = " CM: {0:.2f}({1:.0f}/{2:.0f}), NM: {3:.2f}({4:.0f}/{5:.0f}), [▼: {6:.2f}, ▲: {7:.2f}] ".format(\
                    선물_근월물_호가_잔량비, 근월물_매수호가_총수량, 근월물_매도호가_총수량, 선물_차월물_호가_잔량비, \
                    차월물_매수호가_총수량, 차월물_매도호가_총수량, 차월물_선물_호가잔량비_최소, 차월물_선물_호가잔량비_최대)

                if fut_quote_energy_direction == 'call':
                    self.label_47.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                elif fut_quote_energy_direction == 'put':
                    self.label_47.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                else:
                    self.label_47.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                self.label_47.setText(txt)
                
                txt = " {0:.2f}({1:.0f}/{2:.0f}) ".format(콜잔량비, call_quote['매수잔량'], call_quote['매도잔량'])
                self.label_48.setText(txt)

                self.plot4_call_quote_curve.setData(df_call_information_graph['quote_remainder_ratio'].astype(float))
                self.plot4_put_quote_curve.setData(df_put_information_graph['quote_remainder_ratio'].astype(float))

                if DayTime:
                    self.plot4_fut_cm_quote_remainder_ratio_curve.setData(df_futures_cm_graph['c_quote_remainder_ratio'].astype(float))
                    self.plot4_fut_nm_quote_remainder_ratio_curve.setData(df_futures_cm_graph['n_quote_remainder_ratio'].astype(float))
                    self.plot4_nm_futures_quote_remainder_ratio_bottom_line.setValue(차월물_선물_호가잔량비_최소)
                    self.plot4_nm_futures_quote_remainder_ratio_upper_line.setValue(차월물_선물_호가잔량비_최대)
                else:
                    pass

            elif comboindex4 == 4:
                
                self.plot4_time_line.setValue(plot_time_index)

                txt = " {0:.0f} ".format(put_volume_power)
                self.label_46.setText(txt)

                txt = " {0:.0f} ".format(fut_cm_volume_power)

                if fut_cm_volume_power > 0:
                    self.label_47.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                else:
                    self.label_47.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                self.label_47.setText(txt)
                
                txt = " {0:.0f} ".format(call_volume_power)
                self.label_48.setText(txt)                      

                if DayTime:
                    self.plot4_fut_volume_curve.setData(df_futures_cm_graph['Volume'].astype(float))
                else:
                    pass
                                
                self.plot4_call_volume_curve.setData(df_call_information_graph['Volume'].astype(float))
                self.plot4_put_volume_curve.setData(df_put_information_graph['Volume'].astype(float))

            # 옵션가격
            elif comboindex4 == 5:
                
                self.plot4_time_line.setValue(plot_time_index)

                if DayTime:

                    # 등가표시
                    txt = ' 등가: {0} '.format(atm_txt)
                    self.label_41.setText(txt)
                    
                    txt = ' 시작 중심가: {0:.2f} '.format(INIT_CENTER_VAL)
                    self.label_42.setText(txt)

                    txt = ' 하단: {0:.2f} '.format(옵션_중심가/GOLDEN_RATIO)

                    self.label_43.setText(txt)

                    txt = ' 상단: {0:.2f} '.format(옵션_중심가*GOLDEN_RATIO)
                    self.label_44.setText(txt)

                    txt = ' {0:.2f}({1:.2f}, {2:.2f}%) '.format(put_atm_value, df_put.at[ATM_INDEX, '대비'], (put_atm_value / df_put.at[ATM_INDEX, '시가'] - 1) * 100)
                    self.label_46.setText(txt)

                    txt = ' 중심가: {0:.2f} '.format(옵션_중심가)
                    self.label_47.setText(txt)

                    txt = ' {0:.2f}({1:.2f}, {2:.2f}%) '.format(call_atm_value, df_call.at[ATM_INDEX, '대비'], (call_atm_value / df_call.at[ATM_INDEX, '시가'] - 1) * 100)
                    self.label_48.setText(txt)
                else:
                    pass

                if flag_calltable_checkstate_changed:
                    flag_calltable_checkstate_changed = False
                    for i in range(option_pairs_count):
                        self.plot4_call_curve[i].clear()
                else:
                    pass

                if flag_puttable_checkstate_changed:
                    flag_puttable_checkstate_changed = False
                    for i in range(option_pairs_count):
                        self.plot4_put_curve[i].clear()
                else:
                    pass
                                
                # 선택된 콜그래프 그리기
                if selected_call:
                    for i in range(len(selected_call)):
                        self.plot4_call_curve[i].setData(df_call_graph[selected_call[i]]['Price'].astype(float))
                else:
                    pass                 

                # 선택된 풋그래프 그리기
                if selected_put:
                    for i in range(len(selected_put)):
                        self.plot4_put_curve[i].setData(df_put_graph[selected_put[i]]['Price'].astype(float))
                else:
                    pass

                if DayTime:
                    self.plot4_center_val_lower_line.setValue(옵션_중심가/GOLDEN_RATIO)
                    self.plot4_center_val_line.setValue(옵션_중심가)
                    self.plot4_center_val_upper_line.setValue(옵션_중심가*GOLDEN_RATIO)

                    self.plot4_center_val_curve.setData(df_call_information_graph['centerval'].astype(float))
                else:
                    pass
            
            elif comboindex4 == 6:
                
                self.plot4_time_line.setValue(plot_time_index)

                txt = " {0:.2f}({1:.0f}/{2:.0f}), [▼, ▲: {4:.2f}] ".format(풋잔량비, put_quote['매수잔량'], put_quote['매도잔량'], 풋_잔량비_최소, 풋_잔량비_최대)
                self.label_46.setText(txt)
                
                txt = " {0:.2f}({1:.0f}/{2:.0f}), [▼, ▲: {4:.2f}] ".format(콜잔량비, call_quote['매수잔량'], call_quote['매도잔량'], 콜_잔량비_최소, 콜_잔량비_최대)
                self.label_48.setText(txt)

                self.plot4_call_quote_curve.setData(df_call_information_graph['quote_remainder_ratio'].astype(float))
                self.plot4_put_quote_curve.setData(df_put_information_graph['quote_remainder_ratio'].astype(float))

                self.plot4_option_quote_remainder_ratio_bottom_line.setValue(옵션_잔량비_최소)
                self.plot4_option_quote_remainder_ratio_upper_line.setValue(옵션_잔량비_최대)

            elif comboindex4 == 7:
                
                self.plot4_time_line.setValue(plot_time_index)

                txt = " {0:.2f}({1:.2f}) ".format(풋_수정미결퍼센트, put_oi_init_percent)
                self.label_46.setText(txt)
                
                txt = " {0:.2f}({1:.2f}) ".format(콜_수정미결퍼센트, call_oi_init_percent)
                self.label_48.setText(txt)

                self.plot4_call_oi_curve.setData(df_call_information_graph['open_interest'].astype(float))
                self.plot4_put_oi_curve.setData(df_put_information_graph['open_interest'].astype(float))
            
            elif comboindex4 == 8:
                
                self.plot4_time_line.setValue(plot_time_index)

                txt = " {0:.2f}({1}) {2:.2f} ".format(SP500_시가대비_등락율, SP500_현재가, SP500_FUT_시가_등락율비)
                self.label_45.setText(txt)

                txt = " {0:.2f}({1}) ".format(put_otm_cdb_percent_mean, put_atm_value)
                self.label_46.setText(txt)

                txt = " {0:.2f}({1}) ".format(call_otm_cdb_percent_mean, call_atm_value)
                self.label_48.setText(txt)
                
                self.plot4_call_drate_curve.setData(df_call_information_graph['Drate'].astype(float))
                self.plot4_put_drate_curve.setData(df_put_information_graph['Drate'].astype(float))
                
                self.plot4_cme_drate_curve.setData(SP500_FUT_시가_등락율비 * df_sp500_graph['Drate'].astype(float) + DRATE_OFFSET)
                
                if DayTime:

                    txt = " {0:.2f}({1}), Gap : {2:.2f} ".format(근월물_선물_시가대비_등락율, 근월물_선물_현재가, drate_gap)

                    if drate_gap > 0:
                        self.label_47.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif drate_gap < 0:
                        self.label_47.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_47.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_47.setText(txt)

                    if not np.isnan(df_futures_cm_graph.at[plot_time_index, 'Drate']):
                        self.plot4_fut_cm_drate_curve.setData(plot_drate_scale_factor * df_futures_cm_graph['Drate'].astype(float))

                    if not np.isnan(df_futures_nm_graph.at[plot_time_index, 'Drate']):
                        self.plot4_fut_nm_drate_curve.setData(plot_drate_scale_factor * df_futures_nm_graph['Drate'].astype(float))                        
                else:
                    pass 
            
            elif comboindex4 == 10:
                
                self.plot4_time_line.setValue(plot_time_index)

                if DayTime:
                    txt = " 기관현물: {0} ".format(기관현물_순매수)
                    self.label_41.setText(txt)

                    txt = " 기관선물: {0} ".format(기관선물_순매수)
                    self.label_42.setText(txt)

                    txt = " 개인현물: {0} ".format(개인현물_순매수)
                    self.label_43.setText(txt)

                    txt = " 개인선물: {0} ".format(개인선물_순매수)
                    self.label_44.setText(txt)

                    if 프로그램_순매수 > 0 and 현물_총순매수 > 0:

                        if 외인선물_순매수 < 0 and 외인현물_순매수 < 0:
                            txt = ' - '
                            self.label_45.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                            self.label_45.setText(txt)

                        if (외인선물_순매수 < 0 and 외인현물_순매수 > 0) or (외인선물_순매수 > 0 and 외인현물_순매수 < 0):
                            txt = ' 외인수급 Cross '
                            self.label_45.setStyleSheet('background-color: black; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                            self.label_45.setText(txt)

                        if 외인선물_순매수 > 0 and 외인현물_순매수 > 0:
                            txt = ' 수급 Call! '
                            self.label_45.setStyleSheet('background-color: magenta; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                            self.label_45.setText(txt)

                    elif 프로그램_순매수 < 0 and 현물_총순매수 < 0:

                        if 외인선물_순매수 > 0 and 외인현물_순매수 > 0:
                            txt = ' - '
                            self.label_45.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                            self.label_45.setText(txt)

                        if (외인선물_순매수 > 0 and 외인현물_순매수 < 0) or (외인선물_순매수 < 0 and 외인현물_순매수 > 0):
                            txt = ' 외인수급 Cross '
                            self.label_45.setStyleSheet('background-color: black; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                            self.label_45.setText(txt)          

                        if 외인선물_순매수 < 0 and 외인현물_순매수 < 0:
                            txt = ' 수급 Put! '
                            self.label_45.setStyleSheet('background-color: cyan; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                            self.label_45.setText(txt)
                    else:
                        txt = ' 수급종합 Cross '
                        self.label_45.setStyleSheet('background-color: black; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                        self.label_45.setText(txt)

                    if not np.isnan(프로그램_순매수):
                        txt = " Prog/F.S: {0:.0f}/{1:.0f} ".format(프로그램_순매수, 외인현물_순매수)

                        if 프로그램_순매수 <= 0:
                            self.label_46.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                        else:
                            self.label_46.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                        self.label_46.setText(txt)
                    else:
                        pass

                    txt = " {0:.0f} ".format(fut_cm_volume_power)

                    if fut_cm_volume_power > 0:
                        self.label_47.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_47.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_47.setText(txt)
                    
                    if not np.isnan(현물_총순매수):
                        txt = " S.S/F.F: {0:.0f}/{1:.0f} ".format(현물_총순매수, 외인선물_순매수)

                        if 현물_총순매수 <= 0:
                            self.label_48.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                        else:
                            self.label_48.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                        self.label_48.setText(txt)
                    else:
                        pass

                    self.plot4_fut_volume_curve.setData(df_futures_cm_graph['Volume'].astype(float))
                    self.plot4_program_curve.setData(df_demand_supply_graph['Program'].astype(float))

                    df = df_demand_supply_graph['kospi_total'].apply(lambda x: np.nan if x == 0 else x)
                    df.at[0] = 0

                    self.plot4_kospi_total_curve.setData(df.astype(float))

                    self.plot4_kospi_foreigner_curve.setData(df_demand_supply_graph['kospi_foreigner'].astype(float))
                    self.plot4_futures_foreigner_curve.setData(df_demand_supply_graph['futures_foreigner'].astype(float))
                else:
                    pass

            elif comboindex4 == 11:
                
                pass
                '''
                self.plot4_time_line.setValue(plot_time_index)

                if DayTime:
                    txt = " 기관현물 : {0} ".format(기관현물_순매수)
                    self.label_41.setText(txt)

                    txt = " 기관선물 : {0} ".format(기관선물_순매수)
                    self.label_42.setText(txt)

                    txt = " 개인현물 : {0} ".format(개인현물_순매수)
                    self.label_43.setText(txt)

                    txt = " 개인선물 : {0} ".format(개인선물_순매수)
                    self.label_44.setText(txt)

                    if 프로그램_순매수 > 0 and 현물_총순매수 > 0:

                        if 외인선물_순매수 < 0 and 외인현물_순매수 < 0:
                            txt = ' - '
                            self.label_45.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                            self.label_45.setText(txt)

                        if (외인선물_순매수 < 0 and 외인현물_순매수 > 0) or (외인선물_순매수 > 0 and 외인현물_순매수 < 0):
                            txt = ' 외인수급 Cross '
                            self.label_45.setStyleSheet('background-color: black; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                            self.label_45.setText(txt)

                        if 외인선물_순매수 > 0 and 외인현물_순매수 > 0:
                            txt = ' 수급 Call! '
                            self.label_45.setStyleSheet('background-color: magenta; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                            self.label_45.setText(txt)

                    elif 프로그램_순매수 < 0 and 현물_총순매수 < 0:

                        if 외인선물_순매수 > 0 and 외인현물_순매수 > 0:
                            txt = ' - '
                            self.label_45.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                            self.label_45.setText(txt)

                        if (외인선물_순매수 > 0 and 외인현물_순매수 < 0) or (외인선물_순매수 < 0 and 외인현물_순매수 > 0):
                            txt = ' 외인수급 Cross '
                            self.label_45.setStyleSheet('background-color: black; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                            self.label_45.setText(txt)          

                        if 외인선물_순매수 < 0 and 외인현물_순매수 < 0:
                            txt = ' 수급 Put! '
                            self.label_45.setStyleSheet('background-color: cyan; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                            self.label_45.setText(txt)
                    else:
                        txt = ' 수급종합 Cross '
                        self.label_45.setStyleSheet('background-color: black; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                        self.label_45.setText(txt)

                    if not np.isnan(외인현물_순매수):
                        txt = " 외인현물 : {0:.0f} ".format(외인현물_순매수)

                        if 외인현물_순매수 <= 0:
                            self.label_46.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                        else:
                            self.label_46.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                        self.label_46.setText(txt)
                    else:
                        pass

                    txt = " {0:.0f} ".format(fut_cm_volume_power)

                    if fut_cm_volume_power > 0:
                        self.label_47.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_47.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_47.setText(txt)
                    
                    if not np.isnan(외인선물_순매수):
                        txt = " 외인선물 : {0:.0f} ".format(외인선물_순매수)

                        if 외인선물_순매수 <= 0:
                            self.label_48.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                        else:
                            self.label_48.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                        self.label_48.setText(txt)
                    else:
                        pass

                    self.plot4_fut_volume_curve.setData(df_futures_cm_graph['Volume'].astype(float))
                    self.plot4_kospi_foreigner_curve.setData(df_demand_supply_graph['kospi_foreigner'].astype(float))
                    self.plot4_futures_foreigner_curve.setData(df_demand_supply_graph['futures_foreigner'].astype(float))                    
                else:
                    pass
                '''

            elif comboindex4 == 13:
                
                self.plot4_time_line.setValue(plot_time_index)
                
                txt = ' {0} '.format(format(SP500_저가, ','))
                self.label_46.setText(txt)
                
                tmp = self.label_47.text().split()[0]
                과거가 =  tmp.replace(',', '')               

                if SP500_현재가 > float(과거가):

                    txt = " {0} ▲ ({1}, {2:0.1f}%, {3}) ".format(format(SP500_현재가, ','), SP500_종가대비, SP500_등락율, SP500_진폭_틱)

                    if SP500_종가대비 > 0:
                        self.label_47.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif SP500_종가대비 < 0:
                        self.label_47.setStyleSheet('background-color: pink; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_47.setStyleSheet('background-color: pink; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_47.setText(txt)

                elif SP500_현재가 < float(과거가):

                    txt = " {0} ▼ ({1}, {2:0.1f}%, {3}) ".format(format(SP500_현재가, ','), SP500_종가대비, SP500_등락율, SP500_진폭_틱)

                    if SP500_종가대비 > 0:
                        self.label_47.setStyleSheet('background-color: skyblue; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif SP500_종가대비 < 0:
                        self.label_47.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_47.setStyleSheet('background-color: skyblue; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_47.setText(txt)
                else:
                    pass

                txt = ' {0} '.format(format(SP500_고가, ','))
                self.label_48.setText(txt)

                self.plot4_ovc_jl_line.setValue(SP500_전저)
                self.plot4_ovc_jh_line.setValue(SP500_전고)
                self.plot4_ovc_close_line.setValue(SP500_전일종가)
                self.plot4_ovc_open_line.setValue(SP500_시가)
                self.plot4_ovc_pivot_line.setValue(SP500_피봇)
                self.plot4_ovc_low_line.setValue(SP500_저가)
                self.plot4_ovc_high_line.setValue(SP500_고가)

                self.plot4_sp500_curve.setData(df_sp500_graph['Price'].astype(float))

                if flag_checkBox_plot4_bband:

                    self.parent.Calc_Bollinger('SP500')

                    self.plot4_bollinger_1st_upper_curve.setData(df_sp500_ta_graph['BBUpper_1st'].astype(float))
                    self.plot4_bollinger_1st_middle_curve.setData(df_sp500_ta_graph['BBMiddle_1st'].astype(float))
                    self.plot4_bollinger_1st_lower_curve.setData(df_sp500_ta_graph['BBLower_1st'].astype(float))
                    self.plot4_bollinger_2nd_upper_curve.setData(df_sp500_ta_graph['BBUpper_2nd'].astype(float))
                    self.plot4_bollinger_2nd_middle_curve.setData(df_sp500_ta_graph['BBMiddle_2nd'].astype(float))
                    self.plot4_bollinger_2nd_lower_curve.setData(df_sp500_ta_graph['BBLower_2nd'].astype(float))

                    self.plot4_fibonacci_line1.setValue(sp500_fibonacci_levels[1])
                    self.plot4_fibonacci_line2.setValue(sp500_fibonacci_levels[2])
                    self.plot4_fibonacci_line3.setValue(sp500_fibonacci_levels[3])
                    self.plot4_fibonacci_line4.setValue(sp500_fibonacci_levels[4])
                    self.plot4_fibonacci_line5.setValue(sp500_fibonacci_levels[5])

                    if df_sp500_ta_graph.at[plot_time_index, 'BBMiddle_2nd'] >= df_sp500_ta_graph.at[plot_time_index, 'Price']:
                        self.label_p4_2.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p4_2.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " BB U: {0:.2f}\n BB M: {1:.2f}\n BB L: {2:.2f} ".format\
                        (df_sp500_ta_graph.at[plot_time_index, 'BBUpper_2nd'], df_sp500_ta_graph.at[plot_time_index, 'BBMiddle_2nd'], df_sp500_ta_graph.at[plot_time_index, 'BBLower_2nd'])
                    self.label_p4_2.setText(txt)
                else:
                    self.plot4_fibonacci_line1.setValue(SP500_전일종가)
                    self.plot4_fibonacci_line2.setValue(SP500_전일종가)
                    self.plot4_fibonacci_line3.setValue(SP500_전일종가)
                    self.plot4_fibonacci_line4.setValue(SP500_전일종가)
                    self.plot4_fibonacci_line5.setValue(SP500_전일종가)

                    self.label_p4_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p4_2.setText(" BB Upper\n BB Middle\n BB Lower ")

                if flag_checkBox_plot4_psar:

                    self.parent.Calc_PSAR_MAMA('SP500')

                    self.plot4_psar_curve.setData(df_sp500_ta_graph['PSAR'][0:plot_time_index+1].astype(float))

                    #self.plot4_sslup_curve.setData(df_sp500_ta_graph['SSLUp'][0:plot_time_index+1].astype(float))
                    #self.plot4_ssldown_curve.setData(df_sp500_ta_graph['SSLDown'][0:plot_time_index+1].astype(float))

                    self.plot4_mama_curve.setData(df_sp500_ta_graph['MAMA'].astype(float))
                    df = df_sp500_ta_graph['FAMA'].apply(lambda x: SP500_저가 if x < SP500_저가 else x)
                    self.plot4_fama_curve.setData(df.astype(float))

                    if df_sp500_ta_graph.at[plot_time_index, 'PSAR'] > df_sp500_ta_graph.at[plot_time_index, 'Price'] and df_sp500_ta_graph.at[plot_time_index, 'MAMA'] < df_sp500_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p4_3.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_sp500_ta_graph.at[plot_time_index, 'PSAR'] < df_sp500_ta_graph.at[plot_time_index, 'Price'] and df_sp500_ta_graph.at[plot_time_index, 'MAMA'] > df_sp500_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p4_3.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold') 
                    else:
                        self.label_p4_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " PSAR: {0:.2f}\n MAMA: {1:.2f}\n FAMA: {2:.2f} ".format(df_sp500_ta_graph.at[plot_time_index, 'PSAR'], df_sp500_ta_graph.at[plot_time_index, 'MAMA'], df_sp500_ta_graph.at[plot_time_index, 'FAMA'])
                    self.label_p4_3.setText(txt)
                else:
                    self.label_p4_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p4_3.setText(" PSAR\n MAMA ")
                
                if flag_checkBox_plot4_one_eye:

                    self.plot4_oe_conv_curve.setData(df_sp500_ta_graph['OE_CONV'].astype(float))
                    self.plot4_oe_base_curve.setData(df_sp500_ta_graph['OE_BASE'].astype(float))
                    self.plot4_span_a_curve.setData(df_sp500_ta_graph['SPAN_A'].astype(float))
                    self.plot4_span_b_curve.setData(df_sp500_ta_graph['SPAN_B'].astype(float))

                    if flag_one_eye_lagging_span:
                        self.plot4_lagging_span_curve.setData(df_sp500_ta_graph['LAGGING_SPAN'].astype(float))

                    if df_sp500_ta_graph.at[plot_time_index, 'OE_CONV'] < df_sp500_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_sp500_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] < df_sp500_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p4_4.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_sp500_ta_graph.at[plot_time_index, 'OE_CONV'] > df_sp500_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_sp500_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] > df_sp500_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p4_4.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p4_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " 기준선: {0:.2f}\n 전환선: {1:.2f}\n SPAN A: {2:.2f} \n SPAN B: {3:.2f} ".format\
                        (df_sp500_ta_graph.at[plot_time_index, 'OE_BASE'], df_sp500_ta_graph.at[plot_time_index, 'OE_CONV'], \
                            df_sp500_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'], df_sp500_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B'])
                    self.label_p4_4.setText(txt)
                    
                else:
                    self.label_p4_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p4_4.setText(" ONE EYE ")
            
            elif comboindex4 == 14:
                
                self.plot4_time_line.setValue(plot_time_index)
                
                txt = ' {0} '.format(format(DOW_저가, ','))
                self.label_46.setText(txt)

                tmp = self.label_47.text().split()[0]
                과거가 =  tmp.replace(',', '')

                if DOW_현재가 > float(과거가):

                    txt = " {0} ▲ ({1}, {2:0.1f}%, {3}) ".format(format(DOW_현재가, ','), format(DOW_종가대비, ','), DOW_등락율, DOW_진폭_틱)

                    if DOW_종가대비 > 0:
                        self.label_47.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif DOW_종가대비 < 0:
                        self.label_47.setStyleSheet('background-color: pink; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_47.setStyleSheet('background-color: pink; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_47.setText(txt)

                elif DOW_현재가 < float(과거가):

                    txt = " {0} ▼ ({1}, {2:0.1f}%, {3}) ".format(format(DOW_현재가, ','), format(DOW_종가대비, ','), DOW_등락율, DOW_진폭_틱)

                    if DOW_종가대비 > 0:
                        self.label_47.setStyleSheet('background-color: skyblue; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif DOW_종가대비 < 0:
                        self.label_47.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_47.setStyleSheet('background-color: skyblue; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_47.setText(txt)
                else:
                    pass
                
                txt = ' {0} '.format(format(DOW_고가, ','))
                self.label_48.setText(txt)

                self.plot4_ovc_jl_line.setValue(DOW_전저)
                self.plot4_ovc_jh_line.setValue(DOW_전고)
                self.plot4_ovc_close_line.setValue(DOW_전일종가)
                self.plot4_ovc_open_line.setValue(DOW_시가)
                self.plot4_ovc_pivot_line.setValue(DOW_피봇)
                self.plot4_ovc_low_line.setValue(DOW_저가)
                self.plot4_ovc_high_line.setValue(DOW_고가)                     

                self.plot4_dow_curve.setData(df_dow_graph['Price'].astype(float))

                if flag_checkBox_plot4_bband:

                    self.parent.Calc_Bollinger('DOW')
            
                    self.plot4_bollinger_1st_upper_curve.setData(df_dow_ta_graph['BBUpper_1st'].astype(float))
                    self.plot4_bollinger_1st_middle_curve.setData(df_dow_ta_graph['BBMiddle_1st'].astype(float))
                    self.plot4_bollinger_1st_lower_curve.setData(df_dow_ta_graph['BBLower_1st'].astype(float))
                    self.plot4_bollinger_2nd_upper_curve.setData(df_dow_ta_graph['BBUpper_2nd'].astype(float))
                    self.plot4_bollinger_2nd_middle_curve.setData(df_dow_ta_graph['BBMiddle_2nd'].astype(float))
                    self.plot4_bollinger_2nd_lower_curve.setData(df_dow_ta_graph['BBLower_2nd'].astype(float))

                    self.plot4_fibonacci_line1.setValue(dow_fibonacci_levels[1])
                    self.plot4_fibonacci_line2.setValue(dow_fibonacci_levels[2])
                    self.plot4_fibonacci_line3.setValue(dow_fibonacci_levels[3])
                    self.plot4_fibonacci_line4.setValue(dow_fibonacci_levels[4])
                    self.plot4_fibonacci_line5.setValue(dow_fibonacci_levels[5])

                    if df_dow_ta_graph.at[plot_time_index, 'BBMiddle_2nd'] >= df_dow_ta_graph.at[plot_time_index, 'Price']:
                        self.label_p4_2.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p4_2.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " BB U: {0:.0f}\n BB M: {1:.0f}\n BB L: {2:.0f} ".format\
                        (df_dow_ta_graph.at[plot_time_index, 'BBUpper_2nd'], df_dow_ta_graph.at[plot_time_index, 'BBMiddle_2nd'], df_dow_ta_graph.at[plot_time_index, 'BBLower_2nd'])
                    self.label_p4_2.setText(txt)
                else:
                    self.plot4_fibonacci_line1.setValue(DOW_전일종가)
                    self.plot4_fibonacci_line2.setValue(DOW_전일종가)
                    self.plot4_fibonacci_line3.setValue(DOW_전일종가)
                    self.plot4_fibonacci_line4.setValue(DOW_전일종가)
                    self.plot4_fibonacci_line5.setValue(DOW_전일종가)

                    self.label_p4_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p4_2.setText(" BB Upper\n BB Middle\n BB Lower ")

                if flag_checkBox_plot4_psar:

                    self.parent.Calc_PSAR_MAMA('DOW')

                    self.plot4_psar_curve.setData(df_dow_ta_graph['PSAR'][0:plot_time_index+1].astype(float))

                    #self.plot4_sslup_curve.setData(df_dow_ta_graph['SSLUp'][0:plot_time_index+1].astype(float))
                    #self.plot4_ssldown_curve.setData(df_dow_ta_graph['SSLDown'][0:plot_time_index+1].astype(float))

                    self.plot4_mama_curve.setData(df_dow_ta_graph['MAMA'].astype(float))
                    df = df_dow_ta_graph['FAMA'].apply(lambda x: DOW_저가 if x < DOW_저가 else x)
                    self.plot4_fama_curve.setData(df.astype(float))                        

                    if df_dow_ta_graph.at[plot_time_index, 'PSAR'] > df_dow_ta_graph.at[plot_time_index, 'Price'] and df_dow_ta_graph.at[plot_time_index, 'MAMA'] < df_dow_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p4_3.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_dow_ta_graph.at[plot_time_index, 'PSAR'] < df_dow_ta_graph.at[plot_time_index, 'Price'] and df_dow_ta_graph.at[plot_time_index, 'MAMA'] > df_dow_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p4_3.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold') 
                    else:
                        self.label_p4_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " PSAR: {0:.0f}\n MAMA: {1:.0f}\n FAMA: {2:.0f} ".format(df_dow_ta_graph.at[plot_time_index, 'PSAR'], df_dow_ta_graph.at[plot_time_index, 'MAMA'], df_dow_ta_graph.at[plot_time_index, 'FAMA'])
                    self.label_p4_3.setText(txt)
                else:
                    self.label_p4_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p4_3.setText(" PSAR\n MAMA ")
                
                if flag_checkBox_plot4_one_eye:

                    self.plot4_oe_conv_curve.setData(df_dow_ta_graph['OE_CONV'].astype(float))
                    self.plot4_oe_base_curve.setData(df_dow_ta_graph['OE_BASE'].astype(float))
                    self.plot4_span_a_curve.setData(df_dow_ta_graph['SPAN_A'].astype(float))
                    self.plot4_span_b_curve.setData(df_dow_ta_graph['SPAN_B'].astype(float))

                    if flag_one_eye_lagging_span:
                        self.plot4_lagging_span_curve.setData(df_dow_ta_graph['LAGGING_SPAN'].astype(float))

                    if df_dow_ta_graph.at[plot_time_index, 'OE_CONV'] < df_dow_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_dow_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] < df_dow_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p4_4.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_dow_ta_graph.at[plot_time_index, 'OE_CONV'] > df_dow_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_dow_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] > df_dow_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p4_4.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p4_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " 기준선: {0:.0f}\n 전환선: {1:.0f}\n SPAN A: {2:.0f} \n SPAN B: {3:.0f} ".format\
                        (df_dow_ta_graph.at[plot_time_index, 'OE_BASE'], df_dow_ta_graph.at[plot_time_index, 'OE_CONV'], \
                            df_dow_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'], df_dow_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B'])
                    self.label_p4_4.setText(txt)
                    
                else:
                    self.label_p4_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p4_4.setText(" ONE EYE ")

            elif comboindex4 == 15:
                
                self.plot4_time_line.setValue(plot_time_index)
                
                txt = ' {0} '.format(format(NASDAQ_저가, ','))
                self.label_46.setText(txt)

                tmp = self.label_47.text().split()[0]
                과거가 =  tmp.replace(',', '')                

                if NASDAQ_현재가 > float(과거가):

                    txt = " {0} ▲ ({1}, {2:0.1f}%, {3}) ".format(format(NASDAQ_현재가, ','), format(NASDAQ_종가대비, ','), NASDAQ_등락율, NASDAQ_진폭_틱)

                    if NASDAQ_종가대비 > 0:
                        self.label_47.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif NASDAQ_종가대비 < 0:
                        self.label_47.setStyleSheet('background-color: pink; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_47.setStyleSheet('background-color: pink; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_47.setText(txt)

                elif NASDAQ_현재가 < float(과거가):

                    txt = " {0} ▼ ({1}, {2:0.1f}%, {3}) ".format(format(NASDAQ_현재가, ','), format(NASDAQ_종가대비, ','), NASDAQ_등락율, NASDAQ_진폭_틱)

                    if NASDAQ_종가대비 > 0:
                        self.label_47.setStyleSheet('background-color: skyblue; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif NASDAQ_종가대비 < 0:
                        self.label_47.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_47.setStyleSheet('background-color: skyblue; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_47.setText(txt)
                else:
                    pass

                txt = ' {0} '.format(format(NASDAQ_고가, ','))
                self.label_48.setText(txt)

                self.plot4_ovc_jl_line.setValue(NASDAQ_전저)
                self.plot4_ovc_jh_line.setValue(NASDAQ_전고)
                self.plot4_ovc_close_line.setValue(NASDAQ_전일종가)
                self.plot4_ovc_open_line.setValue(NASDAQ_시가)
                self.plot4_ovc_pivot_line.setValue(NASDAQ_피봇)
                self.plot4_ovc_low_line.setValue(NASDAQ_저가)
                self.plot4_ovc_high_line.setValue(NASDAQ_고가) 

                self.plot4_nasdaq_curve.setData(df_nasdaq_graph['Price'].astype(float))

                if flag_checkBox_plot4_bband:

                    self.parent.Calc_Bollinger('NASDAQ')
            
                    self.plot4_bollinger_1st_upper_curve.setData(df_nasdaq_ta_graph['BBUpper_1st'].astype(float))
                    self.plot4_bollinger_1st_middle_curve.setData(df_nasdaq_ta_graph['BBMiddle_1st'].astype(float))
                    self.plot4_bollinger_1st_lower_curve.setData(df_nasdaq_ta_graph['BBLower_1st'].astype(float))
                    self.plot4_bollinger_2nd_upper_curve.setData(df_nasdaq_ta_graph['BBUpper_2nd'].astype(float))
                    self.plot4_bollinger_2nd_middle_curve.setData(df_nasdaq_ta_graph['BBMiddle_2nd'].astype(float))
                    self.plot4_bollinger_2nd_lower_curve.setData(df_nasdaq_ta_graph['BBLower_2nd'].astype(float))

                    self.plot4_fibonacci_line1.setValue(nasdaq_fibonacci_levels[1])
                    self.plot4_fibonacci_line2.setValue(nasdaq_fibonacci_levels[2])
                    self.plot4_fibonacci_line3.setValue(nasdaq_fibonacci_levels[3])
                    self.plot4_fibonacci_line4.setValue(nasdaq_fibonacci_levels[4])
                    self.plot4_fibonacci_line5.setValue(nasdaq_fibonacci_levels[5])

                    if df_nasdaq_ta_graph.at[plot_time_index, 'BBMiddle_2nd'] >= df_nasdaq_ta_graph.at[plot_time_index, 'Price']:
                        self.label_p4_2.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p4_2.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " BB U: {0:.2f}\n BB M: {1:.2f}\n BB L: {2:.2f} ".format\
                        (df_nasdaq_ta_graph.at[plot_time_index, 'BBUpper_2nd'], df_nasdaq_ta_graph.at[plot_time_index, 'BBMiddle_2nd'], df_nasdaq_ta_graph.at[plot_time_index, 'BBLower_2nd'])
                    self.label_p4_2.setText(txt)
                else:
                    self.plot4_fibonacci_line1.setValue(NASDAQ_전일종가)
                    self.plot4_fibonacci_line2.setValue(NASDAQ_전일종가)
                    self.plot4_fibonacci_line3.setValue(NASDAQ_전일종가)
                    self.plot4_fibonacci_line4.setValue(NASDAQ_전일종가)
                    self.plot4_fibonacci_line5.setValue(NASDAQ_전일종가)

                    self.label_p4_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p4_2.setText(" BB Upper\n BB Middle\n BB Lower ")

                if flag_checkBox_plot4_psar:

                    self.parent.Calc_PSAR_MAMA('NASDAQ')

                    self.plot4_psar_curve.setData(df_nasdaq_ta_graph['PSAR'][0:plot_time_index+1].astype(float))

                    #self.plot4_sslup_curve.setData(df_nasdaq_ta_graph['SSLUp'][0:plot_time_index+1].astype(float))
                    #self.plot4_ssldown_curve.setData(df_nasdaq_ta_graph['SSLDown'][0:plot_time_index+1].astype(float))

                    self.plot4_mama_curve.setData(df_nasdaq_ta_graph['MAMA'].astype(float))
                    df = df_nasdaq_ta_graph['FAMA'].apply(lambda x: NASDAQ_저가 if x < NASDAQ_저가 else x)
                    self.plot4_fama_curve.setData(df.astype(float))                        

                    if df_nasdaq_ta_graph.at[plot_time_index, 'PSAR'] > df_nasdaq_ta_graph.at[plot_time_index, 'Price'] and df_nasdaq_ta_graph.at[plot_time_index, 'MAMA'] < df_nasdaq_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p4_3.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_nasdaq_ta_graph.at[plot_time_index, 'PSAR'] < df_nasdaq_ta_graph.at[plot_time_index, 'Price'] and df_nasdaq_ta_graph.at[plot_time_index, 'MAMA'] > df_nasdaq_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p4_3.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold') 
                    else:
                        self.label_p4_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " PSAR: {0:.2f}\n MAMA: {1:.2f}\n FAMA: {2:.2f} ".format(df_nasdaq_ta_graph.at[plot_time_index, 'PSAR'], df_nasdaq_ta_graph.at[plot_time_index, 'MAMA'], df_nasdaq_ta_graph.at[plot_time_index, 'FAMA'])
                    self.label_p4_3.setText(txt)
                else:
                    self.label_p4_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p4_3.setText(" PSAR\n MAMA ")
                
                if flag_checkBox_plot4_one_eye:

                    self.plot4_oe_conv_curve.setData(df_nasdaq_ta_graph['OE_CONV'].astype(float))
                    self.plot4_oe_base_curve.setData(df_nasdaq_ta_graph['OE_BASE'].astype(float))
                    self.plot4_span_a_curve.setData(df_nasdaq_ta_graph['SPAN_A'].astype(float))
                    self.plot4_span_b_curve.setData(df_nasdaq_ta_graph['SPAN_B'].astype(float))

                    if flag_one_eye_lagging_span:
                        self.plot4_lagging_span_curve.setData(df_nasdaq_ta_graph['LAGGING_SPAN'].astype(float))

                    if df_nasdaq_ta_graph.at[plot_time_index, 'OE_CONV'] < df_nasdaq_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_nasdaq_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] < df_nasdaq_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p4_4.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_nasdaq_ta_graph.at[plot_time_index, 'OE_CONV'] > df_nasdaq_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_nasdaq_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] > df_nasdaq_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p4_4.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p4_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " 기준선: {0:.2f}\n 전환선: {1:.2f}\n SPAN A: {2:.2f} \n SPAN B: {3:.2f} ".format\
                        (df_nasdaq_ta_graph.at[plot_time_index, 'OE_BASE'], df_nasdaq_ta_graph.at[plot_time_index, 'OE_CONV'], \
                            df_nasdaq_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'], df_nasdaq_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B'])
                    self.label_p4_4.setText(txt)
                    
                else:
                    self.label_p4_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p4_4.setText(" ONE EYE ")

            elif comboindex4 == 16:
                
                self.plot4_time_line.setValue(plot_time_index)

                txt = ' {0} '.format(format(HANGSENG_저가, ','))
                self.label_46.setText(txt)

                tmp = self.label_47.text().split()[0]
                과거가 =  tmp.replace(',', '')    

                if HANGSENG_현재가 > float(과거가):

                    txt = " {0} ▲ ({1}, {2:0.1f}%, {3}) ".format(format(HANGSENG_현재가, ','), HANGSENG_종가대비, HANGSENG_등락율, HANGSENG_진폭_틱)

                    if HANGSENG_종가대비 > 0:
                        self.label_47.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif HANGSENG_종가대비 < 0:
                        self.label_47.setStyleSheet('background-color: pink; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_47.setStyleSheet('background-color: pink; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_47.setText(txt)

                elif HANGSENG_현재가 < float(과거가):

                    txt = " {0} ▼ ({1}, {2:0.1f}%, {3}) ".format(format(HANGSENG_현재가, ','), HANGSENG_종가대비, HANGSENG_등락율, HANGSENG_진폭_틱)

                    if HANGSENG_종가대비 > 0:
                        self.label_47.setStyleSheet('background-color: skyblue; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif HANGSENG_종가대비 < 0:
                        self.label_47.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_47.setStyleSheet('background-color: skyblue; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_47.setText(txt)
                else:
                    pass

                txt = ' {0} '.format(format(HANGSENG_고가, ','))
                self.label_48.setText(txt)

                self.plot4_ovc_jl_line.setValue(HANGSENG_전저)
                self.plot4_ovc_jh_line.setValue(HANGSENG_전고)
                self.plot4_ovc_close_line.setValue(HANGSENG_전일종가)
                self.plot4_ovc_open_line.setValue(HANGSENG_시가)
                self.plot4_ovc_pivot_line.setValue(HANGSENG_피봇)
                self.plot4_ovc_low_line.setValue(HANGSENG_저가)
                self.plot4_ovc_high_line.setValue(HANGSENG_고가)                 

                self.plot4_hsi_curve.setData(df_hsi_graph['Price'].astype(float))                

                if flag_checkBox_plot4_bband:

                    self.parent.Calc_Bollinger('HSI')
            
                    self.plot4_bollinger_1st_upper_curve.setData(df_hsi_ta_graph['BBUpper_1st'].astype(float))
                    self.plot4_bollinger_1st_middle_curve.setData(df_hsi_ta_graph['BBMiddle_1st'].astype(float))
                    self.plot4_bollinger_1st_lower_curve.setData(df_hsi_ta_graph['BBLower_1st'].astype(float))
                    self.plot4_bollinger_2nd_upper_curve.setData(df_hsi_ta_graph['BBUpper_2nd'].astype(float))
                    self.plot4_bollinger_2nd_middle_curve.setData(df_hsi_ta_graph['BBMiddle_2nd'].astype(float))
                    self.plot4_bollinger_2nd_lower_curve.setData(df_hsi_ta_graph['BBLower_2nd'].astype(float))

                    self.plot4_fibonacci_line1.setValue(hsi_fibonacci_levels[1])
                    self.plot4_fibonacci_line2.setValue(hsi_fibonacci_levels[2])
                    self.plot4_fibonacci_line3.setValue(hsi_fibonacci_levels[3])
                    self.plot4_fibonacci_line4.setValue(hsi_fibonacci_levels[4])
                    self.plot4_fibonacci_line5.setValue(hsi_fibonacci_levels[5])

                    if df_hsi_ta_graph.at[plot_time_index, 'BBMiddle_2nd'] >= df_hsi_ta_graph.at[plot_time_index, 'Price']:
                        self.label_p4_2.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p4_2.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " BB U: {0:.0f}\n BB M: {1:.0f}\n BB L: {2:.0f} ".format\
                        (df_hsi_ta_graph.at[plot_time_index, 'BBUpper_2nd'], df_hsi_ta_graph.at[plot_time_index, 'BBMiddle_2nd'], df_hsi_ta_graph.at[plot_time_index, 'BBLower_2nd'])
                    self.label_p4_2.setText(txt)
                else:
                    self.plot4_fibonacci_line1.setValue(HANGSENG_전일종가)
                    self.plot4_fibonacci_line2.setValue(HANGSENG_전일종가)
                    self.plot4_fibonacci_line3.setValue(HANGSENG_전일종가)
                    self.plot4_fibonacci_line4.setValue(HANGSENG_전일종가)
                    self.plot4_fibonacci_line5.setValue(HANGSENG_전일종가)

                    self.label_p4_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p4_2.setText(" BB Upper\n BB Middle\n BB Lower ")

                if flag_checkBox_plot4_psar:

                    self.parent.Calc_PSAR_MAMA('HSI')

                    self.plot4_psar_curve.setData(df_hsi_ta_graph['PSAR'][0:plot_time_index+1].astype(float))

                    #self.plot4_sslup_curve.setData(df_hsi_ta_graph['SSLUp'][0:plot_time_index+1].astype(float))
                    #self.plot4_ssldown_curve.setData(df_hsi_ta_graph['SSLDown'][0:plot_time_index+1].astype(float))

                    self.plot4_mama_curve.setData(df_hsi_ta_graph['MAMA'].astype(float))
                    df = df_hsi_ta_graph['FAMA'].apply(lambda x: HANGSENG_저가 if x < HANGSENG_저가 else x)
                    self.plot4_fama_curve.setData(df.astype(float))                        

                    if df_hsi_ta_graph.at[plot_time_index, 'PSAR'] > df_hsi_ta_graph.at[plot_time_index, 'Price'] and df_hsi_ta_graph.at[plot_time_index, 'MAMA'] < df_hsi_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p4_3.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_hsi_ta_graph.at[plot_time_index, 'PSAR'] < df_hsi_ta_graph.at[plot_time_index, 'Price'] and df_hsi_ta_graph.at[plot_time_index, 'MAMA'] > df_hsi_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p4_3.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold') 
                    else:
                        self.label_p4_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " PSAR: {0:.0f}\n MAMA: {1:.0f}\n FAMA: {2:.0f} ".format(df_hsi_ta_graph.at[plot_time_index, 'PSAR'], df_hsi_ta_graph.at[plot_time_index, 'MAMA'], df_hsi_ta_graph.at[plot_time_index, 'FAMA'])
                    self.label_p4_3.setText(txt)
                else:
                    self.label_p4_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p4_3.setText(" PSAR\n MAMA ")
                
                if flag_checkBox_plot4_one_eye:

                    self.plot4_oe_conv_curve.setData(df_hsi_ta_graph['OE_CONV'].astype(float))
                    self.plot4_oe_base_curve.setData(df_hsi_ta_graph['OE_BASE'].astype(float))
                    self.plot4_span_a_curve.setData(df_hsi_ta_graph['SPAN_A'].astype(float))
                    self.plot4_span_b_curve.setData(df_hsi_ta_graph['SPAN_B'].astype(float))

                    if flag_one_eye_lagging_span:
                        self.plot4_lagging_span_curve.setData(df_hsi_ta_graph['LAGGING_SPAN'].astype(float))

                    if df_hsi_ta_graph.at[plot_time_index, 'OE_CONV'] < df_hsi_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_hsi_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] < df_hsi_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p4_4.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_hsi_ta_graph.at[plot_time_index, 'OE_CONV'] > df_hsi_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_hsi_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] > df_hsi_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p4_4.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p4_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " 기준선: {0:.0f}\n 전환선: {1:.0f}\n SPAN A: {2:.0f} \n SPAN B: {3:.0f} ".format\
                        (df_hsi_ta_graph.at[plot_time_index, 'OE_BASE'], df_hsi_ta_graph.at[plot_time_index, 'OE_CONV'], \
                            df_hsi_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'], df_hsi_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B'])
                    self.label_p4_4.setText(txt)
                    
                else:
                    self.label_p4_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p4_4.setText(" ONE EYE ")

            elif comboindex4 == 17:
                
                self.plot4_time_line.setValue(plot_time_index)
                
                txt = ' {0} '.format(format(WTI_저가, ','))
                self.label_46.setText(txt)

                과거가 =  self.label_47.text().split()[0]     

                if WTI_현재가 > float(과거가):

                    txt = " {0} ▲ ({1}, {2:0.1f}%, {3}) ".format(WTI_현재가, WTI_종가대비, WTI_등락율, WTI_진폭_틱)

                    if WTI_종가대비 > 0:
                        self.label_47.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif WTI_종가대비 < 0:
                        self.label_47.setStyleSheet('background-color: pink; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_47.setStyleSheet('background-color: pink; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_47.setText(txt)

                elif WTI_현재가 < float(과거가):

                    txt = " {0} ▼ ({1}, {2:0.1f}%, {3}) ".format(WTI_현재가, WTI_종가대비, WTI_등락율, WTI_진폭_틱)

                    if WTI_종가대비 > 0:
                        self.label_47.setStyleSheet('background-color: skyblue; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif WTI_종가대비 < 0:
                        self.label_47.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_47.setStyleSheet('background-color: skyblue; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_47.setText(txt)
                else:
                    pass

                txt = ' {0} '.format(format(WTI_고가, ','))
                self.label_48.setText(txt)

                self.plot4_ovc_jl_line.setValue(WTI_전저)
                self.plot4_ovc_jh_line.setValue(WTI_전고)
                self.plot4_ovc_close_line.setValue(WTI_전일종가)
                self.plot4_ovc_open_line.setValue(WTI_시가)
                self.plot4_ovc_pivot_line.setValue(WTI_피봇)
                self.plot4_ovc_low_line.setValue(WTI_저가)
                self.plot4_ovc_high_line.setValue(WTI_고가) 

                self.plot4_wti_curve.setData(df_wti_graph['Price'].astype(float))

                if flag_checkBox_plot4_bband:

                    self.parent.Calc_Bollinger('WTI')
            
                    self.plot4_bollinger_1st_upper_curve.setData(df_wti_ta_graph['BBUpper_1st'].astype(float))
                    self.plot4_bollinger_1st_middle_curve.setData(df_wti_ta_graph['BBMiddle_1st'].astype(float))
                    self.plot4_bollinger_1st_lower_curve.setData(df_wti_ta_graph['BBLower_1st'].astype(float))
                    self.plot4_bollinger_2nd_upper_curve.setData(df_wti_ta_graph['BBUpper_2nd'].astype(float))
                    self.plot4_bollinger_2nd_middle_curve.setData(df_wti_ta_graph['BBMiddle_2nd'].astype(float))
                    self.plot4_bollinger_2nd_lower_curve.setData(df_wti_ta_graph['BBLower_2nd'].astype(float))

                    self.plot4_fibonacci_line1.setValue(wti_fibonacci_levels[1])
                    self.plot4_fibonacci_line2.setValue(wti_fibonacci_levels[2])
                    self.plot4_fibonacci_line3.setValue(wti_fibonacci_levels[3])
                    self.plot4_fibonacci_line4.setValue(wti_fibonacci_levels[4])
                    self.plot4_fibonacci_line5.setValue(wti_fibonacci_levels[5])

                    if df_wti_ta_graph.at[plot_time_index, 'BBMiddle_2nd'] >= df_wti_ta_graph.at[plot_time_index, 'Price']:
                        self.label_p4_2.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p4_2.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " BB U: {0:.2f}\n BB M: {1:.2f}\n BB L: {2:.2f} ".format\
                        (df_wti_ta_graph.at[plot_time_index, 'BBUpper_2nd'], df_wti_ta_graph.at[plot_time_index, 'BBMiddle_2nd'], df_wti_ta_graph.at[plot_time_index, 'BBLower_2nd'])
                    self.label_p4_2.setText(txt)
                else:
                    self.plot4_fibonacci_line1.setValue(WTI_전일종가)
                    self.plot4_fibonacci_line2.setValue(WTI_전일종가)
                    self.plot4_fibonacci_line3.setValue(WTI_전일종가)
                    self.plot4_fibonacci_line4.setValue(WTI_전일종가)
                    self.plot4_fibonacci_line5.setValue(WTI_전일종가)

                    self.label_p4_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p4_2.setText(" BB Upper\n BB Middle\n BB Lower ")

                if flag_checkBox_plot4_psar:

                    self.parent.Calc_PSAR_MAMA('WTI')

                    self.plot4_psar_curve.setData(df_wti_ta_graph['PSAR'][0:plot_time_index+1].astype(float))

                    #self.plot4_sslup_curve.setData(df_wti_ta_graph['SSLUp'][0:plot_time_index+1].astype(float))
                    #self.plot4_ssldown_curve.setData(df_wti_ta_graph['SSLDown'][0:plot_time_index+1].astype(float))

                    self.plot4_mama_curve.setData(df_wti_ta_graph['MAMA'].astype(float))
                    df = df_wti_ta_graph['FAMA'].apply(lambda x: WTI_저가 if x < WTI_저가 else x)
                    self.plot4_fama_curve.setData(df.astype(float))                        

                    if df_wti_ta_graph.at[plot_time_index, 'PSAR'] > df_wti_ta_graph.at[plot_time_index, 'Price'] and df_wti_ta_graph.at[plot_time_index, 'MAMA'] < df_wti_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p4_3.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_wti_ta_graph.at[plot_time_index, 'PSAR'] < df_wti_ta_graph.at[plot_time_index, 'Price'] and df_wti_ta_graph.at[plot_time_index, 'MAMA'] > df_wti_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p4_3.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold') 
                    else:
                        self.label_p4_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " PSAR: {0:.2f}\n MAMA: {1:.2f}\n FAMA: {2:.2f} ".format(df_wti_ta_graph.at[plot_time_index, 'PSAR'], df_wti_ta_graph.at[plot_time_index, 'MAMA'], df_wti_ta_graph.at[plot_time_index, 'FAMA'])
                    self.label_p4_3.setText(txt)
                else:
                    self.label_p4_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p4_3.setText(" PSAR\n MAMA ")
                
                if flag_checkBox_plot4_one_eye:

                    self.plot4_oe_conv_curve.setData(df_wti_ta_graph['OE_CONV'].astype(float))
                    self.plot4_oe_base_curve.setData(df_wti_ta_graph['OE_BASE'].astype(float))
                    self.plot4_span_a_curve.setData(df_wti_ta_graph['SPAN_A'].astype(float))
                    self.plot4_span_b_curve.setData(df_wti_ta_graph['SPAN_B'].astype(float))

                    if flag_one_eye_lagging_span:
                        self.plot4_lagging_span_curve.setData(df_wti_ta_graph['LAGGING_SPAN'].astype(float))

                    if df_wti_ta_graph.at[plot_time_index, 'OE_CONV'] < df_wti_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_wti_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] < df_wti_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p4_4.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_wti_ta_graph.at[plot_time_index, 'OE_CONV'] > df_wti_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_wti_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] > df_wti_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p4_4.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p4_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " 기준선: {0:.2f}\n 전환선: {1:.2f}\n SPAN A: {2:.2f} \n SPAN B: {3:.2f} ".format\
                        (df_wti_ta_graph.at[plot_time_index, 'OE_BASE'], df_wti_ta_graph.at[plot_time_index, 'OE_CONV'], \
                            df_wti_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'], df_wti_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B'])
                    self.label_p4_4.setText(txt)
                    
                else:
                    self.label_p4_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p4_4.setText(" ONE EYE ")
            
            elif comboindex4 == 18:
                
                self.plot4_time_line.setValue(plot_time_index)

                txt = ' {0} '.format(format(GOLD_저가, ','))
                self.label_46.setText(txt)

                tmp = self.label_47.text().split()[0]
                과거가 =  tmp.replace(',', '')     

                if GOLD_현재가 > float(과거가):

                    txt = " {0} ▲ ({1:.1f}, {2:.1f}%, {3}) ".format(format(GOLD_현재가, ','), GOLD_종가대비, GOLD_등락율, GOLD_진폭_틱)

                    if GOLD_종가대비 > 0:
                        self.label_47.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif GOLD_종가대비 < 0:
                        self.label_47.setStyleSheet('background-color: pink; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_47.setStyleSheet('background-color: pink; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_47.setText(txt)

                elif GOLD_현재가 < float(과거가):

                    txt = " {0} ▼ ({1:.1f}, {2:.1f}%, {3}) ".format(format(GOLD_현재가, ','), GOLD_종가대비, GOLD_등락율, GOLD_진폭_틱)

                    if GOLD_종가대비 > 0:
                        self.label_47.setStyleSheet('background-color: skyblue; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif GOLD_종가대비 < 0:
                        self.label_47.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_47.setStyleSheet('background-color: skyblue; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_47.setText(txt)
                else:
                    pass

                txt = ' {0} '.format(format(GOLD_고가, ','))
                self.label_48.setText(txt)

                self.plot4_ovc_jl_line.setValue(GOLD_전저)
                self.plot4_ovc_jh_line.setValue(GOLD_전고)
                self.plot4_ovc_close_line.setValue(GOLD_전일종가)
                self.plot4_ovc_open_line.setValue(GOLD_시가)
                self.plot4_ovc_pivot_line.setValue(GOLD_피봇)
                self.plot4_ovc_low_line.setValue(GOLD_저가)
                self.plot4_ovc_high_line.setValue(GOLD_고가)                 

                self.plot4_gold_curve.setData(df_gold_graph['Price'].astype(float))

                if flag_checkBox_plot4_bband:

                    self.parent.Calc_Bollinger('GOLD')
            
                    self.plot4_bollinger_1st_upper_curve.setData(df_gold_ta_graph['BBUpper_1st'].astype(float))
                    self.plot4_bollinger_1st_middle_curve.setData(df_gold_ta_graph['BBMiddle_1st'].astype(float))
                    self.plot4_bollinger_1st_lower_curve.setData(df_gold_ta_graph['BBLower_1st'].astype(float))
                    self.plot4_bollinger_2nd_upper_curve.setData(df_gold_ta_graph['BBUpper_2nd'].astype(float))
                    self.plot4_bollinger_2nd_middle_curve.setData(df_gold_ta_graph['BBMiddle_2nd'].astype(float))
                    self.plot4_bollinger_2nd_lower_curve.setData(df_gold_ta_graph['BBLower_2nd'].astype(float))

                    self.plot4_fibonacci_line1.setValue(gold_fibonacci_levels[1])
                    self.plot4_fibonacci_line2.setValue(gold_fibonacci_levels[2])
                    self.plot4_fibonacci_line3.setValue(gold_fibonacci_levels[3])
                    self.plot4_fibonacci_line4.setValue(gold_fibonacci_levels[4])
                    self.plot4_fibonacci_line5.setValue(gold_fibonacci_levels[5])

                    if df_gold_ta_graph.at[plot_time_index, 'BBMiddle_2nd'] >= df_gold_ta_graph.at[plot_time_index, 'Price']:
                        self.label_p4_2.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p4_2.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " BB U: {0:.1f}\n BB M: {1:.1f}\n BB L: {2:.1f} ".format\
                        (df_gold_ta_graph.at[plot_time_index, 'BBUpper_2nd'], df_gold_ta_graph.at[plot_time_index, 'BBMiddle_2nd'], df_gold_ta_graph.at[plot_time_index, 'BBLower_2nd'])
                    self.label_p4_2.setText(txt)
                else:
                    self.plot4_fibonacci_line1.setValue(GOLD_전일종가)
                    self.plot4_fibonacci_line2.setValue(GOLD_전일종가)
                    self.plot4_fibonacci_line3.setValue(GOLD_전일종가)
                    self.plot4_fibonacci_line4.setValue(GOLD_전일종가)
                    self.plot4_fibonacci_line5.setValue(GOLD_전일종가)

                    self.label_p4_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p4_2.setText(" BB Upper\n BB Middle\n BB Lower ")

                if flag_checkBox_plot4_psar:

                    self.parent.Calc_PSAR_MAMA('GOLD')

                    self.plot4_psar_curve.setData(df_gold_ta_graph['PSAR'][0:plot_time_index+1].astype(float))

                    #self.plot4_sslup_curve.setData(df_gold_ta_graph['SSLUp'][0:plot_time_index+1].astype(float))
                    #self.plot4_ssldown_curve.setData(df_gold_ta_graph['SSLDown'][0:plot_time_index+1].astype(float))

                    self.plot4_mama_curve.setData(df_gold_ta_graph['MAMA'].astype(float))
                    df = df_gold_ta_graph['FAMA'].apply(lambda x: GOLD_저가 if x < GOLD_저가 else x)
                    self.plot4_fama_curve.setData(df.astype(float))                        

                    if df_gold_ta_graph.at[plot_time_index, 'PSAR'] > df_gold_ta_graph.at[plot_time_index, 'Price'] and df_gold_ta_graph.at[plot_time_index, 'MAMA'] < df_gold_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p4_3.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_gold_ta_graph.at[plot_time_index, 'PSAR'] < df_gold_ta_graph.at[plot_time_index, 'Price'] and df_gold_ta_graph.at[plot_time_index, 'MAMA'] > df_gold_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p4_3.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold') 
                    else:
                        self.label_p4_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " PSAR: {0:.1f}\n MAMA: {1:.1f}\n FAMA: {2:.1f} ".format(df_gold_ta_graph.at[plot_time_index, 'PSAR'], df_gold_ta_graph.at[plot_time_index, 'MAMA'], df_gold_ta_graph.at[plot_time_index, 'FAMA'])
                    self.label_p4_3.setText(txt)
                else:
                    self.label_p4_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p4_3.setText(" PSAR\n MAMA ")
                
                if flag_checkBox_plot4_one_eye:

                    self.plot4_oe_conv_curve.setData(df_gold_ta_graph['OE_CONV'].astype(float))
                    self.plot4_oe_base_curve.setData(df_gold_ta_graph['OE_BASE'].astype(float))
                    self.plot4_span_a_curve.setData(df_gold_ta_graph['SPAN_A'].astype(float))
                    self.plot4_span_b_curve.setData(df_gold_ta_graph['SPAN_B'].astype(float))

                    if flag_one_eye_lagging_span:
                        self.plot4_lagging_span_curve.setData(df_gold_ta_graph['LAGGING_SPAN'].astype(float))

                    if df_gold_ta_graph.at[plot_time_index, 'OE_CONV'] < df_gold_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_gold_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] < df_gold_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p4_4.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_gold_ta_graph.at[plot_time_index, 'OE_CONV'] > df_gold_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_gold_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] > df_gold_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p4_4.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p4_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " 기준선: {0:.1f}\n 전환선: {1:.1f}\n SPAN A: {2:.1f} \n SPAN B: {3:.1f} ".format\
                        (df_gold_ta_graph.at[plot_time_index, 'OE_BASE'], df_gold_ta_graph.at[plot_time_index, 'OE_CONV'], \
                            df_gold_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'], df_gold_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B'])
                    self.label_p4_4.setText(txt)
                    
                else:
                    self.label_p4_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p4_4.setText(" ONE EYE ")

            elif comboindex4 == 19:
                
                self.plot4_time_line.setValue(plot_time_index)

                txt = ' {0:.5f} '.format(EURO_저가)
                self.label_46.setText(txt)

                과거가 =  self.label_47.text().split()[0]     

                if EURO_현재가 > float(과거가):

                    txt = " {0:.5f} ▲ ({1:.5f}, {2:0.1f}%, {3}) ".format(EURO_현재가, EURO_종가대비, EURO_등락율, EURO_진폭_틱)

                    if EURO_종가대비 > 0:
                        self.label_47.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif EURO_종가대비 < 0:
                        self.label_47.setStyleSheet('background-color: pink; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_47.setStyleSheet('background-color: pink; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_47.setText(txt)

                elif EURO_현재가 < float(과거가):

                    txt = " {0:.5f} ▼ ({1:.5f}, {2:0.1f}%, {3}) ".format(EURO_현재가, EURO_종가대비, EURO_등락율, EURO_진폭_틱)

                    if EURO_종가대비 > 0:
                        self.label_47.setStyleSheet('background-color: skyblue; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif EURO_종가대비 < 0:
                        self.label_47.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_47.setStyleSheet('background-color: skyblue; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_47.setText(txt)
                else:
                    pass

                txt = ' {0:.5f} '.format(EURO_고가)
                self.label_48.setText(txt)

                self.plot4_ovc_jl_line.setValue(EURO_전저)
                self.plot4_ovc_jh_line.setValue(EURO_전고)
                self.plot4_ovc_close_line.setValue(EURO_전일종가)
                self.plot4_ovc_open_line.setValue(EURO_시가)
                self.plot4_ovc_pivot_line.setValue(EURO_피봇)
                self.plot4_ovc_low_line.setValue(EURO_저가)
                self.plot4_ovc_high_line.setValue(EURO_고가)                 

                self.plot4_euro_curve.setData(df_euro_graph['Price'].astype(float))

                if flag_checkBox_plot4_bband:

                    self.parent.Calc_Bollinger('EURO')
            
                    self.plot4_bollinger_1st_upper_curve.setData(df_euro_ta_graph['BBUpper_1st'].astype(float))
                    self.plot4_bollinger_1st_middle_curve.setData(df_euro_ta_graph['BBMiddle_1st'].astype(float))
                    self.plot4_bollinger_1st_lower_curve.setData(df_euro_ta_graph['BBLower_1st'].astype(float))
                    self.plot4_bollinger_2nd_upper_curve.setData(df_euro_ta_graph['BBUpper_2nd'].astype(float))
                    self.plot4_bollinger_2nd_middle_curve.setData(df_euro_ta_graph['BBMiddle_2nd'].astype(float))
                    self.plot4_bollinger_2nd_lower_curve.setData(df_euro_ta_graph['BBLower_2nd'].astype(float))

                    self.plot4_fibonacci_line1.setValue(euro_fibonacci_levels[1])
                    self.plot4_fibonacci_line2.setValue(euro_fibonacci_levels[2])
                    self.plot4_fibonacci_line3.setValue(euro_fibonacci_levels[3])
                    self.plot4_fibonacci_line4.setValue(euro_fibonacci_levels[4])
                    self.plot4_fibonacci_line5.setValue(euro_fibonacci_levels[5])

                    if df_euro_ta_graph.at[plot_time_index, 'BBMiddle_2nd'] >= df_euro_ta_graph.at[plot_time_index, 'Price']:
                        self.label_p4_2.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p4_2.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " BB U: {0:.5f}\n BB M: {1:.5f}\n BB L: {2:.5f} ".format\
                        (df_euro_ta_graph.at[plot_time_index, 'BBUpper_2nd'], df_euro_ta_graph.at[plot_time_index, 'BBMiddle_2nd'], df_euro_ta_graph.at[plot_time_index, 'BBLower_2nd'])
                    self.label_p4_2.setText(txt)
                else:
                    self.plot4_fibonacci_line1.setValue(EURO_전일종가)
                    self.plot4_fibonacci_line2.setValue(EURO_전일종가)
                    self.plot4_fibonacci_line3.setValue(EURO_전일종가)
                    self.plot4_fibonacci_line4.setValue(EURO_전일종가)
                    self.plot4_fibonacci_line5.setValue(EURO_전일종가)

                    self.label_p4_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p4_2.setText(" BB Upper\n BB Middle\n BB Lower ")

                if flag_checkBox_plot4_psar:

                    self.parent.Calc_PSAR_MAMA('EURO')

                    self.plot4_psar_curve.setData(df_euro_ta_graph['PSAR'][0:plot_time_index+1].astype(float))

                    #self.plot4_sslup_curve.setData(df_euro_ta_graph['SSLUp'][0:plot_time_index+1].astype(float))
                    #self.plot4_ssldown_curve.setData(df_euro_ta_graph['SSLDown'][0:plot_time_index+1].astype(float))

                    self.plot4_mama_curve.setData(df_euro_ta_graph['MAMA'].astype(float))
                    df = df_euro_ta_graph['FAMA'].apply(lambda x: EURO_저가 if x < EURO_저가 else x)
                    self.plot4_fama_curve.setData(df.astype(float))                        

                    if df_euro_ta_graph.at[plot_time_index, 'PSAR'] > df_euro_ta_graph.at[plot_time_index, 'Price'] and df_euro_ta_graph.at[plot_time_index, 'MAMA'] < df_euro_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p4_3.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_euro_ta_graph.at[plot_time_index, 'PSAR'] < df_euro_ta_graph.at[plot_time_index, 'Price'] and df_euro_ta_graph.at[plot_time_index, 'MAMA'] > df_euro_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p4_3.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold') 
                    else:
                        self.label_p4_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " PSAR: {0:.5f}\n MAMA: {1:.5f}\n FAMA: {2:.5f} ".format(df_euro_ta_graph.at[plot_time_index, 'PSAR'], df_euro_ta_graph.at[plot_time_index, 'MAMA'], df_euro_ta_graph.at[plot_time_index, 'FAMA'])
                    self.label_p4_3.setText(txt)
                else:
                    self.label_p4_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p4_3.setText(" PSAR\n MAMA ")
                
                if flag_checkBox_plot4_one_eye:

                    self.plot4_oe_conv_curve.setData(df_euro_ta_graph['OE_CONV'].astype(float))
                    self.plot4_oe_base_curve.setData(df_euro_ta_graph['OE_BASE'].astype(float))
                    self.plot4_span_a_curve.setData(df_euro_ta_graph['SPAN_A'].astype(float))
                    self.plot4_span_b_curve.setData(df_euro_ta_graph['SPAN_B'].astype(float))

                    if flag_one_eye_lagging_span:
                        self.plot4_lagging_span_curve.setData(df_euro_ta_graph['LAGGING_SPAN'].astype(float))

                    if df_euro_ta_graph.at[plot_time_index, 'OE_CONV'] < df_euro_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_euro_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] < df_euro_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p4_4.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_euro_ta_graph.at[plot_time_index, 'OE_CONV'] > df_euro_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_euro_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] > df_euro_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p4_4.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p4_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " 기준선: {0:.5f}\n 전환선: {1:.5f}\n SPAN A: {2:.5f} \n SPAN B: {3:.5f} ".format\
                        (df_euro_ta_graph.at[plot_time_index, 'OE_BASE'], df_euro_ta_graph.at[plot_time_index, 'OE_CONV'], \
                            df_euro_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'], df_euro_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B'])
                    self.label_p4_4.setText(txt)
                    
                else:
                    self.label_p4_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p4_4.setText(" ONE EYE ")

            elif comboindex4 == 20:
                
                self.plot4_time_line.setValue(plot_time_index)

                txt = ' {0} '.format(format(YEN_저가, ','))
                self.label_46.setText(txt)

                tmp = self.label_47.text().split()[0]
                과거가 =  tmp.replace(',', '')     

                if YEN_현재가 > float(과거가):

                    txt = " {0} ▲ ({1:.1f}, {2:.1f}%, {3}) ".format(format(YEN_현재가, ','), YEN_종가대비, YEN_등락율, YEN_진폭_틱)

                    if YEN_종가대비 > 0:
                        self.label_47.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif YEN_종가대비 < 0:
                        self.label_47.setStyleSheet('background-color: pink; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_47.setStyleSheet('background-color: pink; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_47.setText(txt)

                elif YEN_현재가 < float(과거가):

                    txt = " {0} ▼ ({1:.1f}, {2:.1f}%, {3}) ".format(format(YEN_현재가, ','), YEN_종가대비, YEN_등락율, YEN_진폭_틱)

                    if YEN_종가대비 > 0:
                        self.label_47.setStyleSheet('background-color: skyblue; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif YEN_종가대비 < 0:
                        self.label_47.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_47.setStyleSheet('background-color: skyblue; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_47.setText(txt)
                else:
                    pass

                txt = ' {0} '.format(format(YEN_고가, ','))
                self.label_48.setText(txt)

                self.plot4_ovc_jl_line.setValue(YEN_전저)
                self.plot4_ovc_jh_line.setValue(YEN_전고)
                self.plot4_ovc_close_line.setValue(YEN_전일종가)
                self.plot4_ovc_open_line.setValue(YEN_시가)
                self.plot4_ovc_pivot_line.setValue(YEN_피봇)
                self.plot4_ovc_low_line.setValue(YEN_저가)
                self.plot4_ovc_high_line.setValue(YEN_고가)                 

                self.plot4_yen_curve.setData(df_yen_graph['Price'].astype(float))

                if flag_checkBox_plot4_bband:

                    self.parent.Calc_Bollinger('YEN')

                    self.plot4_bollinger_1st_upper_curve.setData(df_yen_ta_graph['BBUpper_1st'].astype(float))
                    self.plot4_bollinger_1st_middle_curve.setData(df_yen_ta_graph['BBMiddle_1st'].astype(float))
                    self.plot4_bollinger_1st_lower_curve.setData(df_yen_ta_graph['BBLower_1st'].astype(float))
                    self.plot4_bollinger_2nd_upper_curve.setData(df_yen_ta_graph['BBUpper_2nd'].astype(float))
                    self.plot4_bollinger_2nd_middle_curve.setData(df_yen_ta_graph['BBMiddle_2nd'].astype(float))
                    self.plot4_bollinger_2nd_lower_curve.setData(df_yen_ta_graph['BBLower_2nd'].astype(float))

                    self.plot4_fibonacci_line1.setValue(yen_fibonacci_levels[1])
                    self.plot4_fibonacci_line2.setValue(yen_fibonacci_levels[2])
                    self.plot4_fibonacci_line3.setValue(yen_fibonacci_levels[3])
                    self.plot4_fibonacci_line4.setValue(yen_fibonacci_levels[4])
                    self.plot4_fibonacci_line5.setValue(yen_fibonacci_levels[5])

                    if df_yen_ta_graph.at[plot_time_index, 'BBMiddle_2nd'] >= df_yen_ta_graph.at[plot_time_index, 'Price']:
                        self.label_p4_2.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p4_2.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " BB U: {0:.1f}\n BB M: {1:.1f}\n BB L: {2:.1f} ".format\
                        (df_yen_ta_graph.at[plot_time_index, 'BBUpper_2nd'], df_yen_ta_graph.at[plot_time_index, 'BBMiddle_2nd'], df_yen_ta_graph.at[plot_time_index, 'BBLower_2nd'])
                    self.label_p4_2.setText(txt)
                else:
                    self.plot4_fibonacci_line1.setValue(YEN_전일종가)
                    self.plot4_fibonacci_line2.setValue(YEN_전일종가)
                    self.plot4_fibonacci_line3.setValue(YEN_전일종가)
                    self.plot4_fibonacci_line4.setValue(YEN_전일종가)
                    self.plot4_fibonacci_line5.setValue(YEN_전일종가)

                    self.label_p4_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p4_2.setText(" BB Upper\n BB Middle\n BB Lower ")

                if flag_checkBox_plot4_psar:

                    self.parent.Calc_PSAR_MAMA('YEN')

                    self.plot4_psar_curve.setData(df_yen_ta_graph['PSAR'][0:plot_time_index+1].astype(float))

                    #self.plot4_sslup_curve.setData(df_yen_ta_graph['SSLUp'][0:plot_time_index+1].astype(float))
                    #self.plot4_ssldown_curve.setData(df_yen_ta_graph['SSLDown'][0:plot_time_index+1].astype(float))

                    self.plot4_mama_curve.setData(df_yen_ta_graph['MAMA'].astype(float))
                    df = df_yen_ta_graph['FAMA'].apply(lambda x: YEN_저가 if x < YEN_저가 else x)
                    self.plot4_fama_curve.setData(df.astype(float))                        

                    if df_yen_ta_graph.at[plot_time_index, 'PSAR'] > df_yen_ta_graph.at[plot_time_index, 'Price'] and df_yen_ta_graph.at[plot_time_index, 'MAMA'] < df_yen_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p4_3.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_yen_ta_graph.at[plot_time_index, 'PSAR'] < df_yen_ta_graph.at[plot_time_index, 'Price'] and df_yen_ta_graph.at[plot_time_index, 'MAMA'] > df_yen_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p4_3.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold') 
                    else:
                        self.label_p4_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " PSAR: {0:.1f}\n MAMA: {1:.1f}\n FAMA: {2:.1f} ".format(df_yen_ta_graph.at[plot_time_index, 'PSAR'], df_yen_ta_graph.at[plot_time_index, 'MAMA'], df_yen_ta_graph.at[plot_time_index, 'FAMA'])
                    self.label_p4_3.setText(txt)
                else:
                    self.label_p4_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p4_3.setText(" PSAR\n MAMA ")
                
                if flag_checkBox_plot4_one_eye:

                    self.plot4_oe_conv_curve.setData(df_yen_ta_graph['OE_CONV'].astype(float))
                    self.plot4_oe_base_curve.setData(df_yen_ta_graph['OE_BASE'].astype(float))
                    self.plot4_span_a_curve.setData(df_yen_ta_graph['SPAN_A'].astype(float))
                    self.plot4_span_b_curve.setData(df_yen_ta_graph['SPAN_B'].astype(float))

                    if flag_one_eye_lagging_span:
                        self.plot4_lagging_span_curve.setData(df_yen_ta_graph['LAGGING_SPAN'].astype(float))

                    if df_yen_ta_graph.at[plot_time_index, 'OE_CONV'] < df_yen_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_yen_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] < df_yen_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p4_4.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_yen_ta_graph.at[plot_time_index, 'OE_CONV'] > df_yen_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_yen_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] > df_yen_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p4_4.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p4_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " 기준선: {0:.1f}\n 전환선: {1:.1f}\n SPAN A: {2:.1f} \n SPAN B: {3:.1f} ".format\
                        (df_yen_ta_graph.at[plot_time_index, 'OE_BASE'], df_yen_ta_graph.at[plot_time_index, 'OE_CONV'], \
                            df_yen_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'], df_yen_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B'])
                    self.label_p4_4.setText(txt)
                    
                else:
                    self.label_p4_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p4_4.setText(" ONE EYE ")
            
            elif comboindex4 == 21:

                self.plot4_time_line.setValue(plot_time_index)

                txt = ' {0:.5f} '.format(ADI_저가)
                self.label_46.setText(txt)

                과거가 =  self.label_47.text().split()[0]    

                if ADI_현재가 > float(과거가):

                    txt = " {0:.5f} ▲ ({1:.5f}, {2:.1f}%, {3}) ".format(ADI_현재가, ADI_종가대비, ADI_등락율, ADI_진폭_틱)

                    if ADI_종가대비 > 0:
                        self.label_47.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif ADI_종가대비 < 0:
                        self.label_47.setStyleSheet('background-color: pink; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_47.setStyleSheet('background-color: pink; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_47.setText(txt)

                elif ADI_현재가 < float(과거가):

                    txt = " {0:.5f} ▼ ({1:.5f}, {2:.1f}%, {3}) ".format(ADI_현재가, ADI_종가대비, ADI_등락율, ADI_진폭_틱)

                    if ADI_종가대비 > 0:
                        self.label_47.setStyleSheet('background-color: skyblue; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif ADI_종가대비 < 0:
                        self.label_47.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_47.setStyleSheet('background-color: skyblue; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_47.setText(txt)
                else:
                    pass

                txt = ' {0:.5f} '.format(ADI_고가)
                self.label_48.setText(txt)

                if ADI_전저 > 0:
                    self.plot4_ovc_jl_line.setValue(ADI_전저)

                if ADI_전고 > 0:
                    self.plot4_ovc_jh_line.setValue(ADI_전고)

                self.plot4_ovc_close_line.setValue(ADI_전일종가)
                self.plot4_ovc_open_line.setValue(ADI_시가)

                if ADI_피봇 > 0:
                    self.plot4_ovc_pivot_line.setValue(ADI_피봇)
                    
                self.plot4_ovc_low_line.setValue(ADI_저가)
                self.plot4_ovc_high_line.setValue(ADI_고가)                 

                self.plot4_adi_curve.setData(df_adi_graph['Price'].astype(float))

                if flag_checkBox_plot4_bband:

                    self.parent.Calc_Bollinger('ADI')

                    self.plot4_bollinger_1st_upper_curve.setData(df_adi_ta_graph['BBUpper_1st'].astype(float))
                    self.plot4_bollinger_1st_middle_curve.setData(df_adi_ta_graph['BBMiddle_1st'].astype(float))
                    self.plot4_bollinger_1st_lower_curve.setData(df_adi_ta_graph['BBLower_1st'].astype(float))
                    self.plot4_bollinger_2nd_upper_curve.setData(df_adi_ta_graph['BBUpper_2nd'].astype(float))
                    self.plot4_bollinger_2nd_middle_curve.setData(df_adi_ta_graph['BBMiddle_2nd'].astype(float))
                    self.plot4_bollinger_2nd_lower_curve.setData(df_adi_ta_graph['BBLower_2nd'].astype(float))

                    self.plot4_fibonacci_line1.setValue(adi_fibonacci_levels[1])
                    self.plot4_fibonacci_line2.setValue(adi_fibonacci_levels[2])
                    self.plot4_fibonacci_line3.setValue(adi_fibonacci_levels[3])
                    self.plot4_fibonacci_line4.setValue(adi_fibonacci_levels[4])
                    self.plot4_fibonacci_line5.setValue(adi_fibonacci_levels[5])

                    if df_adi_ta_graph.at[plot_time_index, 'BBMiddle_2nd'] >= df_adi_ta_graph.at[plot_time_index, 'Price']:
                        self.label_p4_2.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p4_2.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " BB U: {0:.5f}\n BB M: {1:.5f}\n BB L: {2:.5f} ".format\
                        (df_adi_ta_graph.at[plot_time_index, 'BBUpper_2nd'], df_adi_ta_graph.at[plot_time_index, 'BBMiddle_2nd'], df_adi_ta_graph.at[plot_time_index, 'BBLower_2nd'])
                    self.label_p4_2.setText(txt)
                else:
                    self.plot4_fibonacci_line1.setValue(ADI_전일종가)
                    self.plot4_fibonacci_line2.setValue(ADI_전일종가)
                    self.plot4_fibonacci_line3.setValue(ADI_전일종가)
                    self.plot4_fibonacci_line4.setValue(ADI_전일종가)
                    self.plot4_fibonacci_line5.setValue(ADI_전일종가)

                    self.label_p4_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p4_2.setText(" BB Upper\n BB Middle\n BB Lower ")

                if flag_checkBox_plot4_psar:

                    self.parent.Calc_PSAR_MAMA('ADI')

                    self.plot4_psar_curve.setData(df_adi_ta_graph['PSAR'][0:plot_time_index+1].astype(float))

                    #self.plot4_sslup_curve.setData(df_adi_ta_graph['SSLUp'][0:plot_time_index+1].astype(float))
                    #self.plot4_ssldown_curve.setData(df_adi_ta_graph['SSLDown'][0:plot_time_index+1].astype(float))

                    self.plot4_mama_curve.setData(df_adi_ta_graph['MAMA'].astype(float))
                    df = df_adi_ta_graph['FAMA'].apply(lambda x: ADI_저가 if x < ADI_저가 else x)
                    self.plot4_fama_curve.setData(df.astype(float))                        

                    if df_adi_ta_graph.at[plot_time_index, 'PSAR'] > df_adi_ta_graph.at[plot_time_index, 'Price'] and df_adi_ta_graph.at[plot_time_index, 'MAMA'] < df_adi_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p4_3.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_adi_ta_graph.at[plot_time_index, 'PSAR'] < df_adi_ta_graph.at[plot_time_index, 'Price'] and df_adi_ta_graph.at[plot_time_index, 'MAMA'] > df_adi_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p4_3.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold') 
                    else:
                        self.label_p4_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " PSAR: {0:.5f}\n MAMA: {1:.5f}\n FAMA: {2:.5f} ".format(df_adi_ta_graph.at[plot_time_index, 'PSAR'], df_adi_ta_graph.at[plot_time_index, 'MAMA'], df_adi_ta_graph.at[plot_time_index, 'FAMA'])
                    self.label_p4_3.setText(txt)
                else:
                    self.label_p4_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p4_3.setText(" PSAR\n MAMA ")
                
                if flag_checkBox_plot4_one_eye:

                    self.plot4_oe_conv_curve.setData(df_adi_ta_graph['OE_CONV'].astype(float))
                    self.plot4_oe_base_curve.setData(df_adi_ta_graph['OE_BASE'].astype(float))
                    self.plot4_span_a_curve.setData(df_adi_ta_graph['SPAN_A'].astype(float))
                    self.plot4_span_b_curve.setData(df_adi_ta_graph['SPAN_B'].astype(float))

                    if flag_one_eye_lagging_span:
                        self.plot4_lagging_span_curve.setData(df_adi_ta_graph['LAGGING_SPAN'].astype(float))

                    if df_adi_ta_graph.at[plot_time_index, 'OE_CONV'] < df_adi_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_adi_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] < df_adi_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p4_4.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_adi_ta_graph.at[plot_time_index, 'OE_CONV'] > df_adi_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_adi_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] > df_adi_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p4_4.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p4_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " 기준선: {0:.5f}\n 전환선: {1:.5f}\n SPAN A: {2:.5f} \n SPAN B: {3:.5f} ".format\
                        (df_adi_ta_graph.at[plot_time_index, 'OE_BASE'], df_adi_ta_graph.at[plot_time_index, 'OE_CONV'], \
                            df_adi_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'], df_adi_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B'])
                    self.label_p4_4.setText(txt)
                    
                else:
                    self.label_p4_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p4_4.setText(" ONE EYE ")
            
            elif comboindex4 == 23:
                
                self.plot4_time_line.setValue(plot_time_index)

                df_futures_cm_ta_graph['CCI1'] = talib.CCI(df_futures_cm_ta_graph['High'], df_futures_cm_ta_graph['Low'], df_futures_cm_ta_graph['Close'], timeperiod=CCI1_PERIOD)                
                df_futures_cm_ta_graph['CCI2'] = talib.CCI(df_futures_cm_ta_graph['High'], df_futures_cm_ta_graph['Low'], df_futures_cm_ta_graph['Close'], timeperiod=CCI2_PERIOD)
                df_futures_cm_ta_graph['RSI'] = (talib.RSI(df_futures_cm_ta_graph['Close'], timeperiod=RSI_PERIOD) - RSI_OFFSET) * RSI_SCALE_FACTOR

                txt = " CCI1: {0:.0f}, CCI2: {1:.0f}, RSI: {2:.0f} ".format(df_futures_cm_ta_graph.at[plot_time_index, 'CCI1'], df_futures_cm_ta_graph.at[plot_time_index, 'CCI2'], df_futures_cm_ta_graph.at[plot_time_index, 'RSI'])

                if df_futures_cm_ta_graph.at[plot_time_index, 'CCI2'] > 0:
                    self.label_47.setStyleSheet('background-color: yellow; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                elif df_futures_cm_ta_graph.at[plot_time_index, 'CCI2'] < 0:
                    self.label_47.setStyleSheet('background-color: yellow; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                else:
                    self.label_47.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                self.label_47.setText(txt)

                self.plot4_cci_plus_100_line.setValue(100)
                self.plot4_cci_minus_100_line.setValue(-100)
                                
                self.plot4_futures_cci1_curve.setData(df_futures_cm_ta_graph['CCI1'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot4_futures_cci2_curve.setData(df_futures_cm_ta_graph['CCI2'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot4_futures_rsi_curve.setData(df_futures_cm_ta_graph['RSI'].astype(float))

            elif comboindex4 == 24:
                
                self.plot4_time_line.setValue(plot_time_index)

                df_sp500_ta_graph['CCI1'] = talib.CCI(df_sp500_ta_graph['High'], df_sp500_ta_graph['Low'], df_sp500_ta_graph['Close'], timeperiod=CCI1_PERIOD)
                df_sp500_ta_graph['CCI2'] = talib.CCI(df_sp500_ta_graph['High'], df_sp500_ta_graph['Low'], df_sp500_ta_graph['Close'], timeperiod=CCI2_PERIOD)
                df_sp500_ta_graph['RSI'] = (talib.RSI(df_sp500_ta_graph['Close'], timeperiod=RSI_PERIOD) - RSI_OFFSET) * RSI_SCALE_FACTOR

                txt = " CCI1: {0:.0f}, CCI2: {1:.0f}, RSI: {2:.0f} ".format(df_sp500_ta_graph.at[plot_time_index, 'CCI1'], df_sp500_ta_graph.at[plot_time_index, 'CCI2'], df_sp500_ta_graph.at[plot_time_index, 'RSI'])

                if df_sp500_ta_graph.at[plot_time_index, 'CCI2'] > 0:
                    self.label_47.setStyleSheet('background-color: yellow; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                elif df_sp500_ta_graph.at[plot_time_index, 'CCI2'] < 0:
                    self.label_47.setStyleSheet('background-color: yellow; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                else:
                    self.label_47.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                self.label_47.setText(txt)

                self.plot4_cci_plus_100_line.setValue(100)
                self.plot4_cci_minus_100_line.setValue(-100)
                
                self.plot4_sp500_cci1_curve.setData(df_sp500_ta_graph['CCI1'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot4_sp500_cci2_curve.setData(df_sp500_ta_graph['CCI2'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot4_sp500_rsi_curve.setData(df_sp500_ta_graph['RSI'].astype(float))

            elif comboindex4 == 25:
                
                self.plot4_time_line.setValue(plot_time_index)

                df_dow_ta_graph['CCI1'] = talib.CCI(df_dow_ta_graph['High'], df_dow_ta_graph['Low'], df_dow_ta_graph['Close'], timeperiod=CCI1_PERIOD)
                df_dow_ta_graph['CCI2'] = talib.CCI(df_dow_ta_graph['High'], df_dow_ta_graph['Low'], df_dow_ta_graph['Close'], timeperiod=CCI2_PERIOD)
                df_dow_ta_graph['RSI'] = (talib.RSI(df_dow_ta_graph['Close'], timeperiod=RSI_PERIOD) - RSI_OFFSET) * RSI_SCALE_FACTOR

                txt = " CCI1: {0:.0f}, CCI2: {1:.0f}, RSI: {2:.0f} ".format(df_dow_ta_graph.at[plot_time_index, 'CCI1'], df_dow_ta_graph.at[plot_time_index, 'CCI2'], df_dow_ta_graph.at[plot_time_index, 'RSI'])

                if df_dow_ta_graph.at[plot_time_index, 'CCI2'] > 0:
                    self.label_47.setStyleSheet('background-color: yellow; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                elif df_dow_ta_graph.at[plot_time_index, 'CCI2'] < 0:
                    self.label_47.setStyleSheet('background-color: yellow; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                else:
                    self.label_47.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                self.label_47.setText(txt)

                self.plot4_cci_plus_100_line.setValue(100)
                self.plot4_cci_minus_100_line.setValue(-100)
                
                self.plot4_dow_cci1_curve.setData(df_dow_ta_graph['CCI1'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot4_dow_cci2_curve.setData(df_dow_ta_graph['CCI2'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot4_dow_rsi_curve.setData(df_dow_ta_graph['RSI'].astype(float))

            elif comboindex4 == 26:
                
                self.plot4_time_line.setValue(plot_time_index)

                df_nasdaq_ta_graph['CCI1'] = talib.CCI(df_nasdaq_ta_graph['High'], df_nasdaq_ta_graph['Low'], df_nasdaq_ta_graph['Close'], timeperiod=CCI1_PERIOD)
                df_nasdaq_ta_graph['CCI2'] = talib.CCI(df_nasdaq_ta_graph['High'], df_nasdaq_ta_graph['Low'], df_nasdaq_ta_graph['Close'], timeperiod=CCI2_PERIOD)
                df_nasdaq_ta_graph['RSI'] = (talib.RSI(df_nasdaq_ta_graph['Close'], timeperiod=RSI_PERIOD) - RSI_OFFSET) * RSI_SCALE_FACTOR

                txt = " CCI1: {0:.0f}, CCI2: {1:.0f}, RSI: {2:.0f} ".format(df_nasdaq_ta_graph.at[plot_time_index, 'CCI1'], df_nasdaq_ta_graph.at[plot_time_index, 'CCI2'], df_nasdaq_ta_graph.at[plot_time_index, 'RSI'])

                if df_nasdaq_ta_graph.at[plot_time_index, 'CCI2'] > 0:
                    self.label_47.setStyleSheet('background-color: yellow; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                elif df_nasdaq_ta_graph.at[plot_time_index, 'CCI2'] < 0:
                    self.label_47.setStyleSheet('background-color: yellow; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                else:
                    self.label_47.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                self.label_47.setText(txt)

                self.plot4_cci_plus_100_line.setValue(100)
                self.plot4_cci_minus_100_line.setValue(-100)
                
                self.plot4_nasdaq_cci1_curve.setData(df_nasdaq_ta_graph['CCI1'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot4_nasdaq_cci2_curve.setData(df_nasdaq_ta_graph['CCI2'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot4_nasdaq_rsi_curve.setData(df_nasdaq_ta_graph['RSI'].astype(float))

            elif comboindex4 == 27:
                
                self.plot4_time_line.setValue(plot_time_index)

                df_hsi_ta_graph['CCI1'] = talib.CCI(df_hsi_ta_graph['High'], df_hsi_ta_graph['Low'], df_hsi_ta_graph['Close'], timeperiod=CCI1_PERIOD)
                df_hsi_ta_graph['CCI2'] = talib.CCI(df_hsi_ta_graph['High'], df_hsi_ta_graph['Low'], df_hsi_ta_graph['Close'], timeperiod=CCI2_PERIOD)
                df_hsi_ta_graph['RSI'] = (talib.RSI(df_hsi_ta_graph['Close'], timeperiod=RSI_PERIOD) - RSI_OFFSET) * RSI_SCALE_FACTOR

                txt = " CCI1: {0:.0f}, CCI2: {1:.0f}, RSI: {2:.0f} ".format(df_hsi_ta_graph.at[plot_time_index, 'CCI1'], df_hsi_ta_graph.at[plot_time_index, 'CCI2'], df_hsi_ta_graph.at[plot_time_index, 'RSI'])

                if df_hsi_ta_graph.at[plot_time_index, 'CCI2'] > 0:
                    self.label_47.setStyleSheet('background-color: yellow; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                elif df_hsi_ta_graph.at[plot_time_index, 'CCI2'] < 0:
                    self.label_47.setStyleSheet('background-color: yellow; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                else:
                    self.label_47.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                self.label_47.setText(txt)
                
                self.plot4_cci_plus_100_line.setValue(100)
                self.plot4_cci_minus_100_line.setValue(-100)
                
                self.plot4_hsi_cci1_curve.setData(df_hsi_ta_graph['CCI1'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot4_hsi_cci2_curve.setData(df_hsi_ta_graph['CCI2'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot4_hsi_rsi_curve.setData(df_hsi_ta_graph['RSI'].astype(float))

            elif comboindex4 == 28:
                
                self.plot4_time_line.setValue(plot_time_index)

                df_wti_ta_graph['CCI1'] = talib.CCI(df_wti_ta_graph['High'], df_wti_ta_graph['Low'], df_wti_ta_graph['Close'], timeperiod=CCI1_PERIOD)
                df_wti_ta_graph['CCI2'] = talib.CCI(df_wti_ta_graph['High'], df_wti_ta_graph['Low'], df_wti_ta_graph['Close'], timeperiod=CCI2_PERIOD)
                df_wti_ta_graph['RSI'] = (talib.RSI(df_wti_ta_graph['Close'], timeperiod=RSI_PERIOD) - RSI_OFFSET) * RSI_SCALE_FACTOR

                txt = " CCI1: {0:.0f}, CCI2: {1:.0f}, RSI: {2:.0f} ".format(df_wti_ta_graph.at[plot_time_index, 'CCI1'], df_wti_ta_graph.at[plot_time_index, 'CCI2'], df_wti_ta_graph.at[plot_time_index, 'RSI'])

                if df_wti_ta_graph.at[plot_time_index, 'CCI2'] > 0:
                    self.label_47.setStyleSheet('background-color: yellow; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                elif df_wti_ta_graph.at[plot_time_index, 'CCI2'] < 0:
                    self.label_47.setStyleSheet('background-color: yellow; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                else:
                    self.label_47.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                self.label_47.setText(txt)

                self.plot4_cci_plus_100_line.setValue(100)
                self.plot4_cci_minus_100_line.setValue(-100)
                
                self.plot4_wti_cci1_curve.setData(df_wti_ta_graph['CCI1'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot4_wti_cci2_curve.setData(df_wti_ta_graph['CCI2'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot4_wti_rsi_curve.setData(df_wti_ta_graph['RSI'].astype(float))

            elif comboindex4 == 29:
                
                self.plot4_time_line.setValue(plot_time_index)

                df_gold_ta_graph['CCI1'] = talib.CCI(df_gold_ta_graph['High'], df_gold_ta_graph['Low'], df_gold_ta_graph['Close'], timeperiod=CCI1_PERIOD)
                df_gold_ta_graph['CCI2'] = talib.CCI(df_gold_ta_graph['High'], df_gold_ta_graph['Low'], df_gold_ta_graph['Close'], timeperiod=CCI2_PERIOD)
                df_gold_ta_graph['RSI'] = (talib.RSI(df_gold_ta_graph['Close'], timeperiod=RSI_PERIOD) - RSI_OFFSET) * RSI_SCALE_FACTOR

                txt = " CCI1: {0:.0f}, CCI2: {1:.0f}, RSI: {2:.0f} ".format(df_gold_ta_graph.at[plot_time_index, 'CCI1'], df_gold_ta_graph.at[plot_time_index, 'CCI2'], df_gold_ta_graph.at[plot_time_index, 'RSI'])

                if df_gold_ta_graph.at[plot_time_index, 'CCI2'] > 0:
                    self.label_47.setStyleSheet('background-color: yellow; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                elif df_gold_ta_graph.at[plot_time_index, 'CCI2'] < 0:
                    self.label_47.setStyleSheet('background-color: yellow; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                else:
                    self.label_47.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                self.label_47.setText(txt)

                self.plot4_cci_plus_100_line.setValue(100)
                self.plot4_cci_minus_100_line.setValue(-100)
                
                self.plot4_gold_cci1_curve.setData(df_gold_ta_graph['CCI1'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot4_gold_cci2_curve.setData(df_gold_ta_graph['CCI2'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot4_gold_rsi_curve.setData(df_gold_ta_graph['RSI'].astype(float))

            elif comboindex4 == 30:
                
                self.plot4_time_line.setValue(plot_time_index)

                df_euro_ta_graph['CCI1'] = talib.CCI(df_euro_ta_graph['High'], df_euro_ta_graph['Low'], df_euro_ta_graph['Close'], timeperiod=CCI1_PERIOD)
                df_euro_ta_graph['CCI2'] = talib.CCI(df_euro_ta_graph['High'], df_euro_ta_graph['Low'], df_euro_ta_graph['Close'], timeperiod=CCI2_PERIOD)
                df_euro_ta_graph['RSI'] = (talib.RSI(df_euro_ta_graph['Close'], timeperiod=RSI_PERIOD) - RSI_OFFSET) * RSI_SCALE_FACTOR

                txt = " CCI1: {0:.0f}, CCI2: {1:.0f}, RSI: {2:.0f} ".format(df_euro_ta_graph.at[plot_time_index, 'CCI1'], df_euro_ta_graph.at[plot_time_index, 'CCI2'], df_euro_ta_graph.at[plot_time_index, 'RSI'])

                if df_euro_ta_graph.at[plot_time_index, 'CCI2'] > 0:
                    self.label_47.setStyleSheet('background-color: yellow; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                elif df_euro_ta_graph.at[plot_time_index, 'CCI2'] < 0:
                    self.label_47.setStyleSheet('background-color: yellow; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                else:
                    self.label_47.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                self.label_47.setText(txt)

                self.plot4_cci_plus_100_line.setValue(100)
                self.plot4_cci_minus_100_line.setValue(-100)
                
                self.plot4_euro_cci1_curve.setData(df_euro_ta_graph['CCI1'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot4_euro_cci2_curve.setData(df_euro_ta_graph['CCI2'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot4_euro_rsi_curve.setData(df_euro_ta_graph['RSI'].astype(float))

            elif comboindex4 == 31:
                
                self.plot4_time_line.setValue(plot_time_index)

                df_yen_ta_graph['CCI1'] = talib.CCI(df_yen_ta_graph['High'], df_yen_ta_graph['Low'], df_yen_ta_graph['Close'], timeperiod=CCI1_PERIOD)
                df_yen_ta_graph['CCI2'] = talib.CCI(df_yen_ta_graph['High'], df_yen_ta_graph['Low'], df_yen_ta_graph['Close'], timeperiod=CCI2_PERIOD)
                df_yen_ta_graph['RSI'] = (talib.RSI(df_yen_ta_graph['Close'], timeperiod=RSI_PERIOD) - RSI_OFFSET) * RSI_SCALE_FACTOR

                txt = " CCI1: {0:.0f}, CCI2: {1:.0f}, RSI: {2:.0f} ".format(df_yen_ta_graph.at[plot_time_index, 'CCI1'], df_yen_ta_graph.at[plot_time_index, 'CCI2'], df_yen_ta_graph.at[plot_time_index, 'RSI'])

                if df_yen_ta_graph.at[plot_time_index, 'CCI2'] > 0:
                    self.label_47.setStyleSheet('background-color: yellow; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                elif df_yen_ta_graph.at[plot_time_index, 'CCI2'] < 0:
                    self.label_47.setStyleSheet('background-color: yellow; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                else:
                    self.label_47.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                self.label_47.setText(txt)

                self.plot4_cci_plus_100_line.setValue(100)
                self.plot4_cci_minus_100_line.setValue(-100)
                
                self.plot4_yen_cci1_curve.setData(df_yen_ta_graph['CCI1'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot4_yen_cci2_curve.setData(df_yen_ta_graph['CCI2'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot4_yen_rsi_curve.setData(df_yen_ta_graph['RSI'].astype(float))

            elif comboindex4 == 32:
                
                self.plot4_time_line.setValue(plot_time_index)

                df_adi_ta_graph['CCI1'] = talib.CCI(df_adi_ta_graph['High'], df_adi_ta_graph['Low'], df_adi_ta_graph['Close'], timeperiod=CCI1_PERIOD)
                df_adi_ta_graph['CCI2'] = talib.CCI(df_adi_ta_graph['High'], df_adi_ta_graph['Low'], df_adi_ta_graph['Close'], timeperiod=CCI2_PERIOD)
                df_adi_ta_graph['RSI'] = (talib.RSI(df_adi_ta_graph['Close'], timeperiod=RSI_PERIOD) - RSI_OFFSET) * RSI_SCALE_FACTOR

                txt = " CCI1: {0:.0f}, CCI2: {1:.0f}, RSI: {2:.0f} ".format(df_adi_ta_graph.at[plot_time_index, 'CCI1'], df_adi_ta_graph.at[plot_time_index, 'CCI2'], df_adi_ta_graph.at[plot_time_index, 'RSI'])

                if df_adi_ta_graph.at[plot_time_index, 'CCI2'] > 0:
                    self.label_47.setStyleSheet('background-color: yellow; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                elif df_adi_ta_graph.at[plot_time_index, 'CCI2'] < 0:
                    self.label_47.setStyleSheet('background-color: yellow; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                else:
                    self.label_47.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                self.label_47.setText(txt)

                self.plot4_cci_plus_100_line.setValue(100)
                self.plot4_cci_minus_100_line.setValue(-100)
                
                self.plot4_adi_cci1_curve.setData(df_adi_ta_graph['CCI1'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot4_adi_cci2_curve.setData(df_adi_ta_graph['CCI2'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot4_adi_rsi_curve.setData(df_adi_ta_graph['RSI'].astype(float))
            else:
                pass
            
        except Exception as e:

            txt = '[{0:02d}:{1:02d}:{2:02d}] Exception : update_plot4 에서 {3} \n상기 오류가 발생했습니다.\r'.format(dt.hour, dt.minute, dt.second, traceback.format_exc())
            self.parent.textBrowser.append(txt)

        finally:
            if CME_체결시간 == '000000':
                txt = ' [{0:02d}:{1:02d}:{2:02d}] {3:.2f} ms '.format(dt.hour, dt.minute, dt.second, plot4_processing_time)
            else:
                if flag_call_high_in_fixed_coreval:
                    self.label_time_4.setStyleSheet('background-color: black; color: yellow; font-family: Consolas; font-size: 9pt; font: Bold')
                    txt = ' ♦ CH({0}) {1:.2f} ms '.format(call_high_val_in_fixed_coreval, plot4_processing_time)
                else:
                    self.label_time_4.setStyleSheet('background-color: lawngreen; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    txt = ' {0:.2f} ms '.format(plot4_processing_time)

            self.label_time_4.setText(txt)

            flag_plot4_update_is_running = False

    @logging_time_plot5
    #@pyqtSlot()    
    def update_plot5(self):

        global flag_plot5_update_is_running        
        global flag_calltable_checkstate_changed, flag_puttable_checkstate_changed        

        try:        
            dt = datetime.now()

            flag_plot5_update_is_running = True                       

            # Plot5 그래프 그리기
            # 선물가격
            if comboindex5 == 2:
                
                self.plot5_time_line.setValue(plot_time_index)

                txt = ' {0} '.format(근월물_선물_피봇)
                self.label_54.setText(txt)

                txt = ' {0}/{1} '.format(근월물_선물_시가, 차월물_선물_시가)
                self.label_55.setText(txt)
                
                txt = ' {0} '.format(근월물_선물_저가)
                self.label_56.setText(txt)       

                과거가 =  self.label_57.text().split()[0]

                if 근월물_선물_현재가 > float(과거가):

                    txt = " {0} ▲ ({1:.2f}, {2:0.1f}%, {3:.2f}), kp200 : {4:.2f} ".format(근월물_선물_현재가, 근월물_선물_종가대비, 근월물_선물_종가대비_등락율, 근월물_선물_진폭, kp200_현재가)

                    if 근월물_선물_종가대비 > 0:
                        self.label_57.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif 근월물_선물_종가대비 < 0:
                        self.label_57.setStyleSheet('background-color: pink; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_57.setStyleSheet('background-color: pink; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_57.setText(txt)

                elif 근월물_선물_현재가 < float(과거가):

                    txt = " {0} ▼ ({1:.2f}, {2:0.1f}%, {3:.2f}), kp200 : {4:.2f} ".format(근월물_선물_현재가, 근월물_선물_종가대비, 근월물_선물_종가대비_등락율, 근월물_선물_진폭, kp200_현재가)

                    if 근월물_선물_종가대비 > 0:
                        self.label_57.setStyleSheet('background-color: skyblue; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif 근월물_선물_종가대비 < 0:
                        self.label_57.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_57.setStyleSheet('background-color: skyblue; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_57.setText(txt)
                else:
                    pass

                txt = ' {0} '.format(근월물_선물_고가)
                self.label_58.setText(txt)                
                
                self.plot5_kp200_line[3].setValue(KP200_COREVAL[3])
                self.plot5_kp200_line[4].setValue(KP200_COREVAL[4])
                self.plot5_kp200_line[5].setValue(KP200_COREVAL[5])
                self.plot5_kp200_line[6].setValue(KP200_COREVAL[6])                

                if 근월물_선물_저가 < KP200_COREVAL[3] or kp200_저가 < KP200_COREVAL[3]:
                    self.plot5_kp200_line[2].setValue(KP200_COREVAL[2])
                else:
                    pass

                if 근월물_선물_저가 < KP200_COREVAL[2] or kp200_저가 < KP200_COREVAL[2]:
                    self.plot5_kp200_line[1].setValue(KP200_COREVAL[1])
                else:
                    pass
                
                if 근월물_선물_고가 > KP200_COREVAL[6] or kp200_고가 > KP200_COREVAL[6]:
                    self.plot5_kp200_line[7].setValue(KP200_COREVAL[7])
                else:
                    pass

                if 근월물_선물_고가 > KP200_COREVAL[7] or kp200_고가 > KP200_COREVAL[7]:
                    self.plot5_kp200_line[8].setValue(KP200_COREVAL[8])
                else:
                    pass                
                
                self.plot5_fut_jl_line.setValue(근월물_선물_전저)
                self.plot5_fut_jh_line.setValue(근월물_선물_전고)
                self.plot5_fut_close_line.setValue(근월물_선물_종가)                
                self.plot5_fut_open_line.setValue(근월물_선물_시가)
                self.plot5_fut_low_line.setValue(근월물_선물_저가)
                self.plot5_fut_pivot_line.setValue(근월물_선물_피봇)
                self.plot5_fut_high_line.setValue(근월물_선물_고가)

                if DayTime:
                    self.plot5_kp200_curve.setData(df_kp200_graph['Price'].astype(float))
                    self.plot5_fut_cm_price_curve.setData(df_futures_cm_graph['Price'].astype(float))
                    self.plot5_fut_nm_price_curve.setData(df_futures_nm_graph['Price'].astype(float))
                else:
                    pass

                if flag_checkBox_plot5_bband:

                    self.parent.Calc_Bollinger('FUT')
                
                    self.plot5_bollinger_1st_upper_curve.setData(df_futures_cm_ta_graph['BBUpper_1st'].astype(float))
                    self.plot5_bollinger_1st_middle_curve.setData(df_futures_cm_ta_graph['BBMiddle_1st'].astype(float))
                    self.plot5_bollinger_1st_lower_curve.setData(df_futures_cm_ta_graph['BBLower_1st'].astype(float))
                    self.plot5_bollinger_2nd_upper_curve.setData(df_futures_cm_ta_graph['BBUpper_2nd'].astype(float))
                    self.plot5_bollinger_2nd_middle_curve.setData(df_futures_cm_ta_graph['BBMiddle_2nd'].astype(float))
                    self.plot5_bollinger_2nd_lower_curve.setData(df_futures_cm_ta_graph['BBLower_2nd'].astype(float))

                    self.plot5_fibonacci_line1.setValue(futures_fibonacci_levels[1])
                    self.plot5_fibonacci_line2.setValue(futures_fibonacci_levels[2])
                    self.plot5_fibonacci_line3.setValue(futures_fibonacci_levels[3])
                    self.plot5_fibonacci_line4.setValue(futures_fibonacci_levels[4])
                    self.plot5_fibonacci_line5.setValue(futures_fibonacci_levels[5])

                    if df_futures_cm_ta_graph.at[plot_time_index, 'BBMiddle_2nd'] >= df_futures_cm_ta_graph.at[plot_time_index, 'Price']:
                        self.label_p5_2.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p5_2.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " BB U: {0:.2f}\n BB M: {1:.2f}\n BB L: {2:.2f} ".format\
                        (df_futures_cm_ta_graph.at[plot_time_index, 'BBUpper_2nd'], df_futures_cm_ta_graph.at[plot_time_index, 'BBMiddle_2nd'], df_futures_cm_ta_graph.at[plot_time_index, 'BBLower_2nd'])
                    self.label_p5_2.setText(txt)
                else:
                    self.plot5_fibonacci_line1.setValue(근월물_선물_종가)
                    self.plot5_fibonacci_line2.setValue(근월물_선물_종가)
                    self.plot5_fibonacci_line3.setValue(근월물_선물_종가)
                    self.plot5_fibonacci_line4.setValue(근월물_선물_종가)
                    self.plot5_fibonacci_line5.setValue(근월물_선물_종가)

                    self.label_p5_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p5_2.setText(" BB Upper\n BB Middle\n BB Lower ")

                if flag_checkBox_plot5_psar:

                    self.parent.Calc_PSAR_MAMA('FUT')

                    self.plot5_psar_curve.setData(df_futures_cm_ta_graph['PSAR'][0:plot_time_index+1].astype(float))

                    #self.plot5_sslup_curve.setData(df_futures_cm_ta_graph['SSLUp'][0:plot_time_index+1].astype(float))
                    #self.plot5_ssldown_curve.setData(df_futures_cm_ta_graph['SSLDown'][0:plot_time_index+1].astype(float))

                    self.plot5_mama_curve.setData(df_futures_cm_ta_graph['MAMA'].astype(float))
                    df = df_futures_cm_ta_graph['FAMA'].apply(lambda x: 근월물_선물_저가 if x < 근월물_선물_저가 else x)
                    self.plot5_fama_curve.setData(df.astype(float))

                    if df_futures_cm_ta_graph.at[plot_time_index, 'PSAR'] > df_futures_cm_ta_graph.at[plot_time_index, 'Price'] and df_futures_cm_ta_graph.at[plot_time_index, 'MAMA'] < df_futures_cm_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p5_3.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_futures_cm_ta_graph.at[plot_time_index, 'PSAR'] < df_futures_cm_ta_graph.at[plot_time_index, 'Price'] and df_futures_cm_ta_graph.at[plot_time_index, 'MAMA'] > df_futures_cm_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p5_3.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold') 
                    else:
                        self.label_p5_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " PSAR: {0:.2f}\n MAMA: {1:.2f}\n FAMA: {2:.2f} ".format(df_futures_cm_ta_graph.at[plot_time_index, 'PSAR'], df_futures_cm_ta_graph.at[plot_time_index, 'MAMA'], df_futures_cm_ta_graph.at[plot_time_index, 'FAMA'])
                    self.label_p5_3.setText(txt)
                else:
                    self.label_p5_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p5_3.setText(" PSAR\n MAMA ")
                
                if flag_checkBox_plot5_one_eye:

                    self.plot5_oe_conv_curve.setData(df_futures_cm_ta_graph['OE_CONV'].astype(float))
                    self.plot5_oe_base_curve.setData(df_futures_cm_ta_graph['OE_BASE'].astype(float))
                    self.plot5_span_a_curve.setData(df_futures_cm_ta_graph['SPAN_A'].astype(float))
                    self.plot5_span_b_curve.setData(df_futures_cm_ta_graph['SPAN_B'].astype(float))

                    if flag_one_eye_lagging_span:
                        self.plot5_lagging_span_curve.setData(df_futures_cm_ta_graph['LAGGING_SPAN'].astype(float))

                    if df_futures_cm_ta_graph.at[plot_time_index, 'OE_CONV'] < df_futures_cm_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_futures_cm_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] < df_futures_cm_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p5_4.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_futures_cm_ta_graph.at[plot_time_index, 'OE_CONV'] > df_futures_cm_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_futures_cm_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] > df_futures_cm_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p5_4.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p5_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " 기준선: {0:.2f}\n 전환선: {1:.2f}\n SPAN A: {2:.2f} \n SPAN B: {3:.2f} ".format\
                        (df_futures_cm_ta_graph.at[plot_time_index, 'OE_BASE'], df_futures_cm_ta_graph.at[plot_time_index, 'OE_CONV'], \
                            df_futures_cm_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'], df_futures_cm_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B'])
                    self.label_p5_4.setText(txt)
                    
                else:
                    self.label_p5_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p5_4.setText(" ONE EYE ")

            elif comboindex5 == 3:
                
                self.plot5_time_line.setValue(plot_time_index)

                txt = " {0:.2f}({1:.0f}/{2:.0f}) ".format(풋잔량비, put_quote['매수잔량'], put_quote['매도잔량'])
                self.label_56.setText(txt)

                txt = " CM: {0:.2f}({1:.0f}/{2:.0f}), NM: {3:.2f}({4:.0f}/{5:.0f}), [▼: {6:.2f}, ▲: {7:.2f}] ".format(\
                    선물_근월물_호가_잔량비, 근월물_매수호가_총수량, 근월물_매도호가_총수량, 선물_차월물_호가_잔량비, \
                    차월물_매수호가_총수량, 차월물_매도호가_총수량, 차월물_선물_호가잔량비_최소, 차월물_선물_호가잔량비_최대)

                if fut_quote_energy_direction == 'call':
                    self.label_57.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                elif fut_quote_energy_direction == 'put':
                    self.label_57.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                else:
                    self.label_57.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                self.label_57.setText(txt)
                
                txt = " {0:.2f}({1:.0f}/{2:.0f}) ".format(콜잔량비, call_quote['매수잔량'], call_quote['매도잔량'])
                self.label_58.setText(txt)

                self.plot5_call_quote_curve.setData(df_call_information_graph['quote_remainder_ratio'].astype(float))
                self.plot5_put_quote_curve.setData(df_put_information_graph['quote_remainder_ratio'].astype(float))

                if DayTime:
                    self.plot5_fut_cm_quote_remainder_ratio_curve.setData(df_futures_cm_graph['c_quote_remainder_ratio'].astype(float))
                    self.plot5_fut_nm_quote_remainder_ratio_curve.setData(df_futures_cm_graph['n_quote_remainder_ratio'].astype(float))
                    self.plot5_nm_futures_quote_remainder_ratio_bottom_line.setValue(차월물_선물_호가잔량비_최소)
                    self.plot5_nm_futures_quote_remainder_ratio_upper_line.setValue(차월물_선물_호가잔량비_최대)
                else:
                    pass

            elif comboindex5 == 4:
                
                self.plot5_time_line.setValue(plot_time_index)

                txt = " {0:.0f} ".format(put_volume_power)
                self.label_56.setText(txt)

                txt = " {0:.0f} ".format(fut_cm_volume_power)

                if fut_cm_volume_power > 0:
                    self.label_57.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                else:
                    self.label_57.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                self.label_57.setText(txt)
                
                txt = " {0:.0f} ".format(call_volume_power)
                self.label_58.setText(txt)

                if DayTime:
                    self.plot5_fut_volume_curve.setData(df_futures_cm_graph['Volume'].astype(float))
                else:
                    pass
                                
                self.plot5_call_volume_curve.setData(df_call_information_graph['Volume'].astype(float))
                self.plot5_put_volume_curve.setData(df_put_information_graph['Volume'].astype(float))

            # 옵션가격
            elif comboindex5 == 5:
                
                self.plot5_time_line.setValue(plot_time_index)

                if DayTime: 
                    
                    # 등가표시
                    txt = ' 등가: {0} '.format(atm_txt)
                    self.label_51.setText(txt)

                    txt = ' 시작 중심가: {0:.2f} '.format(INIT_CENTER_VAL)
                    self.label_52.setText(txt)

                    txt = ' 하단: {0:.2f} '.format(옵션_중심가/GOLDEN_RATIO)                        

                    self.label_53.setText(txt)

                    txt = ' 상단: {0:.2f} '.format(옵션_중심가*GOLDEN_RATIO)
                    self.label_54.setText(txt)

                    txt = ' {0:.2f}({1:.2f}, {2:.2f}%) '.format(put_atm_value, df_put.at[ATM_INDEX, '대비'], (put_atm_value / df_put.at[ATM_INDEX, '시가'] - 1) * 100)
                    self.label_56.setText(txt)

                    txt = ' 중심가: {0:.2f} '.format(옵션_중심가)
                    self.label_57.setText(txt)

                    txt = ' {0:.2f}({1:.2f}, {2:.2f}%) '.format(call_atm_value, df_call.at[ATM_INDEX, '대비'], (call_atm_value / df_call.at[ATM_INDEX, '시가'] - 1) * 100)
                    self.label_58.setText(txt)
                else:
                    pass

                if flag_calltable_checkstate_changed:
                    flag_calltable_checkstate_changed = False
                    for i in range(option_pairs_count):
                        self.plot5_call_curve[i].clear()
                else:
                    pass

                if flag_puttable_checkstate_changed:
                    flag_puttable_checkstate_changed = False
                    for i in range(option_pairs_count):
                        self.plot5_put_curve[i].clear()
                else:
                    pass

                # 선택된 콜그래프 그리기
                if selected_call:
                    for i in range(len(selected_call)):
                        self.plot5_call_curve[i].setData(df_call_graph[selected_call[i]]['Price'].astype(float))
                else:
                    pass                 

                # 선택된 풋그래프 그리기
                if selected_put:
                    for i in range(len(selected_put)):
                        self.plot5_put_curve[i].setData(df_put_graph[selected_put[i]]['Price'].astype(float))
                else:
                    pass                
                
                if DayTime:        
                    self.plot5_center_val_lower_line.setValue(옵션_중심가/GOLDEN_RATIO)
                    self.plot5_center_val_line.setValue(옵션_중심가)
                    self.plot5_center_val_upper_line.setValue(옵션_중심가*GOLDEN_RATIO)

                    self.plot5_center_val_curve.setData(df_call_information_graph['centerval'].astype(float))
                else:
                    pass

            elif comboindex5 == 6:
                
                self.plot5_time_line.setValue(plot_time_index)

                txt = " {0:.2f}({1:.0f}/{2:.0f}), [▼, ▲: {4:.2f}] ".format(풋잔량비, put_quote['매수잔량'], put_quote['매도잔량'], 풋_잔량비_최소, 풋_잔량비_최대)
                self.label_56.setText(txt)
                
                txt = " {0:.2f}({1:.0f}/{2:.0f}), [▼, ▲: {4:.2f}] ".format(콜잔량비, call_quote['매수잔량'], call_quote['매도잔량'], 콜_잔량비_최소, 콜_잔량비_최대)
                self.label_58.setText(txt)

                self.plot5_call_quote_curve.setData(df_call_information_graph['quote_remainder_ratio'].astype(float))
                self.plot5_put_quote_curve.setData(df_put_information_graph['quote_remainder_ratio'].astype(float))

                self.plot5_option_quote_remainder_ratio_bottom_line.setValue(옵션_잔량비_최소)
                self.plot5_option_quote_remainder_ratio_upper_line.setValue(옵션_잔량비_최대)       

            elif comboindex5 == 7:
                
                self.plot5_time_line.setValue(plot_time_index)

                txt = " {0:.2f}({1:.2f}) ".format(풋_수정미결퍼센트, put_oi_init_percent)
                self.label_56.setText(txt)
                
                txt = " {0:.2f}({1:.2f}) ".format(콜_수정미결퍼센트, call_oi_init_percent)
                self.label_58.setText(txt)

                self.plot5_call_oi_curve.setData(df_call_information_graph['open_interest'].astype(float))
                self.plot5_put_oi_curve.setData(df_put_information_graph['open_interest'].astype(float))
            
            elif comboindex5 == 8:
                
                self.plot5_time_line.setValue(plot_time_index)

                txt = " {0:.2f}({1}) {2:.2f} ".format(SP500_시가대비_등락율, SP500_현재가, SP500_FUT_시가_등락율비)
                self.label_55.setText(txt)

                txt = " {0:.2f}({1}) ".format(put_otm_cdb_percent_mean, put_atm_value)
                self.label_56.setText(txt)

                txt = " {0:.2f}({1}) ".format(call_otm_cdb_percent_mean, call_atm_value)
                self.label_58.setText(txt)
                
                self.plot5_call_drate_curve.setData(df_call_information_graph['Drate'].astype(float))
                self.plot5_put_drate_curve.setData(df_put_information_graph['Drate'].astype(float))
                
                self.plot5_cme_drate_curve.setData(SP500_FUT_시가_등락율비 * df_sp500_graph['Drate'].astype(float) + DRATE_OFFSET)
                
                if DayTime:

                    txt = " {0:.2f}({1}), Gap : {2:.2f} ".format(근월물_선물_시가대비_등락율, 근월물_선물_현재가, drate_gap)

                    if drate_gap > 0:
                        self.label_57.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif drate_gap < 0:
                        self.label_57.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_57.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_57.setText(txt)

                    if not np.isnan(df_futures_cm_graph.at[plot_time_index, 'Drate']):
                        self.plot5_fut_cm_drate_curve.setData(plot_drate_scale_factor * df_futures_cm_graph['Drate'].astype(float))

                    if not np.isnan(df_futures_nm_graph.at[plot_time_index, 'Drate']):
                        self.plot5_fut_nm_drate_curve.setData(plot_drate_scale_factor * df_futures_nm_graph['Drate'].astype(float))                        
                else:
                    pass
            
            elif comboindex5 == 10:
                
                self.plot5_time_line.setValue(plot_time_index)

                if DayTime:
                    txt = " 기관현물: {0} ".format(기관현물_순매수)
                    self.label_51.setText(txt)

                    txt = " 기관선물: {0} ".format(기관선물_순매수)
                    self.label_52.setText(txt)

                    txt = " 개인현물: {0} ".format(개인현물_순매수)
                    self.label_53.setText(txt)

                    txt = " 개인선물: {0} ".format(개인선물_순매수)
                    self.label_54.setText(txt)

                    if 프로그램_순매수 > 0 and 현물_총순매수 > 0:

                        if 외인선물_순매수 < 0 and 외인현물_순매수 < 0:
                            txt = ' - '
                            self.label_55.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                            self.label_55.setText(txt)

                        if (외인선물_순매수 < 0 and 외인현물_순매수 > 0) or (외인선물_순매수 > 0 and 외인현물_순매수 < 0):
                            txt = ' 외인수급 Cross '
                            self.label_55.setStyleSheet('background-color: black; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                            self.label_55.setText(txt)

                        if 외인선물_순매수 > 0 and 외인현물_순매수 > 0:
                            txt = ' 수급 Call! '
                            self.label_55.setStyleSheet('background-color: magenta; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                            self.label_55.setText(txt)

                    elif 프로그램_순매수 < 0 and 현물_총순매수 < 0:

                        if 외인선물_순매수 > 0 and 외인현물_순매수 > 0:
                            txt = ' - '
                            self.label_55.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                            self.label_55.setText(txt)

                        if (외인선물_순매수 > 0 and 외인현물_순매수 < 0) or (외인선물_순매수 < 0 and 외인현물_순매수 > 0):
                            txt = ' 외인수급 Cross '
                            self.label_55.setStyleSheet('background-color: black; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                            self.label_55.setText(txt)          

                        if 외인선물_순매수 < 0 and 외인현물_순매수 < 0:
                            txt = ' 수급 Put! '
                            self.label_55.setStyleSheet('background-color: cyan; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                            self.label_55.setText(txt)
                    else:
                        txt = ' 수급종합 Cross '
                        self.label_55.setStyleSheet('background-color: black; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                        self.label_55.setText(txt)

                    if not np.isnan(프로그램_순매수):
                        txt = " Prog/F.S: {0:.0f}/{1:.0f} ".format(프로그램_순매수, 외인현물_순매수)

                        if 프로그램_순매수 <= 0:
                            self.label_56.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                        else:
                            self.label_56.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                        self.label_56.setText(txt)
                    else:
                        pass

                    txt = " {0:.0f} ".format(fut_cm_volume_power)

                    if fut_cm_volume_power > 0:
                        self.label_57.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_57.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_57.setText(txt)
                    
                    if not np.isnan(현물_총순매수):
                        txt = " S.S/F.F: {0:.0f}/{1:.0f} ".format(현물_총순매수, 외인선물_순매수)

                        if 현물_총순매수 <= 0:
                            self.label_58.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                        else:
                            self.label_58.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                        self.label_58.setText(txt)
                    else:
                        pass

                    self.plot5_fut_volume_curve.setData(df_futures_cm_graph['Volume'].astype(float))
                    self.plot5_program_curve.setData(df_demand_supply_graph['Program'].astype(float))

                    df = df_demand_supply_graph['kospi_total'].apply(lambda x: np.nan if x == 0 else x)
                    df.at[0] = 0

                    self.plot5_kospi_total_curve.setData(df.astype(float))

                    self.plot5_kospi_foreigner_curve.setData(df_demand_supply_graph['kospi_foreigner'].astype(float))
                    self.plot5_futures_foreigner_curve.setData(df_demand_supply_graph['futures_foreigner'].astype(float))
                else:
                    pass

            elif comboindex5 == 11:
                
                pass
                '''
                self.plot5_time_line.setValue(plot_time_index)

                if DayTime:
                    txt = " 기관현물 : {0} ".format(기관현물_순매수)
                    self.label_51.setText(txt)

                    txt = " 기관선물 : {0} ".format(기관선물_순매수)
                    self.label_52.setText(txt)

                    txt = " 개인현물 : {0} ".format(개인현물_순매수)
                    self.label_53.setText(txt)

                    txt = " 개인선물 : {0} ".format(개인선물_순매수)
                    self.label_54.setText(txt)

                    if 프로그램_순매수 > 0 and 현물_총순매수 > 0:

                        if 외인선물_순매수 < 0 and 외인현물_순매수 < 0:
                            txt = ' - '
                            self.label_55.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                            self.label_55.setText(txt)

                        if (외인선물_순매수 < 0 and 외인현물_순매수 > 0) or (외인선물_순매수 > 0 and 외인현물_순매수 < 0):
                            txt = ' 외인수급 Cross '
                            self.label_55.setStyleSheet('background-color: black; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                            self.label_55.setText(txt)

                        if 외인선물_순매수 > 0 and 외인현물_순매수 > 0:
                            txt = ' 수급 Call! '
                            self.label_55.setStyleSheet('background-color: magenta; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                            self.label_55.setText(txt)

                    elif 프로그램_순매수 < 0 and 현물_총순매수 < 0:

                        if 외인선물_순매수 > 0 and 외인현물_순매수 > 0:
                            txt = ' - '
                            self.label_55.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                            self.label_55.setText(txt)

                        if (외인선물_순매수 > 0 and 외인현물_순매수 < 0) or (외인선물_순매수 < 0 and 외인현물_순매수 > 0):
                            txt = ' 외인수급 Cross '
                            self.label_55.setStyleSheet('background-color: black; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                            self.label_55.setText(txt)          

                        if 외인선물_순매수 < 0 and 외인현물_순매수 < 0:
                            txt = ' 수급 Put! '
                            self.label_55.setStyleSheet('background-color: cyan; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                            self.label_55.setText(txt)
                    else:
                        txt = ' 수급종합 Cross '
                        self.label_55.setStyleSheet('background-color: black; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                        self.label_55.setText(txt)

                    if not np.isnan(외인현물_순매수):
                        txt = " 외인현물 : {0:.0f} ".format(외인현물_순매수)

                        if 외인현물_순매수 <= 0:
                            self.label_56.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                        else:
                            self.label_56.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                        self.label_56.setText(txt)
                    else:
                        pass

                    txt = " {0:.0f} ".format(fut_cm_volume_power)

                    if fut_cm_volume_power > 0:
                        self.label_57.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_57.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_57.setText(txt)
                    
                    if not np.isnan(외인선물_순매수):
                        txt = " 외인선물 : {0:.0f} ".format(외인선물_순매수)

                        if 외인선물_순매수 <= 0:
                            self.label_58.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                        else:
                            self.label_58.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                        self.label_58.setText(txt)
                    else:
                        pass

                    self.plot5_fut_volume_curve.setData(df_futures_cm_graph['Volume'].astype(float))
                    self.plot5_kospi_foreigner_curve.setData(df_demand_supply_graph['kospi_foreigner'].astype(float))
                    self.plot5_futures_foreigner_curve.setData(df_demand_supply_graph['futures_foreigner'].astype(float))                    
                else:
                    pass
                '''

            elif comboindex5 == 13:
                
                self.plot5_time_line.setValue(plot_time_index)
                
                txt = ' {0} '.format(format(SP500_저가, ','))
                self.label_56.setText(txt)

                tmp = self.label_57.text().split()[0]
                과거가 =  tmp.replace(',', '')                

                if SP500_현재가 > float(과거가):

                    txt = " {0} ▲ ({1}, {2:0.1f}%, {3}) ".format(format(SP500_현재가, ','), SP500_종가대비, SP500_등락율, SP500_진폭_틱)

                    if SP500_종가대비 > 0:
                        self.label_57.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif SP500_종가대비 < 0:
                        self.label_57.setStyleSheet('background-color: pink; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_57.setStyleSheet('background-color: pink; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_57.setText(txt)

                elif SP500_현재가 < float(과거가):

                    txt = " {0} ▼ ({1}, {2:0.1f}%, {3}) ".format(format(SP500_현재가, ','), SP500_종가대비, SP500_등락율, SP500_진폭_틱)

                    if SP500_종가대비 > 0:
                        self.label_57.setStyleSheet('background-color: skyblue; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif SP500_종가대비 < 0:
                        self.label_57.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_57.setStyleSheet('background-color: skyblue; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_57.setText(txt)
                else:
                    pass

                txt = ' {0} '.format(format(SP500_고가, ','))
                self.label_58.setText(txt)

                self.plot5_ovc_jl_line.setValue(SP500_전저)
                self.plot5_ovc_jh_line.setValue(SP500_전고)
                self.plot5_ovc_close_line.setValue(SP500_전일종가)
                self.plot5_ovc_open_line.setValue(SP500_시가)
                self.plot5_ovc_pivot_line.setValue(SP500_피봇)
                self.plot5_ovc_low_line.setValue(SP500_저가)
                self.plot5_ovc_high_line.setValue(SP500_고가)

                self.plot5_sp500_curve.setData(df_sp500_graph['Price'].astype(float))

                if flag_checkBox_plot5_bband:

                    self.parent.Calc_Bollinger('SP500')

                    self.plot5_bollinger_1st_upper_curve.setData(df_sp500_ta_graph['BBUpper_1st'].astype(float))
                    self.plot5_bollinger_1st_middle_curve.setData(df_sp500_ta_graph['BBMiddle_1st'].astype(float))
                    self.plot5_bollinger_1st_lower_curve.setData(df_sp500_ta_graph['BBLower_1st'].astype(float))
                    self.plot5_bollinger_2nd_upper_curve.setData(df_sp500_ta_graph['BBUpper_2nd'].astype(float))
                    self.plot5_bollinger_2nd_middle_curve.setData(df_sp500_ta_graph['BBMiddle_2nd'].astype(float))
                    self.plot5_bollinger_2nd_lower_curve.setData(df_sp500_ta_graph['BBLower_2nd'].astype(float))

                    self.plot5_fibonacci_line1.setValue(sp500_fibonacci_levels[1])
                    self.plot5_fibonacci_line2.setValue(sp500_fibonacci_levels[2])
                    self.plot5_fibonacci_line3.setValue(sp500_fibonacci_levels[3])
                    self.plot5_fibonacci_line4.setValue(sp500_fibonacci_levels[4])
                    self.plot5_fibonacci_line5.setValue(sp500_fibonacci_levels[5])

                    if df_sp500_ta_graph.at[plot_time_index, 'BBMiddle_2nd'] >= df_sp500_ta_graph.at[plot_time_index, 'Price']:
                        self.label_p5_2.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p5_2.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " BB U: {0:.2f}\n BB M: {1:.2f}\n BB L: {2:.2f} ".format\
                        (df_sp500_ta_graph.at[plot_time_index, 'BBUpper_2nd'], df_sp500_ta_graph.at[plot_time_index, 'BBMiddle_2nd'], df_sp500_ta_graph.at[plot_time_index, 'BBLower_2nd'])
                    self.label_p5_2.setText(txt)
                else:
                    self.plot5_fibonacci_line1.setValue(SP500_전일종가)
                    self.plot5_fibonacci_line2.setValue(SP500_전일종가)
                    self.plot5_fibonacci_line3.setValue(SP500_전일종가)
                    self.plot5_fibonacci_line4.setValue(SP500_전일종가)
                    self.plot5_fibonacci_line5.setValue(SP500_전일종가)

                    self.label_p5_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p5_2.setText(" BB Upper\n BB Middle\n BB Lower ")

                if flag_checkBox_plot5_psar:

                    self.parent.Calc_PSAR_MAMA('SP500')

                    self.plot5_psar_curve.setData(df_sp500_ta_graph['PSAR'][0:plot_time_index+1].astype(float))

                    #self.plot5_sslup_curve.setData(df_sp500_ta_graph['SSLUp'][0:plot_time_index+1].astype(float))
                    #self.plot5_ssldown_curve.setData(df_sp500_ta_graph['SSLDown'][0:plot_time_index+1].astype(float))

                    self.plot5_mama_curve.setData(df_sp500_ta_graph['MAMA'].astype(float))
                    df = df_sp500_ta_graph['FAMA'].apply(lambda x: SP500_저가 if x < SP500_저가 else x)
                    self.plot5_fama_curve.setData(df.astype(float))

                    if df_sp500_ta_graph.at[plot_time_index, 'PSAR'] > df_sp500_ta_graph.at[plot_time_index, 'Price'] and df_sp500_ta_graph.at[plot_time_index, 'MAMA'] < df_sp500_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p5_3.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_sp500_ta_graph.at[plot_time_index, 'PSAR'] < df_sp500_ta_graph.at[plot_time_index, 'Price'] and df_sp500_ta_graph.at[plot_time_index, 'MAMA'] > df_sp500_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p5_3.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold') 
                    else:
                        self.label_p5_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " PSAR: {0:.2f}\n MAMA: {1:.2f}\n FAMA: {2:.2f} ".format(df_sp500_ta_graph.at[plot_time_index, 'PSAR'], df_sp500_ta_graph.at[plot_time_index, 'MAMA'], df_sp500_ta_graph.at[plot_time_index, 'FAMA'])
                    self.label_p5_3.setText(txt)
                else:
                    self.label_p5_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p5_3.setText(" PSAR\n MAMA ")
                
                if flag_checkBox_plot5_one_eye:

                    self.plot5_oe_conv_curve.setData(df_sp500_ta_graph['OE_CONV'].astype(float))
                    self.plot5_oe_base_curve.setData(df_sp500_ta_graph['OE_BASE'].astype(float))
                    self.plot5_span_a_curve.setData(df_sp500_ta_graph['SPAN_A'].astype(float))
                    self.plot5_span_b_curve.setData(df_sp500_ta_graph['SPAN_B'].astype(float))

                    if flag_one_eye_lagging_span:
                        self.plot5_lagging_span_curve.setData(df_sp500_ta_graph['LAGGING_SPAN'].astype(float))

                    if df_sp500_ta_graph.at[plot_time_index, 'OE_CONV'] < df_sp500_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_sp500_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] < df_sp500_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p5_4.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_sp500_ta_graph.at[plot_time_index, 'OE_CONV'] > df_sp500_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_sp500_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] > df_sp500_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p5_4.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p5_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " 기준선: {0:.2f}\n 전환선: {1:.2f}\n SPAN A: {2:.2f} \n SPAN B: {3:.2f} ".format\
                        (df_sp500_ta_graph.at[plot_time_index, 'OE_BASE'], df_sp500_ta_graph.at[plot_time_index, 'OE_CONV'], \
                            df_sp500_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'], df_sp500_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B'])
                    self.label_p5_4.setText(txt)
                    
                else:
                    self.label_p5_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p5_4.setText(" ONE EYE ")
            
            elif comboindex5 == 14:
                
                self.plot5_time_line.setValue(plot_time_index)
                
                txt = ' {0} '.format(format(DOW_저가, ','))
                self.label_56.setText(txt)

                tmp = self.label_57.text().split()[0]
                과거가 =  tmp.replace(',', '')               

                if DOW_현재가 > float(과거가):

                    txt = " {0} ▲ ({1}, {2:0.1f}%, {3}) ".format(format(DOW_현재가, ','), format(DOW_종가대비, ','), DOW_등락율, DOW_진폭_틱)

                    if DOW_종가대비 > 0:
                        self.label_57.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif DOW_종가대비 < 0:
                        self.label_57.setStyleSheet('background-color: pink; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_57.setStyleSheet('background-color: pink; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_57.setText(txt)

                elif DOW_현재가 < float(과거가):

                    txt = " {0} ▼ ({1}, {2:0.1f}%, {3}) ".format(format(DOW_현재가, ','), format(DOW_종가대비, ','), DOW_등락율, DOW_진폭_틱)

                    if DOW_종가대비 > 0:
                        self.label_57.setStyleSheet('background-color: skyblue; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif DOW_종가대비 < 0:
                        self.label_57.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_57.setStyleSheet('background-color: skyblue; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_57.setText(txt)
                else:
                    pass

                txt = ' {0} '.format(format(DOW_고가, ','))
                self.label_58.setText(txt)

                self.plot5_ovc_jl_line.setValue(DOW_전저)
                self.plot5_ovc_jh_line.setValue(DOW_전고)
                self.plot5_ovc_close_line.setValue(DOW_전일종가)
                self.plot5_ovc_open_line.setValue(DOW_시가)
                self.plot5_ovc_pivot_line.setValue(DOW_피봇)
                self.plot5_ovc_low_line.setValue(DOW_저가)
                self.plot5_ovc_high_line.setValue(DOW_고가)                 

                self.plot5_dow_curve.setData(df_dow_graph['Price'].astype(float))

                if flag_checkBox_plot5_bband:

                    self.parent.Calc_Bollinger('DOW')
            
                    self.plot5_bollinger_1st_upper_curve.setData(df_dow_ta_graph['BBUpper_1st'].astype(float))
                    self.plot5_bollinger_1st_middle_curve.setData(df_dow_ta_graph['BBMiddle_1st'].astype(float))
                    self.plot5_bollinger_1st_lower_curve.setData(df_dow_ta_graph['BBLower_1st'].astype(float))
                    self.plot5_bollinger_2nd_upper_curve.setData(df_dow_ta_graph['BBUpper_2nd'].astype(float))
                    self.plot5_bollinger_2nd_middle_curve.setData(df_dow_ta_graph['BBMiddle_2nd'].astype(float))
                    self.plot5_bollinger_2nd_lower_curve.setData(df_dow_ta_graph['BBLower_2nd'].astype(float))

                    self.plot5_fibonacci_line1.setValue(dow_fibonacci_levels[1])
                    self.plot5_fibonacci_line2.setValue(dow_fibonacci_levels[2])
                    self.plot5_fibonacci_line3.setValue(dow_fibonacci_levels[3])
                    self.plot5_fibonacci_line4.setValue(dow_fibonacci_levels[4])
                    self.plot5_fibonacci_line5.setValue(dow_fibonacci_levels[5])

                    if df_dow_ta_graph.at[plot_time_index, 'BBMiddle_2nd'] >= df_dow_ta_graph.at[plot_time_index, 'Price']:
                        self.label_p5_2.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p5_2.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " BB U: {0:.0f}\n BB M: {1:.0f}\n BB L: {2:.0f} ".format\
                        (df_dow_ta_graph.at[plot_time_index, 'BBUpper_2nd'], df_dow_ta_graph.at[plot_time_index, 'BBMiddle_2nd'], df_dow_ta_graph.at[plot_time_index, 'BBLower_2nd'])
                    self.label_p5_2.setText(txt)
                else:
                    self.plot5_fibonacci_line1.setValue(DOW_전일종가)
                    self.plot5_fibonacci_line2.setValue(DOW_전일종가)
                    self.plot5_fibonacci_line3.setValue(DOW_전일종가)
                    self.plot5_fibonacci_line4.setValue(DOW_전일종가)
                    self.plot5_fibonacci_line5.setValue(DOW_전일종가)

                    self.label_p5_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p5_2.setText(" BB Upper\n BB Middle\n BB Lower ")

                if flag_checkBox_plot5_psar:

                    self.parent.Calc_PSAR_MAMA('DOW')

                    self.plot5_psar_curve.setData(df_dow_ta_graph['PSAR'][0:plot_time_index+1].astype(float))

                    #self.plot5_sslup_curve.setData(df_dow_ta_graph['SSLUp'][0:plot_time_index+1].astype(float))
                    #self.plot5_ssldown_curve.setData(df_dow_ta_graph['SSLDown'][0:plot_time_index+1].astype(float))

                    self.plot5_mama_curve.setData(df_dow_ta_graph['MAMA'].astype(float))
                    df = df_dow_ta_graph['FAMA'].apply(lambda x: DOW_저가 if x < DOW_저가 else x)
                    self.plot5_fama_curve.setData(df.astype(float))                        

                    if df_dow_ta_graph.at[plot_time_index, 'PSAR'] > df_dow_ta_graph.at[plot_time_index, 'Price'] and df_dow_ta_graph.at[plot_time_index, 'MAMA'] < df_dow_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p5_3.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_dow_ta_graph.at[plot_time_index, 'PSAR'] < df_dow_ta_graph.at[plot_time_index, 'Price'] and df_dow_ta_graph.at[plot_time_index, 'MAMA'] > df_dow_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p5_3.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold') 
                    else:
                        self.label_p5_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " PSAR: {0:.0f}\n MAMA: {1:.0f}\n FAMA: {2:.0f} ".format(df_dow_ta_graph.at[plot_time_index, 'PSAR'], df_dow_ta_graph.at[plot_time_index, 'MAMA'], df_dow_ta_graph.at[plot_time_index, 'FAMA'])
                    self.label_p5_3.setText(txt)
                else:
                    self.label_p5_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p5_3.setText(" PSAR\n MAMA ")
                
                if flag_checkBox_plot5_one_eye:

                    self.plot5_oe_conv_curve.setData(df_dow_ta_graph['OE_CONV'].astype(float))
                    self.plot5_oe_base_curve.setData(df_dow_ta_graph['OE_BASE'].astype(float))
                    self.plot5_span_a_curve.setData(df_dow_ta_graph['SPAN_A'].astype(float))
                    self.plot5_span_b_curve.setData(df_dow_ta_graph['SPAN_B'].astype(float))

                    if flag_one_eye_lagging_span:
                        self.plot5_lagging_span_curve.setData(df_dow_ta_graph['LAGGING_SPAN'].astype(float))

                    if df_dow_ta_graph.at[plot_time_index, 'OE_CONV'] < df_dow_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_dow_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] < df_dow_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p5_4.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_dow_ta_graph.at[plot_time_index, 'OE_CONV'] > df_dow_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_dow_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] > df_dow_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p5_4.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p5_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " 기준선: {0:.0f}\n 전환선: {1:.0f}\n SPAN A: {2:.0f} \n SPAN B: {3:.0f} ".format\
                        (df_dow_ta_graph.at[plot_time_index, 'OE_BASE'], df_dow_ta_graph.at[plot_time_index, 'OE_CONV'], \
                            df_dow_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'], df_dow_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B'])
                    self.label_p5_4.setText(txt)
                    
                else:
                    self.label_p5_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p5_4.setText(" ONE EYE ") 

            elif comboindex5 == 15:
                
                self.plot5_time_line.setValue(plot_time_index)
                
                txt = ' {0} '.format(format(NASDAQ_저가, ','))
                self.label_56.setText(txt)

                tmp = self.label_57.text().split()[0]
                과거가 =  tmp.replace(',', '')                

                if NASDAQ_현재가 > float(과거가):

                    txt = " {0} ▲ ({1}, {2:0.1f}%, {3}) ".format(format(NASDAQ_현재가, ','), format(NASDAQ_종가대비, ','), NASDAQ_등락율, NASDAQ_진폭_틱)

                    if NASDAQ_종가대비 > 0:
                        self.label_57.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif NASDAQ_종가대비 < 0:
                        self.label_57.setStyleSheet('background-color: pink; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_57.setStyleSheet('background-color: pink; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_57.setText(txt)

                elif NASDAQ_현재가 < float(과거가):

                    txt = " {0} ▼ ({1}, {2:0.1f}%, {3}) ".format(format(NASDAQ_현재가, ','), format(NASDAQ_종가대비, ','), NASDAQ_등락율, NASDAQ_진폭_틱)

                    if NASDAQ_종가대비 > 0:
                        self.label_57.setStyleSheet('background-color: skyblue; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif NASDAQ_종가대비 < 0:
                        self.label_57.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_57.setStyleSheet('background-color: skyblue; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_57.setText(txt)
                else:
                    pass

                txt = ' {0} '.format(format(NASDAQ_고가, ','))
                self.label_58.setText(txt)

                self.plot5_ovc_jl_line.setValue(NASDAQ_전저)
                self.plot5_ovc_jh_line.setValue(NASDAQ_전고)
                self.plot5_ovc_close_line.setValue(NASDAQ_전일종가)
                self.plot5_ovc_open_line.setValue(NASDAQ_시가)
                self.plot5_ovc_pivot_line.setValue(NASDAQ_피봇)
                self.plot5_ovc_low_line.setValue(NASDAQ_저가)
                self.plot5_ovc_high_line.setValue(NASDAQ_고가)

                self.plot5_nasdaq_curve.setData(df_nasdaq_graph['Price'].astype(float))

                if flag_checkBox_plot5_bband:

                    self.parent.Calc_Bollinger('NASDAQ')
            
                    self.plot5_bollinger_1st_upper_curve.setData(df_nasdaq_ta_graph['BBUpper_1st'].astype(float))
                    self.plot5_bollinger_1st_middle_curve.setData(df_nasdaq_ta_graph['BBMiddle_1st'].astype(float))
                    self.plot5_bollinger_1st_lower_curve.setData(df_nasdaq_ta_graph['BBLower_1st'].astype(float))
                    self.plot5_bollinger_2nd_upper_curve.setData(df_nasdaq_ta_graph['BBUpper_2nd'].astype(float))
                    self.plot5_bollinger_2nd_middle_curve.setData(df_nasdaq_ta_graph['BBMiddle_2nd'].astype(float))
                    self.plot5_bollinger_2nd_lower_curve.setData(df_nasdaq_ta_graph['BBLower_2nd'].astype(float))

                    self.plot5_fibonacci_line1.setValue(nasdaq_fibonacci_levels[1])
                    self.plot5_fibonacci_line2.setValue(nasdaq_fibonacci_levels[2])
                    self.plot5_fibonacci_line3.setValue(nasdaq_fibonacci_levels[3])
                    self.plot5_fibonacci_line4.setValue(nasdaq_fibonacci_levels[4])
                    self.plot5_fibonacci_line5.setValue(nasdaq_fibonacci_levels[5])

                    if df_nasdaq_ta_graph.at[plot_time_index, 'BBMiddle_2nd'] >= df_nasdaq_ta_graph.at[plot_time_index, 'Price']:
                        self.label_p5_2.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p5_2.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " BB U: {0:.2f}\n BB M: {1:.2f}\n BB L: {2:.2f} ".format\
                        (df_nasdaq_ta_graph.at[plot_time_index, 'BBUpper_2nd'], df_nasdaq_ta_graph.at[plot_time_index, 'BBMiddle_2nd'], df_nasdaq_ta_graph.at[plot_time_index, 'BBLower_2nd'])
                    self.label_p5_2.setText(txt)
                else:
                    self.plot5_fibonacci_line1.setValue(NASDAQ_전일종가)
                    self.plot5_fibonacci_line2.setValue(NASDAQ_전일종가)
                    self.plot5_fibonacci_line3.setValue(NASDAQ_전일종가)
                    self.plot5_fibonacci_line4.setValue(NASDAQ_전일종가)
                    self.plot5_fibonacci_line5.setValue(NASDAQ_전일종가)

                    self.label_p5_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p5_2.setText(" BB Upper\n BB Middle\n BB Lower ")

                if flag_checkBox_plot5_psar:

                    self.parent.Calc_PSAR_MAMA('NASDAQ')

                    self.plot5_psar_curve.setData(df_nasdaq_ta_graph['PSAR'][0:plot_time_index+1].astype(float))

                    #self.plot5_sslup_curve.setData(df_nasdaq_ta_graph['SSLUp'][0:plot_time_index+1].astype(float))
                    #self.plot5_ssldown_curve.setData(df_nasdaq_ta_graph['SSLDown'][0:plot_time_index+1].astype(float))

                    self.plot5_mama_curve.setData(df_nasdaq_ta_graph['MAMA'].astype(float))
                    df = df_nasdaq_ta_graph['FAMA'].apply(lambda x: NASDAQ_저가 if x < NASDAQ_저가 else x)
                    self.plot5_fama_curve.setData(df.astype(float))                        

                    if df_nasdaq_ta_graph.at[plot_time_index, 'PSAR'] > df_nasdaq_ta_graph.at[plot_time_index, 'Price'] and df_nasdaq_ta_graph.at[plot_time_index, 'MAMA'] < df_nasdaq_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p5_3.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_nasdaq_ta_graph.at[plot_time_index, 'PSAR'] < df_nasdaq_ta_graph.at[plot_time_index, 'Price'] and df_nasdaq_ta_graph.at[plot_time_index, 'MAMA'] > df_nasdaq_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p5_3.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold') 
                    else:
                        self.label_p5_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " PSAR: {0:.2f}\n MAMA: {1:.2f}\n FAMA: {2:.2f} ".format(df_nasdaq_ta_graph.at[plot_time_index, 'PSAR'], df_nasdaq_ta_graph.at[plot_time_index, 'MAMA'], df_nasdaq_ta_graph.at[plot_time_index, 'FAMA'])
                    self.label_p5_3.setText(txt)
                else:
                    self.label_p5_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p5_3.setText(" PSAR\n MAMA ")
                
                if flag_checkBox_plot5_one_eye:

                    self.plot5_oe_conv_curve.setData(df_nasdaq_ta_graph['OE_CONV'].astype(float))
                    self.plot5_oe_base_curve.setData(df_nasdaq_ta_graph['OE_BASE'].astype(float))
                    self.plot5_span_a_curve.setData(df_nasdaq_ta_graph['SPAN_A'].astype(float))
                    self.plot5_span_b_curve.setData(df_nasdaq_ta_graph['SPAN_B'].astype(float))

                    if flag_one_eye_lagging_span:
                        self.plot5_lagging_span_curve.setData(df_nasdaq_ta_graph['LAGGING_SPAN'].astype(float))

                    if df_nasdaq_ta_graph.at[plot_time_index, 'OE_CONV'] < df_nasdaq_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_nasdaq_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] < df_nasdaq_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p5_4.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_nasdaq_ta_graph.at[plot_time_index, 'OE_CONV'] > df_nasdaq_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_nasdaq_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] > df_nasdaq_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p5_4.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p5_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')


                    txt = " 기준선: {0:.2f}\n 전환선: {1:.2f}\n SPAN A: {2:.2f} \n SPAN B: {3:.2f} ".format\
                        (df_nasdaq_ta_graph.at[plot_time_index, 'OE_BASE'], df_nasdaq_ta_graph.at[plot_time_index, 'OE_CONV'], \
                            df_nasdaq_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'], df_nasdaq_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B'])
                    self.label_p5_4.setText(txt)
                    
                else:
                    self.label_p5_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p5_4.setText(" ONE EYE ")

            elif comboindex5 == 16:
                
                self.plot5_time_line.setValue(plot_time_index)

                txt = ' {0} '.format(format(HANGSENG_저가, ','))
                self.label_56.setText(txt)

                tmp = self.label_57.text().split()[0]
                과거가 =  tmp.replace(',', '')     

                if HANGSENG_현재가 > float(과거가):

                    txt = " {0} ▲ ({1}, {2:0.1f}%, {3}) ".format(format(HANGSENG_현재가, ','), HANGSENG_종가대비, HANGSENG_등락율, HANGSENG_진폭_틱)

                    if HANGSENG_종가대비 > 0:
                        self.label_57.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif HANGSENG_종가대비 < 0:
                        self.label_57.setStyleSheet('background-color: pink; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_57.setStyleSheet('background-color: pink; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_57.setText(txt)

                elif HANGSENG_현재가 < float(과거가):

                    txt = " {0} ▼ ({1}, {2:0.1f}%, {3}) ".format(format(HANGSENG_현재가, ','), HANGSENG_종가대비, HANGSENG_등락율, HANGSENG_진폭_틱)

                    if HANGSENG_종가대비 > 0:
                        self.label_57.setStyleSheet('background-color: skyblue; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif HANGSENG_종가대비 < 0:
                        self.label_57.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_57.setStyleSheet('background-color: skyblue; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_57.setText(txt)
                else:
                    pass

                txt = ' {0} '.format(format(HANGSENG_고가, ','))
                self.label_58.setText(txt)

                self.plot5_ovc_jl_line.setValue(HANGSENG_전저)
                self.plot5_ovc_jh_line.setValue(HANGSENG_전고)
                self.plot5_ovc_close_line.setValue(HANGSENG_전일종가)
                self.plot5_ovc_open_line.setValue(HANGSENG_시가)
                self.plot5_ovc_pivot_line.setValue(HANGSENG_피봇)
                self.plot5_ovc_low_line.setValue(HANGSENG_저가)
                self.plot5_ovc_high_line.setValue(HANGSENG_고가)                 

                self.plot5_hsi_curve.setData(df_hsi_graph['Price'].astype(float))              

                if flag_checkBox_plot5_bband:

                    self.parent.Calc_Bollinger('HSI')
            
                    self.plot5_bollinger_1st_upper_curve.setData(df_hsi_ta_graph['BBUpper_1st'].astype(float))
                    self.plot5_bollinger_1st_middle_curve.setData(df_hsi_ta_graph['BBMiddle_1st'].astype(float))
                    self.plot5_bollinger_1st_lower_curve.setData(df_hsi_ta_graph['BBLower_1st'].astype(float))
                    self.plot5_bollinger_2nd_upper_curve.setData(df_hsi_ta_graph['BBUpper_2nd'].astype(float))
                    self.plot5_bollinger_2nd_middle_curve.setData(df_hsi_ta_graph['BBMiddle_2nd'].astype(float))
                    self.plot5_bollinger_2nd_lower_curve.setData(df_hsi_ta_graph['BBLower_2nd'].astype(float))

                    self.plot5_fibonacci_line1.setValue(hsi_fibonacci_levels[1])
                    self.plot5_fibonacci_line2.setValue(hsi_fibonacci_levels[2])
                    self.plot5_fibonacci_line3.setValue(hsi_fibonacci_levels[3])
                    self.plot5_fibonacci_line4.setValue(hsi_fibonacci_levels[4])
                    self.plot5_fibonacci_line5.setValue(hsi_fibonacci_levels[5])

                    if df_hsi_ta_graph.at[plot_time_index, 'BBMiddle_2nd'] >= df_hsi_ta_graph.at[plot_time_index, 'Price']:
                        self.label_p5_2.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p5_2.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " BB U: {0:.0f}\n BB M: {1:.0f}\n BB L: {2:.0f} ".format\
                        (df_hsi_ta_graph.at[plot_time_index, 'BBUpper_2nd'], df_hsi_ta_graph.at[plot_time_index, 'BBMiddle_2nd'], df_hsi_ta_graph.at[plot_time_index, 'BBLower_2nd'])
                    self.label_p5_2.setText(txt)
                else:
                    self.plot5_fibonacci_line1.setValue(HANGSENG_전일종가)
                    self.plot5_fibonacci_line2.setValue(HANGSENG_전일종가)
                    self.plot5_fibonacci_line3.setValue(HANGSENG_전일종가)
                    self.plot5_fibonacci_line4.setValue(HANGSENG_전일종가)
                    self.plot5_fibonacci_line5.setValue(HANGSENG_전일종가)

                    self.label_p5_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p5_2.setText(" BB Upper\n BB Middle\n BB Lower ")

                if flag_checkBox_plot5_psar:

                    self.parent.Calc_PSAR_MAMA('HSI')

                    self.plot5_psar_curve.setData(df_hsi_ta_graph['PSAR'][0:plot_time_index+1].astype(float))

                    #self.plot5_sslup_curve.setData(df_hsi_ta_graph['SSLUp'][0:plot_time_index+1].astype(float))
                    #self.plot5_ssldown_curve.setData(df_hsi_ta_graph['SSLDown'][0:plot_time_index+1].astype(float))

                    self.plot5_mama_curve.setData(df_hsi_ta_graph['MAMA'].astype(float))
                    df = df_hsi_ta_graph['FAMA'].apply(lambda x: HANGSENG_저가 if x < HANGSENG_저가 else x)
                    self.plot5_fama_curve.setData(df.astype(float))                        

                    if df_hsi_ta_graph.at[plot_time_index, 'PSAR'] > df_hsi_ta_graph.at[plot_time_index, 'Price'] and df_hsi_ta_graph.at[plot_time_index, 'MAMA'] < df_hsi_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p5_3.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_hsi_ta_graph.at[plot_time_index, 'PSAR'] < df_hsi_ta_graph.at[plot_time_index, 'Price'] and df_hsi_ta_graph.at[plot_time_index, 'MAMA'] > df_hsi_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p5_3.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold') 
                    else:
                        self.label_p5_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " PSAR: {0:.0f}\n MAMA: {1:.0f}\n FAMA: {2:.0f} ".format(df_hsi_ta_graph.at[plot_time_index, 'PSAR'], df_hsi_ta_graph.at[plot_time_index, 'MAMA'], df_hsi_ta_graph.at[plot_time_index, 'FAMA'])
                    self.label_p5_3.setText(txt)
                else:
                    self.label_p5_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p5_3.setText(" PSAR\n MAMA ")
                
                if flag_checkBox_plot5_one_eye:

                    self.plot5_oe_conv_curve.setData(df_hsi_ta_graph['OE_CONV'].astype(float))
                    self.plot5_oe_base_curve.setData(df_hsi_ta_graph['OE_BASE'].astype(float))
                    self.plot5_span_a_curve.setData(df_hsi_ta_graph['SPAN_A'].astype(float))
                    self.plot5_span_b_curve.setData(df_hsi_ta_graph['SPAN_B'].astype(float))

                    if flag_one_eye_lagging_span:
                        self.plot5_lagging_span_curve.setData(df_hsi_ta_graph['LAGGING_SPAN'].astype(float))

                    if df_hsi_ta_graph.at[plot_time_index, 'OE_CONV'] < df_hsi_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_hsi_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] < df_hsi_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p5_4.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_hsi_ta_graph.at[plot_time_index, 'OE_CONV'] > df_hsi_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_hsi_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] > df_hsi_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p5_4.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p5_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " 기준선: {0:.0f}\n 전환선: {1:.0f}\n SPAN A: {2:.0f} \n SPAN B: {3:.0f} ".format\
                        (df_hsi_ta_graph.at[plot_time_index, 'OE_BASE'], df_hsi_ta_graph.at[plot_time_index, 'OE_CONV'], \
                            df_hsi_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'], df_hsi_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B'])
                    self.label_p5_4.setText(txt)
                    
                else:
                    self.label_p5_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p5_4.setText(" ONE EYE ")

            elif comboindex5 == 17:
                
                self.plot5_time_line.setValue(plot_time_index)
                
                txt = ' {0} '.format(format(WTI_저가, ','))
                self.label_56.setText(txt)

                과거가 =  self.label_57.text().split()[0]             

                if WTI_현재가 > float(과거가):

                    txt = " {0} ▲ ({1}, {2:0.1f}%, {3}) ".format(WTI_현재가, WTI_종가대비, WTI_등락율, WTI_진폭_틱)

                    if WTI_종가대비 > 0:
                        self.label_57.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif WTI_종가대비 < 0:
                        self.label_57.setStyleSheet('background-color: pink; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_57.setStyleSheet('background-color: pink; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_57.setText(txt)

                elif WTI_현재가 < float(과거가):

                    txt = " {0} ▼ ({1}, {2:0.1f}%, {3}) ".format(WTI_현재가, WTI_종가대비, WTI_등락율, WTI_진폭_틱)

                    if WTI_종가대비 > 0:
                        self.label_57.setStyleSheet('background-color: skyblue; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif WTI_종가대비 < 0:
                        self.label_57.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_57.setStyleSheet('background-color: skyblue; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_57.setText(txt)
                else:
                    pass

                txt = ' {0} '.format(format(WTI_고가, ','))
                self.label_58.setText(txt) 

                self.plot5_ovc_jl_line.setValue(WTI_전저)
                self.plot5_ovc_jh_line.setValue(WTI_전고)
                self.plot5_ovc_close_line.setValue(WTI_전일종가)
                self.plot5_ovc_open_line.setValue(WTI_시가)
                self.plot5_ovc_pivot_line.setValue(WTI_피봇)
                self.plot5_ovc_low_line.setValue(WTI_저가)
                self.plot5_ovc_high_line.setValue(WTI_고가)

                self.plot5_wti_curve.setData(df_wti_graph['Price'].astype(float))

                if flag_checkBox_plot5_bband:

                    self.parent.Calc_Bollinger('WTI')
            
                    self.plot5_bollinger_1st_upper_curve.setData(df_wti_ta_graph['BBUpper_1st'].astype(float))
                    self.plot5_bollinger_1st_middle_curve.setData(df_wti_ta_graph['BBMiddle_1st'].astype(float))
                    self.plot5_bollinger_1st_lower_curve.setData(df_wti_ta_graph['BBLower_1st'].astype(float))
                    self.plot5_bollinger_2nd_upper_curve.setData(df_wti_ta_graph['BBUpper_2nd'].astype(float))
                    self.plot5_bollinger_2nd_middle_curve.setData(df_wti_ta_graph['BBMiddle_2nd'].astype(float))
                    self.plot5_bollinger_2nd_lower_curve.setData(df_wti_ta_graph['BBLower_2nd'].astype(float))

                    self.plot5_fibonacci_line1.setValue(wti_fibonacci_levels[1])
                    self.plot5_fibonacci_line2.setValue(wti_fibonacci_levels[2])
                    self.plot5_fibonacci_line3.setValue(wti_fibonacci_levels[3])
                    self.plot5_fibonacci_line4.setValue(wti_fibonacci_levels[4])
                    self.plot5_fibonacci_line5.setValue(wti_fibonacci_levels[5])

                    if df_wti_ta_graph.at[plot_time_index, 'BBMiddle_2nd'] >= df_wti_ta_graph.at[plot_time_index, 'Price']:
                        self.label_p5_2.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p5_2.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " BB U: {0:.2f}\n BB M: {1:.2f}\n BB L: {2:.2f} ".format\
                        (df_wti_ta_graph.at[plot_time_index, 'BBUpper_2nd'], df_wti_ta_graph.at[plot_time_index, 'BBMiddle_2nd'], df_wti_ta_graph.at[plot_time_index, 'BBLower_2nd'])
                    self.label_p5_2.setText(txt)
                else:
                    self.plot5_fibonacci_line1.setValue(WTI_전일종가)
                    self.plot5_fibonacci_line2.setValue(WTI_전일종가)
                    self.plot5_fibonacci_line3.setValue(WTI_전일종가)
                    self.plot5_fibonacci_line4.setValue(WTI_전일종가)
                    self.plot5_fibonacci_line5.setValue(WTI_전일종가)

                    self.label_p5_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p5_2.setText(" BB Upper\n BB Middle\n BB Lower ")

                if flag_checkBox_plot5_psar:

                    self.parent.Calc_PSAR_MAMA('WTI')

                    self.plot5_psar_curve.setData(df_wti_ta_graph['PSAR'][0:plot_time_index+1].astype(float))

                    #self.plot5_sslup_curve.setData(df_wti_ta_graph['SSLUp'][0:plot_time_index+1].astype(float))
                    #self.plot5_ssldown_curve.setData(df_wti_ta_graph['SSLDown'][0:plot_time_index+1].astype(float))

                    self.plot5_mama_curve.setData(df_wti_ta_graph['MAMA'].astype(float))
                    df = df_wti_ta_graph['FAMA'].apply(lambda x: WTI_저가 if x < WTI_저가 else x)
                    self.plot5_fama_curve.setData(df.astype(float))                        

                    if df_wti_ta_graph.at[plot_time_index, 'PSAR'] > df_wti_ta_graph.at[plot_time_index, 'Price'] and df_wti_ta_graph.at[plot_time_index, 'MAMA'] < df_wti_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p5_3.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_wti_ta_graph.at[plot_time_index, 'PSAR'] < df_wti_ta_graph.at[plot_time_index, 'Price'] and df_wti_ta_graph.at[plot_time_index, 'MAMA'] > df_wti_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p5_3.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold') 
                    else:
                        self.label_p5_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " PSAR: {0:.2f}\n MAMA: {1:.2f}\n FAMA: {2:.2f} ".format(df_wti_ta_graph.at[plot_time_index, 'PSAR'], df_wti_ta_graph.at[plot_time_index, 'MAMA'], df_wti_ta_graph.at[plot_time_index, 'FAMA'])
                    self.label_p5_3.setText(txt)
                else:
                    self.label_p5_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p5_3.setText(" PSAR\n MAMA ")
                
                if flag_checkBox_plot5_one_eye:

                    self.plot5_oe_conv_curve.setData(df_wti_ta_graph['OE_CONV'].astype(float))
                    self.plot5_oe_base_curve.setData(df_wti_ta_graph['OE_BASE'].astype(float))
                    self.plot5_span_a_curve.setData(df_wti_ta_graph['SPAN_A'].astype(float))
                    self.plot5_span_b_curve.setData(df_wti_ta_graph['SPAN_B'].astype(float))

                    if flag_one_eye_lagging_span:
                        self.plot5_lagging_span_curve.setData(df_wti_ta_graph['LAGGING_SPAN'].astype(float))

                    if df_wti_ta_graph.at[plot_time_index, 'OE_CONV'] < df_wti_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_wti_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] < df_wti_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p5_4.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_wti_ta_graph.at[plot_time_index, 'OE_CONV'] > df_wti_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_wti_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] > df_wti_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p5_4.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p5_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " 기준선: {0:.2f}\n 전환선: {1:.2f}\n SPAN A: {2:.2f} \n SPAN B: {3:.2f} ".format\
                        (df_wti_ta_graph.at[plot_time_index, 'OE_BASE'], df_wti_ta_graph.at[plot_time_index, 'OE_CONV'], \
                            df_wti_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'], df_wti_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B'])
                    self.label_p5_4.setText(txt)
                    
                else:
                    self.label_p5_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p5_4.setText(" ONE EYE ")
            
            elif comboindex5 == 18:
                
                self.plot5_time_line.setValue(plot_time_index)

                txt = ' {0} '.format(format(GOLD_저가, ','))
                self.label_56.setText(txt)

                tmp = self.label_57.text().split()[0]
                과거가 =  tmp.replace(',', '')     

                if GOLD_현재가 > float(과거가):

                    txt = " {0} ▲ ({1:.1f}, {2:.1f}%, {3}) ".format(format(GOLD_현재가, ','), GOLD_종가대비, GOLD_등락율, GOLD_진폭_틱)

                    if GOLD_종가대비 > 0:
                        self.label_57.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif GOLD_종가대비 < 0:
                        self.label_57.setStyleSheet('background-color: pink; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_57.setStyleSheet('background-color: pink; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_57.setText(txt)

                elif GOLD_현재가 < float(과거가):

                    txt = " {0} ▼ ({1:.1f}, {2:.1f}%, {3}) ".format(format(GOLD_현재가, ','), GOLD_종가대비, GOLD_등락율, GOLD_진폭_틱)

                    if GOLD_종가대비 > 0:
                        self.label_57.setStyleSheet('background-color: skyblue; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif GOLD_종가대비 < 0:
                        self.label_57.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_57.setStyleSheet('background-color: skyblue; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_57.setText(txt)
                else:
                    pass

                txt = ' {0} '.format(format(GOLD_고가, ','))
                self.label_58.setText(txt)

                self.plot5_ovc_jl_line.setValue(GOLD_전저)
                self.plot5_ovc_jh_line.setValue(GOLD_전고)
                self.plot5_ovc_close_line.setValue(GOLD_전일종가)
                self.plot5_ovc_open_line.setValue(GOLD_시가)
                self.plot5_ovc_pivot_line.setValue(GOLD_피봇)
                self.plot5_ovc_low_line.setValue(GOLD_저가)
                self.plot5_ovc_high_line.setValue(GOLD_고가)                 

                self.plot5_gold_curve.setData(df_gold_graph['Price'].astype(float))

                if flag_checkBox_plot5_bband:

                    self.parent.Calc_Bollinger('GOLD')
            
                    self.plot5_bollinger_1st_upper_curve.setData(df_gold_ta_graph['BBUpper_1st'].astype(float))
                    self.plot5_bollinger_1st_middle_curve.setData(df_gold_ta_graph['BBMiddle_1st'].astype(float))
                    self.plot5_bollinger_1st_lower_curve.setData(df_gold_ta_graph['BBLower_1st'].astype(float))
                    self.plot5_bollinger_2nd_upper_curve.setData(df_gold_ta_graph['BBUpper_2nd'].astype(float))
                    self.plot5_bollinger_2nd_middle_curve.setData(df_gold_ta_graph['BBMiddle_2nd'].astype(float))
                    self.plot5_bollinger_2nd_lower_curve.setData(df_gold_ta_graph['BBLower_2nd'].astype(float))

                    self.plot5_fibonacci_line1.setValue(gold_fibonacci_levels[1])
                    self.plot5_fibonacci_line2.setValue(gold_fibonacci_levels[2])
                    self.plot5_fibonacci_line3.setValue(gold_fibonacci_levels[3])
                    self.plot5_fibonacci_line4.setValue(gold_fibonacci_levels[4])
                    self.plot5_fibonacci_line5.setValue(gold_fibonacci_levels[5])

                    if df_gold_ta_graph.at[plot_time_index, 'BBMiddle_2nd'] >= df_gold_ta_graph.at[plot_time_index, 'Price']:
                        self.label_p5_2.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p5_2.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " BB U: {0:.1f}\n BB M: {1:.1f}\n BB L: {2:.1f} ".format\
                        (df_gold_ta_graph.at[plot_time_index, 'BBUpper_2nd'], df_gold_ta_graph.at[plot_time_index, 'BBMiddle_2nd'], df_gold_ta_graph.at[plot_time_index, 'BBLower_2nd'])
                    self.label_p5_2.setText(txt)
                else:
                    self.plot5_fibonacci_line1.setValue(GOLD_전일종가)
                    self.plot5_fibonacci_line2.setValue(GOLD_전일종가)
                    self.plot5_fibonacci_line3.setValue(GOLD_전일종가)
                    self.plot5_fibonacci_line4.setValue(GOLD_전일종가)
                    self.plot5_fibonacci_line5.setValue(GOLD_전일종가)

                    self.label_p5_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p5_2.setText(" BB Upper\n BB Middle\n BB Lower ")

                if flag_checkBox_plot5_psar:

                    self.parent.Calc_PSAR_MAMA('GOLD')

                    self.plot5_psar_curve.setData(df_gold_ta_graph['PSAR'][0:plot_time_index+1].astype(float))

                    #self.plot5_sslup_curve.setData(df_gold_ta_graph['SSLUp'][0:plot_time_index+1].astype(float))
                    #self.plot5_ssldown_curve.setData(df_gold_ta_graph['SSLDown'][0:plot_time_index+1].astype(float))

                    self.plot5_mama_curve.setData(df_gold_ta_graph['MAMA'].astype(float))
                    df = df_gold_ta_graph['FAMA'].apply(lambda x: GOLD_저가 if x < GOLD_저가 else x)
                    self.plot5_fama_curve.setData(df.astype(float))                        

                    if df_gold_ta_graph.at[plot_time_index, 'PSAR'] > df_gold_ta_graph.at[plot_time_index, 'Price'] and df_gold_ta_graph.at[plot_time_index, 'MAMA'] < df_gold_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p5_3.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_gold_ta_graph.at[plot_time_index, 'PSAR'] < df_gold_ta_graph.at[plot_time_index, 'Price'] and df_gold_ta_graph.at[plot_time_index, 'MAMA'] > df_gold_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p5_3.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold') 
                    else:
                        self.label_p5_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " PSAR: {0:.1f}\n MAMA: {1:.1f}\n FAMA: {2:.1f} ".format(df_gold_ta_graph.at[plot_time_index, 'PSAR'], df_gold_ta_graph.at[plot_time_index, 'MAMA'], df_gold_ta_graph.at[plot_time_index, 'FAMA'])
                    self.label_p5_3.setText(txt)
                else:
                    self.label_p5_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p5_3.setText(" PSAR\n MAMA ")
                
                if flag_checkBox_plot5_one_eye:

                    self.plot5_oe_conv_curve.setData(df_gold_ta_graph['OE_CONV'].astype(float))
                    self.plot5_oe_base_curve.setData(df_gold_ta_graph['OE_BASE'].astype(float))
                    self.plot5_span_a_curve.setData(df_gold_ta_graph['SPAN_A'].astype(float))
                    self.plot5_span_b_curve.setData(df_gold_ta_graph['SPAN_B'].astype(float))

                    if flag_one_eye_lagging_span:
                        self.plot5_lagging_span_curve.setData(df_gold_ta_graph['LAGGING_SPAN'].astype(float))

                    if df_gold_ta_graph.at[plot_time_index, 'OE_CONV'] < df_gold_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_gold_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] < df_gold_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p5_4.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_gold_ta_graph.at[plot_time_index, 'OE_CONV'] > df_gold_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_gold_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] > df_gold_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p5_4.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p5_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " 기준선: {0:.1f}\n 전환선: {1:.1f}\n SPAN A: {2:.1f} \n SPAN B: {3:.1f} ".format\
                        (df_gold_ta_graph.at[plot_time_index, 'OE_BASE'], df_gold_ta_graph.at[plot_time_index, 'OE_CONV'], \
                            df_gold_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'], df_gold_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B'])
                    self.label_p5_4.setText(txt)
                    
                else:
                    self.label_p5_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p5_4.setText(" ONE EYE ")

            elif comboindex5 == 19:
                
                self.plot5_time_line.setValue(plot_time_index)

                txt = ' {0:.5f} '.format(EURO_저가)
                self.label_56.setText(txt)

                과거가 =  self.label_57.text().split()[0]     

                if EURO_현재가 > float(과거가):

                    txt = " {0:.5f} ▲ ({1:.5f}, {2:0.1f}%, {3}) ".format(EURO_현재가, EURO_종가대비, EURO_등락율, EURO_진폭_틱)

                    if EURO_종가대비 > 0:
                        self.label_57.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif EURO_종가대비 < 0:
                        self.label_57.setStyleSheet('background-color: pink; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_57.setStyleSheet('background-color: pink; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_57.setText(txt)

                elif EURO_현재가 < float(과거가):

                    txt = " {0:.5f} ▼ ({1:.5f}, {2:0.1f}%, {3}) ".format(EURO_현재가, EURO_종가대비, EURO_등락율, EURO_진폭_틱)

                    if EURO_종가대비 > 0:
                        self.label_57.setStyleSheet('background-color: skyblue; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif EURO_종가대비 < 0:
                        self.label_57.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_57.setStyleSheet('background-color: skyblue; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_57.setText(txt)
                else:
                    pass

                txt = ' {0:.5f} '.format(EURO_고가)
                self.label_58.setText(txt)

                self.plot5_ovc_jl_line.setValue(EURO_전저)
                self.plot5_ovc_jh_line.setValue(EURO_전고)
                self.plot5_ovc_close_line.setValue(EURO_전일종가)
                self.plot5_ovc_open_line.setValue(EURO_시가)
                self.plot5_ovc_pivot_line.setValue(EURO_피봇)
                self.plot5_ovc_low_line.setValue(EURO_저가)
                self.plot5_ovc_high_line.setValue(EURO_고가)                 

                self.plot5_euro_curve.setData(df_euro_graph['Price'].astype(float))

                if flag_checkBox_plot5_bband:

                    self.parent.Calc_Bollinger('EURO')
            
                    self.plot5_bollinger_1st_upper_curve.setData(df_euro_ta_graph['BBUpper_1st'].astype(float))
                    self.plot5_bollinger_1st_middle_curve.setData(df_euro_ta_graph['BBMiddle_1st'].astype(float))
                    self.plot5_bollinger_1st_lower_curve.setData(df_euro_ta_graph['BBLower_1st'].astype(float))
                    self.plot5_bollinger_2nd_upper_curve.setData(df_euro_ta_graph['BBUpper_2nd'].astype(float))
                    self.plot5_bollinger_2nd_middle_curve.setData(df_euro_ta_graph['BBMiddle_2nd'].astype(float))
                    self.plot5_bollinger_2nd_lower_curve.setData(df_euro_ta_graph['BBLower_2nd'].astype(float))

                    self.plot5_fibonacci_line1.setValue(euro_fibonacci_levels[1])
                    self.plot5_fibonacci_line2.setValue(euro_fibonacci_levels[2])
                    self.plot5_fibonacci_line3.setValue(euro_fibonacci_levels[3])
                    self.plot5_fibonacci_line4.setValue(euro_fibonacci_levels[4])
                    self.plot5_fibonacci_line5.setValue(euro_fibonacci_levels[5])

                    if df_euro_ta_graph.at[plot_time_index, 'BBMiddle_2nd'] >= df_euro_ta_graph.at[plot_time_index, 'Price']:
                        self.label_p5_2.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p5_2.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " BB U: {0:.5f}\n BB M: {1:.5f}\n BB L: {2:.5f} ".format\
                        (df_euro_ta_graph.at[plot_time_index, 'BBUpper_2nd'], df_euro_ta_graph.at[plot_time_index, 'BBMiddle_2nd'], df_euro_ta_graph.at[plot_time_index, 'BBLower_2nd'])
                    self.label_p5_2.setText(txt)
                else:
                    self.plot5_fibonacci_line1.setValue(EURO_전일종가)
                    self.plot5_fibonacci_line2.setValue(EURO_전일종가)
                    self.plot5_fibonacci_line3.setValue(EURO_전일종가)
                    self.plot5_fibonacci_line4.setValue(EURO_전일종가)
                    self.plot5_fibonacci_line5.setValue(EURO_전일종가)

                    self.label_p5_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p5_2.setText(" BB Upper\n BB Middle\n BB Lower ")

                if flag_checkBox_plot5_psar:

                    self.parent.Calc_PSAR_MAMA('EURO')

                    self.plot5_psar_curve.setData(df_euro_ta_graph['PSAR'][0:plot_time_index+1].astype(float))

                    #self.plot5_sslup_curve.setData(df_euro_ta_graph['SSLUp'][0:plot_time_index+1].astype(float))
                    #self.plot5_ssldown_curve.setData(df_euro_ta_graph['SSLDown'][0:plot_time_index+1].astype(float))

                    self.plot5_mama_curve.setData(df_euro_ta_graph['MAMA'].astype(float))
                    df = df_euro_ta_graph['FAMA'].apply(lambda x: EURO_저가 if x < EURO_저가 else x)
                    self.plot5_fama_curve.setData(df.astype(float))                        

                    if df_euro_ta_graph.at[plot_time_index, 'PSAR'] > df_euro_ta_graph.at[plot_time_index, 'Price'] and df_euro_ta_graph.at[plot_time_index, 'MAMA'] < df_euro_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p5_3.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_euro_ta_graph.at[plot_time_index, 'PSAR'] < df_euro_ta_graph.at[plot_time_index, 'Price'] and df_euro_ta_graph.at[plot_time_index, 'MAMA'] > df_euro_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p5_3.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold') 
                    else:
                        self.label_p5_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " PSAR: {0:.5f}\n MAMA: {1:.5f}\n FAMA: {2:.5f} ".format(df_euro_ta_graph.at[plot_time_index, 'PSAR'], df_euro_ta_graph.at[plot_time_index, 'MAMA'], df_euro_ta_graph.at[plot_time_index, 'FAMA'])
                    self.label_p5_3.setText(txt)
                else:
                    self.label_p5_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p5_3.setText(" PSAR\n MAMA ")
                
                if flag_checkBox_plot5_one_eye:

                    self.plot5_oe_conv_curve.setData(df_euro_ta_graph['OE_CONV'].astype(float))
                    self.plot5_oe_base_curve.setData(df_euro_ta_graph['OE_BASE'].astype(float))
                    self.plot5_span_a_curve.setData(df_euro_ta_graph['SPAN_A'].astype(float))
                    self.plot5_span_b_curve.setData(df_euro_ta_graph['SPAN_B'].astype(float))

                    if flag_one_eye_lagging_span:
                        self.plot5_lagging_span_curve.setData(df_euro_ta_graph['LAGGING_SPAN'].astype(float))

                    if df_euro_ta_graph.at[plot_time_index, 'OE_CONV'] < df_euro_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_euro_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] < df_euro_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p5_4.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_euro_ta_graph.at[plot_time_index, 'OE_CONV'] > df_euro_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_euro_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] > df_euro_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p5_4.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p5_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " 기준선: {0:.5f}\n 전환선: {1:.5f}\n SPAN A: {2:.5f} \n SPAN B: {3:.5f} ".format\
                        (df_euro_ta_graph.at[plot_time_index, 'OE_BASE'], df_euro_ta_graph.at[plot_time_index, 'OE_CONV'], \
                            df_euro_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'], df_euro_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B'])
                    self.label_p5_4.setText(txt)
                    
                else:
                    self.label_p5_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p5_4.setText(" ONE EYE ")

            elif comboindex5 == 20:
                
                self.plot5_time_line.setValue(plot_time_index)

                txt = ' {0} '.format(format(YEN_저가, ','))
                self.label_56.setText(txt)

                tmp = self.label_57.text().split()[0]
                과거가 =  tmp.replace(',', '')     

                if YEN_현재가 > float(과거가):

                    txt = " {0} ▲ ({1:.1f}, {2:.1f}%, {3}) ".format(format(YEN_현재가, ','), YEN_종가대비, YEN_등락율, YEN_진폭_틱)

                    if YEN_종가대비 > 0:
                        self.label_57.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif YEN_종가대비 < 0:
                        self.label_57.setStyleSheet('background-color: pink; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_57.setStyleSheet('background-color: pink; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_57.setText(txt)

                elif YEN_현재가 < float(과거가):

                    txt = " {0} ▼ ({1:.1f}, {2:.1f}%, {3}) ".format(format(YEN_현재가, ','), YEN_종가대비, YEN_등락율, YEN_진폭_틱)

                    if YEN_종가대비 > 0:
                        self.label_57.setStyleSheet('background-color: skyblue; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif YEN_종가대비 < 0:
                        self.label_57.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_57.setStyleSheet('background-color: skyblue; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_57.setText(txt)
                else:
                    pass

                txt = ' {0} '.format(format(YEN_고가, ','))
                self.label_58.setText(txt)

                self.plot5_ovc_jl_line.setValue(YEN_전저)
                self.plot5_ovc_jh_line.setValue(YEN_전고)
                self.plot5_ovc_close_line.setValue(YEN_전일종가)
                self.plot5_ovc_open_line.setValue(YEN_시가)
                self.plot5_ovc_pivot_line.setValue(YEN_피봇)
                self.plot5_ovc_low_line.setValue(YEN_저가)
                self.plot5_ovc_high_line.setValue(YEN_고가)                 

                self.plot5_yen_curve.setData(df_yen_graph['Price'].astype(float))

                if flag_checkBox_plot5_bband:

                    self.parent.Calc_Bollinger('YEN')

                    self.plot5_bollinger_1st_upper_curve.setData(df_yen_ta_graph['BBUpper_1st'].astype(float))
                    self.plot5_bollinger_1st_middle_curve.setData(df_yen_ta_graph['BBMiddle_1st'].astype(float))
                    self.plot5_bollinger_1st_lower_curve.setData(df_yen_ta_graph['BBLower_1st'].astype(float))
                    self.plot5_bollinger_2nd_upper_curve.setData(df_yen_ta_graph['BBUpper_2nd'].astype(float))
                    self.plot5_bollinger_2nd_middle_curve.setData(df_yen_ta_graph['BBMiddle_2nd'].astype(float))
                    self.plot5_bollinger_2nd_lower_curve.setData(df_yen_ta_graph['BBLower_2nd'].astype(float))

                    self.plot5_fibonacci_line1.setValue(yen_fibonacci_levels[1])
                    self.plot5_fibonacci_line2.setValue(yen_fibonacci_levels[2])
                    self.plot5_fibonacci_line3.setValue(yen_fibonacci_levels[3])
                    self.plot5_fibonacci_line4.setValue(yen_fibonacci_levels[4])
                    self.plot5_fibonacci_line5.setValue(yen_fibonacci_levels[5])

                    if df_yen_ta_graph.at[plot_time_index, 'BBMiddle_2nd'] >= df_yen_ta_graph.at[plot_time_index, 'Price']:
                        self.label_p5_2.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p5_2.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " BB U: {0:.1f}\n BB M: {1:.1f}\n BB L: {2:.1f} ".format\
                        (df_yen_ta_graph.at[plot_time_index, 'BBUpper_2nd'], df_yen_ta_graph.at[plot_time_index, 'BBMiddle_2nd'], df_yen_ta_graph.at[plot_time_index, 'BBLower_2nd'])
                    self.label_p5_2.setText(txt)
                else:
                    self.plot5_fibonacci_line1.setValue(YEN_전일종가)
                    self.plot5_fibonacci_line2.setValue(YEN_전일종가)
                    self.plot5_fibonacci_line3.setValue(YEN_전일종가)
                    self.plot5_fibonacci_line4.setValue(YEN_전일종가)
                    self.plot5_fibonacci_line5.setValue(YEN_전일종가)

                    self.label_p5_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p5_2.setText(" BB Upper\n BB Middle\n BB Lower ")

                if flag_checkBox_plot5_psar:

                    self.parent.Calc_PSAR_MAMA('YEN')

                    self.plot5_psar_curve.setData(df_yen_ta_graph['PSAR'][0:plot_time_index+1].astype(float))

                    #self.plot5_sslup_curve.setData(df_yen_ta_graph['SSLUp'][0:plot_time_index+1].astype(float))
                    #self.plot5_ssldown_curve.setData(df_yen_ta_graph['SSLDown'][0:plot_time_index+1].astype(float))

                    self.plot5_mama_curve.setData(df_yen_ta_graph['MAMA'].astype(float))
                    df = df_yen_ta_graph['FAMA'].apply(lambda x: YEN_저가 if x < YEN_저가 else x)
                    self.plot5_fama_curve.setData(df.astype(float))                        

                    if df_yen_ta_graph.at[plot_time_index, 'PSAR'] > df_yen_ta_graph.at[plot_time_index, 'Price'] and df_yen_ta_graph.at[plot_time_index, 'MAMA'] < df_yen_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p5_3.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_yen_ta_graph.at[plot_time_index, 'PSAR'] < df_yen_ta_graph.at[plot_time_index, 'Price'] and df_yen_ta_graph.at[plot_time_index, 'MAMA'] > df_yen_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p5_3.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold') 
                    else:
                        self.label_p5_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " PSAR: {0:.1f}\n MAMA: {1:.1f}\n FAMA: {2:.1f} ".format(df_yen_ta_graph.at[plot_time_index, 'PSAR'], df_yen_ta_graph.at[plot_time_index, 'MAMA'], df_yen_ta_graph.at[plot_time_index, 'FAMA'])
                    self.label_p5_3.setText(txt)
                else:
                    self.label_p5_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p5_3.setText(" PSAR\n MAMA ")
                
                if flag_checkBox_plot5_one_eye:

                    self.plot5_oe_conv_curve.setData(df_yen_ta_graph['OE_CONV'].astype(float))
                    self.plot5_oe_base_curve.setData(df_yen_ta_graph['OE_BASE'].astype(float))
                    self.plot5_span_a_curve.setData(df_yen_ta_graph['SPAN_A'].astype(float))
                    self.plot5_span_b_curve.setData(df_yen_ta_graph['SPAN_B'].astype(float))

                    if flag_one_eye_lagging_span:
                        self.plot5_lagging_span_curve.setData(df_yen_ta_graph['LAGGING_SPAN'].astype(float))

                    if df_yen_ta_graph.at[plot_time_index, 'OE_CONV'] < df_yen_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_yen_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] < df_yen_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p5_4.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_yen_ta_graph.at[plot_time_index, 'OE_CONV'] > df_yen_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_yen_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] > df_yen_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p5_4.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p5_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " 기준선: {0:.1f}\n 전환선: {1:.1f}\n SPAN A: {2:.1f} \n SPAN B: {3:.1f} ".format\
                        (df_yen_ta_graph.at[plot_time_index, 'OE_BASE'], df_yen_ta_graph.at[plot_time_index, 'OE_CONV'], \
                            df_yen_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'], df_yen_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B'])
                    self.label_p5_4.setText(txt)
                    
                else:
                    self.label_p5_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p5_4.setText(" ONE EYE ")
            
            elif comboindex5 == 21:

                self.plot5_time_line.setValue(plot_time_index)

                txt = ' {0:.5f} '.format(ADI_저가)
                self.label_56.setText(txt)

                과거가 =  self.label_57.text().split()[0] 

                if ADI_현재가 > float(과거가):

                    txt = " {0:.5f} ▲ ({1:.5f}, {2:.1f}%, {3}) ".format(ADI_현재가, ADI_종가대비, ADI_등락율, ADI_진폭_틱)

                    if ADI_종가대비 > 0:
                        self.label_57.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif ADI_종가대비 < 0:
                        self.label_57.setStyleSheet('background-color: pink; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_57.setStyleSheet('background-color: pink; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_57.setText(txt)

                elif ADI_현재가 < float(과거가):

                    txt = " {0:.5f} ▼ ({1:.5f}, {2:.1f}%, {3}) ".format(ADI_현재가, ADI_종가대비, ADI_등락율, ADI_진폭_틱)

                    if ADI_종가대비 > 0:
                        self.label_57.setStyleSheet('background-color: skyblue; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif ADI_종가대비 < 0:
                        self.label_57.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_57.setStyleSheet('background-color: skyblue; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_57.setText(txt)
                else:
                    pass

                txt = ' {0:.5f} '.format(ADI_고가)
                self.label_58.setText(txt)

                if ADI_전저 > 0:
                    self.plot5_ovc_jl_line.setValue(ADI_전저)

                if ADI_전고 > 0:
                    self.plot5_ovc_jh_line.setValue(ADI_전고)

                self.plot5_ovc_close_line.setValue(ADI_전일종가)
                self.plot5_ovc_open_line.setValue(ADI_시가)

                if ADI_피봇 > 0:
                    self.plot5_ovc_pivot_line.setValue(ADI_피봇)
                    
                self.plot5_ovc_low_line.setValue(ADI_저가)
                self.plot5_ovc_high_line.setValue(ADI_고가)                 

                self.plot5_adi_curve.setData(df_adi_graph['Price'].astype(float))

                if flag_checkBox_plot5_bband:

                    self.parent.Calc_Bollinger('ADI')

                    self.plot5_bollinger_1st_upper_curve.setData(df_adi_ta_graph['BBUpper_1st'].astype(float))
                    self.plot5_bollinger_1st_middle_curve.setData(df_adi_ta_graph['BBMiddle_1st'].astype(float))
                    self.plot5_bollinger_1st_lower_curve.setData(df_adi_ta_graph['BBLower_1st'].astype(float))
                    self.plot5_bollinger_2nd_upper_curve.setData(df_adi_ta_graph['BBUpper_2nd'].astype(float))
                    self.plot5_bollinger_2nd_middle_curve.setData(df_adi_ta_graph['BBMiddle_2nd'].astype(float))
                    self.plot5_bollinger_2nd_lower_curve.setData(df_adi_ta_graph['BBLower_2nd'].astype(float))

                    self.plot5_fibonacci_line1.setValue(adi_fibonacci_levels[1])
                    self.plot5_fibonacci_line2.setValue(adi_fibonacci_levels[2])
                    self.plot5_fibonacci_line3.setValue(adi_fibonacci_levels[3])
                    self.plot5_fibonacci_line4.setValue(adi_fibonacci_levels[4])
                    self.plot5_fibonacci_line5.setValue(adi_fibonacci_levels[5])

                    if df_adi_ta_graph.at[plot_time_index, 'BBMiddle_2nd'] >= df_adi_ta_graph.at[plot_time_index, 'Price']:
                        self.label_p5_2.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p5_2.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " BB U: {0:.5f}\n BB M: {1:.5f}\n BB L: {2:.5f} ".format\
                        (df_adi_ta_graph.at[plot_time_index, 'BBUpper_2nd'], df_adi_ta_graph.at[plot_time_index, 'BBMiddle_2nd'], df_adi_ta_graph.at[plot_time_index, 'BBLower_2nd'])
                    self.label_p5_2.setText(txt)
                else:
                    self.plot5_fibonacci_line1.setValue(ADI_전일종가)
                    self.plot5_fibonacci_line2.setValue(ADI_전일종가)
                    self.plot5_fibonacci_line3.setValue(ADI_전일종가)
                    self.plot5_fibonacci_line4.setValue(ADI_전일종가)
                    self.plot5_fibonacci_line5.setValue(ADI_전일종가)

                    self.label_p5_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p5_2.setText(" BB Upper\n BB Middle\n BB Lower ")

                if flag_checkBox_plot5_psar:

                    self.parent.Calc_PSAR_MAMA('ADI')

                    self.plot5_psar_curve.setData(df_adi_ta_graph['PSAR'][0:plot_time_index+1].astype(float))

                    #self.plot5_sslup_curve.setData(df_adi_ta_graph['SSLUp'][0:plot_time_index+1].astype(float))
                    #self.plot5_ssldown_curve.setData(df_adi_ta_graph['SSLDown'][0:plot_time_index+1].astype(float))

                    self.plot5_mama_curve.setData(df_adi_ta_graph['MAMA'].astype(float))
                    df = df_adi_ta_graph['FAMA'].apply(lambda x: ADI_저가 if x < ADI_저가 else x)
                    self.plot5_fama_curve.setData(df.astype(float))                        

                    if df_adi_ta_graph.at[plot_time_index, 'PSAR'] > df_adi_ta_graph.at[plot_time_index, 'Price'] and df_adi_ta_graph.at[plot_time_index, 'MAMA'] < df_adi_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p5_3.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_adi_ta_graph.at[plot_time_index, 'PSAR'] < df_adi_ta_graph.at[plot_time_index, 'Price'] and df_adi_ta_graph.at[plot_time_index, 'MAMA'] > df_adi_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p5_3.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold') 
                    else:
                        self.label_p5_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " PSAR: {0:.5f}\n MAMA: {1:.5f}\n FAMA: {2:.5f} ".format(df_adi_ta_graph.at[plot_time_index, 'PSAR'], df_adi_ta_graph.at[plot_time_index, 'MAMA'], df_adi_ta_graph.at[plot_time_index, 'FAMA'])
                    self.label_p5_3.setText(txt)
                else:
                    self.label_p5_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p5_3.setText(" PSAR\n MAMA ")
                
                if flag_checkBox_plot5_one_eye:

                    self.plot5_oe_conv_curve.setData(df_adi_ta_graph['OE_CONV'].astype(float))
                    self.plot5_oe_base_curve.setData(df_adi_ta_graph['OE_BASE'].astype(float))
                    self.plot5_span_a_curve.setData(df_adi_ta_graph['SPAN_A'].astype(float))
                    self.plot5_span_b_curve.setData(df_adi_ta_graph['SPAN_B'].astype(float))

                    if flag_one_eye_lagging_span:
                        self.plot5_lagging_span_curve.setData(df_adi_ta_graph['LAGGING_SPAN'].astype(float))

                    if df_adi_ta_graph.at[plot_time_index, 'OE_CONV'] < df_adi_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_adi_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] < df_adi_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p5_4.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_adi_ta_graph.at[plot_time_index, 'OE_CONV'] > df_adi_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_adi_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] > df_adi_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p5_4.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p5_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " 기준선: {0:.5f}\n 전환선: {1:.5f}\n SPAN A: {2:.5f} \n SPAN B: {3:.5f} ".format\
                        (df_adi_ta_graph.at[plot_time_index, 'OE_BASE'], df_adi_ta_graph.at[plot_time_index, 'OE_CONV'], \
                            df_adi_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'], df_adi_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B'])
                    self.label_p5_4.setText(txt)
                    
                else:
                    self.label_p5_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p5_4.setText(" ONE EYE ")

            elif comboindex5 == 23:
                
                self.plot5_time_line.setValue(plot_time_index)

                df_futures_cm_ta_graph['CCI1'] = talib.CCI(df_futures_cm_ta_graph['High'], df_futures_cm_ta_graph['Low'], df_futures_cm_ta_graph['Close'], timeperiod=CCI1_PERIOD)                
                df_futures_cm_ta_graph['CCI2'] = talib.CCI(df_futures_cm_ta_graph['High'], df_futures_cm_ta_graph['Low'], df_futures_cm_ta_graph['Close'], timeperiod=CCI2_PERIOD)
                df_futures_cm_ta_graph['RSI'] = (talib.RSI(df_futures_cm_ta_graph['Close'], timeperiod=RSI_PERIOD) - RSI_OFFSET) * RSI_SCALE_FACTOR

                txt = " CCI1: {0:.0f}, CCI2: {1:.0f}, RSI: {2:.0f} ".format(df_futures_cm_ta_graph.at[plot_time_index, 'CCI1'], df_futures_cm_ta_graph.at[plot_time_index, 'CCI2'], df_futures_cm_ta_graph.at[plot_time_index, 'RSI'])

                if df_futures_cm_ta_graph.at[plot_time_index, 'CCI2'] > 0:
                    self.label_57.setStyleSheet('background-color: yellow; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                elif df_futures_cm_ta_graph.at[plot_time_index, 'CCI2'] < 0:
                    self.label_57.setStyleSheet('background-color: yellow; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                else:
                    self.label_57.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                self.label_57.setText(txt)

                self.plot5_cci_plus_100_line.setValue(100)
                self.plot5_cci_minus_100_line.setValue(-100)
                                
                self.plot5_futures_cci1_curve.setData(df_futures_cm_ta_graph['CCI1'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot5_futures_cci2_curve.setData(df_futures_cm_ta_graph['CCI2'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot5_futures_rsi_curve.setData(df_futures_cm_ta_graph['RSI'].astype(float))

            elif comboindex5 == 24:
                
                self.plot5_time_line.setValue(plot_time_index)

                df_sp500_ta_graph['CCI1'] = talib.CCI(df_sp500_ta_graph['High'], df_sp500_ta_graph['Low'], df_sp500_ta_graph['Close'], timeperiod=CCI1_PERIOD)
                df_sp500_ta_graph['CCI2'] = talib.CCI(df_sp500_ta_graph['High'], df_sp500_ta_graph['Low'], df_sp500_ta_graph['Close'], timeperiod=CCI2_PERIOD)
                df_sp500_ta_graph['RSI'] = (talib.RSI(df_sp500_ta_graph['Close'], timeperiod=RSI_PERIOD) - RSI_OFFSET) * RSI_SCALE_FACTOR

                txt = " CCI1: {0:.0f}, CCI2: {1:.0f}, RSI: {2:.0f} ".format(df_sp500_ta_graph.at[plot_time_index, 'CCI1'], df_sp500_ta_graph.at[plot_time_index, 'CCI2'], df_sp500_ta_graph.at[plot_time_index, 'RSI'])

                if df_sp500_ta_graph.at[plot_time_index, 'CCI2'] > 0:
                    self.label_57.setStyleSheet('background-color: yellow; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                elif df_sp500_ta_graph.at[plot_time_index, 'CCI2'] < 0:
                    self.label_57.setStyleSheet('background-color: yellow; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                else:
                    self.label_57.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                self.label_57.setText(txt)

                self.plot5_cci_plus_100_line.setValue(100)
                self.plot5_cci_minus_100_line.setValue(-100)
                
                self.plot5_sp500_cci1_curve.setData(df_sp500_ta_graph['CCI1'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot5_sp500_cci2_curve.setData(df_sp500_ta_graph['CCI2'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot5_sp500_rsi_curve.setData(df_sp500_ta_graph['RSI'].astype(float))

            elif comboindex5 == 25:
                
                self.plot5_time_line.setValue(plot_time_index)

                df_dow_ta_graph['CCI1'] = talib.CCI(df_dow_ta_graph['High'], df_dow_ta_graph['Low'], df_dow_ta_graph['Close'], timeperiod=CCI1_PERIOD)
                df_dow_ta_graph['CCI2'] = talib.CCI(df_dow_ta_graph['High'], df_dow_ta_graph['Low'], df_dow_ta_graph['Close'], timeperiod=CCI2_PERIOD)
                df_dow_ta_graph['RSI'] = (talib.RSI(df_dow_ta_graph['Close'], timeperiod=RSI_PERIOD) - RSI_OFFSET) * RSI_SCALE_FACTOR

                txt = " CCI1: {0:.0f}, CCI2: {1:.0f}, RSI: {2:.0f} ".format(df_dow_ta_graph.at[plot_time_index, 'CCI1'], df_dow_ta_graph.at[plot_time_index, 'CCI2'], df_dow_ta_graph.at[plot_time_index, 'RSI'])

                if df_dow_ta_graph.at[plot_time_index, 'CCI2'] > 0:
                    self.label_57.setStyleSheet('background-color: yellow; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                elif df_dow_ta_graph.at[plot_time_index, 'CCI2'] < 0:
                    self.label_57.setStyleSheet('background-color: yellow; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                else:
                    self.label_57.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                self.label_57.setText(txt)

                self.plot5_cci_plus_100_line.setValue(100)
                self.plot5_cci_minus_100_line.setValue(-100)
                
                self.plot5_dow_cci1_curve.setData(df_dow_ta_graph['CCI1'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot5_dow_cci2_curve.setData(df_dow_ta_graph['CCI2'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot5_dow_rsi_curve.setData(df_dow_ta_graph['RSI'].astype(float))

            elif comboindex5 == 26:
                
                self.plot5_time_line.setValue(plot_time_index)

                df_nasdaq_ta_graph['CCI1'] = talib.CCI(df_nasdaq_ta_graph['High'], df_nasdaq_ta_graph['Low'], df_nasdaq_ta_graph['Close'], timeperiod=CCI1_PERIOD)
                df_nasdaq_ta_graph['CCI2'] = talib.CCI(df_nasdaq_ta_graph['High'], df_nasdaq_ta_graph['Low'], df_nasdaq_ta_graph['Close'], timeperiod=CCI2_PERIOD)
                df_nasdaq_ta_graph['RSI'] = (talib.RSI(df_nasdaq_ta_graph['Close'], timeperiod=RSI_PERIOD) - RSI_OFFSET) * RSI_SCALE_FACTOR

                txt = " CCI1: {0:.0f}, CCI2: {1:.0f}, RSI: {2:.0f} ".format(df_nasdaq_ta_graph.at[plot_time_index, 'CCI1'], df_nasdaq_ta_graph.at[plot_time_index, 'CCI2'], df_nasdaq_ta_graph.at[plot_time_index, 'RSI'])

                if df_nasdaq_ta_graph.at[plot_time_index, 'CCI2'] > 0:
                    self.label_57.setStyleSheet('background-color: yellow; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                elif df_nasdaq_ta_graph.at[plot_time_index, 'CCI2'] < 0:
                    self.label_57.setStyleSheet('background-color: yellow; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                else:
                    self.label_57.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                self.label_57.setText(txt)

                self.plot5_cci_plus_100_line.setValue(100)
                self.plot5_cci_minus_100_line.setValue(-100)
                
                self.plot5_nasdaq_cci1_curve.setData(df_nasdaq_ta_graph['CCI1'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot5_nasdaq_cci2_curve.setData(df_nasdaq_ta_graph['CCI2'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot5_nasdaq_rsi_curve.setData(df_nasdaq_ta_graph['RSI'].astype(float))

            elif comboindex5 == 27:
                
                self.plot5_time_line.setValue(plot_time_index)

                df_hsi_ta_graph['CCI1'] = talib.CCI(df_hsi_ta_graph['High'], df_hsi_ta_graph['Low'], df_hsi_ta_graph['Close'], timeperiod=CCI1_PERIOD)
                df_hsi_ta_graph['CCI2'] = talib.CCI(df_hsi_ta_graph['High'], df_hsi_ta_graph['Low'], df_hsi_ta_graph['Close'], timeperiod=CCI2_PERIOD)
                df_hsi_ta_graph['RSI'] = (talib.RSI(df_hsi_ta_graph['Close'], timeperiod=RSI_PERIOD) - RSI_OFFSET) * RSI_SCALE_FACTOR

                txt = " CCI1: {0:.0f}, CCI2: {1:.0f}, RSI: {2:.0f} ".format(df_hsi_ta_graph.at[plot_time_index, 'CCI1'], df_hsi_ta_graph.at[plot_time_index, 'CCI2'], df_hsi_ta_graph.at[plot_time_index, 'RSI'])

                if df_hsi_ta_graph.at[plot_time_index, 'CCI2'] > 0:
                    self.label_57.setStyleSheet('background-color: yellow; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                elif df_hsi_ta_graph.at[plot_time_index, 'CCI2'] < 0:
                    self.label_57.setStyleSheet('background-color: yellow; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                else:
                    self.label_57.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                self.label_57.setText(txt)

                self.plot5_cci_plus_100_line.setValue(100)
                self.plot5_cci_minus_100_line.setValue(-100)
                
                self.plot5_hsi_cci1_curve.setData(df_hsi_ta_graph['CCI1'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot5_hsi_cci2_curve.setData(df_hsi_ta_graph['CCI2'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot5_hsi_rsi_curve.setData(df_hsi_ta_graph['RSI'].astype(float))

            elif comboindex5 == 28:
                
                self.plot5_time_line.setValue(plot_time_index)

                df_wti_ta_graph['CCI1'] = talib.CCI(df_wti_ta_graph['High'], df_wti_ta_graph['Low'], df_wti_ta_graph['Close'], timeperiod=CCI1_PERIOD)
                df_wti_ta_graph['CCI2'] = talib.CCI(df_wti_ta_graph['High'], df_wti_ta_graph['Low'], df_wti_ta_graph['Close'], timeperiod=CCI2_PERIOD)
                df_wti_ta_graph['RSI'] = (talib.RSI(df_wti_ta_graph['Close'], timeperiod=RSI_PERIOD) - RSI_OFFSET) * RSI_SCALE_FACTOR

                txt = " CCI1: {0:.0f}, CCI2: {1:.0f}, RSI: {2:.0f} ".format(df_wti_ta_graph.at[plot_time_index, 'CCI1'], df_wti_ta_graph.at[plot_time_index, 'CCI2'], df_wti_ta_graph.at[plot_time_index, 'RSI'])

                if df_wti_ta_graph.at[plot_time_index, 'CCI2'] > 0:
                    self.label_57.setStyleSheet('background-color: yellow; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                elif df_wti_ta_graph.at[plot_time_index, 'CCI2'] < 0:
                    self.label_57.setStyleSheet('background-color: yellow; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                else:
                    self.label_57.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                self.label_57.setText(txt)

                self.plot5_cci_plus_100_line.setValue(100)
                self.plot5_cci_minus_100_line.setValue(-100)
                
                self.plot5_wti_cci1_curve.setData(df_wti_ta_graph['CCI1'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot5_wti_cci2_curve.setData(df_wti_ta_graph['CCI2'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot5_wti_rsi_curve.setData(df_wti_ta_graph['RSI'].astype(float))

            elif comboindex5 == 29:
                
                self.plot5_time_line.setValue(plot_time_index)

                df_gold_ta_graph['CCI1'] = talib.CCI(df_gold_ta_graph['High'], df_gold_ta_graph['Low'], df_gold_ta_graph['Close'], timeperiod=CCI1_PERIOD)
                df_gold_ta_graph['CCI2'] = talib.CCI(df_gold_ta_graph['High'], df_gold_ta_graph['Low'], df_gold_ta_graph['Close'], timeperiod=CCI2_PERIOD)
                df_gold_ta_graph['RSI'] = (talib.RSI(df_gold_ta_graph['Close'], timeperiod=RSI_PERIOD) - RSI_OFFSET) * RSI_SCALE_FACTOR

                txt = " CCI1: {0:.0f}, CCI2: {1:.0f}, RSI: {2:.0f} ".format(df_gold_ta_graph.at[plot_time_index, 'CCI1'], df_gold_ta_graph.at[plot_time_index, 'CCI2'], df_gold_ta_graph.at[plot_time_index, 'RSI'])

                if df_gold_ta_graph.at[plot_time_index, 'CCI2'] > 0:
                    self.label_57.setStyleSheet('background-color: yellow; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                elif df_gold_ta_graph.at[plot_time_index, 'CCI2'] < 0:
                    self.label_57.setStyleSheet('background-color: yellow; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                else:
                    self.label_57.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                self.label_57.setText(txt)

                self.plot5_cci_plus_100_line.setValue(100)
                self.plot5_cci_minus_100_line.setValue(-100)
                
                self.plot5_gold_cci1_curve.setData(df_gold_ta_graph['CCI1'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot5_gold_cci2_curve.setData(df_gold_ta_graph['CCI2'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot5_gold_rsi_curve.setData(df_gold_ta_graph['RSI'].astype(float))

            elif comboindex5 == 30:
                
                self.plot5_time_line.setValue(plot_time_index)

                df_euro_ta_graph['CCI1'] = talib.CCI(df_euro_ta_graph['High'], df_euro_ta_graph['Low'], df_euro_ta_graph['Close'], timeperiod=CCI1_PERIOD)
                df_euro_ta_graph['CCI2'] = talib.CCI(df_euro_ta_graph['High'], df_euro_ta_graph['Low'], df_euro_ta_graph['Close'], timeperiod=CCI2_PERIOD)
                df_euro_ta_graph['RSI'] = (talib.RSI(df_euro_ta_graph['Close'], timeperiod=RSI_PERIOD) - RSI_OFFSET) * RSI_SCALE_FACTOR

                txt = " CCI1: {0:.0f}, CCI2: {1:.0f}, RSI: {2:.0f} ".format(df_euro_ta_graph.at[plot_time_index, 'CCI1'], df_euro_ta_graph.at[plot_time_index, 'CCI2'], df_euro_ta_graph.at[plot_time_index, 'RSI'])

                if df_euro_ta_graph.at[plot_time_index, 'CCI2'] > 0:
                    self.label_57.setStyleSheet('background-color: yellow; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                elif df_euro_ta_graph.at[plot_time_index, 'CCI2'] < 0:
                    self.label_57.setStyleSheet('background-color: yellow; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                else:
                    self.label_57.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                self.label_57.setText(txt)

                self.plot5_cci_plus_100_line.setValue(100)
                self.plot5_cci_minus_100_line.setValue(-100)
                
                self.plot5_euro_cci1_curve.setData(df_euro_ta_graph['CCI1'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot5_euro_cci2_curve.setData(df_euro_ta_graph['CCI2'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot5_euro_rsi_curve.setData(df_euro_ta_graph['RSI'].astype(float))

            elif comboindex5 == 31:
                
                self.plot5_time_line.setValue(plot_time_index)

                df_yen_ta_graph['CCI1'] = talib.CCI(df_yen_ta_graph['High'], df_yen_ta_graph['Low'], df_yen_ta_graph['Close'], timeperiod=CCI1_PERIOD)
                df_yen_ta_graph['CCI2'] = talib.CCI(df_yen_ta_graph['High'], df_yen_ta_graph['Low'], df_yen_ta_graph['Close'], timeperiod=CCI2_PERIOD)
                df_yen_ta_graph['RSI'] = (talib.RSI(df_yen_ta_graph['Close'], timeperiod=RSI_PERIOD) - RSI_OFFSET) * RSI_SCALE_FACTOR

                txt = " CCI1: {0:.0f}, CCI2: {1:.0f}, RSI: {2:.0f} ".format(df_yen_ta_graph.at[plot_time_index, 'CCI1'], df_yen_ta_graph.at[plot_time_index, 'CCI2'], df_yen_ta_graph.at[plot_time_index, 'RSI'])

                if df_yen_ta_graph.at[plot_time_index, 'CCI2'] > 0:
                    self.label_57.setStyleSheet('background-color: yellow; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                elif df_yen_ta_graph.at[plot_time_index, 'CCI2'] < 0:
                    self.label_57.setStyleSheet('background-color: yellow; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                else:
                    self.label_57.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                self.label_57.setText(txt)

                self.plot5_cci_plus_100_line.setValue(100)
                self.plot5_cci_minus_100_line.setValue(-100)
                
                self.plot5_yen_cci1_curve.setData(df_yen_ta_graph['CCI1'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot5_yen_cci2_curve.setData(df_yen_ta_graph['CCI2'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot5_yen_rsi_curve.setData(df_yen_ta_graph['RSI'].astype(float))

            elif comboindex5 == 32:
                
                self.plot5_time_line.setValue(plot_time_index)

                df_adi_ta_graph['CCI1'] = talib.CCI(df_adi_ta_graph['High'], df_adi_ta_graph['Low'], df_adi_ta_graph['Close'], timeperiod=CCI1_PERIOD)
                df_adi_ta_graph['CCI2'] = talib.CCI(df_adi_ta_graph['High'], df_adi_ta_graph['Low'], df_adi_ta_graph['Close'], timeperiod=CCI2_PERIOD)
                df_adi_ta_graph['RSI'] = (talib.RSI(df_adi_ta_graph['Close'], timeperiod=RSI_PERIOD) - RSI_OFFSET) * RSI_SCALE_FACTOR

                txt = " CCI1: {0:.0f}, CCI2: {1:.0f}, RSI: {2:.0f} ".format(df_adi_ta_graph.at[plot_time_index, 'CCI1'], df_adi_ta_graph.at[plot_time_index, 'CCI2'], df_adi_ta_graph.at[plot_time_index, 'RSI'])

                if df_adi_ta_graph.at[plot_time_index, 'CCI2'] > 0:
                    self.label_57.setStyleSheet('background-color: yellow; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                elif df_adi_ta_graph.at[plot_time_index, 'CCI2'] < 0:
                    self.label_57.setStyleSheet('background-color: yellow; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                else:
                    self.label_57.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                self.label_57.setText(txt)

                self.plot5_cci_plus_100_line.setValue(100)
                self.plot5_cci_minus_100_line.setValue(-100)
                
                self.plot5_adi_cci1_curve.setData(df_adi_ta_graph['CCI1'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot5_adi_cci2_curve.setData(df_adi_ta_graph['CCI2'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot5_adi_rsi_curve.setData(df_adi_ta_graph['RSI'].astype(float))
            else:
                pass

        except Exception as e:

            txt = '[{0:02d}:{1:02d}:{2:02d}] Exception : update_plot5 에서 {3} \n상기 오류가 발생했습니다.\r'.format(dt.hour, dt.minute, dt.second, traceback.format_exc())
            self.parent.textBrowser.append(txt)

        finally:
            if CME_체결시간 == '000000':
                txt = ' [{0:02d}:{1:02d}:{2:02d}] {3:.2f} ms '.format(dt.hour, dt.minute, dt.second, plot5_processing_time)
            else:
                if flag_put_high_in_fixed_coreval:
                    self.label_time_5.setStyleSheet('background-color: black; color: yellow; font-family: Consolas; font-size: 9pt; font: Bold')
                    txt = ' ♠ PH({0}) {1:.2f} ms '.format(put_high_val_in_fixed_coreval, plot5_processing_time)
                else:
                    self.label_time_5.setStyleSheet('background-color: lawngreen; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    txt = ' {0:.2f} ms '.format(plot5_processing_time)

            self.label_time_5.setText(txt)

            flag_plot5_update_is_running = False

    @logging_time_plot6
    #@pyqtSlot()    
    def update_plot6(self):

        global flag_plot6_update_is_running        
        global flag_calltable_checkstate_changed, flag_puttable_checkstate_changed        

        try:        
            dt = datetime.now()

            flag_plot6_update_is_running = True                        

            # Plot6 그래프 그리기
            # 선물가격
            if comboindex6 == 2:
                
                self.plot6_time_line.setValue(plot_time_index)

                txt = ' {0} '.format(근월물_선물_피봇)
                self.label_64.setText(txt)

                txt = ' {0}/{1} '.format(근월물_선물_시가, 차월물_선물_시가)
                self.label_65.setText(txt)
                
                txt = ' {0} '.format(근월물_선물_저가)
                self.label_66.setText(txt)       

                과거가 =  self.label_67.text().split()[0]

                if 근월물_선물_현재가 > float(과거가):

                    txt = " {0} ▲ ({1:.2f}, {2:0.1f}%, {3:.2f}), kp200 : {4:.2f} ".format(근월물_선물_현재가, 근월물_선물_종가대비, 근월물_선물_종가대비_등락율, 근월물_선물_진폭, kp200_현재가)

                    if 근월물_선물_종가대비 > 0:
                        self.label_67.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif 근월물_선물_종가대비 < 0:
                        self.label_67.setStyleSheet('background-color: pink; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_67.setStyleSheet('background-color: pink; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_67.setText(txt)

                elif 근월물_선물_현재가 < float(과거가):

                    txt = " {0} ▼ ({1:.2f}, {2:0.1f}%, {3:.2f}), kp200 : {4:.2f} ".format(근월물_선물_현재가, 근월물_선물_종가대비, 근월물_선물_종가대비_등락율, 근월물_선물_진폭, kp200_현재가)

                    if 근월물_선물_종가대비 > 0:
                        self.label_67.setStyleSheet('background-color: skyblue; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif 근월물_선물_종가대비 < 0:
                        self.label_67.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_67.setStyleSheet('background-color: skyblue; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_67.setText(txt)
                else:
                    pass

                txt = ' {0} '.format(근월물_선물_고가)
                self.label_68.setText(txt)                
                
                self.plot6_kp200_line[3].setValue(KP200_COREVAL[3])
                self.plot6_kp200_line[4].setValue(KP200_COREVAL[4])
                self.plot6_kp200_line[5].setValue(KP200_COREVAL[5])
                self.plot6_kp200_line[6].setValue(KP200_COREVAL[6])                
                
                if 근월물_선물_저가 < KP200_COREVAL[3] or kp200_저가 < KP200_COREVAL[3]:
                    self.plot6_kp200_line[2].setValue(KP200_COREVAL[2])
                else:
                    pass

                if 근월물_선물_저가 < KP200_COREVAL[2] or kp200_저가 < KP200_COREVAL[2]:
                    self.plot6_kp200_line[1].setValue(KP200_COREVAL[1])
                else:
                    pass
                
                if 근월물_선물_고가 > KP200_COREVAL[6] or kp200_고가 > KP200_COREVAL[6]:
                    self.plot6_kp200_line[7].setValue(KP200_COREVAL[7])
                else:
                    pass

                if 근월물_선물_고가 > KP200_COREVAL[7] or kp200_고가 > KP200_COREVAL[7]:
                    self.plot6_kp200_line[8].setValue(KP200_COREVAL[8])
                else:
                    pass              
                
                self.plot6_fut_jl_line.setValue(근월물_선물_전저)
                self.plot6_fut_jh_line.setValue(근월물_선물_전고)
                self.plot6_fut_close_line.setValue(근월물_선물_종가)                
                self.plot6_fut_open_line.setValue(근월물_선물_시가)
                self.plot6_fut_low_line.setValue(근월물_선물_저가)
                self.plot6_fut_pivot_line.setValue(근월물_선물_피봇)
                self.plot6_fut_high_line.setValue(근월물_선물_고가)

                if DayTime:
                    self.plot6_kp200_curve.setData(df_kp200_graph['Price'].astype(float))
                    self.plot6_fut_cm_price_curve.setData(df_futures_cm_graph['Price'].astype(float))
                    self.plot6_fut_nm_price_curve.setData(df_futures_nm_graph['Price'].astype(float))
                else:
                    pass

                if flag_checkBox_plot6_bband:

                    self.parent.Calc_Bollinger('FUT')
                
                    self.plot6_bollinger_1st_upper_curve.setData(df_futures_cm_ta_graph['BBUpper_1st'].astype(float))
                    self.plot6_bollinger_1st_middle_curve.setData(df_futures_cm_ta_graph['BBMiddle_1st'].astype(float))
                    self.plot6_bollinger_1st_lower_curve.setData(df_futures_cm_ta_graph['BBLower_1st'].astype(float))
                    self.plot6_bollinger_2nd_upper_curve.setData(df_futures_cm_ta_graph['BBUpper_2nd'].astype(float))
                    self.plot6_bollinger_2nd_middle_curve.setData(df_futures_cm_ta_graph['BBMiddle_2nd'].astype(float))
                    self.plot6_bollinger_2nd_lower_curve.setData(df_futures_cm_ta_graph['BBLower_2nd'].astype(float))

                    self.plot6_fibonacci_line1.setValue(futures_fibonacci_levels[1])
                    self.plot6_fibonacci_line2.setValue(futures_fibonacci_levels[2])
                    self.plot6_fibonacci_line3.setValue(futures_fibonacci_levels[3])
                    self.plot6_fibonacci_line4.setValue(futures_fibonacci_levels[4])
                    self.plot6_fibonacci_line5.setValue(futures_fibonacci_levels[5])

                    if df_futures_cm_ta_graph.at[plot_time_index, 'BBMiddle_2nd'] >= df_futures_cm_ta_graph.at[plot_time_index, 'Price']:
                        self.label_p6_2.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p6_2.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " BB U: {0:.2f}\n BB M: {1:.2f}\n BB L: {2:.2f} ".format\
                        (df_futures_cm_ta_graph.at[plot_time_index, 'BBUpper_2nd'], df_futures_cm_ta_graph.at[plot_time_index, 'BBMiddle_2nd'], df_futures_cm_ta_graph.at[plot_time_index, 'BBLower_2nd'])
                    self.label_p6_2.setText(txt)
                else:
                    self.plot6_fibonacci_line1.setValue(근월물_선물_종가)
                    self.plot6_fibonacci_line2.setValue(근월물_선물_종가)
                    self.plot6_fibonacci_line3.setValue(근월물_선물_종가)
                    self.plot6_fibonacci_line4.setValue(근월물_선물_종가)
                    self.plot6_fibonacci_line5.setValue(근월물_선물_종가)

                    self.label_p6_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p6_2.setText(" BB Upper\n BB Middle\n BB Lower ")

                if flag_checkBox_plot6_psar:

                    self.parent.Calc_PSAR_MAMA('FUT')

                    self.plot6_psar_curve.setData(df_futures_cm_ta_graph['PSAR'][0:plot_time_index+1].astype(float))

                    #self.plot6_sslup_curve.setData(df_futures_cm_ta_graph['SSLUp'][0:plot_time_index+1].astype(float))
                    #self.plot6_ssldown_curve.setData(df_futures_cm_ta_graph['SSLDown'][0:plot_time_index+1].astype(float))

                    self.plot6_mama_curve.setData(df_futures_cm_ta_graph['MAMA'].astype(float))
                    df = df_futures_cm_ta_graph['FAMA'].apply(lambda x: 근월물_선물_저가 if x < 근월물_선물_저가 else x)
                    self.plot6_fama_curve.setData(df.astype(float))

                    if df_futures_cm_ta_graph.at[plot_time_index, 'PSAR'] > df_futures_cm_ta_graph.at[plot_time_index, 'Price'] and df_futures_cm_ta_graph.at[plot_time_index, 'MAMA'] < df_futures_cm_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p6_3.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_futures_cm_ta_graph.at[plot_time_index, 'PSAR'] < df_futures_cm_ta_graph.at[plot_time_index, 'Price'] and df_futures_cm_ta_graph.at[plot_time_index, 'MAMA'] > df_futures_cm_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p6_3.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold') 
                    else:
                        self.label_p6_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " PSAR: {0:.2f}\n MAMA: {1:.2f}\n FAMA: {2:.2f} ".format(df_futures_cm_ta_graph.at[plot_time_index, 'PSAR'], df_futures_cm_ta_graph.at[plot_time_index, 'MAMA'], df_futures_cm_ta_graph.at[plot_time_index, 'FAMA'])
                    self.label_p6_3.setText(txt)
                else:
                    self.label_p6_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p6_3.setText(" PSAR\n MAMA ")
                
                if flag_checkBox_plot6_one_eye:

                    self.plot6_oe_conv_curve.setData(df_futures_cm_ta_graph['OE_CONV'].astype(float))
                    self.plot6_oe_base_curve.setData(df_futures_cm_ta_graph['OE_BASE'].astype(float))
                    self.plot6_span_a_curve.setData(df_futures_cm_ta_graph['SPAN_A'].astype(float))
                    self.plot6_span_b_curve.setData(df_futures_cm_ta_graph['SPAN_B'].astype(float))

                    if flag_one_eye_lagging_span:
                        self.plot6_lagging_span_curve.setData(df_futures_cm_ta_graph['LAGGING_SPAN'].astype(float))

                    if df_futures_cm_ta_graph.at[plot_time_index, 'OE_CONV'] < df_futures_cm_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_futures_cm_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] < df_futures_cm_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p6_4.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_futures_cm_ta_graph.at[plot_time_index, 'OE_CONV'] > df_futures_cm_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_futures_cm_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] > df_futures_cm_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p6_4.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p6_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " 기준선: {0:.2f}\n 전환선: {1:.2f}\n SPAN A: {2:.2f} \n SPAN B: {3:.2f} ".format\
                        (df_futures_cm_ta_graph.at[plot_time_index, 'OE_BASE'], df_futures_cm_ta_graph.at[plot_time_index, 'OE_CONV'], \
                            df_futures_cm_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'], df_futures_cm_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B'])
                    self.label_p6_4.setText(txt)
                    
                else:
                    self.label_p6_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p6_4.setText(" ONE EYE ")

            elif comboindex6 == 3:
                
                self.plot6_time_line.setValue(plot_time_index)

                txt = " {0:.2f}({1:.0f}/{2:.0f}) ".format(풋잔량비, put_quote['매수잔량'], put_quote['매도잔량'])
                self.label_66.setText(txt)

                txt = " CM: {0:.2f}({1:.0f}/{2:.0f}), NM: {3:.2f}({4:.0f}/{5:.0f}), [▼: {6:.2f}, ▲: {7:.2f}] ".format(\
                    선물_근월물_호가_잔량비, 근월물_매수호가_총수량, 근월물_매도호가_총수량, 선물_차월물_호가_잔량비, \
                    차월물_매수호가_총수량, 차월물_매도호가_총수량, 차월물_선물_호가잔량비_최소, 차월물_선물_호가잔량비_최대)

                if fut_quote_energy_direction == 'call':
                    self.label_67.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                elif fut_quote_energy_direction == 'put':
                    self.label_67.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                else:
                    self.label_67.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                self.label_67.setText(txt)
                
                txt = " {0:.2f}({1:.0f}/{2:.0f}) ".format(콜잔량비, call_quote['매수잔량'], call_quote['매도잔량'])
                self.label_68.setText(txt)

                self.plot6_call_quote_curve.setData(df_call_information_graph['quote_remainder_ratio'].astype(float))
                self.plot6_put_quote_curve.setData(df_put_information_graph['quote_remainder_ratio'].astype(float))

                if DayTime:
                    self.plot6_fut_cm_quote_remainder_ratio_curve.setData(df_futures_cm_graph['c_quote_remainder_ratio'].astype(float))
                    self.plot6_fut_nm_quote_remainder_ratio_curve.setData(df_futures_cm_graph['n_quote_remainder_ratio'].astype(float))
                    self.plot6_nm_futures_quote_remainder_ratio_bottom_line.setValue(차월물_선물_호가잔량비_최소)
                    self.plot6_nm_futures_quote_remainder_ratio_upper_line.setValue(차월물_선물_호가잔량비_최대)
                else:
                    pass

            elif comboindex6 == 4:
                
                self.plot6_time_line.setValue(plot_time_index)
                
                txt = " {0:.0f} ".format(put_volume_power)
                self.label_66.setText(txt)

                txt = " {0:.0f} ".format(fut_cm_volume_power)

                if fut_cm_volume_power > 0:
                    self.label_67.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                else:
                    self.label_67.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                self.label_67.setText(txt)
                
                txt = " {0:.0f} ".format(call_volume_power)
                self.label_68.setText(txt)

                if DayTime:
                    self.plot6_fut_volume_curve.setData(df_futures_cm_graph['Volume'].astype(float))
                else:
                    pass
                                
                self.plot6_call_volume_curve.setData(df_call_information_graph['Volume'].astype(float))
                self.plot6_put_volume_curve.setData(df_put_information_graph['Volume'].astype(float))

            # 옵션가격
            elif comboindex6 == 5:
                
                self.plot6_time_line.setValue(plot_time_index)

                if DayTime:

                    # 등가표시
                    txt = ' 등가: {0} '.format(atm_txt)
                    self.label_61.setText(txt)

                    txt = ' 시작 중심가: {0:.2f} '.format(INIT_CENTER_VAL)
                    self.label_62.setText(txt)

                    txt = ' 하단: {0:.2f} '.format(옵션_중심가/GOLDEN_RATIO)

                    self.label_63.setText(txt)

                    txt = ' 상단: {0:.2f} '.format(옵션_중심가*GOLDEN_RATIO)
                    self.label_64.setText(txt)

                    txt = ' {0:.2f}({1:.2f}, {2:.2f}%) '.format(put_atm_value, df_put.at[ATM_INDEX, '대비'], (put_atm_value / df_put.at[ATM_INDEX, '시가'] - 1) * 100)
                    self.label_66.setText(txt)

                    txt = ' 중심가: {0:.2f} '.format(옵션_중심가)
                    self.label_67.setText(txt)

                    txt = ' {0:.2f}({1:.2f}, {2:.2f}%) '.format(call_atm_value, df_call.at[ATM_INDEX, '대비'], (call_atm_value / df_call.at[ATM_INDEX, '시가'] - 1) * 100)
                    self.label_68.setText(txt)
                else:
                    pass 

                if flag_calltable_checkstate_changed:
                    flag_calltable_checkstate_changed = False
                    for i in range(option_pairs_count):
                        self.plot6_call_curve[i].clear()
                else:
                    pass

                if flag_puttable_checkstate_changed:
                    flag_puttable_checkstate_changed = False
                    for i in range(option_pairs_count):
                        self.plot6_put_curve[i].clear()
                else:
                    pass

                # 선택된 콜그래프 그리기
                if selected_call:
                    for i in range(len(selected_call)):
                        self.plot6_call_curve[i].setData(df_call_graph[selected_call[i]]['Price'].astype(float))
                else:
                    pass                 

                # 선택된 풋그래프 그리기
                if selected_put:
                    for i in range(len(selected_put)):
                        self.plot6_put_curve[i].setData(df_put_graph[selected_put[i]]['Price'].astype(float))
                else:
                    pass                
                
                if DayTime:     
                    self.plot6_center_val_lower_line.setValue(옵션_중심가/GOLDEN_RATIO)
                    self.plot6_center_val_line.setValue(옵션_중심가)
                    self.plot6_center_val_upper_line.setValue(옵션_중심가*GOLDEN_RATIO)

                    self.plot6_center_val_curve.setData(df_call_information_graph['centerval'].astype(float))
                else:
                    pass

            elif comboindex6 == 6:
                
                self.plot6_time_line.setValue(plot_time_index)

                txt = " {0:.2f}({1:.0f}/{2:.0f}), [▼, ▲: {4:.2f}] ".format(풋잔량비, put_quote['매수잔량'], put_quote['매도잔량'], 풋_잔량비_최소, 풋_잔량비_최대)
                self.label_66.setText(txt)
                
                txt = " {0:.2f}({1:.0f}/{2:.0f}), [▼, ▲: {4:.2f}] ".format(콜잔량비, call_quote['매수잔량'], call_quote['매도잔량'], 콜_잔량비_최소, 콜_잔량비_최대)
                self.label_68.setText(txt)

                self.plot6_call_quote_curve.setData(df_call_information_graph['quote_remainder_ratio'].astype(float))
                self.plot6_put_quote_curve.setData(df_put_information_graph['quote_remainder_ratio'].astype(float))

                self.plot6_option_quote_remainder_ratio_bottom_line.setValue(옵션_잔량비_최소)
                self.plot6_option_quote_remainder_ratio_upper_line.setValue(옵션_잔량비_최대)        

            elif comboindex6 == 7:
                
                self.plot6_time_line.setValue(plot_time_index)

                txt = " {0:.2f}({1:.2f}) ".format(풋_수정미결퍼센트, put_oi_init_percent)
                self.label_66.setText(txt)
                
                txt = " {0:.2f}({1:.2f}) ".format(콜_수정미결퍼센트, call_oi_init_percent)
                self.label_68.setText(txt)

                self.plot6_call_oi_curve.setData(df_call_information_graph['open_interest'].astype(float))
                self.plot6_put_oi_curve.setData(df_put_information_graph['open_interest'].astype(float))
                                    
            elif comboindex6 == 8:
                
                self.plot6_time_line.setValue(plot_time_index)

                txt = " {0:.2f}({1}) {2:.2f} ".format(SP500_시가대비_등락율, SP500_현재가, SP500_FUT_시가_등락율비)
                self.label_65.setText(txt)

                txt = " {0:.2f}({1}) ".format(put_otm_cdb_percent_mean, put_atm_value)
                self.label_66.setText(txt)

                txt = " {0:.2f}({1}) ".format(call_otm_cdb_percent_mean, call_atm_value)
                self.label_68.setText(txt)
                
                self.plot6_call_drate_curve.setData(df_call_information_graph['Drate'].astype(float))
                self.plot6_put_drate_curve.setData(df_put_information_graph['Drate'].astype(float))
                
                self.plot6_cme_drate_curve.setData(SP500_FUT_시가_등락율비 * df_sp500_graph['Drate'].astype(float) + DRATE_OFFSET)
                
                if DayTime:

                    txt = " {0:.2f}({1}), Gap : {2:.2f} ".format(근월물_선물_시가대비_등락율, 근월물_선물_현재가, drate_gap)

                    if drate_gap > 0:
                        self.label_67.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif drate_gap < 0:
                        self.label_67.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_67.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_67.setText(txt)

                    if not np.isnan(df_futures_cm_graph.at[plot_time_index, 'Drate']):
                        self.plot6_fut_cm_drate_curve.setData(plot_drate_scale_factor * df_futures_cm_graph['Drate'].astype(float))

                    if not np.isnan(df_futures_nm_graph.at[plot_time_index, 'Drate']):
                        self.plot6_fut_nm_drate_curve.setData(plot_drate_scale_factor * df_futures_nm_graph['Drate'].astype(float))                        
                else:
                    pass 
            
            elif comboindex6 == 10:
                
                self.plot6_time_line.setValue(plot_time_index)

                if DayTime:
                    txt = " 기관현물: {0} ".format(기관현물_순매수)
                    self.label_61.setText(txt)

                    txt = " 기관선물: {0} ".format(기관선물_순매수)
                    self.label_62.setText(txt)

                    txt = " 개인현물: {0} ".format(개인현물_순매수)
                    self.label_63.setText(txt)

                    txt = " 개인선물: {0} ".format(개인선물_순매수)
                    self.label_64.setText(txt)

                    if 프로그램_순매수 > 0 and 현물_총순매수 > 0:

                        if 외인선물_순매수 < 0 and 외인현물_순매수 < 0:
                            txt = ' - '
                            self.label_65.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                            self.label_65.setText(txt)

                        if (외인선물_순매수 < 0 and 외인현물_순매수 > 0) or (외인선물_순매수 > 0 and 외인현물_순매수 < 0):
                            txt = ' 외인수급 Cross '
                            self.label_65.setStyleSheet('background-color: black; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                            self.label_65.setText(txt)

                        if 외인선물_순매수 > 0 and 외인현물_순매수 > 0:
                            txt = ' 수급 Call! '
                            self.label_65.setStyleSheet('background-color: magenta; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                            self.label_65.setText(txt)

                    elif 프로그램_순매수 < 0 and 현물_총순매수 < 0:

                        if 외인선물_순매수 > 0 and 외인현물_순매수 > 0:
                            txt = ' - '
                            self.label_65.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                            self.label_65.setText(txt)

                        if (외인선물_순매수 > 0 and 외인현물_순매수 < 0) or (외인선물_순매수 < 0 and 외인현물_순매수 > 0):
                            txt = ' 외인수급 Cross '
                            self.label_65.setStyleSheet('background-color: black; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                            self.label_65.setText(txt)          

                        if 외인선물_순매수 < 0 and 외인현물_순매수 < 0:
                            txt = ' 수급 Put! '
                            self.label_65.setStyleSheet('background-color: cyan; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                            self.label_65.setText(txt)
                    else:
                        txt = ' 수급종합 Cross '
                        self.label_65.setStyleSheet('background-color: black; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                        self.label_65.setText(txt)

                    if not np.isnan(프로그램_순매수):
                        txt = " Prog/F.S: {0:.0f}/{1:.0f} ".format(프로그램_순매수, 외인현물_순매수)

                        if 프로그램_순매수 <= 0:
                            self.label_66.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                        else:
                            self.label_66.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                        self.label_66.setText(txt)
                    else:
                        pass

                    txt = " {0:.0f} ".format(fut_cm_volume_power)

                    if fut_cm_volume_power > 0:
                        self.label_67.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_67.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_67.setText(txt)
                    
                    if not np.isnan(현물_총순매수):
                        txt = " S.S/F.F: {0:.0f}/{1:.0f} ".format(현물_총순매수, 외인선물_순매수)

                        if 현물_총순매수 <= 0:
                            self.label_68.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                        else:
                            self.label_68.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                        self.label_68.setText(txt)
                    else:
                        pass

                    self.plot6_fut_volume_curve.setData(df_futures_cm_graph['Volume'].astype(float))
                    self.plot6_program_curve.setData(df_demand_supply_graph['Program'].astype(float))

                    df = df_demand_supply_graph['kospi_total'].apply(lambda x: np.nan if x == 0 else x)
                    df.at[0] = 0

                    self.plot6_kospi_total_curve.setData(df.astype(float))

                    self.plot6_kospi_foreigner_curve.setData(df_demand_supply_graph['kospi_foreigner'].astype(float))
                    self.plot6_futures_foreigner_curve.setData(df_demand_supply_graph['futures_foreigner'].astype(float))
                else:
                    pass

            elif comboindex6 == 11:
                
                pass
                '''
                self.plot6_time_line.setValue(plot_time_index)

                if DayTime:
                    txt = " 기관현물 : {0} ".format(기관현물_순매수)
                    self.label_61.setText(txt)

                    txt = " 기관선물 : {0} ".format(기관선물_순매수)
                    self.label_62.setText(txt)

                    txt = " 개인현물 : {0} ".format(개인현물_순매수)
                    self.label_63.setText(txt)

                    txt = " 개인선물 : {0} ".format(개인선물_순매수)
                    self.label_64.setText(txt)

                    if 프로그램_순매수 > 0 and 현물_총순매수 > 0:

                        if 외인선물_순매수 < 0 and 외인현물_순매수 < 0:
                            txt = ' - '
                            self.label_65.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                            self.label_65.setText(txt)

                        if (외인선물_순매수 < 0 and 외인현물_순매수 > 0) or (외인선물_순매수 > 0 and 외인현물_순매수 < 0):
                            txt = ' 외인수급 Cross '
                            self.label_65.setStyleSheet('background-color: black; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                            self.label_65.setText(txt)

                        if 외인선물_순매수 > 0 and 외인현물_순매수 > 0:
                            txt = ' 수급 Call! '
                            self.label_65.setStyleSheet('background-color: magenta; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                            self.label_65.setText(txt)

                    elif 프로그램_순매수 < 0 and 현물_총순매수 < 0:

                        if 외인선물_순매수 > 0 and 외인현물_순매수 > 0:
                            txt = ' - '
                            self.label_65.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                            self.label_65.setText(txt)

                        if (외인선물_순매수 > 0 and 외인현물_순매수 < 0) or (외인선물_순매수 < 0 and 외인현물_순매수 > 0):
                            txt = ' 외인수급 Cross '
                            self.label_65.setStyleSheet('background-color: black; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                            self.label_65.setText(txt)          

                        if 외인선물_순매수 < 0 and 외인현물_순매수 < 0:
                            txt = ' 수급 Put! '
                            self.label_65.setStyleSheet('background-color: cyan; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                            self.label_65.setText(txt)
                    else:
                        txt = ' 수급종합 Cross '
                        self.label_65.setStyleSheet('background-color: black; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                        self.label_65.setText(txt)

                    if not np.isnan(외인현물_순매수):
                        txt = " 외인현물 : {0:.0f} ".format(외인현물_순매수)

                        if 외인현물_순매수 <= 0:
                            self.label_66.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                        else:
                            self.label_66.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                        self.label_66.setText(txt)
                    else:
                        pass

                    txt = " {0:.0f} ".format(fut_cm_volume_power)

                    if fut_cm_volume_power > 0:
                        self.label_67.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_67.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_67.setText(txt)
                    
                    if not np.isnan(외인선물_순매수):
                        txt = " 외인선물 : {0:.0f} ".format(외인선물_순매수)

                        if 외인선물_순매수 <= 0:
                            self.label_68.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                        else:
                            self.label_68.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                        self.label_68.setText(txt)
                    else:
                        pass
                    
                    self.plot6_fut_volume_curve.setData(df_futures_cm_graph['Volume'].astype(float))
                    self.plot6_kospi_foreigner_curve.setData(df_demand_supply_graph['kospi_foreigner'].astype(float))
                    self.plot6_futures_foreigner_curve.setData(df_demand_supply_graph['futures_foreigner'].astype(float))                    
                else:
                    pass
                '''

            elif comboindex6 == 13:
                
                self.plot6_time_line.setValue(plot_time_index)
                
                txt = ' {0} '.format(format(SP500_저가, ','))
                self.label_66.setText(txt)

                tmp = self.label_67.text().split()[0]
                과거가 =  tmp.replace(',', '')                

                if SP500_현재가 > float(과거가):

                    txt = " {0} ▲ ({1}, {2:0.1f}%, {3}) ".format(format(SP500_현재가, ','), SP500_종가대비, SP500_등락율, SP500_진폭_틱)

                    if SP500_종가대비 > 0:
                        self.label_67.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif SP500_종가대비 < 0:
                        self.label_67.setStyleSheet('background-color: pink; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_67.setStyleSheet('background-color: pink; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_67.setText(txt)

                elif SP500_현재가 < float(과거가):

                    txt = " {0} ▼ ({1}, {2:0.1f}%, {3}) ".format(format(SP500_현재가, ','), SP500_종가대비, SP500_등락율, SP500_진폭_틱)

                    if SP500_종가대비 > 0:
                        self.label_67.setStyleSheet('background-color: skyblue; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif SP500_종가대비 < 0:
                        self.label_67.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_67.setStyleSheet('background-color: skyblue; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_67.setText(txt)
                else:
                    pass

                txt = ' {0} '.format(format(SP500_고가, ','))
                self.label_68.setText(txt)

                self.plot6_ovc_jl_line.setValue(SP500_전저)
                self.plot6_ovc_jh_line.setValue(SP500_전고)
                self.plot6_ovc_close_line.setValue(SP500_전일종가)
                self.plot6_ovc_open_line.setValue(SP500_시가)
                self.plot6_ovc_pivot_line.setValue(SP500_피봇)
                self.plot6_ovc_low_line.setValue(SP500_저가)
                self.plot6_ovc_high_line.setValue(SP500_고가)

                self.plot6_sp500_curve.setData(df_sp500_graph['Price'].astype(float))

                if flag_checkBox_plot6_bband:

                    self.parent.Calc_Bollinger('SP500')

                    self.plot6_bollinger_1st_upper_curve.setData(df_sp500_ta_graph['BBUpper_1st'].astype(float))
                    self.plot6_bollinger_1st_middle_curve.setData(df_sp500_ta_graph['BBMiddle_1st'].astype(float))
                    self.plot6_bollinger_1st_lower_curve.setData(df_sp500_ta_graph['BBLower_1st'].astype(float))
                    self.plot6_bollinger_2nd_upper_curve.setData(df_sp500_ta_graph['BBUpper_2nd'].astype(float))
                    self.plot6_bollinger_2nd_middle_curve.setData(df_sp500_ta_graph['BBMiddle_2nd'].astype(float))
                    self.plot6_bollinger_2nd_lower_curve.setData(df_sp500_ta_graph['BBLower_2nd'].astype(float))

                    self.plot6_fibonacci_line1.setValue(sp500_fibonacci_levels[1])
                    self.plot6_fibonacci_line2.setValue(sp500_fibonacci_levels[2])
                    self.plot6_fibonacci_line3.setValue(sp500_fibonacci_levels[3])
                    self.plot6_fibonacci_line4.setValue(sp500_fibonacci_levels[4])
                    self.plot6_fibonacci_line5.setValue(sp500_fibonacci_levels[5])

                    if df_sp500_ta_graph.at[plot_time_index, 'BBMiddle_2nd'] >= df_sp500_ta_graph.at[plot_time_index, 'Price']:
                        self.label_p6_2.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p6_2.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " BB U: {0:.2f}\n BB M: {1:.2f}\n BB L: {2:.2f} ".format\
                        (df_sp500_ta_graph.at[plot_time_index, 'BBUpper_2nd'], df_sp500_ta_graph.at[plot_time_index, 'BBMiddle_2nd'], df_sp500_ta_graph.at[plot_time_index, 'BBLower_2nd'])
                    self.label_p6_2.setText(txt)
                else:
                    self.plot6_fibonacci_line1.setValue(SP500_전일종가)
                    self.plot6_fibonacci_line2.setValue(SP500_전일종가)
                    self.plot6_fibonacci_line3.setValue(SP500_전일종가)
                    self.plot6_fibonacci_line4.setValue(SP500_전일종가)
                    self.plot6_fibonacci_line5.setValue(SP500_전일종가)

                    self.label_p6_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p6_2.setText(" BB Upper\n BB Middle\n BB Lower ")

                if flag_checkBox_plot6_psar:

                    self.parent.Calc_PSAR_MAMA('SP500')

                    self.plot6_psar_curve.setData(df_sp500_ta_graph['PSAR'][0:plot_time_index+1].astype(float))

                    #self.plot6_sslup_curve.setData(df_sp500_ta_graph['SSLUp'][0:plot_time_index+1].astype(float))
                    #self.plot6_ssldown_curve.setData(df_sp500_ta_graph['SSLDown'][0:plot_time_index+1].astype(float))

                    self.plot6_mama_curve.setData(df_sp500_ta_graph['MAMA'].astype(float))
                    df = df_sp500_ta_graph['FAMA'].apply(lambda x: SP500_저가 if x < SP500_저가 else x)
                    self.plot6_fama_curve.setData(df.astype(float))

                    if df_sp500_ta_graph.at[plot_time_index, 'PSAR'] > df_sp500_ta_graph.at[plot_time_index, 'Price'] and df_sp500_ta_graph.at[plot_time_index, 'MAMA'] < df_sp500_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p6_3.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_sp500_ta_graph.at[plot_time_index, 'PSAR'] < df_sp500_ta_graph.at[plot_time_index, 'Price'] and df_sp500_ta_graph.at[plot_time_index, 'MAMA'] > df_sp500_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p6_3.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold') 
                    else:
                        self.label_p6_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " PSAR: {0:.2f}\n MAMA: {1:.2f}\n FAMA: {2:.2f} ".format(df_sp500_ta_graph.at[plot_time_index, 'PSAR'], df_sp500_ta_graph.at[plot_time_index, 'MAMA'], df_sp500_ta_graph.at[plot_time_index, 'FAMA'])
                    self.label_p6_3.setText(txt)
                else:
                    self.label_p6_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p6_3.setText(" PSAR\n MAMA ")
                
                if flag_checkBox_plot6_one_eye:

                    self.plot6_oe_conv_curve.setData(df_sp500_ta_graph['OE_CONV'].astype(float))
                    self.plot6_oe_base_curve.setData(df_sp500_ta_graph['OE_BASE'].astype(float))
                    self.plot6_span_a_curve.setData(df_sp500_ta_graph['SPAN_A'].astype(float))
                    self.plot6_span_b_curve.setData(df_sp500_ta_graph['SPAN_B'].astype(float))

                    if flag_one_eye_lagging_span:
                        self.plot6_lagging_span_curve.setData(df_sp500_ta_graph['LAGGING_SPAN'].astype(float))

                    if df_sp500_ta_graph.at[plot_time_index, 'OE_CONV'] < df_sp500_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_sp500_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] < df_sp500_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p6_4.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_sp500_ta_graph.at[plot_time_index, 'OE_CONV'] > df_sp500_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_sp500_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] > df_sp500_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p6_4.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p6_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " 기준선: {0:.2f}\n 전환선: {1:.2f}\n SPAN A: {2:.2f} \n SPAN B: {3:.2f} ".format\
                        (df_sp500_ta_graph.at[plot_time_index, 'OE_BASE'], df_sp500_ta_graph.at[plot_time_index, 'OE_CONV'], \
                            df_sp500_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'], df_sp500_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B'])
                    self.label_p6_4.setText(txt)
                    
                else:
                    self.label_p6_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p6_4.setText(" ONE EYE ")

            elif comboindex6 == 14:
                
                self.plot6_time_line.setValue(plot_time_index)
                
                txt = ' {0} '.format(format(DOW_저가, ','))
                self.label_66.setText(txt)

                tmp = self.label_67.text().split()[0]
                과거가 =  tmp.replace(',', '')               

                if DOW_현재가 > float(과거가):

                    txt = " {0} ▲ ({1}, {2:0.1f}%, {3}) ".format(format(DOW_현재가, ','), format(DOW_종가대비, ','), DOW_등락율, DOW_진폭_틱)

                    if DOW_종가대비 > 0:
                        self.label_67.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif DOW_종가대비 < 0:
                        self.label_67.setStyleSheet('background-color: pink; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_67.setStyleSheet('background-color: pink; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_67.setText(txt)

                elif DOW_현재가 < float(과거가):

                    txt = " {0} ▼ ({1}, {2:0.1f}%, {3}) ".format(format(DOW_현재가, ','), format(DOW_종가대비, ','), DOW_등락율, DOW_진폭_틱)

                    if DOW_종가대비 > 0:
                        self.label_67.setStyleSheet('background-color: skyblue; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif DOW_종가대비 < 0:
                        self.label_67.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_67.setStyleSheet('background-color: skyblue; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_67.setText(txt)
                else:
                    pass

                txt = ' {0} '.format(format(DOW_고가, ','))
                self.label_68.setText(txt)

                self.plot6_ovc_jl_line.setValue(DOW_전저)
                self.plot6_ovc_jh_line.setValue(DOW_전고)
                self.plot6_ovc_close_line.setValue(DOW_전일종가)
                self.plot6_ovc_open_line.setValue(DOW_시가)
                self.plot6_ovc_pivot_line.setValue(DOW_피봇)
                self.plot6_ovc_low_line.setValue(DOW_저가)
                self.plot6_ovc_high_line.setValue(DOW_고가)              

                self.plot6_dow_curve.setData(df_dow_graph['Price'].astype(float))

                if flag_checkBox_plot6_bband:

                    self.parent.Calc_Bollinger('DOW')
            
                    self.plot6_bollinger_1st_upper_curve.setData(df_dow_ta_graph['BBUpper_1st'].astype(float))
                    self.plot6_bollinger_1st_middle_curve.setData(df_dow_ta_graph['BBMiddle_1st'].astype(float))
                    self.plot6_bollinger_1st_lower_curve.setData(df_dow_ta_graph['BBLower_1st'].astype(float))
                    self.plot6_bollinger_2nd_upper_curve.setData(df_dow_ta_graph['BBUpper_2nd'].astype(float))
                    self.plot6_bollinger_2nd_middle_curve.setData(df_dow_ta_graph['BBMiddle_2nd'].astype(float))
                    self.plot6_bollinger_2nd_lower_curve.setData(df_dow_ta_graph['BBLower_2nd'].astype(float))

                    self.plot6_fibonacci_line1.setValue(dow_fibonacci_levels[1])
                    self.plot6_fibonacci_line2.setValue(dow_fibonacci_levels[2])
                    self.plot6_fibonacci_line3.setValue(dow_fibonacci_levels[3])
                    self.plot6_fibonacci_line4.setValue(dow_fibonacci_levels[4])
                    self.plot6_fibonacci_line5.setValue(dow_fibonacci_levels[5])

                    if df_dow_ta_graph.at[plot_time_index, 'BBMiddle_2nd'] >= df_dow_ta_graph.at[plot_time_index, 'Price']:
                        self.label_p6_2.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p6_2.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " BB U: {0:.0f}\n BB M: {1:.0f}\n BB L: {2:.0f} ".format\
                        (df_dow_ta_graph.at[plot_time_index, 'BBUpper_2nd'], df_dow_ta_graph.at[plot_time_index, 'BBMiddle_2nd'], df_dow_ta_graph.at[plot_time_index, 'BBLower_2nd'])
                    self.label_p6_2.setText(txt)
                else:
                    self.plot6_fibonacci_line1.setValue(DOW_전일종가)
                    self.plot6_fibonacci_line2.setValue(DOW_전일종가)
                    self.plot6_fibonacci_line3.setValue(DOW_전일종가)
                    self.plot6_fibonacci_line4.setValue(DOW_전일종가)
                    self.plot6_fibonacci_line5.setValue(DOW_전일종가)

                    self.label_p6_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p6_2.setText(" BB Upper\n BB Middle\n BB Lower ")

                if flag_checkBox_plot6_psar:

                    self.parent.Calc_PSAR_MAMA('DOW')

                    self.plot6_psar_curve.setData(df_dow_ta_graph['PSAR'][0:plot_time_index+1].astype(float))

                    #self.plot6_sslup_curve.setData(df_dow_ta_graph['SSLUp'][0:plot_time_index+1].astype(float))
                    #self.plot6_ssldown_curve.setData(df_dow_ta_graph['SSLDown'][0:plot_time_index+1].astype(float))

                    self.plot6_mama_curve.setData(df_dow_ta_graph['MAMA'].astype(float))
                    df = df_dow_ta_graph['FAMA'].apply(lambda x: DOW_저가 if x < DOW_저가 else x)
                    self.plot6_fama_curve.setData(df.astype(float))                        

                    if df_dow_ta_graph.at[plot_time_index, 'PSAR'] > df_dow_ta_graph.at[plot_time_index, 'Price'] and df_dow_ta_graph.at[plot_time_index, 'MAMA'] < df_dow_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p6_3.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_dow_ta_graph.at[plot_time_index, 'PSAR'] < df_dow_ta_graph.at[plot_time_index, 'Price'] and df_dow_ta_graph.at[plot_time_index, 'MAMA'] > df_dow_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p6_3.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold') 
                    else:
                        self.label_p6_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " PSAR: {0:.0f}\n MAMA: {1:.0f}\n FAMA: {2:.0f} ".format(df_dow_ta_graph.at[plot_time_index, 'PSAR'], df_dow_ta_graph.at[plot_time_index, 'MAMA'], df_dow_ta_graph.at[plot_time_index, 'FAMA'])
                    self.label_p6_3.setText(txt)
                else:
                    self.label_p6_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p6_3.setText(" PSAR\n MAMA ")
                
                if flag_checkBox_plot6_one_eye:

                    self.plot6_oe_conv_curve.setData(df_dow_ta_graph['OE_CONV'].astype(float))
                    self.plot6_oe_base_curve.setData(df_dow_ta_graph['OE_BASE'].astype(float))
                    self.plot6_span_a_curve.setData(df_dow_ta_graph['SPAN_A'].astype(float))
                    self.plot6_span_b_curve.setData(df_dow_ta_graph['SPAN_B'].astype(float))

                    if flag_one_eye_lagging_span:
                        self.plot6_lagging_span_curve.setData(df_dow_ta_graph['LAGGING_SPAN'].astype(float))

                    if df_dow_ta_graph.at[plot_time_index, 'OE_CONV'] < df_dow_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_dow_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] < df_dow_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p6_4.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_dow_ta_graph.at[plot_time_index, 'OE_CONV'] > df_dow_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_dow_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] > df_dow_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p6_4.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p6_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " 기준선: {0:.0f}\n 전환선: {1:.0f}\n SPAN A: {2:.0f} \n SPAN B: {3:.0f} ".format\
                        (df_dow_ta_graph.at[plot_time_index, 'OE_BASE'], df_dow_ta_graph.at[plot_time_index, 'OE_CONV'], \
                            df_dow_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'], df_dow_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B'])
                    self.label_p6_4.setText(txt)
                    
                else:
                    self.label_p6_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p6_4.setText(" ONE EYE ")  

            elif comboindex6 == 15:
                
                self.plot6_time_line.setValue(plot_time_index)
                
                txt = ' {0} '.format(format(NASDAQ_저가, ','))
                self.label_66.setText(txt)

                tmp = self.label_67.text().split()[0]
                과거가 =  tmp.replace(',', '')                

                if NASDAQ_현재가 > float(과거가):

                    txt = " {0} ▲ ({1}, {2:0.1f}%, {3}) ".format(format(NASDAQ_현재가, ','), format(NASDAQ_종가대비, ','), NASDAQ_등락율, NASDAQ_진폭_틱)

                    if NASDAQ_종가대비 > 0:
                        self.label_67.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif NASDAQ_종가대비 < 0:
                        self.label_67.setStyleSheet('background-color: pink; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_67.setStyleSheet('background-color: pink; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_67.setText(txt)

                elif NASDAQ_현재가 < float(과거가):

                    txt = " {0} ▼ ({1}, {2:0.1f}%, {3}) ".format(format(NASDAQ_현재가, ','), format(NASDAQ_종가대비, ','), NASDAQ_등락율, NASDAQ_진폭_틱)

                    if NASDAQ_종가대비 > 0:
                        self.label_67.setStyleSheet('background-color: skyblue; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif NASDAQ_종가대비 < 0:
                        self.label_67.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_67.setStyleSheet('background-color: skyblue; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_67.setText(txt)
                else:
                    pass

                txt = ' {0} '.format(format(NASDAQ_고가, ','))
                self.label_68.setText(txt)

                self.plot6_ovc_jl_line.setValue(NASDAQ_전저)
                self.plot6_ovc_jh_line.setValue(NASDAQ_전고)
                self.plot6_ovc_close_line.setValue(NASDAQ_전일종가)
                self.plot6_ovc_open_line.setValue(NASDAQ_시가)
                self.plot6_ovc_pivot_line.setValue(NASDAQ_피봇)
                self.plot6_ovc_low_line.setValue(NASDAQ_저가)
                self.plot6_ovc_high_line.setValue(NASDAQ_고가) 

                self.plot6_nasdaq_curve.setData(df_nasdaq_graph['Price'].astype(float))

                if flag_checkBox_plot6_bband:

                    self.parent.Calc_Bollinger('NASDAQ')
            
                    self.plot6_bollinger_1st_upper_curve.setData(df_nasdaq_ta_graph['BBUpper_1st'].astype(float))
                    self.plot6_bollinger_1st_middle_curve.setData(df_nasdaq_ta_graph['BBMiddle_1st'].astype(float))
                    self.plot6_bollinger_1st_lower_curve.setData(df_nasdaq_ta_graph['BBLower_1st'].astype(float))
                    self.plot6_bollinger_2nd_upper_curve.setData(df_nasdaq_ta_graph['BBUpper_2nd'].astype(float))
                    self.plot6_bollinger_2nd_middle_curve.setData(df_nasdaq_ta_graph['BBMiddle_2nd'].astype(float))
                    self.plot6_bollinger_2nd_lower_curve.setData(df_nasdaq_ta_graph['BBLower_2nd'].astype(float))

                    self.plot6_fibonacci_line1.setValue(nasdaq_fibonacci_levels[1])
                    self.plot6_fibonacci_line2.setValue(nasdaq_fibonacci_levels[2])
                    self.plot6_fibonacci_line3.setValue(nasdaq_fibonacci_levels[3])
                    self.plot6_fibonacci_line4.setValue(nasdaq_fibonacci_levels[4])
                    self.plot6_fibonacci_line5.setValue(nasdaq_fibonacci_levels[5])

                    if df_nasdaq_ta_graph.at[plot_time_index, 'BBMiddle_2nd'] >= df_nasdaq_ta_graph.at[plot_time_index, 'Price']:
                        self.label_p6_2.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p6_2.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " BB U: {0:.2f}\n BB M: {1:.2f}\n BB L: {2:.2f} ".format\
                        (df_nasdaq_ta_graph.at[plot_time_index, 'BBUpper_2nd'], df_nasdaq_ta_graph.at[plot_time_index, 'BBMiddle_2nd'], df_nasdaq_ta_graph.at[plot_time_index, 'BBLower_2nd'])
                    self.label_p6_2.setText(txt)
                else:
                    self.plot6_fibonacci_line1.setValue(NASDAQ_전일종가)
                    self.plot6_fibonacci_line2.setValue(NASDAQ_전일종가)
                    self.plot6_fibonacci_line3.setValue(NASDAQ_전일종가)
                    self.plot6_fibonacci_line4.setValue(NASDAQ_전일종가)
                    self.plot6_fibonacci_line5.setValue(NASDAQ_전일종가)

                    self.label_p6_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p6_2.setText(" BB Upper\n BB Middle\n BB Lower ")

                if flag_checkBox_plot6_psar:

                    self.parent.Calc_PSAR_MAMA('NASDAQ')

                    self.plot6_psar_curve.setData(df_nasdaq_ta_graph['PSAR'][0:plot_time_index+1].astype(float))

                    #self.plot6_sslup_curve.setData(df_nasdaq_ta_graph['SSLUp'][0:plot_time_index+1].astype(float))
                    #self.plot6_ssldown_curve.setData(df_nasdaq_ta_graph['SSLDown'][0:plot_time_index+1].astype(float))

                    self.plot6_mama_curve.setData(df_nasdaq_ta_graph['MAMA'].astype(float))
                    df = df_nasdaq_ta_graph['FAMA'].apply(lambda x: NASDAQ_저가 if x < NASDAQ_저가 else x)
                    self.plot6_fama_curve.setData(df.astype(float))                        

                    if df_nasdaq_ta_graph.at[plot_time_index, 'PSAR'] > df_nasdaq_ta_graph.at[plot_time_index, 'Price'] and df_nasdaq_ta_graph.at[plot_time_index, 'MAMA'] < df_nasdaq_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p6_3.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_nasdaq_ta_graph.at[plot_time_index, 'PSAR'] < df_nasdaq_ta_graph.at[plot_time_index, 'Price'] and df_nasdaq_ta_graph.at[plot_time_index, 'MAMA'] > df_nasdaq_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p6_3.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold') 
                    else:
                        self.label_p6_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " PSAR: {0:.2f}\n MAMA: {1:.2f}\n FAMA: {2:.2f} ".format(df_nasdaq_ta_graph.at[plot_time_index, 'PSAR'], df_nasdaq_ta_graph.at[plot_time_index, 'MAMA'], df_nasdaq_ta_graph.at[plot_time_index, 'FAMA'])
                    self.label_p6_3.setText(txt)
                else:
                    self.label_p6_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p6_3.setText(" PSAR\n MAMA ")
                
                if flag_checkBox_plot6_one_eye:

                    self.plot6_oe_conv_curve.setData(df_nasdaq_ta_graph['OE_CONV'].astype(float))
                    self.plot6_oe_base_curve.setData(df_nasdaq_ta_graph['OE_BASE'].astype(float))
                    self.plot6_span_a_curve.setData(df_nasdaq_ta_graph['SPAN_A'].astype(float))
                    self.plot6_span_b_curve.setData(df_nasdaq_ta_graph['SPAN_B'].astype(float))

                    if flag_one_eye_lagging_span:
                        self.plot6_lagging_span_curve.setData(df_nasdaq_ta_graph['LAGGING_SPAN'].astype(float))

                    if df_nasdaq_ta_graph.at[plot_time_index, 'OE_CONV'] < df_nasdaq_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_nasdaq_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] < df_nasdaq_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p6_4.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_nasdaq_ta_graph.at[plot_time_index, 'OE_CONV'] > df_nasdaq_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_nasdaq_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] > df_nasdaq_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p6_4.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p6_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " 기준선: {0:.2f}\n 전환선: {1:.2f}\n SPAN A: {2:.2f} \n SPAN B: {3:.2f} ".format\
                        (df_nasdaq_ta_graph.at[plot_time_index, 'OE_BASE'], df_nasdaq_ta_graph.at[plot_time_index, 'OE_CONV'], \
                            df_nasdaq_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'], df_nasdaq_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B'])
                    self.label_p6_4.setText(txt)
                    
                else:
                    self.label_p6_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p6_4.setText(" ONE EYE ")

            elif comboindex6 == 16:
                
                self.plot6_time_line.setValue(plot_time_index)

                txt = ' {0} '.format(format(HANGSENG_저가, ','))
                self.label_66.setText(txt)

                tmp = self.label_67.text().split()[0]
                과거가 =  tmp.replace(',', '')     

                if HANGSENG_현재가 > float(과거가):

                    txt = " {0} ▲ ({1}, {2:0.1f}%, {3}) ".format(format(HANGSENG_현재가, ','), HANGSENG_종가대비, HANGSENG_등락율, HANGSENG_진폭_틱)

                    if HANGSENG_종가대비 > 0:
                        self.label_67.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif HANGSENG_종가대비 < 0:
                        self.label_67.setStyleSheet('background-color: pink; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_67.setStyleSheet('background-color: pink; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_67.setText(txt)

                elif HANGSENG_현재가 < float(과거가):

                    txt = " {0} ▼ ({1}, {2:0.1f}%, {3}) ".format(format(HANGSENG_현재가, ','), HANGSENG_종가대비, HANGSENG_등락율, HANGSENG_진폭_틱)

                    if HANGSENG_종가대비 > 0:
                        self.label_67.setStyleSheet('background-color: skyblue; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif HANGSENG_종가대비 < 0:
                        self.label_67.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_67.setStyleSheet('background-color: skyblue; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_67.setText(txt)
                else:
                    pass

                txt = ' {0} '.format(format(HANGSENG_고가, ','))
                self.label_68.setText(txt)

                self.plot6_ovc_jl_line.setValue(HANGSENG_전저)
                self.plot6_ovc_jh_line.setValue(HANGSENG_전고)
                self.plot6_ovc_close_line.setValue(HANGSENG_전일종가)
                self.plot6_ovc_open_line.setValue(HANGSENG_시가)
                self.plot6_ovc_pivot_line.setValue(HANGSENG_피봇)
                self.plot6_ovc_low_line.setValue(HANGSENG_저가)
                self.plot6_ovc_high_line.setValue(HANGSENG_고가)                 

                self.plot6_hsi_curve.setData(df_hsi_graph['Price'].astype(float))                

                if flag_checkBox_plot6_bband:

                    self.parent.Calc_Bollinger('HSI')
            
                    self.plot6_bollinger_1st_upper_curve.setData(df_hsi_ta_graph['BBUpper_1st'].astype(float))
                    self.plot6_bollinger_1st_middle_curve.setData(df_hsi_ta_graph['BBMiddle_1st'].astype(float))
                    self.plot6_bollinger_1st_lower_curve.setData(df_hsi_ta_graph['BBLower_1st'].astype(float))
                    self.plot6_bollinger_2nd_upper_curve.setData(df_hsi_ta_graph['BBUpper_2nd'].astype(float))
                    self.plot6_bollinger_2nd_middle_curve.setData(df_hsi_ta_graph['BBMiddle_2nd'].astype(float))
                    self.plot6_bollinger_2nd_lower_curve.setData(df_hsi_ta_graph['BBLower_2nd'].astype(float))

                    self.plot6_fibonacci_line1.setValue(hsi_fibonacci_levels[1])
                    self.plot6_fibonacci_line2.setValue(hsi_fibonacci_levels[2])
                    self.plot6_fibonacci_line3.setValue(hsi_fibonacci_levels[3])
                    self.plot6_fibonacci_line4.setValue(hsi_fibonacci_levels[4])
                    self.plot6_fibonacci_line5.setValue(hsi_fibonacci_levels[5])

                    if df_hsi_ta_graph.at[plot_time_index, 'BBMiddle_2nd'] >= df_hsi_ta_graph.at[plot_time_index, 'Price']:
                        self.label_p6_2.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p6_2.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " BB U: {0:.0f}\n BB M: {1:.0f}\n BB L: {2:.0f} ".format\
                        (df_hsi_ta_graph.at[plot_time_index, 'BBUpper_2nd'], df_hsi_ta_graph.at[plot_time_index, 'BBMiddle_2nd'], df_hsi_ta_graph.at[plot_time_index, 'BBLower_2nd'])
                    self.label_p6_2.setText(txt)
                else:
                    self.plot6_fibonacci_line1.setValue(HANGSENG_전일종가)
                    self.plot6_fibonacci_line2.setValue(HANGSENG_전일종가)
                    self.plot6_fibonacci_line3.setValue(HANGSENG_전일종가)
                    self.plot6_fibonacci_line4.setValue(HANGSENG_전일종가)
                    self.plot6_fibonacci_line5.setValue(HANGSENG_전일종가)

                    self.label_p6_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p6_2.setText(" BB Upper\n BB Middle\n BB Lower ")

                if flag_checkBox_plot6_psar:

                    self.parent.Calc_PSAR_MAMA('HSI')

                    self.plot6_psar_curve.setData(df_hsi_ta_graph['PSAR'][0:plot_time_index+1].astype(float))

                    #self.plot6_sslup_curve.setData(df_hsi_ta_graph['SSLUp'][0:plot_time_index+1].astype(float))
                    #self.plot6_ssldown_curve.setData(df_hsi_ta_graph['SSLDown'][0:plot_time_index+1].astype(float))

                    self.plot6_mama_curve.setData(df_hsi_ta_graph['MAMA'].astype(float))
                    df = df_hsi_ta_graph['FAMA'].apply(lambda x: HANGSENG_저가 if x < HANGSENG_저가 else x)
                    self.plot6_fama_curve.setData(df.astype(float))                        

                    if df_hsi_ta_graph.at[plot_time_index, 'PSAR'] > df_hsi_ta_graph.at[plot_time_index, 'Price'] and df_hsi_ta_graph.at[plot_time_index, 'MAMA'] < df_hsi_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p6_3.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_hsi_ta_graph.at[plot_time_index, 'PSAR'] < df_hsi_ta_graph.at[plot_time_index, 'Price'] and df_hsi_ta_graph.at[plot_time_index, 'MAMA'] > df_hsi_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p6_3.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold') 
                    else:
                        self.label_p6_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " PSAR: {0:.0f}\n MAMA: {1:.0f}\n FAMA: {2:.0f} ".format(df_hsi_ta_graph.at[plot_time_index, 'PSAR'], df_hsi_ta_graph.at[plot_time_index, 'MAMA'], df_hsi_ta_graph.at[plot_time_index, 'FAMA'])
                    self.label_p6_3.setText(txt)
                else:
                    self.label_p6_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p6_3.setText(" PSAR\n MAMA ")
                
                if flag_checkBox_plot6_one_eye:

                    self.plot6_oe_conv_curve.setData(df_hsi_ta_graph['OE_CONV'].astype(float))
                    self.plot6_oe_base_curve.setData(df_hsi_ta_graph['OE_BASE'].astype(float))
                    self.plot6_span_a_curve.setData(df_hsi_ta_graph['SPAN_A'].astype(float))
                    self.plot6_span_b_curve.setData(df_hsi_ta_graph['SPAN_B'].astype(float))

                    if flag_one_eye_lagging_span:
                        self.plot6_lagging_span_curve.setData(df_hsi_ta_graph['LAGGING_SPAN'].astype(float))

                    if df_hsi_ta_graph.at[plot_time_index, 'OE_CONV'] < df_hsi_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_hsi_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] < df_hsi_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p6_4.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_hsi_ta_graph.at[plot_time_index, 'OE_CONV'] > df_hsi_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_hsi_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] > df_hsi_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p6_4.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p6_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " 기준선: {0:.0f}\n 전환선: {1:.0f}\n SPAN A: {2:.0f} \n SPAN B: {3:.0f} ".format\
                        (df_hsi_ta_graph.at[plot_time_index, 'OE_BASE'], df_hsi_ta_graph.at[plot_time_index, 'OE_CONV'], \
                            df_hsi_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'], df_hsi_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B'])
                    self.label_p6_4.setText(txt)
                    
                else:
                    self.label_p6_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p6_4.setText(" ONE EYE ")         

            elif comboindex6 == 17:
                
                self.plot6_time_line.setValue(plot_time_index)
                
                txt = ' {0} '.format(format(WTI_저가, ','))
                self.label_66.setText(txt)

                과거가 =  self.label_67.text().split()[0]             

                if WTI_현재가 > float(과거가):

                    txt = " {0} ▲ ({1}, {2:0.1f}%, {3}) ".format(WTI_현재가, WTI_종가대비, WTI_등락율, WTI_진폭_틱)

                    if WTI_종가대비 > 0:
                        self.label_67.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif WTI_종가대비 < 0:
                        self.label_67.setStyleSheet('background-color: pink; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_67.setStyleSheet('background-color: pink; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_67.setText(txt)

                elif WTI_현재가 < float(과거가):

                    txt = " {0} ▼ ({1}, {2:0.1f}%, {3}) ".format(WTI_현재가, WTI_종가대비, WTI_등락율, WTI_진폭_틱)

                    if WTI_종가대비 > 0:
                        self.label_67.setStyleSheet('background-color: skyblue; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif WTI_종가대비 < 0:
                        self.label_67.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_67.setStyleSheet('background-color: skyblue; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_67.setText(txt)
                else:
                    pass

                txt = ' {0} '.format(format(WTI_고가, ','))
                self.label_68.setText(txt)

                self.plot6_ovc_jl_line.setValue(WTI_전저)
                self.plot6_ovc_jh_line.setValue(WTI_전고)
                self.plot6_ovc_close_line.setValue(WTI_전일종가)
                self.plot6_ovc_open_line.setValue(WTI_시가)
                self.plot6_ovc_pivot_line.setValue(WTI_피봇)
                self.plot6_ovc_low_line.setValue(WTI_저가)
                self.plot6_ovc_high_line.setValue(WTI_고가)

                self.plot6_wti_curve.setData(df_wti_graph['Price'].astype(float))

                if flag_checkBox_plot6_bband:

                    self.parent.Calc_Bollinger('WTI')
            
                    self.plot6_bollinger_1st_upper_curve.setData(df_wti_ta_graph['BBUpper_1st'].astype(float))
                    self.plot6_bollinger_1st_middle_curve.setData(df_wti_ta_graph['BBMiddle_1st'].astype(float))
                    self.plot6_bollinger_1st_lower_curve.setData(df_wti_ta_graph['BBLower_1st'].astype(float))
                    self.plot6_bollinger_2nd_upper_curve.setData(df_wti_ta_graph['BBUpper_2nd'].astype(float))
                    self.plot6_bollinger_2nd_middle_curve.setData(df_wti_ta_graph['BBMiddle_2nd'].astype(float))
                    self.plot6_bollinger_2nd_lower_curve.setData(df_wti_ta_graph['BBLower_2nd'].astype(float))

                    self.plot6_fibonacci_line1.setValue(wti_fibonacci_levels[1])
                    self.plot6_fibonacci_line2.setValue(wti_fibonacci_levels[2])
                    self.plot6_fibonacci_line3.setValue(wti_fibonacci_levels[3])
                    self.plot6_fibonacci_line4.setValue(wti_fibonacci_levels[4])
                    self.plot6_fibonacci_line5.setValue(wti_fibonacci_levels[5])

                    if df_wti_ta_graph.at[plot_time_index, 'BBMiddle_2nd'] >= df_wti_ta_graph.at[plot_time_index, 'Price']:
                        self.label_p6_2.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p6_2.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " BB U: {0:.2f}\n BB M: {1:.2f}\n BB L: {2:.2f} ".format\
                        (df_wti_ta_graph.at[plot_time_index, 'BBUpper_2nd'], df_wti_ta_graph.at[plot_time_index, 'BBMiddle_2nd'], df_wti_ta_graph.at[plot_time_index, 'BBLower_2nd'])
                    self.label_p6_2.setText(txt)
                else:
                    self.plot6_fibonacci_line1.setValue(WTI_전일종가)
                    self.plot6_fibonacci_line2.setValue(WTI_전일종가)
                    self.plot6_fibonacci_line3.setValue(WTI_전일종가)
                    self.plot6_fibonacci_line4.setValue(WTI_전일종가)
                    self.plot6_fibonacci_line5.setValue(WTI_전일종가)

                    self.label_p6_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p6_2.setText(" BB Upper\n BB Middle\n BB Lower ")

                if flag_checkBox_plot6_psar:

                    self.parent.Calc_PSAR_MAMA('WTI')

                    self.plot6_psar_curve.setData(df_wti_ta_graph['PSAR'][0:plot_time_index+1].astype(float))

                    #self.plot6_sslup_curve.setData(df_wti_ta_graph['SSLUp'][0:plot_time_index+1].astype(float))
                    #self.plot6_ssldown_curve.setData(df_wti_ta_graph['SSLDown'][0:plot_time_index+1].astype(float))

                    self.plot6_mama_curve.setData(df_wti_ta_graph['MAMA'].astype(float))
                    df = df_wti_ta_graph['FAMA'].apply(lambda x: WTI_저가 if x < WTI_저가 else x)
                    self.plot6_fama_curve.setData(df.astype(float))                        

                    if df_wti_ta_graph.at[plot_time_index, 'PSAR'] > df_wti_ta_graph.at[plot_time_index, 'Price'] and df_wti_ta_graph.at[plot_time_index, 'MAMA'] < df_wti_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p6_3.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_wti_ta_graph.at[plot_time_index, 'PSAR'] < df_wti_ta_graph.at[plot_time_index, 'Price'] and df_wti_ta_graph.at[plot_time_index, 'MAMA'] > df_wti_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p6_3.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold') 
                    else:
                        self.label_p6_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " PSAR: {0:.2f}\n MAMA: {1:.2f}\n FAMA: {2:.2f} ".format(df_wti_ta_graph.at[plot_time_index, 'PSAR'], df_wti_ta_graph.at[plot_time_index, 'MAMA'], df_wti_ta_graph.at[plot_time_index, 'FAMA'])
                    self.label_p6_3.setText(txt)
                else:
                    self.label_p6_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p6_3.setText(" PSAR\n MAMA ")
                
                if flag_checkBox_plot6_one_eye:

                    self.plot6_oe_conv_curve.setData(df_wti_ta_graph['OE_CONV'].astype(float))
                    self.plot6_oe_base_curve.setData(df_wti_ta_graph['OE_BASE'].astype(float))
                    self.plot6_span_a_curve.setData(df_wti_ta_graph['SPAN_A'].astype(float))
                    self.plot6_span_b_curve.setData(df_wti_ta_graph['SPAN_B'].astype(float))

                    if flag_one_eye_lagging_span:
                        self.plot6_lagging_span_curve.setData(df_wti_ta_graph['LAGGING_SPAN'].astype(float))

                    if df_wti_ta_graph.at[plot_time_index, 'OE_CONV'] < df_wti_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_wti_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] < df_wti_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p6_4.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_wti_ta_graph.at[plot_time_index, 'OE_CONV'] > df_wti_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_wti_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] > df_wti_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p6_4.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p6_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " 기준선: {0:.2f}\n 전환선: {1:.2f}\n SPAN A: {2:.2f} \n SPAN B: {3:.2f} ".format\
                        (df_wti_ta_graph.at[plot_time_index, 'OE_BASE'], df_wti_ta_graph.at[plot_time_index, 'OE_CONV'], \
                            df_wti_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'], df_wti_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B'])
                    self.label_p6_4.setText(txt)
                    
                else:
                    self.label_p6_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p6_4.setText(" ONE EYE ")
            
            elif comboindex6 == 18:
                
                self.plot6_time_line.setValue(plot_time_index)

                txt = ' {0} '.format(format(GOLD_저가, ','))
                self.label_66.setText(txt)

                tmp = self.label_67.text().split()[0]
                과거가 =  tmp.replace(',', '')     

                if GOLD_현재가 > float(과거가):

                    txt = " {0} ▲ ({1:.1f}, {2:.1f}%, {3}) ".format(format(GOLD_현재가, ','), GOLD_종가대비, GOLD_등락율, GOLD_진폭_틱)

                    if GOLD_종가대비 > 0:
                        self.label_67.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif GOLD_종가대비 < 0:
                        self.label_67.setStyleSheet('background-color: pink; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_67.setStyleSheet('background-color: pink; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_67.setText(txt)

                elif GOLD_현재가 < float(과거가):

                    txt = " {0} ▼ ({1:.1f}, {2:.1f}%, {3}) ".format(format(GOLD_현재가, ','), GOLD_종가대비, GOLD_등락율, GOLD_진폭_틱)

                    if GOLD_종가대비 > 0:
                        self.label_67.setStyleSheet('background-color: skyblue; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif GOLD_종가대비 < 0:
                        self.label_67.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_67.setStyleSheet('background-color: skyblue; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_67.setText(txt)
                else:
                    pass

                txt = ' {0} '.format(format(GOLD_고가, ','))
                self.label_68.setText(txt)

                self.plot6_ovc_jl_line.setValue(GOLD_전저)
                self.plot6_ovc_jh_line.setValue(GOLD_전고)
                self.plot6_ovc_close_line.setValue(GOLD_전일종가)
                self.plot6_ovc_open_line.setValue(GOLD_시가)
                self.plot6_ovc_pivot_line.setValue(GOLD_피봇)
                self.plot6_ovc_low_line.setValue(GOLD_저가)
                self.plot6_ovc_high_line.setValue(GOLD_고가)                 

                self.plot6_gold_curve.setData(df_gold_graph['Price'].astype(float))

                if flag_checkBox_plot6_bband:

                    self.parent.Calc_Bollinger('GOLD')
            
                    self.plot6_bollinger_1st_upper_curve.setData(df_gold_ta_graph['BBUpper_1st'].astype(float))
                    self.plot6_bollinger_1st_middle_curve.setData(df_gold_ta_graph['BBMiddle_1st'].astype(float))
                    self.plot6_bollinger_1st_lower_curve.setData(df_gold_ta_graph['BBLower_1st'].astype(float))
                    self.plot6_bollinger_2nd_upper_curve.setData(df_gold_ta_graph['BBUpper_2nd'].astype(float))
                    self.plot6_bollinger_2nd_middle_curve.setData(df_gold_ta_graph['BBMiddle_2nd'].astype(float))
                    self.plot6_bollinger_2nd_lower_curve.setData(df_gold_ta_graph['BBLower_2nd'].astype(float))

                    self.plot6_fibonacci_line1.setValue(gold_fibonacci_levels[1])
                    self.plot6_fibonacci_line2.setValue(gold_fibonacci_levels[2])
                    self.plot6_fibonacci_line3.setValue(gold_fibonacci_levels[3])
                    self.plot6_fibonacci_line4.setValue(gold_fibonacci_levels[4])
                    self.plot6_fibonacci_line5.setValue(gold_fibonacci_levels[5])

                    if df_gold_ta_graph.at[plot_time_index, 'BBMiddle_2nd'] >= df_gold_ta_graph.at[plot_time_index, 'Price']:
                        self.label_p6_2.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p6_2.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " BB U: {0:.1f}\n BB M: {1:.1f}\n BB L: {2:.1f} ".format\
                        (df_gold_ta_graph.at[plot_time_index, 'BBUpper_2nd'], df_gold_ta_graph.at[plot_time_index, 'BBMiddle_2nd'], df_gold_ta_graph.at[plot_time_index, 'BBLower_2nd'])
                    self.label_p6_2.setText(txt)
                else:
                    self.plot6_fibonacci_line1.setValue(GOLD_전일종가)
                    self.plot6_fibonacci_line2.setValue(GOLD_전일종가)
                    self.plot6_fibonacci_line3.setValue(GOLD_전일종가)
                    self.plot6_fibonacci_line4.setValue(GOLD_전일종가)
                    self.plot6_fibonacci_line5.setValue(GOLD_전일종가)

                    self.label_p6_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p6_2.setText(" BB Upper\n BB Middle\n BB Lower ")

                if flag_checkBox_plot6_psar:

                    self.parent.Calc_PSAR_MAMA('GOLD')

                    self.plot6_psar_curve.setData(df_gold_ta_graph['PSAR'][0:plot_time_index+1].astype(float))

                    #self.plot6_sslup_curve.setData(df_gold_ta_graph['SSLUp'][0:plot_time_index+1].astype(float))
                    #self.plot6_ssldown_curve.setData(df_gold_ta_graph['SSLDown'][0:plot_time_index+1].astype(float))

                    self.plot6_mama_curve.setData(df_gold_ta_graph['MAMA'].astype(float))
                    df = df_gold_ta_graph['FAMA'].apply(lambda x: GOLD_저가 if x < GOLD_저가 else x)
                    self.plot6_fama_curve.setData(df.astype(float))                        

                    if df_gold_ta_graph.at[plot_time_index, 'PSAR'] > df_gold_ta_graph.at[plot_time_index, 'Price'] and df_gold_ta_graph.at[plot_time_index, 'MAMA'] < df_gold_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p6_3.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_gold_ta_graph.at[plot_time_index, 'PSAR'] < df_gold_ta_graph.at[plot_time_index, 'Price'] and df_gold_ta_graph.at[plot_time_index, 'MAMA'] > df_gold_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p6_3.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold') 
                    else:
                        self.label_p6_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " PSAR: {0:.1f}\n MAMA: {1:.1f}\n FAMA: {2:.1f} ".format(df_gold_ta_graph.at[plot_time_index, 'PSAR'], df_gold_ta_graph.at[plot_time_index, 'MAMA'], df_gold_ta_graph.at[plot_time_index, 'FAMA'])
                    self.label_p6_3.setText(txt)
                else:
                    self.label_p6_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p6_3.setText(" PSAR\n MAMA ")
                
                if flag_checkBox_plot6_one_eye:

                    self.plot6_oe_conv_curve.setData(df_gold_ta_graph['OE_CONV'].astype(float))
                    self.plot6_oe_base_curve.setData(df_gold_ta_graph['OE_BASE'].astype(float))
                    self.plot6_span_a_curve.setData(df_gold_ta_graph['SPAN_A'].astype(float))
                    self.plot6_span_b_curve.setData(df_gold_ta_graph['SPAN_B'].astype(float))

                    if flag_one_eye_lagging_span:
                        self.plot6_lagging_span_curve.setData(df_gold_ta_graph['LAGGING_SPAN'].astype(float))

                    if df_gold_ta_graph.at[plot_time_index, 'OE_CONV'] < df_gold_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_gold_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] < df_gold_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p6_4.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_gold_ta_graph.at[plot_time_index, 'OE_CONV'] > df_gold_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_gold_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] > df_gold_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p6_4.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p6_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " 기준선: {0:.1f}\n 전환선: {1:.1f}\n SPAN A: {2:.1f} \n SPAN B: {3:.1f} ".format\
                        (df_gold_ta_graph.at[plot_time_index, 'OE_BASE'], df_gold_ta_graph.at[plot_time_index, 'OE_CONV'], \
                            df_gold_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'], df_gold_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B'])
                    self.label_p6_4.setText(txt)
                    
                else:
                    self.label_p6_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p6_4.setText(" ONE EYE ")

            elif comboindex6 == 19:
                
                self.plot6_time_line.setValue(plot_time_index)

                txt = ' {0:.5f} '.format(EURO_저가)
                self.label_66.setText(txt)

                과거가 =  self.label_67.text().split()[0]     

                if EURO_현재가 > float(과거가):

                    txt = " {0:.5f} ▲ ({1:.5f}, {2:0.1f}%, {3}) ".format(EURO_현재가, EURO_종가대비, EURO_등락율, EURO_진폭_틱)

                    if EURO_종가대비 > 0:
                        self.label_67.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif EURO_종가대비 < 0:
                        self.label_67.setStyleSheet('background-color: pink; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_67.setStyleSheet('background-color: pink; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_67.setText(txt)

                elif EURO_현재가 < float(과거가):

                    txt = " {0:.5f} ▼ ({1:.5f}, {2:0.1f}%, {3}) ".format(EURO_현재가, EURO_종가대비, EURO_등락율, EURO_진폭_틱)

                    if EURO_종가대비 > 0:
                        self.label_67.setStyleSheet('background-color: skyblue; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif EURO_종가대비 < 0:
                        self.label_67.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_67.setStyleSheet('background-color: skyblue; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_67.setText(txt)
                else:
                    pass

                txt = ' {0:.5f} '.format(EURO_고가)
                self.label_68.setText(txt)

                self.plot6_ovc_jl_line.setValue(EURO_전저)
                self.plot6_ovc_jh_line.setValue(EURO_전고)
                self.plot6_ovc_close_line.setValue(EURO_전일종가)
                self.plot6_ovc_open_line.setValue(EURO_시가)
                self.plot6_ovc_pivot_line.setValue(EURO_피봇)
                self.plot6_ovc_low_line.setValue(EURO_저가)
                self.plot6_ovc_high_line.setValue(EURO_고가)                 

                self.plot6_euro_curve.setData(df_euro_graph['Price'].astype(float))

                if flag_checkBox_plot6_bband:

                    self.parent.Calc_Bollinger('EURO')
            
                    self.plot6_bollinger_1st_upper_curve.setData(df_euro_ta_graph['BBUpper_1st'].astype(float))
                    self.plot6_bollinger_1st_middle_curve.setData(df_euro_ta_graph['BBMiddle_1st'].astype(float))
                    self.plot6_bollinger_1st_lower_curve.setData(df_euro_ta_graph['BBLower_1st'].astype(float))
                    self.plot6_bollinger_2nd_upper_curve.setData(df_euro_ta_graph['BBUpper_2nd'].astype(float))
                    self.plot6_bollinger_2nd_middle_curve.setData(df_euro_ta_graph['BBMiddle_2nd'].astype(float))
                    self.plot6_bollinger_2nd_lower_curve.setData(df_euro_ta_graph['BBLower_2nd'].astype(float))

                    self.plot6_fibonacci_line1.setValue(euro_fibonacci_levels[1])
                    self.plot6_fibonacci_line2.setValue(euro_fibonacci_levels[2])
                    self.plot6_fibonacci_line3.setValue(euro_fibonacci_levels[3])
                    self.plot6_fibonacci_line4.setValue(euro_fibonacci_levels[4])
                    self.plot6_fibonacci_line5.setValue(euro_fibonacci_levels[5])

                    if df_euro_ta_graph.at[plot_time_index, 'BBMiddle_2nd'] >= df_euro_ta_graph.at[plot_time_index, 'Price']:
                        self.label_p6_2.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p6_2.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " BB U: {0:.5f}\n BB M: {1:.5f}\n BB L: {2:.5f} ".format\
                        (df_euro_ta_graph.at[plot_time_index, 'BBUpper_2nd'], df_euro_ta_graph.at[plot_time_index, 'BBMiddle_2nd'], df_euro_ta_graph.at[plot_time_index, 'BBLower_2nd'])
                    self.label_p6_2.setText(txt)
                else:
                    self.plot6_fibonacci_line1.setValue(EURO_전일종가)
                    self.plot6_fibonacci_line2.setValue(EURO_전일종가)
                    self.plot6_fibonacci_line3.setValue(EURO_전일종가)
                    self.plot6_fibonacci_line4.setValue(EURO_전일종가)
                    self.plot6_fibonacci_line5.setValue(EURO_전일종가)

                    self.label_p6_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p6_2.setText(" BB Upper\n BB Middle\n BB Lower ")

                if flag_checkBox_plot6_psar:

                    self.parent.Calc_PSAR_MAMA('EURO')

                    self.plot6_psar_curve.setData(df_euro_ta_graph['PSAR'][0:plot_time_index+1].astype(float))

                    #self.plot6_sslup_curve.setData(df_euro_ta_graph['SSLUp'][0:plot_time_index+1].astype(float))
                    #self.plot6_ssldown_curve.setData(df_euro_ta_graph['SSLDown'][0:plot_time_index+1].astype(float))

                    self.plot6_mama_curve.setData(df_euro_ta_graph['MAMA'].astype(float))
                    df = df_euro_ta_graph['FAMA'].apply(lambda x: EURO_저가 if x < EURO_저가 else x)
                    self.plot6_fama_curve.setData(df.astype(float))                        

                    if df_euro_ta_graph.at[plot_time_index, 'PSAR'] > df_euro_ta_graph.at[plot_time_index, 'Price'] and df_euro_ta_graph.at[plot_time_index, 'MAMA'] < df_euro_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p6_3.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_euro_ta_graph.at[plot_time_index, 'PSAR'] < df_euro_ta_graph.at[plot_time_index, 'Price'] and df_euro_ta_graph.at[plot_time_index, 'MAMA'] > df_euro_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p6_3.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold') 
                    else:
                        self.label_p6_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " PSAR: {0:.5f}\n MAMA: {1:.5f}\n FAMA: {2:.5f} ".format(df_euro_ta_graph.at[plot_time_index, 'PSAR'], df_euro_ta_graph.at[plot_time_index, 'MAMA'], df_euro_ta_graph.at[plot_time_index, 'FAMA'])
                    self.label_p6_3.setText(txt)
                else:
                    self.label_p6_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p6_3.setText(" PSAR\n MAMA ")
                
                if flag_checkBox_plot6_one_eye:

                    self.plot6_oe_conv_curve.setData(df_euro_ta_graph['OE_CONV'].astype(float))
                    self.plot6_oe_base_curve.setData(df_euro_ta_graph['OE_BASE'].astype(float))
                    self.plot6_span_a_curve.setData(df_euro_ta_graph['SPAN_A'].astype(float))
                    self.plot6_span_b_curve.setData(df_euro_ta_graph['SPAN_B'].astype(float))

                    if flag_one_eye_lagging_span:
                        self.plot6_lagging_span_curve.setData(df_euro_ta_graph['LAGGING_SPAN'].astype(float))

                    if df_euro_ta_graph.at[plot_time_index, 'OE_CONV'] < df_euro_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_euro_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] < df_euro_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p6_4.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_euro_ta_graph.at[plot_time_index, 'OE_CONV'] > df_euro_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_euro_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] > df_euro_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p6_4.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p6_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " 기준선: {0:.5f}\n 전환선: {1:.5f}\n SPAN A: {2:.5f} \n SPAN B: {3:.5f} ".format\
                        (df_euro_ta_graph.at[plot_time_index, 'OE_BASE'], df_euro_ta_graph.at[plot_time_index, 'OE_CONV'], \
                            df_euro_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'], df_euro_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B'])
                    self.label_p6_4.setText(txt)
                    
                else:
                    self.label_p6_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p6_4.setText(" ONE EYE ")

            elif comboindex6 == 20:
                
                self.plot6_time_line.setValue(plot_time_index)

                txt = ' {0} '.format(format(YEN_저가, ','))
                self.label_66.setText(txt)

                tmp = self.label_67.text().split()[0]
                과거가 =  tmp.replace(',', '')     

                if YEN_현재가 > float(과거가):

                    txt = " {0} ▲ ({1:.1f}, {2:.1f}%, {3}) ".format(format(YEN_현재가, ','), YEN_종가대비, YEN_등락율, YEN_진폭_틱)

                    if YEN_종가대비 > 0:
                        self.label_67.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif YEN_종가대비 < 0:
                        self.label_67.setStyleSheet('background-color: pink; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_67.setStyleSheet('background-color: pink; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_67.setText(txt)

                elif YEN_현재가 < float(과거가):

                    txt = " {0} ▼ ({1:.1f}, {2:.1f}%, {3}) ".format(format(YEN_현재가, ','), YEN_종가대비, YEN_등락율, YEN_진폭_틱)

                    if YEN_종가대비 > 0:
                        self.label_67.setStyleSheet('background-color: skyblue; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif YEN_종가대비 < 0:
                        self.label_67.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_67.setStyleSheet('background-color: skyblue; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_67.setText(txt)
                else:
                    pass

                txt = ' {0} '.format(format(YEN_고가, ','))
                self.label_68.setText(txt)

                self.plot6_ovc_jl_line.setValue(YEN_전저)
                self.plot6_ovc_jh_line.setValue(YEN_전고)
                self.plot6_ovc_close_line.setValue(YEN_전일종가)
                self.plot6_ovc_open_line.setValue(YEN_시가)
                self.plot6_ovc_pivot_line.setValue(YEN_피봇)
                self.plot6_ovc_low_line.setValue(YEN_저가)
                self.plot6_ovc_high_line.setValue(YEN_고가)                 

                self.plot6_yen_curve.setData(df_yen_graph['Price'].astype(float))

                if flag_checkBox_plot6_bband:

                    self.parent.Calc_Bollinger('YEN')

                    self.plot6_bollinger_1st_upper_curve.setData(df_yen_ta_graph['BBUpper_1st'].astype(float))
                    self.plot6_bollinger_1st_middle_curve.setData(df_yen_ta_graph['BBMiddle_1st'].astype(float))
                    self.plot6_bollinger_1st_lower_curve.setData(df_yen_ta_graph['BBLower_1st'].astype(float))
                    self.plot6_bollinger_2nd_upper_curve.setData(df_yen_ta_graph['BBUpper_2nd'].astype(float))
                    self.plot6_bollinger_2nd_middle_curve.setData(df_yen_ta_graph['BBMiddle_2nd'].astype(float))
                    self.plot6_bollinger_2nd_lower_curve.setData(df_yen_ta_graph['BBLower_2nd'].astype(float))

                    self.plot6_fibonacci_line1.setValue(yen_fibonacci_levels[1])
                    self.plot6_fibonacci_line2.setValue(yen_fibonacci_levels[2])
                    self.plot6_fibonacci_line3.setValue(yen_fibonacci_levels[3])
                    self.plot6_fibonacci_line4.setValue(yen_fibonacci_levels[4])
                    self.plot6_fibonacci_line5.setValue(yen_fibonacci_levels[5])

                    if df_yen_ta_graph.at[plot_time_index, 'BBMiddle_2nd'] >= df_yen_ta_graph.at[plot_time_index, 'Price']:
                        self.label_p6_2.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p6_2.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " BB U: {0:.1f}\n BB M: {1:.1f}\n BB L: {2:.1f} ".format\
                        (df_yen_ta_graph.at[plot_time_index, 'BBUpper_2nd'], df_yen_ta_graph.at[plot_time_index, 'BBMiddle_2nd'], df_yen_ta_graph.at[plot_time_index, 'BBLower_2nd'])
                    self.label_p6_2.setText(txt)
                else:
                    self.plot6_fibonacci_line1.setValue(YEN_전일종가)
                    self.plot6_fibonacci_line2.setValue(YEN_전일종가)
                    self.plot6_fibonacci_line3.setValue(YEN_전일종가)
                    self.plot6_fibonacci_line4.setValue(YEN_전일종가)
                    self.plot6_fibonacci_line5.setValue(YEN_전일종가)

                    self.label_p6_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p6_2.setText(" BB Upper\n BB Middle\n BB Lower ")

                if flag_checkBox_plot6_psar:

                    self.parent.Calc_PSAR_MAMA('YEN')

                    self.plot6_psar_curve.setData(df_yen_ta_graph['PSAR'][0:plot_time_index+1].astype(float))

                    #self.plot6_sslup_curve.setData(df_yen_ta_graph['SSLUp'][0:plot_time_index+1].astype(float))
                    #self.plot6_ssldown_curve.setData(df_yen_ta_graph['SSLDown'][0:plot_time_index+1].astype(float))

                    self.plot6_mama_curve.setData(df_yen_ta_graph['MAMA'].astype(float))
                    df = df_yen_ta_graph['FAMA'].apply(lambda x: YEN_저가 if x < YEN_저가 else x)
                    self.plot6_fama_curve.setData(df.astype(float))                        

                    if df_yen_ta_graph.at[plot_time_index, 'PSAR'] > df_yen_ta_graph.at[plot_time_index, 'Price'] and df_yen_ta_graph.at[plot_time_index, 'MAMA'] < df_yen_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p6_3.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_yen_ta_graph.at[plot_time_index, 'PSAR'] < df_yen_ta_graph.at[plot_time_index, 'Price'] and df_yen_ta_graph.at[plot_time_index, 'MAMA'] > df_yen_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p6_3.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold') 
                    else:
                        self.label_p6_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " PSAR: {0:.1f}\n MAMA: {1:.1f}\n FAMA: {2:.1f} ".format(df_yen_ta_graph.at[plot_time_index, 'PSAR'], df_yen_ta_graph.at[plot_time_index, 'MAMA'], df_yen_ta_graph.at[plot_time_index, 'FAMA'])
                    self.label_p6_3.setText(txt)
                else:
                    self.label_p6_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p6_3.setText(" PSAR\n MAMA ")
                
                if flag_checkBox_plot6_one_eye:

                    self.plot6_oe_conv_curve.setData(df_yen_ta_graph['OE_CONV'].astype(float))
                    self.plot6_oe_base_curve.setData(df_yen_ta_graph['OE_BASE'].astype(float))
                    self.plot6_span_a_curve.setData(df_yen_ta_graph['SPAN_A'].astype(float))
                    self.plot6_span_b_curve.setData(df_yen_ta_graph['SPAN_B'].astype(float))

                    if flag_one_eye_lagging_span:
                        self.plot6_lagging_span_curve.setData(df_yen_ta_graph['LAGGING_SPAN'].astype(float))

                    if df_yen_ta_graph.at[plot_time_index, 'OE_CONV'] < df_yen_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_yen_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] < df_yen_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p6_4.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_yen_ta_graph.at[plot_time_index, 'OE_CONV'] > df_yen_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_yen_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] > df_yen_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p6_4.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p6_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " 기준선: {0:.1f}\n 전환선: {1:.1f}\n SPAN A: {2:.1f} \n SPAN B: {3:.1f} ".format\
                        (df_yen_ta_graph.at[plot_time_index, 'OE_BASE'], df_yen_ta_graph.at[plot_time_index, 'OE_CONV'], \
                            df_yen_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'], df_yen_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B'])
                    self.label_p6_4.setText(txt)
                    
                else:
                    self.label_p6_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p6_4.setText(" ONE EYE ")

            elif comboindex6 == 21:

                self.plot6_time_line.setValue(plot_time_index)

                txt = ' {0:.5f} '.format(ADI_저가)
                self.label_66.setText(txt)

                과거가 =  self.label_67.text().split()[0]     

                if ADI_현재가 > float(과거가):

                    txt = " {0:.5f} ▲ ({1:.5f}, {2:.1f}%, {3}) ".format(ADI_현재가, ADI_종가대비, ADI_등락율, ADI_진폭_틱)

                    if ADI_종가대비 > 0:
                        self.label_67.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif ADI_종가대비 < 0:
                        self.label_67.setStyleSheet('background-color: pink; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_67.setStyleSheet('background-color: pink; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_67.setText(txt)

                elif ADI_현재가 < float(과거가):

                    txt = " {0:.5f} ▼ ({1:.5f}, {2:.1f}%, {3}) ".format(ADI_현재가, ADI_종가대비, ADI_등락율, ADI_진폭_틱)

                    if ADI_종가대비 > 0:
                        self.label_67.setStyleSheet('background-color: skyblue; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif ADI_종가대비 < 0:
                        self.label_67.setStyleSheet('background-color: skyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_67.setStyleSheet('background-color: skyblue; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    self.label_67.setText(txt)
                else:
                    pass

                txt = ' {0:.5f} '.format(ADI_고가)
                self.label_68.setText(txt)

                if ADI_전저 > 0:
                    self.plot6_ovc_jl_line.setValue(ADI_전저)

                if ADI_전고 > 0:
                    self.plot6_ovc_jh_line.setValue(ADI_전고)

                self.plot6_ovc_close_line.setValue(ADI_전일종가)
                self.plot6_ovc_open_line.setValue(ADI_시가)

                if ADI_피봇 > 0:
                    self.plot6_ovc_pivot_line.setValue(ADI_피봇)
                    
                self.plot6_ovc_low_line.setValue(ADI_저가)
                self.plot6_ovc_high_line.setValue(ADI_고가)                 

                self.plot6_adi_curve.setData(df_adi_graph['Price'].astype(float))

                if flag_checkBox_plot6_bband:

                    self.parent.Calc_Bollinger('ADI')

                    self.plot6_bollinger_1st_upper_curve.setData(df_adi_ta_graph['BBUpper_1st'].astype(float))
                    self.plot6_bollinger_1st_middle_curve.setData(df_adi_ta_graph['BBMiddle_1st'].astype(float))
                    self.plot6_bollinger_1st_lower_curve.setData(df_adi_ta_graph['BBLower_1st'].astype(float))
                    self.plot6_bollinger_2nd_upper_curve.setData(df_adi_ta_graph['BBUpper_2nd'].astype(float))
                    self.plot6_bollinger_2nd_middle_curve.setData(df_adi_ta_graph['BBMiddle_2nd'].astype(float))
                    self.plot6_bollinger_2nd_lower_curve.setData(df_adi_ta_graph['BBLower_2nd'].astype(float))

                    self.plot6_fibonacci_line1.setValue(adi_fibonacci_levels[1])
                    self.plot6_fibonacci_line2.setValue(adi_fibonacci_levels[2])
                    self.plot6_fibonacci_line3.setValue(adi_fibonacci_levels[3])
                    self.plot6_fibonacci_line4.setValue(adi_fibonacci_levels[4])
                    self.plot6_fibonacci_line5.setValue(adi_fibonacci_levels[5])

                    if df_adi_ta_graph.at[plot_time_index, 'BBMiddle_2nd'] >= df_adi_ta_graph.at[plot_time_index, 'Price']:
                        self.label_p6_2.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p6_2.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " BB U: {0:.5f}\n BB M: {1:.5f}\n BB L: {2:.5f} ".format\
                        (df_adi_ta_graph.at[plot_time_index, 'BBUpper_2nd'], df_adi_ta_graph.at[plot_time_index, 'BBMiddle_2nd'], df_adi_ta_graph.at[plot_time_index, 'BBLower_2nd'])
                    self.label_p6_2.setText(txt)
                else:
                    self.plot6_fibonacci_line1.setValue(ADI_전일종가)
                    self.plot6_fibonacci_line2.setValue(ADI_전일종가)
                    self.plot6_fibonacci_line3.setValue(ADI_전일종가)
                    self.plot6_fibonacci_line4.setValue(ADI_전일종가)
                    self.plot6_fibonacci_line5.setValue(ADI_전일종가)

                    self.label_p6_2.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p6_2.setText(" BB Upper\n BB Middle\n BB Lower ")

                if flag_checkBox_plot6_psar:

                    self.parent.Calc_PSAR_MAMA('ADI')

                    self.plot6_psar_curve.setData(df_adi_ta_graph['PSAR'][0:plot_time_index+1].astype(float))

                    #self.plot6_sslup_curve.setData(df_adi_ta_graph['SSLUp'][0:plot_time_index+1].astype(float))
                    #self.plot6_ssldown_curve.setData(df_adi_ta_graph['SSLDown'][0:plot_time_index+1].astype(float))

                    self.plot6_mama_curve.setData(df_adi_ta_graph['MAMA'].astype(float))
                    df = df_adi_ta_graph['FAMA'].apply(lambda x: ADI_저가 if x < ADI_저가 else x)
                    self.plot6_fama_curve.setData(df.astype(float))                        

                    if df_adi_ta_graph.at[plot_time_index, 'PSAR'] > df_adi_ta_graph.at[plot_time_index, 'Price'] and df_adi_ta_graph.at[plot_time_index, 'MAMA'] < df_adi_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p6_3.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_adi_ta_graph.at[plot_time_index, 'PSAR'] < df_adi_ta_graph.at[plot_time_index, 'Price'] and df_adi_ta_graph.at[plot_time_index, 'MAMA'] > df_adi_ta_graph.at[plot_time_index, 'FAMA']:
                        self.label_p6_3.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold') 
                    else:
                        self.label_p6_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " PSAR: {0:.5f}\n MAMA: {1:.5f}\n FAMA: {2:.5f} ".format(df_adi_ta_graph.at[plot_time_index, 'PSAR'], df_adi_ta_graph.at[plot_time_index, 'MAMA'], df_adi_ta_graph.at[plot_time_index, 'FAMA'])
                    self.label_p6_3.setText(txt)
                else:
                    self.label_p6_3.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p6_3.setText(" PSAR\n MAMA ")
                
                if flag_checkBox_plot6_one_eye:

                    self.plot6_oe_conv_curve.setData(df_adi_ta_graph['OE_CONV'].astype(float))
                    self.plot6_oe_base_curve.setData(df_adi_ta_graph['OE_BASE'].astype(float))
                    self.plot6_span_a_curve.setData(df_adi_ta_graph['SPAN_A'].astype(float))
                    self.plot6_span_b_curve.setData(df_adi_ta_graph['SPAN_B'].astype(float))

                    if flag_one_eye_lagging_span:
                        self.plot6_lagging_span_curve.setData(df_adi_ta_graph['LAGGING_SPAN'].astype(float))

                    if df_adi_ta_graph.at[plot_time_index, 'OE_CONV'] < df_adi_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_adi_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] < df_adi_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p6_4.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    elif df_adi_ta_graph.at[plot_time_index, 'OE_CONV'] > df_adi_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                        df_adi_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] > df_adi_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:
                        self.label_p6_4.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold')
                    else:
                        self.label_p6_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                    txt = " 기준선: {0:.5f}\n 전환선: {1:.5f}\n SPAN A: {2:.5f} \n SPAN B: {3:.5f} ".format\
                        (df_adi_ta_graph.at[plot_time_index, 'OE_BASE'], df_adi_ta_graph.at[plot_time_index, 'OE_CONV'], \
                            df_adi_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'], df_adi_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B'])
                    self.label_p6_4.setText(txt)
                    
                else:
                    self.label_p6_4.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')
                    self.label_p6_4.setText(" ONE EYE ")

            elif comboindex6 == 23:
                
                self.plot6_time_line.setValue(plot_time_index)

                df_futures_cm_ta_graph['CCI1'] = talib.CCI(df_futures_cm_ta_graph['High'], df_futures_cm_ta_graph['Low'], df_futures_cm_ta_graph['Close'], timeperiod=CCI1_PERIOD)                
                df_futures_cm_ta_graph['CCI2'] = talib.CCI(df_futures_cm_ta_graph['High'], df_futures_cm_ta_graph['Low'], df_futures_cm_ta_graph['Close'], timeperiod=CCI2_PERIOD)
                df_futures_cm_ta_graph['RSI'] = (talib.RSI(df_futures_cm_ta_graph['Close'], timeperiod=RSI_PERIOD) - RSI_OFFSET) * RSI_SCALE_FACTOR

                txt = " CCI1: {0:.0f}, CCI2: {1:.0f}, RSI: {2:.0f} ".format(df_futures_cm_ta_graph.at[plot_time_index, 'CCI1'], df_futures_cm_ta_graph.at[plot_time_index, 'CCI2'], df_futures_cm_ta_graph.at[plot_time_index, 'RSI'])

                if df_futures_cm_ta_graph.at[plot_time_index, 'CCI2'] > 0:
                    self.label_67.setStyleSheet('background-color: yellow; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                elif df_futures_cm_ta_graph.at[plot_time_index, 'CCI2'] < 0:
                    self.label_67.setStyleSheet('background-color: yellow; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                else:
                    self.label_67.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                self.label_67.setText(txt)

                self.plot6_cci_plus_100_line.setValue(100)
                self.plot6_cci_minus_100_line.setValue(-100)
                                
                self.plot6_futures_cci1_curve.setData(df_futures_cm_ta_graph['CCI1'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot6_futures_cci2_curve.setData(df_futures_cm_ta_graph['CCI2'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot6_futures_rsi_curve.setData(df_futures_cm_ta_graph['RSI'].astype(float))

            elif comboindex6 == 24:
                
                self.plot6_time_line.setValue(plot_time_index)

                df_sp500_ta_graph['CCI1'] = talib.CCI(df_sp500_ta_graph['High'], df_sp500_ta_graph['Low'], df_sp500_ta_graph['Close'], timeperiod=CCI1_PERIOD)
                df_sp500_ta_graph['CCI2'] = talib.CCI(df_sp500_ta_graph['High'], df_sp500_ta_graph['Low'], df_sp500_ta_graph['Close'], timeperiod=CCI2_PERIOD)
                df_sp500_ta_graph['RSI'] = (talib.RSI(df_sp500_ta_graph['Close'], timeperiod=RSI_PERIOD) - RSI_OFFSET) * RSI_SCALE_FACTOR

                txt = " CCI1: {0:.0f}, CCI2: {1:.0f}, RSI: {2:.0f} ".format(df_sp500_ta_graph.at[plot_time_index, 'CCI1'], df_sp500_ta_graph.at[plot_time_index, 'CCI2'], df_sp500_ta_graph.at[plot_time_index, 'RSI'])

                if df_sp500_ta_graph.at[plot_time_index, 'CCI2'] > 0:
                    self.label_67.setStyleSheet('background-color: yellow; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                elif df_sp500_ta_graph.at[plot_time_index, 'CCI2'] < 0:
                    self.label_67.setStyleSheet('background-color: yellow; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                else:
                    self.label_67.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                self.label_67.setText(txt)

                self.plot6_cci_plus_100_line.setValue(100)
                self.plot6_cci_minus_100_line.setValue(-100)
                
                self.plot6_sp500_cci1_curve.setData(df_sp500_ta_graph['CCI1'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot6_sp500_cci2_curve.setData(df_sp500_ta_graph['CCI2'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot6_sp500_rsi_curve.setData(df_sp500_ta_graph['RSI'].astype(float))

            elif comboindex6 == 25:
                
                self.plot6_time_line.setValue(plot_time_index)

                df_dow_ta_graph['CCI1'] = talib.CCI(df_dow_ta_graph['High'], df_dow_ta_graph['Low'], df_dow_ta_graph['Close'], timeperiod=CCI1_PERIOD)
                df_dow_ta_graph['CCI2'] = talib.CCI(df_dow_ta_graph['High'], df_dow_ta_graph['Low'], df_dow_ta_graph['Close'], timeperiod=CCI2_PERIOD)
                df_dow_ta_graph['RSI'] = (talib.RSI(df_dow_ta_graph['Close'], timeperiod=RSI_PERIOD) - RSI_OFFSET) * RSI_SCALE_FACTOR

                txt = " CCI1: {0:.0f}, CCI2: {1:.0f}, RSI: {2:.0f} ".format(df_dow_ta_graph.at[plot_time_index, 'CCI1'], df_dow_ta_graph.at[plot_time_index, 'CCI2'], df_dow_ta_graph.at[plot_time_index, 'RSI'])

                if df_dow_ta_graph.at[plot_time_index, 'CCI2'] > 0:
                    self.label_67.setStyleSheet('background-color: yellow; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                elif df_dow_ta_graph.at[plot_time_index, 'CCI2'] < 0:
                    self.label_67.setStyleSheet('background-color: yellow; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                else:
                    self.label_67.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                self.label_67.setText(txt)

                self.plot6_cci_plus_100_line.setValue(100)
                self.plot6_cci_minus_100_line.setValue(-100)
                
                self.plot6_dow_cci1_curve.setData(df_dow_ta_graph['CCI1'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot6_dow_cci2_curve.setData(df_dow_ta_graph['CCI2'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot6_dow_rsi_curve.setData(df_dow_ta_graph['RSI'].astype(float))

            elif comboindex6 == 26:
                
                self.plot6_time_line.setValue(plot_time_index)

                df_nasdaq_ta_graph['CCI1'] = talib.CCI(df_nasdaq_ta_graph['High'], df_nasdaq_ta_graph['Low'], df_nasdaq_ta_graph['Close'], timeperiod=CCI1_PERIOD)
                df_nasdaq_ta_graph['CCI2'] = talib.CCI(df_nasdaq_ta_graph['High'], df_nasdaq_ta_graph['Low'], df_nasdaq_ta_graph['Close'], timeperiod=CCI2_PERIOD)
                df_nasdaq_ta_graph['RSI'] = (talib.RSI(df_nasdaq_ta_graph['Close'], timeperiod=RSI_PERIOD) - RSI_OFFSET) * RSI_SCALE_FACTOR

                txt = " CCI1: {0:.0f}, CCI2: {1:.0f}, RSI: {2:.0f} ".format(df_nasdaq_ta_graph.at[plot_time_index, 'CCI1'], df_nasdaq_ta_graph.at[plot_time_index, 'CCI2'], df_nasdaq_ta_graph.at[plot_time_index, 'RSI'])

                if df_nasdaq_ta_graph.at[plot_time_index, 'CCI2'] > 0:
                    self.label_67.setStyleSheet('background-color: yellow; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                elif df_nasdaq_ta_graph.at[plot_time_index, 'CCI2'] < 0:
                    self.label_67.setStyleSheet('background-color: yellow; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                else:
                    self.label_67.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                self.label_67.setText(txt)

                self.plot6_cci_plus_100_line.setValue(100)
                self.plot6_cci_minus_100_line.setValue(-100)
                
                self.plot6_nasdaq_cci1_curve.setData(df_nasdaq_ta_graph['CCI1'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot6_nasdaq_cci2_curve.setData(df_nasdaq_ta_graph['CCI2'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot6_nasdaq_rsi_curve.setData(df_nasdaq_ta_graph['RSI'].astype(float))

            elif comboindex6 == 27:
                
                self.plot6_time_line.setValue(plot_time_index)

                df_hsi_ta_graph['CCI1'] = talib.CCI(df_hsi_ta_graph['High'], df_hsi_ta_graph['Low'], df_hsi_ta_graph['Close'], timeperiod=CCI1_PERIOD)
                df_hsi_ta_graph['CCI2'] = talib.CCI(df_hsi_ta_graph['High'], df_hsi_ta_graph['Low'], df_hsi_ta_graph['Close'], timeperiod=CCI2_PERIOD)
                df_hsi_ta_graph['RSI'] = (talib.RSI(df_hsi_ta_graph['Close'], timeperiod=RSI_PERIOD) - RSI_OFFSET) * RSI_SCALE_FACTOR

                txt = " CCI1: {0:.0f}, CCI2: {1:.0f}, RSI: {2:.0f} ".format(df_hsi_ta_graph.at[plot_time_index, 'CCI1'], df_hsi_ta_graph.at[plot_time_index, 'CCI2'], df_hsi_ta_graph.at[plot_time_index, 'RSI'])

                if df_hsi_ta_graph.at[plot_time_index, 'CCI2'] > 0:
                    self.label_67.setStyleSheet('background-color: yellow; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                elif df_hsi_ta_graph.at[plot_time_index, 'CCI2'] < 0:
                    self.label_67.setStyleSheet('background-color: yellow; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                else:
                    self.label_67.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                self.label_67.setText(txt)

                self.plot6_cci_plus_100_line.setValue(100)
                self.plot6_cci_minus_100_line.setValue(-100)
                
                self.plot6_hsi_cci1_curve.setData(df_hsi_ta_graph['CCI1'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot6_hsi_cci2_curve.setData(df_hsi_ta_graph['CCI2'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot6_hsi_rsi_curve.setData(df_hsi_ta_graph['RSI'].astype(float))

            elif comboindex6 == 28:
                
                self.plot6_time_line.setValue(plot_time_index)

                df_wti_ta_graph['CCI1'] = talib.CCI(df_wti_ta_graph['High'], df_wti_ta_graph['Low'], df_wti_ta_graph['Close'], timeperiod=CCI1_PERIOD)
                df_wti_ta_graph['CCI2'] = talib.CCI(df_wti_ta_graph['High'], df_wti_ta_graph['Low'], df_wti_ta_graph['Close'], timeperiod=CCI2_PERIOD)
                df_wti_ta_graph['RSI'] = (talib.RSI(df_wti_ta_graph['Close'], timeperiod=RSI_PERIOD) - RSI_OFFSET) * RSI_SCALE_FACTOR

                txt = " CCI1: {0:.0f}, CCI2: {1:.0f}, RSI: {2:.0f} ".format(df_wti_ta_graph.at[plot_time_index, 'CCI1'], df_wti_ta_graph.at[plot_time_index, 'CCI2'], df_wti_ta_graph.at[plot_time_index, 'RSI'])

                if df_wti_ta_graph.at[plot_time_index, 'CCI2'] > 0:
                    self.label_67.setStyleSheet('background-color: yellow; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                elif df_wti_ta_graph.at[plot_time_index, 'CCI2'] < 0:
                    self.label_67.setStyleSheet('background-color: yellow; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                else:
                    self.label_67.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                self.label_67.setText(txt)

                self.plot6_cci_plus_100_line.setValue(100)
                self.plot6_cci_minus_100_line.setValue(-100)
                
                self.plot6_wti_cci1_curve.setData(df_wti_ta_graph['CCI1'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot6_wti_cci2_curve.setData(df_wti_ta_graph['CCI2'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot6_wti_rsi_curve.setData(df_wti_ta_graph['RSI'].astype(float))

            elif comboindex6 == 29:
                
                self.plot6_time_line.setValue(plot_time_index)

                df_gold_ta_graph['CCI1'] = talib.CCI(df_gold_ta_graph['High'], df_gold_ta_graph['Low'], df_gold_ta_graph['Close'], timeperiod=CCI1_PERIOD)
                df_gold_ta_graph['CCI2'] = talib.CCI(df_gold_ta_graph['High'], df_gold_ta_graph['Low'], df_gold_ta_graph['Close'], timeperiod=CCI2_PERIOD)
                df_gold_ta_graph['RSI'] = (talib.RSI(df_gold_ta_graph['Close'], timeperiod=RSI_PERIOD) - RSI_OFFSET) * RSI_SCALE_FACTOR

                txt = " CCI1: {0:.0f}, CCI2: {1:.0f}, RSI: {2:.0f} ".format(df_gold_ta_graph.at[plot_time_index, 'CCI1'], df_gold_ta_graph.at[plot_time_index, 'CCI2'], df_gold_ta_graph.at[plot_time_index, 'RSI'])

                if df_gold_ta_graph.at[plot_time_index, 'CCI2'] > 0:
                    self.label_67.setStyleSheet('background-color: yellow; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                elif df_gold_ta_graph.at[plot_time_index, 'CCI2'] < 0:
                    self.label_67.setStyleSheet('background-color: yellow; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                else:
                    self.label_67.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                self.label_67.setText(txt)

                self.plot6_cci_plus_100_line.setValue(100)
                self.plot6_cci_minus_100_line.setValue(-100)
                
                self.plot6_gold_cci1_curve.setData(df_gold_ta_graph['CCI1'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot6_gold_cci2_curve.setData(df_gold_ta_graph['CCI2'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot6_gold_rsi_curve.setData(df_gold_ta_graph['RSI'].astype(float))

            elif comboindex6 == 30:
                
                self.plot6_time_line.setValue(plot_time_index)

                df_euro_ta_graph['CCI1'] = talib.CCI(df_euro_ta_graph['High'], df_euro_ta_graph['Low'], df_euro_ta_graph['Close'], timeperiod=CCI1_PERIOD)
                df_euro_ta_graph['CCI2'] = talib.CCI(df_euro_ta_graph['High'], df_euro_ta_graph['Low'], df_euro_ta_graph['Close'], timeperiod=CCI2_PERIOD)
                df_euro_ta_graph['RSI'] = (talib.RSI(df_euro_ta_graph['Close'], timeperiod=RSI_PERIOD) - RSI_OFFSET) * RSI_SCALE_FACTOR

                txt = " CCI1: {0:.0f}, CCI2: {1:.0f}, RSI: {2:.0f} ".format(df_euro_ta_graph.at[plot_time_index, 'CCI1'], df_euro_ta_graph.at[plot_time_index, 'CCI2'], df_euro_ta_graph.at[plot_time_index, 'RSI'])

                if df_euro_ta_graph.at[plot_time_index, 'CCI2'] > 0:
                    self.label_67.setStyleSheet('background-color: yellow; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                elif df_euro_ta_graph.at[plot_time_index, 'CCI2'] < 0:
                    self.label_67.setStyleSheet('background-color: yellow; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                else:
                    self.label_67.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                self.label_67.setText(txt)

                self.plot6_cci_plus_100_line.setValue(100)
                self.plot6_cci_minus_100_line.setValue(-100)
                
                self.plot6_euro_cci1_curve.setData(df_euro_ta_graph['CCI1'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot6_euro_cci2_curve.setData(df_euro_ta_graph['CCI2'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot6_euro_rsi_curve.setData(df_euro_ta_graph['RSI'].astype(float))

            elif comboindex6 == 31:
                
                self.plot6_time_line.setValue(plot_time_index)

                df_yen_ta_graph['CCI1'] = talib.CCI(df_yen_ta_graph['High'], df_yen_ta_graph['Low'], df_yen_ta_graph['Close'], timeperiod=CCI1_PERIOD)
                df_yen_ta_graph['CCI2'] = talib.CCI(df_yen_ta_graph['High'], df_yen_ta_graph['Low'], df_yen_ta_graph['Close'], timeperiod=CCI2_PERIOD)
                df_yen_ta_graph['RSI'] = (talib.RSI(df_yen_ta_graph['Close'], timeperiod=RSI_PERIOD) - RSI_OFFSET) * RSI_SCALE_FACTOR

                txt = " CCI1: {0:.0f}, CCI2: {1:.0f}, RSI: {2:.0f} ".format(df_yen_ta_graph.at[plot_time_index, 'CCI1'], df_yen_ta_graph.at[plot_time_index, 'CCI2'], df_yen_ta_graph.at[plot_time_index, 'RSI'])

                if df_yen_ta_graph.at[plot_time_index, 'CCI2'] > 0:
                    self.label_67.setStyleSheet('background-color: yellow; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                elif df_yen_ta_graph.at[plot_time_index, 'CCI2'] < 0:
                    self.label_67.setStyleSheet('background-color: yellow; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                else:
                    self.label_67.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                self.label_67.setText(txt)

                self.plot6_cci_plus_100_line.setValue(100)
                self.plot6_cci_minus_100_line.setValue(-100)
                
                self.plot6_yen_cci1_curve.setData(df_yen_ta_graph['CCI1'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot6_yen_cci2_curve.setData(df_yen_ta_graph['CCI2'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot6_yen_rsi_curve.setData(df_yen_ta_graph['RSI'].astype(float))

            elif comboindex6 == 32:
                
                self.plot6_time_line.setValue(plot_time_index)

                df_adi_ta_graph['CCI1'] = talib.CCI(df_adi_ta_graph['High'], df_adi_ta_graph['Low'], df_adi_ta_graph['Close'], timeperiod=CCI1_PERIOD)
                df_adi_ta_graph['CCI2'] = talib.CCI(df_adi_ta_graph['High'], df_adi_ta_graph['Low'], df_adi_ta_graph['Close'], timeperiod=CCI2_PERIOD)
                df_adi_ta_graph['RSI'] = (talib.RSI(df_adi_ta_graph['Close'], timeperiod=RSI_PERIOD) - RSI_OFFSET) * RSI_SCALE_FACTOR

                txt = " CCI1: {0:.0f}, CCI2: {1:.0f}, RSI: {2:.0f} ".format(df_adi_ta_graph.at[plot_time_index, 'CCI1'], df_adi_ta_graph.at[plot_time_index, 'CCI2'], df_adi_ta_graph.at[plot_time_index, 'RSI'])

                if df_adi_ta_graph.at[plot_time_index, 'CCI2'] > 0:
                    self.label_67.setStyleSheet('background-color: yellow; color: red; font-family: Consolas; font-size: 9pt; font: Bold')
                elif df_adi_ta_graph.at[plot_time_index, 'CCI2'] < 0:
                    self.label_67.setStyleSheet('background-color: yellow; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                else:
                    self.label_67.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold')

                self.label_67.setText(txt)

                self.plot6_cci_plus_100_line.setValue(100)
                self.plot6_cci_minus_100_line.setValue(-100)
                
                self.plot6_adi_cci1_curve.setData(df_adi_ta_graph['CCI1'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot6_adi_cci2_curve.setData(df_adi_ta_graph['CCI2'].clip(lower=-CCI_CLIP, upper=CCI_CLIP).astype(float))
                self.plot6_adi_rsi_curve.setData(df_adi_ta_graph['RSI'].astype(float))
            else:
                pass

        except Exception as e:

            txt = '[{0:02d}:{1:02d}:{2:02d}] Exception : update_plot6 에서 {3} \n상기 오류가 발생했습니다.\r'.format(dt.hour, dt.minute, dt.second, traceback.format_exc())
            self.parent.textBrowser.append(txt)

        finally:
            if CME_체결시간 == '000000':
                txt = ' [{0:02d}:{1:02d}:{2:02d}] {3:.2f} ms '.format(dt.hour, dt.minute, dt.second, plot6_processing_time)
            else:
                if flag_kp200_high_node:
                    self.label_time_6.setStyleSheet('background-color: black; color: yellow; font-family: Consolas; font-size: 9pt; font: Bold')
                    txt = ' ★ KH {0:.2f} ms '.format(plot6_processing_time)
                else:
                    self.label_time_6.setStyleSheet('background-color: lawngreen; color: blue; font-family: Consolas; font-size: 9pt; font: Bold')
                    txt = ' {0:.2f} ms '.format(plot6_processing_time)

            self.label_time_6.setText(txt)

            flag_plot6_update_is_running = False

    def closeEvent(self,event):

        dt = datetime.now()

        #result = QMessageBox.question(self,"Sky Chart 다이얼로그 종료"," Sky Chart를 종료하시겠습니까 ? ", QMessageBox.Yes | QMessageBox.No)

        if True:

            event.accept()

            self.flag_big_chart_open = False

            self.comboBox1.setCurrentIndex(0)
            self.comboBox2.setCurrentIndex(0)
            self.comboBox3.setCurrentIndex(0)
            self.comboBox4.setCurrentIndex(0)
            self.comboBox5.setCurrentIndex(0)
            self.comboBox6.setCurrentIndex(0)

            if self.timer1.isActive():
                self.timer1.stop()

            if self.timer2.isActive():
                self.timer2.stop()

            if self.timer3.isActive():
                self.timer3.stop()

            if self.timer4.isActive():
                self.timer4.stop()

            if self.timer5.isActive():
                self.timer5.stop()

            if self.timer6.isActive():
                self.timer6.stop()        

            txt = '[{0:02d}:{1:02d}:{2:02d}] Sky Chart를 Close합니다.\r'.format(dt.hour, dt.minute, dt.second)
            self.parent.textBrowser.append(txt)
            print(txt)

            self.close()
        else:
            event.ignore()        

    def __del__(self):

        print('Sky Chart Diaglog객체가 소멸됩니다.')         

#####################################################################################################################################################################
# Xing API Class
#####################################################################################################################################################################
class Xing(object):

    def __init__(self, caller):

        self.caller = caller    # 윈도우객체와 정보교환
        self.main_connection = None

        #self.ntpclient = ntplib.NTPClient()

        #self.t0167_hour = 0
        #self.server_minute = 0
        #self.server_second = 0
        #self.timegap = 0

        # 조회요청 TR 객체생성
        self.XQ_t0167 = t0167(parent=self) # 시간 조회
        self.XQ_t1514 = t1514(parent=self) # 코스피/코스닥 지수 조회
        self.XQ_t8432 = t8432(parent=self) # 지수선물 마스터조회 API용
        self.XQ_t8433 = t8433(parent=self) # 지수옵션 마스터조회 API용
        self.XQ_t2301 = t2301(parent=self) # 주간 옵션전광판 조회
        self.XQ_t2101 = t2101(parent=self) # 주간 선물전광판 조회
        #self.XQ_t2801 = t2801(parent=self) # 야간 선물전광판 조회
        self.XQ_t2835 = t2835(parent=self) # 야간 옵션전광판 조회
        self.XQ_t8415 = t8415(parent=self) # 선물/옵션 차트(N분) 조회
        self.XQ_t8416 = t8416(parent=self) # 선물/옵션 차트(일,주,월) 조회
        '''
        self.TIMER = QtCore.QTimer()
        self.TIMER.setSingleShot(True)
        self.TIMER.timeout.connect(patch_excepthook)
        self.TIMER.start()
        '''
        self.clock = QtCore.QTimer()
        self.clock.timeout.connect(self.OnClockTick)
        self.clock.start(scoreboard_update_interval)

        self.clocktick = False         

        계좌정보 = pd.read_csv("secret/passwords.csv", converters={'계좌번호': str, '거래비밀번호': str})

        if REAL_SERVER:
            주식계좌정보 = 계좌정보.query("구분 == '거래'")
            print('실서버에 접속합니다.')
        else:
            주식계좌정보 = 계좌정보.query("구분 == '모의'")
            print('모의서버에 접속합니다.')        

        if len(주식계좌정보) > 0:
            
            self.url = 주식계좌정보['url'].values[0].strip()
            self.id = 주식계좌정보['사용자ID'].values[0].strip()            
            self.pwd = 주식계좌정보['비밀번호'].values[0].strip()
            self.cert = 주식계좌정보['공인인증비밀번호'].values[0].strip()            
            self.계좌번호 = 주식계좌정보['계좌번호'].values[0].strip()
            self.거래비밀번호 = 주식계좌정보['거래비밀번호'].values[0].strip()
        else:
            print("secret디렉토리의 passwords.csv 파일에서 거래 계좌를 지정해 주세요")        

        self.main_login(self.url, self.id, self.pwd, self.cert)              

        '''
        # xing_api 선옵,업종,주식의 조회 객체는 대부분 1초당 1건, 10분당 200건의 제한이 있음, 각 객체의 요청(시간/횟수)제한을 관리        
        self.objs = ['t8414', 't8415', 't8416', 't8417', 't8418', 't8419', 't8411', 't8412', 't8413', 't2301', 't2835', 't0434', 't0441']
        self.master = {}

        for x in self.objs:

            d = {}

            if x == 't2301':
                d['time0'] = time.time()
                d['time_last'] = d['time0']
                d['limit'] = 0.6
                d['limit2'] = 600.0
                d['limit2_cnt'] = 200
            else:
                d['time0'] = time.time()
                d['time_last'] = d['time0']
                d['limit'] = 1.2
                d['limit2'] = 600.0
                d['limit2_cnt'] = 200

            self.master[x] = d
        '''

    def OnClockTick(self):

        dt = datetime.now()

        self.clocktick = not self.clocktick

        self.caller.pushButton_reset.setStyleSheet('QPushButton \
                                            {background-color: \
                                            qlineargradient(spread:reflect, x1:1, y1:0, x2:0.995, y2:1, stop:0 rgba(218, 218, 218, 255), stop:0.305419 rgba(0, 7, 11, 255), stop:0.935961 rgba(2, 11, 18, 255), stop:1 rgba(240, 240, 240, 255)); \
                                            color: yellow; font-family: Consolas; font-size: 10pt; font: Bold; border-style: solid; border-width: 1px; border-color: yellow; border-radius: 5px} \
                                            QPushButton:hover {background-color: black; color: white} \
                                            QPushButton:pressed {background-color: gold}')

        self.caller.pushButton_reset.setText(' Clear ')

        if self.clocktick and dt.second == 30: # 매 30초 마다(1분 주기)

            if self.main_connection is not None:

                if self.main_connection.IsConnected():

                    msg = "온라인"
                    # 서버시간 조회, 초당 5건
                    self.XQ_t0167.Query() 
                else:
                    #msg = "오프라인"
                    msg = '오프라인 : {0}'.format(drop_txt)

            self.caller.statusbar.showMessage(msg)
        else:
            pass

        if flag_t8433_response_ok:

            global df_futures_cm_ta_graph, df_sp500_ta_graph, df_dow_ta_graph, df_nasdaq_ta_graph, df_hsi_ta_graph, df_wti_ta_graph, df_gold_ta_graph, df_euro_ta_graph, df_yen_ta_graph, df_adi_ta_graph

            # 주요지표 계산
            #df_futures_cm_ta_graph['OE_CONV'], df_futures_cm_ta_graph['OE_BASE'], df_futures_cm_ta_graph['SPAN_A'], df_futures_cm_ta_graph['SPAN_B'], df_futures_cm_ta_graph['LAGGING_SPAN'] = self.caller.Calc_ICHIMOKU(df_futures_cm_ta_graph, CONVERSION_LINE_PERIOD, BASE_LINE_PERIOD, SPAN_B_PERIOD)
            #df_sp500_ta_graph['OE_CONV'], df_sp500_ta_graph['OE_BASE'], df_sp500_ta_graph['SPAN_A'], df_sp500_ta_graph['SPAN_B'], df_sp500_ta_graph['LAGGING_SPAN'] = self.caller.Calc_ICHIMOKU(df_sp500_ta_graph, CONVERSION_LINE_PERIOD, BASE_LINE_PERIOD, SPAN_B_PERIOD)
            df_dow_ta_graph['OE_CONV'], df_dow_ta_graph['OE_BASE'], df_dow_ta_graph['SPAN_A'], df_dow_ta_graph['SPAN_B'], df_dow_ta_graph['LAGGING_SPAN'] = self.caller.Calc_ICHIMOKU(df_dow_ta_graph, CONVERSION_LINE_PERIOD, BASE_LINE_PERIOD, SPAN_B_PERIOD)
            df_nasdaq_ta_graph['OE_CONV'], df_nasdaq_ta_graph['OE_BASE'], df_nasdaq_ta_graph['SPAN_A'], df_nasdaq_ta_graph['SPAN_B'], df_nasdaq_ta_graph['LAGGING_SPAN'] = self.caller.Calc_ICHIMOKU(df_nasdaq_ta_graph, CONVERSION_LINE_PERIOD, BASE_LINE_PERIOD, SPAN_B_PERIOD)
            df_hsi_ta_graph['OE_CONV'], df_hsi_ta_graph['OE_BASE'], df_hsi_ta_graph['SPAN_A'], df_hsi_ta_graph['SPAN_B'], df_hsi_ta_graph['LAGGING_SPAN'] = self.caller.Calc_ICHIMOKU(df_hsi_ta_graph, CONVERSION_LINE_PERIOD, BASE_LINE_PERIOD, SPAN_B_PERIOD)
            df_wti_ta_graph['OE_CONV'], df_wti_ta_graph['OE_BASE'], df_wti_ta_graph['SPAN_A'], df_wti_ta_graph['SPAN_B'], df_wti_ta_graph['LAGGING_SPAN'] = self.caller.Calc_ICHIMOKU(df_wti_ta_graph, CONVERSION_LINE_PERIOD, BASE_LINE_PERIOD, SPAN_B_PERIOD)
            df_gold_ta_graph['OE_CONV'], df_gold_ta_graph['OE_BASE'], df_gold_ta_graph['SPAN_A'], df_gold_ta_graph['SPAN_B'], df_gold_ta_graph['LAGGING_SPAN'] = self.caller.Calc_ICHIMOKU(df_gold_ta_graph, CONVERSION_LINE_PERIOD, BASE_LINE_PERIOD, SPAN_B_PERIOD)
            df_euro_ta_graph['OE_CONV'], df_euro_ta_graph['OE_BASE'], df_euro_ta_graph['SPAN_A'], df_euro_ta_graph['SPAN_B'], df_euro_ta_graph['LAGGING_SPAN'] = self.caller.Calc_ICHIMOKU(df_euro_ta_graph, CONVERSION_LINE_PERIOD, BASE_LINE_PERIOD, SPAN_B_PERIOD)
            df_yen_ta_graph['OE_CONV'], df_yen_ta_graph['OE_BASE'], df_yen_ta_graph['SPAN_A'], df_yen_ta_graph['SPAN_B'], df_yen_ta_graph['LAGGING_SPAN'] = self.caller.Calc_ICHIMOKU(df_yen_ta_graph, CONVERSION_LINE_PERIOD, BASE_LINE_PERIOD, SPAN_B_PERIOD)
            #df_adi_ta_graph['OE_CONV'], df_adi_ta_graph['OE_BASE'], df_adi_ta_graph['SPAN_A'], df_adi_ta_graph['SPAN_B'], df_adi_ta_graph['LAGGING_SPAN'] = self.caller.Calc_ICHIMOKU(df_adi_ta_graph, CONVERSION_LINE_PERIOD, BASE_LINE_PERIOD, SPAN_B_PERIOD)      

        # 여기에서 주기적인 갱신을 진행
        if self.caller.dialog['선물옵션전광판'] is not None:
            try:
                if flag_score_board_start:
                    
                    if dt.hour == KSE_START_HOUR:
                        report_interval = 5
                    else:
                        report_interval = 10

                    if not self.clocktick and TARGET_MONTH == 'CM' and dt.second % 5 == 0:

                        if flag_under_call:
                            txt = '과매도 구간진입'
                            self.caller.speaker.setText(txt)

                            if flag_telegram_service:
                                send_txt = "[{0:02d}:{1:02d}:{2:02d}] Under Call...\r".format(dt.hour, dt.minute, dt.second)
                                ToYourTelegram(send_txt)
                        else:
                            pass

                        if flag_over_call:
                            txt = '과매수 구간진입'
                            self.caller.speaker.setText(txt)

                            if flag_telegram_service:
                                send_txt = "[{0:02d}:{1:02d}:{2:02d}] Over Call...\r".format(dt.hour, dt.minute, dt.second)
                                ToYourTelegram(send_txt)
                        else:
                            pass
                    else:
                        pass

                    if self.clocktick and TARGET_MONTH == 'CM' and dt.minute % report_interval == 0 and dt.second == 0:

                        if flag_under_call:

                            if flag_telegram_service:
                                send_txt = "[{0:02d}:{1:02d}:{2:02d}] Under Call...\r".format(dt.hour, dt.minute, dt.second)
                                ToYourTelegram(send_txt)
                        else:
                            pass

                        if flag_call_strong:
                            if DayTime:
                                send_txt = "[{0:02d}:{1:02d}:{2:02d}] Call Strong({3:.1f} : {4:.1f}), 수급 : {5}\r".format(dt.hour, dt.minute, dt.second, call_otm_cdb_percent_mean, put_otm_cdb_percent_mean, 수급방향)
                            else:
                                send_txt = "[{0:02d}:{1:02d}:{2:02d}] Call Strong({3:.1f} : {4:.1f})\r".format(dt.hour, dt.minute, dt.second, call_otm_cdb_percent_mean, put_otm_cdb_percent_mean)                       
                        elif flag_call_weak:
                            if DayTime:
                                send_txt = "[{0:02d}:{1:02d}:{2:02d}] Call Weak({3:.1f} : {4:.1f}), 수급 : {5}\r".format(dt.hour, dt.minute, dt.second, call_otm_cdb_percent_mean, put_otm_cdb_percent_mean, 수급방향)                                
                            else:
                                send_txt = "[{0:02d}:{1:02d}:{2:02d}] Call Weak({3:.1f} : {4:.1f})\r".format(dt.hour, dt.minute, dt.second, call_otm_cdb_percent_mean, put_otm_cdb_percent_mean)
                        elif flag_put_strong:
                            if DayTime:
                                send_txt = "[{0:02d}:{1:02d}:{2:02d}] Put Strong({3:.1f} : {4:.1f}), 수급 : {5}\r".format(dt.hour, dt.minute, dt.second, call_otm_cdb_percent_mean, put_otm_cdb_percent_mean, 수급방향)
                            else:
                                send_txt = "[{0:02d}:{1:02d}:{2:02d}] Put Strong({3:.1f} : {4:.1f})\r".format(dt.hour, dt.minute, dt.second, call_otm_cdb_percent_mean, put_otm_cdb_percent_mean)
                        elif flag_put_weak:
                            if DayTime:
                                send_txt = "[{0:02d}:{1:02d}:{2:02d}] Put Weak({3:.1f} : {4:.1f}), 수급 : {5}\r".format(dt.hour, dt.minute, dt.second, call_otm_cdb_percent_mean, put_otm_cdb_percent_mean, 수급방향)
                            else:
                                send_txt = "[{0:02d}:{1:02d}:{2:02d}] Put Weak({3:.1f} : {4:.1f})\r".format(dt.hour, dt.minute, dt.second, call_otm_cdb_percent_mean, put_otm_cdb_percent_mean)
                        else:
                            send_txt = ''

                        if send_txt != '':
                            self.caller.dialog['선물옵션전광판'].textBrowser.append(send_txt)

                            if flag_telegram_service:
                                ToYourTelegram(send_txt)
                        else:
                            pass                        

                        if not pre_start and 옵션_잔량비차 > 5.0:

                            if 콜잔량비 > 풋잔량비:
                                send_txt = "[{0:02d}:{1:02d}:{2:02d}] ♣ CM 잔량비 콜우세 {3}:{4} ♣\r".format(dt.hour, dt.minute, dt.second, 콜잔량비, 풋잔량비)
                                self.caller.textBrowser.append(send_txt)
                                self.caller.dialog['선물옵션전광판'].textBrowser.append(send_txt)

                                if flag_telegram_service:
                                    ToYourTelegram(send_txt)
                            elif 콜잔량비 < 풋잔량비:
                                send_txt = "[{0:02d}:{1:02d}:{2:02d}] ♣ CM 잔량비 풋우세 {3}:{4} ♣\r".format(dt.hour, dt.minute, dt.second, 콜잔량비, 풋잔량비)
                                self.caller.textBrowser.append(send_txt)
                                self.caller.dialog['선물옵션전광판'].textBrowser.append(send_txt)

                                if flag_telegram_service:
                                    ToYourTelegram(send_txt)
                            else:
                                pass
                        else:
                            pass
                    else:
                        pass

                    if self.clocktick and TARGET_MONTH == 'CM' and dt.hour == 9 and dt.minute == 30 and dt.second == 5:
                        send_txt = "[{0:02d}:{1:02d}:{2:02d}] � Rx Packet Size : {3} KByte\r".format(dt.hour, dt.minute, dt.second, int(total_packet_size/1000))
                        self.caller.dialog['선물옵션전광판'].textBrowser.append(send_txt)

                        if flag_telegram_service:
                            ToYourTelegram(send_txt)
                    else:
                        pass

                    if self.clocktick and TARGET_MONTH == 'CM' and dt.hour == 10 and dt.minute == 0 and dt.second == 5:
                        send_txt = "[{0:02d}:{1:02d}:{2:02d}] � Rx Packet Size : {3} KByte\r".format(dt.hour, dt.minute, dt.second, int(total_packet_size/1000))
                        self.caller.dialog['선물옵션전광판'].textBrowser.append(send_txt)

                        if flag_telegram_service:
                            ToYourTelegram(send_txt)
                    else:
                        pass

                    if self.clocktick and TARGET_MONTH == 'CM' and dt.hour == 10 and dt.minute == 30 and dt.second == 5:
                        send_txt = "[{0:02d}:{1:02d}:{2:02d}] � Rx Packet Size : {3} KByte\r".format(dt.hour, dt.minute, dt.second, int(total_packet_size/1000))
                        self.caller.dialog['선물옵션전광판'].textBrowser.append(send_txt)

                        if flag_telegram_service:
                            ToYourTelegram(send_txt)
                    else:
                        pass

                    if self.clocktick and TARGET_MONTH == 'CM' and dt.hour == 11 and dt.minute == 0 and dt.second == 5:
                        send_txt = "[{0:02d}:{1:02d}:{2:02d}] � Rx Packet Size : {3} KByte\r".format(dt.hour, dt.minute, dt.second, int(total_packet_size/1000))
                        self.caller.dialog['선물옵션전광판'].textBrowser.append(send_txt)

                        if flag_telegram_service:
                            ToYourTelegram(send_txt)
                    else:
                        pass

                    if self.clocktick and TARGET_MONTH == 'CM' and dt.hour == 11 and dt.minute == 30 and dt.second == 5:
                        send_txt = "[{0:02d}:{1:02d}:{2:02d}] � Rx Packet Size : {3} KByte\r".format(dt.hour, dt.minute, dt.second, int(total_packet_size/1000))
                        self.caller.dialog['선물옵션전광판'].textBrowser.append(send_txt)

                        if flag_telegram_service:
                            ToYourTelegram(send_txt)
                    else:
                        pass

                    if self.clocktick and TARGET_MONTH == 'CM' and dt.hour == 12 and dt.minute == 0 and dt.second == 5:
                        send_txt = "[{0:02d}:{1:02d}:{2:02d}] � Rx Packet Size : {3} KByte\r".format(dt.hour, dt.minute, dt.second, int(total_packet_size/1000))
                        self.caller.dialog['선물옵션전광판'].textBrowser.append(send_txt)

                        if flag_telegram_service:
                            ToYourTelegram(send_txt)
                    else:
                        pass

                    if not self.clocktick and TARGET_MONTH == 'NM' and dt.minute % report_interval == 0 and dt.second == 0:

                        if flag_call_strong:
                            send_txt = "[{0:02d}:{1:02d}:{2:02d}] NM Call Strong({3:.1f} : {4:.1f})\r".format(dt.hour, dt.minute, dt.second, call_otm_cdb_percent_mean, put_otm_cdb_percent_mean)
                        elif flag_call_weak:
                            send_txt = "[{0:02d}:{1:02d}:{2:02d}] NM Call Weak({3:.1f} : {4:.1f})\r".format(dt.hour, dt.minute, dt.second, call_otm_cdb_percent_mean, put_otm_cdb_percent_mean)
                        elif flag_put_strong:
                            send_txt = "[{0:02d}:{1:02d}:{2:02d}] NM Put Strong({3:.1f} : {4:.1f})\r".format(dt.hour, dt.minute, dt.second, call_otm_cdb_percent_mean, put_otm_cdb_percent_mean)
                        elif flag_put_weak:
                            send_txt = "[{0:02d}:{1:02d}:{2:02d}] NM Put Weak({3:.1f} : {4:.1f})\r".format(dt.hour, dt.minute, dt.second, call_otm_cdb_percent_mean, put_otm_cdb_percent_mean)
                        else:
                            send_txt = ''

                        if send_txt != '':
                            self.caller.dialog['선물옵션전광판'].textBrowser.append(send_txt)

                            if flag_telegram_service:
                                ToYourTelegram(send_txt)
                        else:
                            pass

                        if not pre_start and 옵션_잔량비차 > 5.0:

                            if 콜잔량비 > 풋잔량비:
                                send_txt = "[{0:02d}:{1:02d}:{2:02d}] ♣ NM 잔량비 콜우세 {3}:{4} ♣\r".format(dt.hour, dt.minute, dt.second, 콜잔량비, 풋잔량비)
                                self.caller.textBrowser.append(send_txt)
                                self.caller.dialog['선물옵션전광판'].textBrowser.append(send_txt)

                                if flag_telegram_service:
                                    ToYourTelegram(send_txt)
                            elif 콜잔량비 < 풋잔량비:
                                send_txt = "[{0:02d}:{1:02d}:{2:02d}] ♣ NM 잔량비 풋우세 {3}:{4} ♣\r".format(dt.hour, dt.minute, dt.second, 콜잔량비, 풋잔량비)
                                self.caller.textBrowser.append(send_txt)
                                self.caller.dialog['선물옵션전광판'].textBrowser.append(send_txt)

                                if flag_telegram_service:
                                    ToYourTelegram(send_txt)
                            else:
                                pass
                        else:
                            pass
                    else:
                        pass

                    if self.clocktick and TARGET_MONTH == 'CM' and dt.second % 10 == 0:

                        if flag_call_low_in_fixed_coreval or flag_call_high_in_fixed_coreval or flag_put_low_in_fixed_coreval or flag_put_high_in_fixed_coreval or flag_kp200_low_node or flag_kp200_high_node:

                            if flag_call_low_in_fixed_coreval:
                                send_txt = "[{0:02d}:{1:02d}:{2:02d}] ♦ 콜저가 주요맥점({3}) 발생!\r".format(dt.hour, dt.minute, dt.second, call_low_val_in_fixed_coreval)
                                self.caller.textBrowser.append(send_txt)
                                self.caller.dialog['선물옵션전광판'].textBrowser.append(send_txt)

                            if flag_call_high_in_fixed_coreval:
                                send_txt = "[{0:02d}:{1:02d}:{2:02d}] ♦ 콜고가 주요맥점({3}) 발생!\r".format(dt.hour, dt.minute, dt.second, call_high_val_in_fixed_coreval)
                                self.caller.textBrowser.append(send_txt)
                                self.caller.dialog['선물옵션전광판'].textBrowser.append(send_txt)

                            if flag_put_low_in_fixed_coreval:
                                send_txt = "[{0:02d}:{1:02d}:{2:02d}] ♠ 풋저가 주요맥점({3}) 발생!\r".format(dt.hour, dt.minute, dt.second, put_low_val_in_fixed_coreval)
                                self.caller.textBrowser.append(send_txt)
                                self.caller.dialog['선물옵션전광판'].textBrowser.append(send_txt)

                            if flag_put_high_in_fixed_coreval:
                                send_txt = "[{0:02d}:{1:02d}:{2:02d}] ♠ 풋고가 주요맥점({3}) 발생!\r".format(dt.hour, dt.minute, dt.second, put_high_val_in_fixed_coreval)
                                self.caller.textBrowser.append(send_txt)
                                self.caller.dialog['선물옵션전광판'].textBrowser.append(send_txt)

                            if flag_kp200_low_node:
                                send_txt = "[{0:02d}:{1:02d}:{2:02d}] ★ kp200 저가 주요맥점 발생!\r".format(dt.hour, dt.minute, dt.second)
                                self.caller.textBrowser.append(send_txt)
                                self.caller.dialog['선물옵션전광판'].textBrowser.append(send_txt)

                            if flag_kp200_high_node:
                                send_txt = "[{0:02d}:{1:02d}:{2:02d}] ★ kp200 고가 주요맥점 발생!\r".format(dt.hour, dt.minute, dt.second)
                                self.caller.textBrowser.append(send_txt)
                                self.caller.dialog['선물옵션전광판'].textBrowser.append(send_txt)
                            
                            if flag_tts:
                                winsound.PlaySound('Resources/notify.wav', winsound.SND_FILENAME)
                        else:
                            pass
                    else:
                        pass

                    if not self.clocktick and TARGET_MONTH == 'NM' and dt.second % 5 == 0:

                        if flag_fut_nm_ol and flag_nm_oloh_direction_call_set:
                            txt = "[{0:02d}:{1:02d}:{2:02d}] NM All ▲ ▲...\r".format(dt.hour, dt.minute, dt.second)
                            self.caller.textBrowser.append(txt)
                            self.caller.dialog['선물옵션전광판'].textBrowser.append(txt)                            

                            if flag_tts and (flag_call_low_in_fixed_coreval or flag_put_high_in_fixed_coreval or flag_kp200_low_node):
                                txt = "[{0:02d}:{1:02d}:{2:02d}] NM Strong Call\r".format(dt.hour, dt.minute, dt.second)
                                self.caller.textBrowser.append(txt)
                                self.caller.speaker.setText(txt)

                                if flag_telegram_service:
                                    ToYourTelegram(txt)
                            else:
                                pass
                        else:
                            pass

                        if flag_fut_nm_oh and flag_nm_oloh_direction_put_set:
                            txt = "[{0:02d}:{1:02d}:{2:02d}] NM All ▼ ▼...\r".format(dt.hour, dt.minute, dt.second)
                            self.caller.textBrowser.append(txt)
                            self.caller.dialog['선물옵션전광판'].textBrowser.append(txt)

                            if flag_tts and (flag_call_high_in_fixed_coreval or flag_put_low_in_fixed_coreval or flag_kp200_high_node):
                                txt = "[{0:02d}:{1:02d}:{2:02d}] NM Strong Put\r".format(dt.hour, dt.minute, dt.second)
                                self.caller.textBrowser.append(txt)
                                self.caller.speaker.setText(txt)

                                if flag_telegram_service:
                                    ToYourTelegram(txt)
                            else:
                                pass
                        else:
                            pass
                    else:
                        pass

                    if not self.clocktick and TARGET_MONTH == 'NM' and dt.second % 10 == 0:                        

                        if flag_call_low_in_fixed_coreval or flag_call_high_in_fixed_coreval or flag_put_low_in_fixed_coreval or flag_put_high_in_fixed_coreval:
                            
                            if flag_call_low_in_fixed_coreval:
                                send_txt = "[{0:02d}:{1:02d}:{2:02d}] ★ 콜저가 주요맥점({3}) 발생!\r".format(dt.hour, dt.minute, dt.second, call_low_val_in_fixed_coreval)
                                self.caller.textBrowser.append(send_txt)
                                self.caller.dialog['선물옵션전광판'].textBrowser.append(send_txt)

                            if flag_call_high_in_fixed_coreval:
                                send_txt = "[{0:02d}:{1:02d}:{2:02d}] ★ 콜고가 주요맥점({3}) 발생!\r".format(dt.hour, dt.minute, dt.second, call_high_val_in_fixed_coreval)
                                self.caller.textBrowser.append(send_txt)
                                self.caller.dialog['선물옵션전광판'].textBrowser.append(send_txt)

                            if flag_put_low_in_fixed_coreval:
                                send_txt = "[{0:02d}:{1:02d}:{2:02d}] ★ 풋저가 주요맥점({3}) 발생!\r".format(dt.hour, dt.minute, dt.second, put_low_val_in_fixed_coreval)
                                self.caller.textBrowser.append(send_txt)
                                self.caller.dialog['선물옵션전광판'].textBrowser.append(send_txt)

                            if flag_put_high_in_fixed_coreval:
                                send_txt = "[{0:02d}:{1:02d}:{2:02d}] ★ 풋고가 주요맥점({3}) 발생!\r".format(dt.hour, dt.minute, dt.second, put_high_val_in_fixed_coreval)
                                self.caller.textBrowser.append(send_txt)
                                self.caller.dialog['선물옵션전광판'].textBrowser.append(send_txt)
                                
                            if flag_tts:
                                winsound.PlaySound('Resources/ring.wav', winsound.SND_FILENAME)
                        else:
                            pass
                    else:
                        pass

                    self.caller.dialog['선물옵션전광판'].market_type_display(self.clocktick)
                    
                    if not flag_screen_update_is_running:
                        QApplication.processEvents()
                        self.caller.dialog['선물옵션전광판'].update_screen()
                        QApplication.processEvents()
                    else:
                        pass
                else:
                    pass

            except Exception as e:
                pass
        else:
            pass

    def main_login(self, url, id, pwd, cert):

        System_Time = datetime.now().strftime('%H:%M:%S')

        txt = '[{0}] Welcome to SkyBot.\r'.format(System_Time)
        self.caller.textBrowser.append(txt)

        if TARGET_MONTH == 'NM':
            month_txt = '차월물 옵션'
        else:
            month_txt = '근월물 옵션'

        if REAL_SERVER:
            txt = '{0} 실서버에 접속합니다.\r'.format(month_txt)
        else:
            txt = '{0} 모의서버에 접속합니다.\r'.format(month_txt)

        self.caller.textBrowser.append(txt)
        
        if self.main_connection is None:
            self.main_connection = XASession(parent=self)

        self.main_connection.login(url=self.url, id=self.id, pwd=self.pwd, cert=self.cert)
    
    def OnLogin(self, code, msg):        

        dt = datetime.now()

        if code == '0000':

            token = ''
            chat_id = 0

            if os.path.exists('secret/telegram_token.txt'):

                with open('secret/telegram_token.txt', mode='r') as tokenfile:
                    try:
                        token = tokenfile.readline().strip()

                    except Exception as e:
                        pass            

            if os.path.exists('secret/chatid.txt'):

                with open('secret/chatid.txt', mode='r') as chatfile:
                    try:
                        chat_id = int(chatfile.readline().strip())

                    except Exception as e:
                        pass

            if TARGET_MONTH == 'CM':

                if token != '' and chat_id != 0:
                    txt = '[{0:02d}:{1:02d}:{2:02d}] {3}님이 ({4}/{5}) 로그인 했습니다.'.format(dt.hour, dt.minute, dt.second, self.id, token, chat_id) 
                else:
                    if window.id == 'soojin65':
                        txt = '[{0:02d}:{1:02d}:{2:02d}] ***님이 로그인 했습니다.'.format(dt.hour, dt.minute, dt.second)
                    else:
                        pass
                    
                #ToMyTelegram(txt)
            else:
                pass            
            
            #txt = '메인 프로세스 로그인 성공 !!!\r'
            txt = '메인 프로세스(Process ID = {0}) 생성 성공 !!!\r'.format(mp.current_process().pid)
            self.caller.textBrowser.append(txt)
            #self.caller.statusbar.showMessage(txt)
            #playsound( "Resources/ring.wav" )            
            
            if not self.caller.mp_mode and AUTO_START:

                txt = '[{0:02d}:{1:02d}:{2:02d}] Score Board Dialog를 자동시작 합니다...\r'.format(dt.hour, dt.minute, dt.second)
                self.caller.textBrowser.append(txt)

                self.caller.dialog['선물옵션전광판'] = 화면_선물옵션전광판(parent=self.caller)
                self.caller.dialog['선물옵션전광판'].show()

                self.caller.dialog['선물옵션전광판'].RunCode()
            else:
                pass                        
        else:
            self.caller.statusbar.showMessage("%s %s" % (code, msg))
            txt = '[{0:02d}:{1:02d}:{2:02d}] {3}-{4}\r'.format(dt.hour, dt.minute, dt.second, code, msg)
            self.caller.textBrowser.append(txt)

    def OnLogout(self):

        self.caller.statusbar.showMessage("로그아웃 되었습니다.")

    def OnDisconnect(self):

        self.caller.statusbar.showMessage("연결이 끊겼습니다.")

    def OnReceiveMessage(self, ClassName, systemError, messageCode, message):

        txt = 'ClassName = {0} : systemError = {1}, messageCode = {2}, message = {3}'.format(ClassName, systemError, messageCode, message)
        print(txt)
    
    def OnReceiveData(self, tickdata):

        global 서버시간, system_server_time_gap, flag_heartbeat
        global t0167_hour, t0167_minute, t0167_second, server_x_idx, plot_time_index, 시스템시간_분, 서버시간_분

        dt = datetime.now()

        flag_heartbeat = True 

        szTrCode = tickdata[0]

        if szTrCode == 't0167':

            szTrCode, server_date, server_time = tickdata

            systemtime = dt.hour * 3600 + dt.minute * 60 + dt.second

            시스템시간_분 = dt.hour * 3600 + dt.minute * 60

            t0167_hour = int(server_time[0:2])
            t0167_minute = int(server_time[2:4])
            t0167_second = int(server_time[4:6])

            서버시간 = t0167_hour * 3600 + t0167_minute * 60 + t0167_second
            서버시간_분 = t0167_hour * 3600 + t0167_minute * 60

            system_server_time_gap = systemtime - 서버시간

            # X축 시간좌표 계산
            if NightTime:

                night_time = t0167_hour

                if SUMMER_TIME:
                    cme_close_hour = 6
                else:
                    cme_close_hour = 7

                if 0 <= night_time <= cme_close_hour:
                    night_time = night_time + 24
                else:
                    pass

                server_x_idx = (night_time - NightTime_PreStart_Hour) * 60 + t0167_minute + 1         
            else:                    
                # 해외선물 개장시간은 국내시장의 2시간 전
                server_x_idx = (t0167_hour - DayTime_PreStart_Hour) * 60 + t0167_minute + 1

            #plot_time_index = server_x_idx            

            #txt = '[{0:02d}:{1:02d}:{2:02d}] HeartBeat 수신...\r'.format(dt.hour, dt.minute, dt.second)
            #self.caller.textBrowser.append(txt)
            #print(txt)

            self.caller.pushButton_reset.setStyleSheet('QPushButton {background-color: lime; color: black; font-family: Consolas; font-size: 10pt; font: Bold; border-style: solid; border-width: 1px; border-color: yellow; border-radius: 5px}')                
            self.caller.pushButton_reset.setText(' HB OK! ')

        elif szTrCode == 't8432':
            pass                            
        else:
            pass

    def OnReceiveRealData(self, tickdata):
        pass        

    '''
    # 마지막 사용시 정보 업데이트
    def update(self, obj):

        if self.obj in self.master.keys():
            self.master[obj]['time_last'] = time.time() # 최종 요청시간(현재시각) 업데이트

    # 해당 객체를 사용하기 위해 남은 시간은 얼마인가? 초(float) 리턴
    def remain(self, obj):

        if obj in self.master.keys():
            t = time.time()
            delta = (self.master[obj]['time_last'] + self.master[obj]['limit']) - t
            return delta
        else:
            return -1
    '''

#####################################################################################################################################################################
# MainWindow UI Class
# ui파일을 pyuic5 *.ui -o *.py를 통해 py파일로 변환하는 방법으로 ui파일을 숨길 수 있다.
# 주의할 점은 아이콘 파일의 위치를 잘 설정(실행위치 기준 상대경로 설정필요)해야만 아이콘이 보인다.
#####################################################################################################################################################################
if UI_HIDE:
    import skybot_ui
    Ui_MainWindow = skybot_ui.Ui_MainWindow   
else:
    Ui_MainWindow, QtBaseClass_MainWindow = uic.loadUiType(UI_DIR + main_ui_type)
#####################################################################################################################################################################
class MainWindow(QMainWindow, Ui_MainWindow):

    exceptionOccurred = pyqtSignal(Exception, str)

    def __init__(self, *args):
        super(MainWindow, self).__init__()            

        QMainWindow.__init__(self)
        Ui_MainWindow.__init__(self)

        self.setAttribute(Qt.WA_DeleteOnClose)
        self.setupUi(self)

        self.mp_number = len(args)
        
        if self.mp_number == 0:
            self.mp_mode = False            

        elif self.mp_number == 1:
            self.mp_mode = True

            if FUTURES_REQUEST:
                self.futures_dataQ = args[0]

            if OPTION_TICK_REQUEST:
                self.option_tick_dataQ = args[0]

            if OPTION_QUOTE_REQUEST:
                self.option_quote_dataQ = args[0]

            if OVC_REQUEST:
                self.ovc_dataQ = args[0]            

        elif self.mp_number == 2:
            self.mp_mode = True

            self.futures_dataQ = args[0]

            if OPTION_TICK_REQUEST:
                self.option_tick_dataQ = args[1]

            if OPTION_QUOTE_REQUEST:
                self.option_quote_dataQ = args[1]

            if OVC_REQUEST:
                self.ovc_dataQ = args[1]

        elif self.mp_number == 3:
            self.mp_mode = True

            self.futures_dataQ = args[0]
            self.option_tick_dataQ = args[1]

            if OPTION_QUOTE_REQUEST:
                self.option_quote_dataQ = args[2]

            if OVC_REQUEST:
                self.ovc_dataQ = args[2]

        elif self.mp_number == 4:
            self.mp_mode = True

            self.futures_dataQ = args[0]
            self.option_tick_dataQ = args[1]
            self.option_quote_dataQ = args[2]
            self.ovc_dataQ = args[3]
        else:
            print('지원하지 않는 인자갯수 입니다...')
        
        # 복수개의 Dialog 객체 처리용 변수선언
        self.dialog = dict()

        self.dialog['선물옵션전광판'] = None
        self.dialog['SkyChart'] = None
        self.dialog['RealTimeItem'] = None
        self.dialog['Version'] = None        

        self.id = None
        self.xing = Xing(self)          # Xing객체와 윈도우간 정보교환

        if TARGET_MONTH == 'NM':
            self.setWindowTitle("SkyBot NM ver1.0")            
        else:
            self.setWindowTitle("SkyBot CM ver1.0")

        self.textBrowser.setStyleSheet("background-color: black; color: springgreen; font-family: Consolas; font-size: 10pt; font: Normal")
        #self.textBrowser.append('Welcome to SkyBot\r')

        self.label_1st.setStyleSheet('background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:0.857143, y2:0.857955, stop:0 rgba(10, 242, 251, 255), stop:1 rgba(224, 6, 159, 255)); \
                                    color: black; font-family: Consolas; font-size: 10pt; font: Bold; border-style: solid; border-width: 1px; border-color: black; border-radius: 5px')
        self.label_1st.setText('선물\nQueue')

        self.label_2nd.setStyleSheet('background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:0.857143, y2:0.857955, stop:0 rgba(10, 242, 251, 255), stop:1 rgba(224, 6, 159, 255)); \
                                    color: black; font-family: Consolas; font-size: 10pt; font: Bold; border-style: solid; border-width: 1px; border-color: black; border-radius: 5px')
        self.label_2nd.setText('옵션가격\nQueue')

        self.label_3rd.setStyleSheet('background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:0.857143, y2:0.857955, stop:0 rgba(10, 242, 251, 255), stop:1 rgba(224, 6, 159, 255)); \
                                    color: black; font-family: Consolas; font-size: 10pt; font: Bold; border-style: solid; border-width: 1px; border-color: black; border-radius: 5px')
        self.label_3rd.setText('옵션호가\nQueue')

        self.label_4th.setStyleSheet('background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:0.857143, y2:0.857955, stop:0 rgba(10, 242, 251, 255), stop:1 rgba(224, 6, 159, 255)); \
                                    color: black; font-family: Consolas; font-size: 10pt; font: Bold; border-style: solid; border-width: 1px; border-color: black; border-radius: 5px')
        self.label_4th.setText('해외선물\nQueue')

        self.label_5th.setStyleSheet('background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:0.857143, y2:0.857955, stop:0 rgba(10, 242, 251, 255), stop:1 rgba(224, 6, 159, 255)); \
                                    color: black; font-family: Consolas; font-size: 10pt; font: Bold; border-style: solid; border-width: 1px; border-color: black; border-radius: 5px')
        self.label_5th.setText('옵션\n시가대비')

        self.label_3rd.mousePressEvent = functools.partial(self.showSDBMsgBox, source_object=self.label_3rd)

        self.pushButton_reset.setStyleSheet('QPushButton \
                                            {background-color: \
                                            qlineargradient(spread:reflect, x1:1, y1:0, x2:0.995, y2:1, stop:0 rgba(218, 218, 218, 255), stop:0.305419 rgba(0, 7, 11, 255), stop:0.935961 rgba(2, 11, 18, 255), stop:1 rgba(240, 240, 240, 255)); \
                                            color: yellow; font-family: Consolas; font-size: 10pt; font: Bold; border-style: solid; border-width: 1px; border-color: yellow; border-radius: 5px} \
                                            QPushButton:hover {background-color: black; color: white} \
                                            QPushButton:pressed {background-color: gold}')        
        
        self.pushButton_reset.setText(' Clear ')
        self.groupBox_2.setTitle('해외선물')

        if TARGET_MONTH == 'CM':
            self.groupBox_2.setStyleSheet("color: springgreen; font-family: Consolas; font-size: 10pt; font: Normal")
        else:
            pass

        cme_header_stylesheet = '::section{Background-color: black; color: lightgreen; font-family: Consolas; font-size: 9pt; font: Normal; border-style: solid; border-width: 1px; border-color: gray}'

        cme_table_row_count = 9
        cme_table_column_count = 11

        self.tableWidget_cme.setRowCount(cme_table_row_count)
        self.tableWidget_cme.setColumnCount(cme_table_column_count)
        self.tableWidget_cme.horizontalHeader().setStyleSheet(cme_header_stylesheet)

        self.tableWidget_cme.setHorizontalHeaderLabels(['', '전저', '전고', '종가', '피봇', '시가', '저가', '현재가', '고가', '대비', '진폭'])
        self.tableWidget_cme.verticalHeader().setVisible(False)
        self.tableWidget_cme.setAlternatingRowColors(True)
        
        for i in range(cme_table_row_count):
            for j in range(cme_table_column_count):
                item = QTableWidgetItem("{0}".format('0'))
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(검정색))
                item.setForeground(QBrush(흰색))
                self.tableWidget_cme.setItem(i, j, item)

        item = QTableWidgetItem("{0}".format('S&P 500'))
        item.setTextAlignment(Qt.AlignCenter)
        item.setBackground(QBrush(검정색))
        item.setForeground(QBrush(녹색))
        self.tableWidget_cme.setItem(0, 0, item)

        item = QTableWidgetItem("{0}".format('DOW'))        
        item.setTextAlignment(Qt.AlignCenter)
        item.setBackground(QBrush(검정색))
        item.setForeground(QBrush(녹색))
        self.tableWidget_cme.setItem(1, 0, item)

        item = QTableWidgetItem("{0}".format('NASDAQ'))
        item.setTextAlignment(Qt.AlignCenter)
        item.setBackground(QBrush(검정색))
        item.setForeground(QBrush(녹색))
        self.tableWidget_cme.setItem(2, 0, item)

        item = QTableWidgetItem("{0}".format('HSI'))
        item.setTextAlignment(Qt.AlignCenter)
        item.setBackground(QBrush(검정색))
        item.setForeground(QBrush(녹색))
        self.tableWidget_cme.setItem(3, 0, item)

        item = QTableWidgetItem("{0}".format('WTI'))
        item.setTextAlignment(Qt.AlignCenter)
        item.setBackground(QBrush(검정색))
        item.setForeground(QBrush(녹색))
        self.tableWidget_cme.setItem(4, 0, item)

        item = QTableWidgetItem("{0}".format('GOLD'))
        item.setTextAlignment(Qt.AlignCenter)
        item.setBackground(QBrush(검정색))
        item.setForeground(QBrush(녹색))
        self.tableWidget_cme.setItem(5, 0, item)

        item = QTableWidgetItem("{0}".format('EURO'))
        item.setTextAlignment(Qt.AlignCenter)
        item.setBackground(QBrush(검정색))
        item.setForeground(QBrush(녹색))
        self.tableWidget_cme.setItem(6, 0, item)

        item = QTableWidgetItem("{0}".format('YEN'))
        item.setTextAlignment(Qt.AlignCenter)
        item.setBackground(QBrush(검정색))
        item.setForeground(QBrush(녹색))
        self.tableWidget_cme.setItem(7, 0, item)

        item = QTableWidgetItem("{0}".format('ADI'))
        item.setTextAlignment(Qt.AlignCenter)
        item.setBackground(QBrush(검정색))
        item.setForeground(QBrush(녹색))
        self.tableWidget_cme.setItem(8, 0, item)
        
        self.tableWidget_cme.resizeColumnsToContents()
        
        self.pushButton_reset.clicked.connect(self.reset_button_clicked)
        self.exceptionOccurred.connect(self.on_exceptionOccurred)
                
        self.start_time = datetime.now()
        
        global all_screens, 스크린번호, screen_info, system_server_time_gap

        all_screens = QApplication.screens()

        txt = '총 {0}개의 모니터가 이용가능합니다.\r'.format(len(all_screens))
        self.textBrowser.append(txt)

        for index, s in enumerate(all_screens):
            
            txt = '<스크린 {0}번, 화면해상도 = {1}x{2}>\r'.format(index, s.size().width(), s.size().height())
            self.textBrowser.append(txt)

        # 현재 커서가 위치한 화면정보
        스크린번호 = QApplication.desktop().screenNumber(QtWidgets.QApplication.desktop().cursor().pos())

        self.centerPoint = QApplication.desktop().screenGeometry(스크린번호).center()
        screen_info = QDesktopWidget().screenGeometry(스크린번호)

        txt = '현재스크린 = {0}번, 화면해상도 = {1}x{2}, 중심좌표 X = {3}, Y = {4}\r'.format(스크린번호, screen_info.width(), screen_info.height(), self.centerPoint.x(), self.centerPoint.y())
        self.textBrowser.append(txt)

        # TTS 쓰레드 설정
        self.speaker = SpeakerWorker()
        self.speaker.start()

        global system_server_time_gap

        attempts = 0
        client = ntplib.NTPClient()
        response = None

        while True:            

            try:
                response = client.request(NTP_Server, version=3)
            except Exception as e:
                pass

            if response:

                time_str = time.ctime(response.tx_time).split(' ')
                srever_time = time_str[-2]
                NTP_Server_Time = '{0}:{1}:{2}'.format(srever_time[0:2], srever_time[3:5], srever_time[6:8])
                System_Time = datetime.now().strftime('%H:%M:%S')

                system_server_time_gap = round(-response.offset)

                txt = 'PC({0})와 NTP서버[{1}]({2})간 시간차 : {3}초\r'.format(System_Time, NTP_Server, NTP_Server_Time, system_server_time_gap)        
                self.textBrowser.append(txt)

                if system_server_time_gap > 0:
                    txt = 'PC와 타임 써버간 시간차는 {0}초 입니다'.format(system_server_time_gap)
                    self.speaker.setText(txt)
                elif system_server_time_gap < 0:
                    txt = 'PC와 타임 써버간 시간차는 마이너스 {0}초 입니다'.format(abs(system_server_time_gap))
                    self.speaker.setText(txt)
                else:
                    pass

                break
            else:
                if attempts >= 3:
                    txt = 'NTP Server 통신시도 회수 3회 초과!\r'
                    self.textBrowser.append(txt)
                    txt = 'NTP 서버 IP를 확인해주세요.'
                    self.speaker.setText(txt)
                    break
                else:
                    txt = 'waiting {0} seconds and trying again...\r'.format(0.1)
                    self.textBrowser.append(txt)
                    time.sleep(0.1)
                    attempts += 1   

        # 쓰레드 or 멀티프로세스
        if self.mp_mode:

            if FUTURES_REQUEST:

                self.realtime_futures_dataworker = RealTime_Futures_MP_DataWorker(self.futures_dataQ)
                self.realtime_futures_dataworker.trigger_list.connect(self.transfer_mp_futures_trdata)
                self.realtime_futures_dataworker.trigger_dict.connect(self.transfer_mp_futures_realdata)            
                self.realtime_futures_dataworker.start()

            if OPTION_TICK_REQUEST:

                self.realtime_option_tick_dataworker = RealTime_Option_Tick_MP_DataWorker(self.option_tick_dataQ)
                self.realtime_option_tick_dataworker.trigger_list.connect(self.transfer_mp_option_tick_trdata)
                self.realtime_option_tick_dataworker.trigger_dict.connect(self.transfer_mp_option_tick_realdata)            
                self.realtime_option_tick_dataworker.start()

            if OPTION_QUOTE_REQUEST:

                self.realtime_option_quote_dataworker = RealTime_Option_Quote_MP_DataWorker(self.option_quote_dataQ)
                self.realtime_option_quote_dataworker.trigger_list.connect(self.transfer_mp_option_quote_trdata)
                self.realtime_option_quote_dataworker.trigger_dict.connect(self.transfer_mp_option_quote_realdata)            
                self.realtime_option_quote_dataworker.start()

            if OVC_REQUEST:

                self.realtime_ovc_dataworker = RealTime_OVC_MP_DataWorker(self.ovc_dataQ)
                self.realtime_ovc_dataworker.trigger_list.connect(self.transfer_mp_ovc_trdata)
                self.realtime_ovc_dataworker.trigger_dict.connect(self.transfer_mp_ovc_realdata)            
                self.realtime_ovc_dataworker.start()
        else:
            from multiprocessing import Queue
            #from queue import Queue #--> 멀티프로세스 큐만 정상 동작함 ???

            self.dataQ = Queue()
            self.realtime_thread_dataworker = RealTime_Thread_DataWorker(self.dataQ)
            self.realtime_thread_dataworker.trigger.connect(self.transfer_thread_realdata)
            self.realtime_thread_dataworker.trigger_exception.connect(self.transfer_thread_exception)
            self.realtime_thread_dataworker.start()               
        
        # 종료 버튼으로 종료할 때 실행시킨다. __del__ 실행을 보장하기 위해서 사용
        atexit.register(self.__del__)

    def showSDBMsgBox(self, event, source_object):

        msgBox = QMessageBox()
        msgBox.setFont(QFont("Consolas", 15, QFont.Bold))
        msgBox.setIcon(QMessageBox.Information)
        msgBox.setText(source_object.text())
        msgBox.setWindowTitle('옵션 시가대비')
        msgBox.show()

        returnValue = msgBox.exec_()
        
        if returnValue == QMessageBox.Ok:
            print("showSDBMsgBox OK Clicked...")

    @pyqtSlot()
    def reset_button_clicked(self):

        global flag_drop_reset1, flag_drop_reset2, flag_drop_reset3, flag_drop_reset4

        flag_drop_reset1 = True
        flag_drop_reset2 = True
        flag_drop_reset3 = True
        flag_drop_reset4 = True

        self.textBrowser.clear()

        #playsound('Resources/click.wav')
        winsound.PlaySound('Resources/click.wav', winsound.SND_FILENAME)
        #raise Exception("ExceptionOccurr Test...")
    
    #####################################################################################################################################################################
    # 멀티프로세스방식 처리관련 함수들
    #####################################################################################################################################################################
    @pyqtSlot(Exception, str)
    def on_exceptionOccurred(self, exception, slot_name):
        QMessageBox.critical(self, "Uncaught exception in MainWindow!", f"In pyqtSlot: {slot_name}:\n" f"Caught exception: {exception.__repr__()}")

    @pyqtSlot(str, str)
    def transfer_mp_main_exception(self, str, error):

        dt = datetime.now()

        txt = '[{0:02d}:{1:02d}:{2:02d}] {3} 멀티프로세스 큐 쓰레드에서 {4}예외가 발생했습니다.\r'.format(dt.hour, dt.minute, dt.second, str, error)
        self.textBrowser.append(txt)

        #playsound('Resources/notify.wav')
        #winsound.PlaySound('Resources/notify.wav', winsound.SND_FILENAME)

    @pyqtSlot(list)
    def transfer_mp_futures_trdata(self, trdata):

        dt = datetime.now()
        
        if trdata[0] == 'login' and trdata[1] == '0000':

            #txt = '1st 백그라운드 프로세스 로그인 성공 !!!\r'
            txt = '지수선물 프로세스(Process ID = {0}) 생성 성공 !!!\r'.format(futures_process.pid)
            self.textBrowser.append(txt)            
            self.statusbar.showMessage(trdata[3] + ' ' + trdata[2])          

            # 버티칼 스크롤바를 항상 bottom으로...
            self.textBrowser.verticalScrollBar().setValue(self.textBrowser.verticalScrollBar().maximum())
            
            if AUTO_START:
                #txt = '[{0:02d}:{1:02d}:{2:02d}] Score Board Dialog를 자동시작 합니다...\r'.format(dt.hour, dt.minute, dt.second)
                #self.textBrowser.append(txt)

                self.dialog['선물옵션전광판'] = 화면_선물옵션전광판(parent=self)
                self.dialog['선물옵션전광판'].show()

                self.dialog['선물옵션전광판'].RunCode()
            else:
                pass

        elif trdata[0] == 'login' and trdata[1] != '0000':

            txt = '로그인 실패({0})!  다시 로그인하세요...'.format(trdata[0])
            self.statusbar.showMessage(txt)

        elif trdata[0] == 't8432':
            
            global fut_code, GMSHCODE, CMSHCODE, CCMSHCODE
            global 근월물_선물_전저, 근월물_선물_전고, 근월물_선물_종가, 차월물_선물_전저, 차월물_선물_전고, 차월물_선물_종가

            df = trdata[1]

            근월물_선물코드 = df.at[0, '단축코드']
            차월물_선물코드 = df.at[1, '단축코드']
            차차월물_선물코드 = df.at[2, '단축코드']

            print('근월물 선물코드 =', 근월물_선물코드)
            print('차월물 선물코드 =', 차월물_선물코드)
            print('차차월물 선물코드 =', 차차월물_선물코드)

            if MANGI_YAGAN:

                if current_month == 3 or current_month == 6 or current_month == 9 or current_month == 12:
                    GMSHCODE = 차월물_선물코드
                    CMSHCODE = 차차월물_선물코드
                else:
                    GMSHCODE = 근월물_선물코드
                    CMSHCODE = 차월물_선물코드
                    CCMSHCODE = 차차월물_선물코드
            else:
                GMSHCODE = 근월물_선물코드
                CMSHCODE = 차월물_선물코드
                CCMSHCODE = 차차월물_선물코드

            fut_code = GMSHCODE
            
            근월물_선물_전저 = float(df.at[0, '전일저가'])
            근월물_선물_전고 = float(df.at[0, '전일고가'])
            근월물_선물_종가 = float(df.at[0, '전일종가'])

            print('근월물_선물_전저 =', 근월물_선물_전저)
            print('근월물_선물_전고 =', 근월물_선물_전고)
            print('근월물_선물_종가 =', 근월물_선물_종가)

            차월물_선물_전저 = float(df.at[1, '전일저가'])
            차월물_선물_전고 = float(df.at[1, '전일고가'])
            차월물_선물_종가 = float(df.at[1, '전일종가'])

            print('차월물_선물_전저 =', 차월물_선물_전저)
            print('차월물_선물_전고 =', 차월물_선물_전고)
            print('차월물_선물_종가 =', 차월물_선물_종가)
            
        elif trdata[0] == 't0167':

            global 서버시간, system_server_time_gap, flag_heartbeat
            global t0167_hour, t0167_minute, t0167_second, server_x_idx, plot_time_index, 시스템시간_분, 서버시간_분

            server_time = trdata[2]

            flag_heartbeat = True
            
            systemtime = dt.hour * 3600 + dt.minute * 60 + dt.second

            시스템시간_분 = dt.hour * 3600 + dt.minute * 60

            t0167_hour = int(server_time[0:2])
            t0167_minute = int(server_time[2:4])
            t0167_second = int(server_time[4:6])

            서버시간 = t0167_hour * 3600 + t0167_minute * 60 + t0167_second
            서버시간_분 = t0167_hour * 3600 + t0167_minute * 60

            system_server_time_gap = systemtime - 서버시간
            
            txt = '[{0:02d}:{1:02d}:{2:02d}] HeartBeat 수신, 시스템서버간 시간차 = {3}\r'.format(dt.hour, dt.minute, dt.second, system_server_time_gap)
            print(txt)            
            
            # X축 시간좌표 계산
            if NightTime:

                night_time = t0167_hour

                if SUMMER_TIME:
                    cme_close_hour = 6
                else:
                    cme_close_hour = 7

                if 0 <= night_time <= cme_close_hour:
                    night_time = night_time + 24
                else:
                    pass

                server_x_idx = (night_time - NightTime_PreStart_Hour) * 60 + t0167_minute + 1             
            else:
                server_x_idx = (t0167_hour - DayTime_PreStart_Hour) * 60 + t0167_minute + 1

            #plot_time_index = server_x_idx            

            if self.dialog['선물옵션전광판'] is not None and self.dialog['선물옵션전광판'].flag_score_board_open:

                item = QTableWidgetItem("{0}".format('HB.'))
                item.setTextAlignment(Qt.AlignCenter)

                item.setBackground(QBrush(검정색))
                item.setForeground(QBrush(노란색))         

                self.dialog['선물옵션전광판'].tableWidget_fut.setItem(2, 0, item)
            else:
                pass
        else:
            pass       

    @pyqtSlot(dict)
    def transfer_mp_futures_realdata(self, tickdata):

        global drop_txt, drop_percent, time_gap, main_totalsize, fh0_drop_percent, option_tick_total_size, ovc_tick_total_size
        global total_packet_size
        
        dt = datetime.now()       

        # 수신된 실시간데이타 정보표시(누락된 패킷수, 큐의 크기, 수신된 총 패킷수, 수신된 총 패킷크기)            
        szTrCode = tickdata['tr_code']

        if self.mp_number == 1:

            first_dropcount = 0
            first_sys_dropcount = 0
            first_qsize = 0
            first_totalcount = 0
            first_totalsize = 0

            second_dropcount = 0
            second_sys_dropcount = 0
            second_qsize = 0
            second_totalcount = 0
            option_tick_total_size = 0

            third_dropcount = 0
            third_sys_dropcount = 0
            third_qsize = 0
            third_totalcount = 0
            third_totalsize = 0

            fourth_dropcount = 0
            fourth_sys_dropcount = 0
            fourth_qsize = 0
            fourth_totalcount = 0
            ovc_tick_total_size = 0

        if szTrCode != 'JIF':            

            if len(tickdata['system_time']) == 5:
                systime = int(tickdata['system_time'][0:1]) * 3600 + int(tickdata['system_time'][1:3]) * 60 + int(tickdata['system_time'][3:5])
            else:
                systime = int(tickdata['system_time'][0:2]) * 3600 + int(tickdata['system_time'][2:4]) * 60 + int(tickdata['system_time'][4:6])
            
            if tickdata['수신시간'] == '888888' or tickdata['수신시간'] == '999999' or tickdata['수신시간'] == 'EXTJJJ':
                pass
            else:
                if len(tickdata['수신시간']) == 5:
                    realtime_hour = int(tickdata['수신시간'][0:1])
                    realtime_min = int(tickdata['수신시간'][1:3])
                    realtime_sec = int(tickdata['수신시간'][3:5])
                else:
                    realtime_hour = int(tickdata['수신시간'][0:2])
                    realtime_min = int(tickdata['수신시간'][2:4])
                    realtime_sec = int(tickdata['수신시간'][4:6])

                realtime = realtime_hour * 3600 + realtime_min * 60 + realtime_sec

                time_gap = systime - system_server_time_gap - realtime
                time_gap_abs = abs((systime - system_server_time_gap) - realtime)

            if FUTURES_REQUEST:
                first_dropcount, first_sys_dropcount, first_qsize, first_totalcount, first_totalsize = self.realtime_futures_dataworker.get_packet_info()

            if OPTION_TICK_REQUEST:   
                second_dropcount, second_sys_dropcount, second_qsize, second_totalcount, option_tick_total_size = self.realtime_option_tick_dataworker.get_packet_info()

            if OPTION_QUOTE_REQUEST:    
                third_dropcount, third_sys_dropcount, third_qsize, third_totalcount, third_totalsize = self.realtime_option_quote_dataworker.get_packet_info()

            if OVC_REQUEST:    
                fourth_dropcount, fourth_sys_dropcount, fourth_qsize, fourth_totalcount, ovc_tick_total_size = self.realtime_ovc_dataworker.get_packet_info()

            total_dropcount = first_dropcount + second_dropcount + third_dropcount + fourth_dropcount
            total_sys_dropcount = first_sys_dropcount + second_sys_dropcount + third_sys_dropcount + fourth_sys_dropcount
            total_waiting_count = first_qsize + second_qsize + third_qsize + fourth_qsize
            totalcount = first_totalcount + second_totalcount + third_totalcount + fourth_totalcount
            total_packet_size = first_totalsize + option_tick_total_size + third_totalsize + ovc_tick_total_size

            if totalcount > 0:
                drop_percent = (total_dropcount / totalcount) * 100
            else:
                pass

            if DayTime:
                drop_txt = '{0}/{1}({2}k), {3}k, [{4:.1f}%]'.format(format(total_dropcount, ','), format(totalcount, ','), format(int(total_packet_size/1000), ','), format(int(option_tick_total_size/1000), ','), drop_percent)
            else:
                drop_txt = '{0}/{1}({2}k), {3}k, [{4:.1f}%]'.format(format(total_dropcount, ','), format(totalcount, ','), format(int(total_packet_size/1000), ','), format(int(ovc_tick_total_size/1000), ','), drop_percent)

            txt = ' [{0}]수신 = [{1:02d}:{2:02d}:{3:02d}/{4:02d}:{5:02d}:{6:02d}]({7}), {8}\r'.format(szTrCode, \
                dt.hour, dt.minute, dt.second, int(tickdata['수신시간'][0:2]), int(tickdata['수신시간'][2:4]), int(tickdata['수신시간'][4:6]), time_gap, drop_txt)

            if szTrCode == 'NWS' or szTrCode == 'BM_':
                if DARK_STYLESHEET:
                    self.statusbar.setStyleSheet("color : lawngreen")
                else:
                    self.statusbar.setStyleSheet("color : darkgreen")
            else:
                if time_gap_abs >= view_time_tolerance:
                    self.statusbar.setStyleSheet("color : red")
                else:
                    if DARK_STYLESHEET:
                        self.statusbar.setStyleSheet("color : lawngreen")
                    else:
                        self.statusbar.setStyleSheet("color : darkgreen")

            self.statusbar.showMessage(txt)
            #self.dialog['선물옵션전광판'].statusbar.showMessage(txt)

            if szTrCode == 'NWS' or szTrCode == 'BM_':
                if flag_1st_process_queue_empty:
                    self.label_1st.setStyleSheet("background-color: lime; color: black; font-family: Consolas; font-size: 10pt; font: Normal; border-style: solid; border-width: 1px; border-color: black; border-radius: 5px")
                else:
                    self.label_1st.setStyleSheet("background-color: black; color: lime; font-family: Consolas; font-size: 10pt; font: Normal; border-style: solid; border-width: 1px; border-color: black; border-radius: 5px")

                txt = "{0}\n({1:.2f})".format(szTrCode, args_processing_time)
            else:
                if time_gap_abs >= view_time_tolerance:
                    self.label_1st.setStyleSheet("background-color: yellow; color: red; font-family: Consolas; font-size: 10pt; font: Normal; border-style: solid; border-width: 1px; border-color: black; border-radius: 5px")
                    txt = "{0}\n({1})".format(szTrCode, time_gap_abs)
                else:
                    if flag_1st_process_queue_empty:
                        self.label_1st.setStyleSheet("background-color: lime; color: black; font-family: Consolas; font-size: 10pt; font: Normal; border-style: solid; border-width: 1px; border-color: black; border-radius: 5px")
                    else:
                        self.label_1st.setStyleSheet("background-color: black; color: lime; font-family: Consolas; font-size: 10pt; font: Normal; border-style: solid; border-width: 1px; border-color: black; border-radius: 5px")

                    txt = "{0}\n({1:.2f})".format(szTrCode, args_processing_time)

            self.label_1st.setText(txt)                
        else:
            pass        

        # 1st 프로세스 실시간데이타 갱신
        if self.dialog['선물옵션전광판'] is not None and self.dialog['선물옵션전광판'].flag_score_board_open:
            self.update_1st_process(tickdata)
        else:
            pass
        
    @pyqtSlot(list)
    def transfer_mp_option_tick_trdata(self, trdata):

        dt = datetime.now()

        if trdata[0] == 'login' and trdata[1] == '0000':

            #txt = '2nd 백그라운드 프로세스 로그인 성공 !!!\r'
            txt = '지수옵션 체결 프로세스(Process ID = {0}) 생성 성공 !!!\r'.format(option_tick_process.pid)
            self.textBrowser.append(txt)
            self.statusbar.showMessage(trdata[3] + ' ' + trdata[2])

            if self.mp_number == 1:

                # 버티칼 스크롤바를 항상 bottom으로...
                self.textBrowser.verticalScrollBar().setValue(self.textBrowser.verticalScrollBar().maximum())
                
                if AUTO_START:
                    txt = '[{0:02d}:{1:02d}:{2:02d}] Score Board Dialog를 자동시작 합니다...\r'.format(dt.hour, dt.minute, dt.second)
                    self.textBrowser.append(txt)

                    self.dialog['선물옵션전광판'] = 화면_선물옵션전광판(parent=self)
                    self.dialog['선물옵션전광판'].show()

                    self.dialog['선물옵션전광판'].RunCode()
                else:
                    pass

        elif trdata[0] == 'tick':

            txt = '[{0:02d}:{1:02d}:{2:02d}] 지수옵션 체결 요청항목 = {3}, 총 {4}개\r'.format(dt.hour, dt.minute, dt.second, trdata, len(trdata) - 1)
            self.textBrowser.append(txt)

        elif trdata[0] == 'login' and trdata[1] != '0000':

            txt = '2nd 로그인 실패({0})!  다시 로그인하세요...'.format(trdata[0])
            self.statusbar.showMessage(txt)
        else:
            pass

    @pyqtSlot(dict)
    def transfer_mp_option_tick_realdata(self, tickdata):

        global option_tick_total_size, ovc_tick_total_size
        global total_packet_size

        dt = datetime.now()

        szTrCode = tickdata['tr_code']

        if self.mp_number == 1:

            first_dropcount = 0
            first_sys_dropcount = 0
            first_qsize = 0
            first_totalcount = 0
            first_totalsize = 0

            second_dropcount = 0
            second_sys_dropcount = 0
            second_qsize = 0
            second_totalcount = 0
            option_tick_total_size = 0

            third_dropcount = 0
            third_sys_dropcount = 0
            third_qsize = 0
            third_totalcount = 0
            third_totalsize = 0

            fourth_dropcount = 0
            fourth_sys_dropcount = 0
            fourth_qsize = 0
            fourth_totalcount = 0
            ovc_tick_total_size = 0

        if len(tickdata['system_time']) == 1:
            systime = int(tickdata['system_time'][0:1])
        elif len(tickdata['system_time']) == 2:
            systime = int(tickdata['system_time'][0:2])
        elif len(tickdata['system_time']) == 3:
            systime = int(tickdata['system_time'][0:1]) * 60 + int(tickdata['system_time'][1:3])
        elif len(tickdata['system_time']) == 4:
            systime = int(tickdata['system_time'][0:2]) * 60 + int(tickdata['system_time'][2:4])
        elif len(tickdata['system_time']) == 5:
            systime = int(tickdata['system_time'][0:1]) * 3600 + int(tickdata['system_time'][1:3]) * 60 + int(tickdata['system_time'][3:5])
        elif len(tickdata['system_time']) == 6:
            systime = int(tickdata['system_time'][0:2]) * 3600 + int(tickdata['system_time'][2:4]) * 60 + int(tickdata['system_time'][4:6])
        else:
            pass

        if len(tickdata['수신시간']) == 1:
            realtime_hour = 0
            realtime_min = 0
            realtime_sec = int(tickdata['수신시간'][0:1])
        elif len(tickdata['수신시간']) == 2:
            realtime_hour = 0
            realtime_min = 0
            realtime_sec = int(tickdata['수신시간'][0:2])
        elif len(tickdata['수신시간']) == 3:
            realtime_hour = 0
            realtime_min = int(tickdata['수신시간'][0:1])
            realtime_sec = int(tickdata['수신시간'][1:3])
        elif len(tickdata['수신시간']) == 4:
            realtime_hour = 0
            realtime_min = int(tickdata['수신시간'][0:2])
            realtime_sec = int(tickdata['수신시간'][2:4])
        elif len(tickdata['수신시간']) == 5:
            realtime_hour = int(tickdata['수신시간'][0:1])
            realtime_min = int(tickdata['수신시간'][1:3])
            realtime_sec = int(tickdata['수신시간'][3:5])
        elif len(tickdata['수신시간']) == 6:
            realtime_hour = int(tickdata['수신시간'][0:2])
            realtime_min = int(tickdata['수신시간'][2:4])
            realtime_sec = int(tickdata['수신시간'][4:6])
        else:
            pass

        realtime = realtime_hour * 3600 + realtime_min * 60 + realtime_sec

        time_gap = systime - system_server_time_gap - realtime
        time_gap_abs = abs((systime - system_server_time_gap) - realtime)

        if FUTURES_REQUEST:
            first_dropcount, first_sys_dropcount, first_qsize, first_totalcount, first_totalsize = self.realtime_futures_dataworker.get_packet_info()

        if OPTION_TICK_REQUEST:   
            second_dropcount, second_sys_dropcount, second_qsize, second_totalcount, option_tick_total_size = self.realtime_option_tick_dataworker.get_packet_info()

        if OPTION_QUOTE_REQUEST:    
            third_dropcount, third_sys_dropcount, third_qsize, third_totalcount, third_totalsize = self.realtime_option_quote_dataworker.get_packet_info()

        if OVC_REQUEST:    
            fourth_dropcount, fourth_sys_dropcount, fourth_qsize, fourth_totalcount, ovc_tick_total_size = self.realtime_ovc_dataworker.get_packet_info()

        total_dropcount = first_dropcount + second_dropcount + third_dropcount + fourth_dropcount
        total_sys_dropcount = first_sys_dropcount + second_sys_dropcount + third_sys_dropcount + fourth_sys_dropcount
        total_waiting_count = first_qsize + second_qsize + third_qsize + fourth_qsize
        totalcount = first_totalcount + second_totalcount + third_totalcount + fourth_totalcount
        total_packet_size = first_totalsize + option_tick_total_size + third_totalsize + ovc_tick_total_size

        if totalcount > 0:
            drop_percent = (total_dropcount / totalcount) * 100
        else:
            pass

        if DayTime:
            drop_txt = '{0}/{1}({2}k), {3}k, [{4:.1f}%]'.format(format(total_dropcount, ','), format(totalcount, ','), format(int(total_packet_size/1000), ','), format(int(option_tick_total_size/1000), ','), drop_percent)
        else:
            drop_txt = '{0}/{1}({2}k), {3}k, [{4:.1f}%]'.format(format(total_dropcount, ','), format(totalcount, ','), format(int(total_packet_size/1000), ','), format(int(ovc_tick_total_size/1000), ','), drop_percent)
        
        txt = ' [{0}]수신 = [{1:02d}:{2:02d}:{3:02d}/{4:02d}:{5:02d}:{6:02d}]({7}), {8}\r'.format(szTrCode, \
            dt.hour, dt.minute, dt.second, int(tickdata['수신시간'][0:2]), int(tickdata['수신시간'][2:4]), int(tickdata['수신시간'][4:6]), time_gap, drop_txt)

        if time_gap_abs >= view_time_tolerance:
            self.statusbar.setStyleSheet("color : red")
        else:
            if DARK_STYLESHEET:
                self.statusbar.setStyleSheet("color : lawngreen")
            else:
                self.statusbar.setStyleSheet("color : darkgreen")

        self.statusbar.showMessage(txt)                

        if time_gap_abs >= view_time_tolerance:
            self.label_2nd.setStyleSheet("background-color: yellow; color: red; font-family: Consolas; font-size: 10pt; font: Normal; border-style: solid; border-width: 1px; border-color: black; border-radius: 5px")

            if szTrCode == 'OC0' and tickdata['단축코드'][0:3] == '201':
                txt = "{0}\n({1})".format('COC0', time_gap_abs)
            elif (szTrCode == 'EC0' and tickdata['단축코드'][0:3] == '201'):
                txt = "{0}\n({1})".format('CEC0', time_gap_abs)
            elif szTrCode == 'OC0' and tickdata['단축코드'][0:3] == '301':
                txt = "{0}\n({1})".format('POC0', time_gap_abs)
            elif szTrCode == 'EC0' and tickdata['단축코드'][0:3] == '301':
                txt = "{0}\n({1})".format('PEC0', time_gap_abs)
            elif szTrCode == 'YOC':
                txt = "{0}\n({1})".format('YOC', time_gap_abs)
            else:
                pass            
        else:
            if flag_2nd_process_queue_empty:
                self.label_2nd.setStyleSheet("background-color: lime; color: black; font-family: Consolas; font-size: 10pt; font: Normal; border-style: solid; border-width: 1px; border-color: black; border-radius: 5px")
            else:
                self.label_2nd.setStyleSheet("background-color: black; color: lime; font-family: Consolas; font-size: 10pt; font: Normal; border-style: solid; border-width: 1px; border-color: black; border-radius: 5px")

            if szTrCode == 'OC0' and tickdata['단축코드'][0:3] == '201':
                txt = "{0}\n({1:.2f})".format('COC0', args_processing_time)
            elif (szTrCode == 'EC0' and tickdata['단축코드'][0:3] == '201'):
                txt = "{0}\n({1:.2f})".format('CEC0', args_processing_time)
            elif szTrCode == 'OC0' and tickdata['단축코드'][0:3] == '301':
                txt = "{0}\n({1:.2f})".format('POC0', args_processing_time)
            elif szTrCode == 'EC0' and tickdata['단축코드'][0:3] == '301':
                txt = "{0}\n({1:.2f})".format('PEC0', args_processing_time)            
            elif szTrCode == 'YOC':
                txt = "{0}\n({1:.2f})".format('YOC', args_processing_time)
            else:
                pass            
        
        self.label_2nd.setText(txt)

        global flag_call_strong, flag_call_weak, flag_put_strong, flag_put_weak 

        if call_otm_cdb_percent_mean > put_otm_cdb_percent_mean and abs(call_otm_cdb_percent_mean) > abs(put_otm_cdb_percent_mean):

            # 콜매수
            self.label_5th.setStyleSheet("background-color: red; color: white; font-family: Consolas; font-size: 10pt; font: Normal; border-style: solid; border-width: 1px; border-color: black; border-radius: 5px")
            flag_call_strong = True
            flag_call_weak = False
            flag_put_strong = False
            flag_put_weak = False

        elif call_otm_cdb_percent_mean > put_otm_cdb_percent_mean and abs(call_otm_cdb_percent_mean) < abs(put_otm_cdb_percent_mean):

            # 풋매도
            self.label_5th.setStyleSheet("background-color: steelblue; color: white; font-family: Consolas; font-size: 10pt; font: Normal; border-style: solid; border-width: 1px; border-color: black; border-radius: 5px")
            flag_call_strong = False
            flag_call_weak = False
            flag_put_strong = False
            flag_put_weak = True

        elif put_otm_cdb_percent_mean > call_otm_cdb_percent_mean and abs(put_otm_cdb_percent_mean) > abs(call_otm_cdb_percent_mean):

            # 풋매수
            self.label_5th.setStyleSheet("background-color: blue; color: white; font-family: Consolas; font-size: 10pt; font: Normal; border-style: solid; border-width: 1px; border-color: black; border-radius: 5px")
            flag_call_strong = False
            flag_call_weak = False
            flag_put_strong = True
            flag_put_weak = False

        elif put_otm_cdb_percent_mean > call_otm_cdb_percent_mean and abs(put_otm_cdb_percent_mean) < abs(call_otm_cdb_percent_mean):

            # 콜매도
            self.label_5th.setStyleSheet("background-color: indianred; color: white; font-family: Consolas; font-size: 10pt; font: Normal; border-style: solid; border-width: 1px; border-color: black; border-radius: 5px")
            flag_call_strong = False
            flag_call_weak = True
            flag_put_strong = False
            flag_put_weak = False

        else:
            self.label_5th.setStyleSheet("background-color: white; color: black; font-family: Consolas; font-size: 10pt; font: Normal; border-style: solid; border-width: 1px; border-color: black; border-radius: 5px")
        
        txt = '{0} %\n{1} %'.format(call_otm_cdb_percent_mean, put_otm_cdb_percent_mean)
        self.label_5th.setText(txt)            

        # 2nd 프로세스 실시간데이타 갱신
        if self.dialog['선물옵션전광판'] is not None and self.dialog['선물옵션전광판'].flag_score_board_open:

            if time_gap_abs < view_time_tolerance:
                self.update_2nd_process(tickdata)
            else:
                pass            
        else:
            pass

    @pyqtSlot(list)
    def transfer_mp_option_quote_trdata(self, trdata):

        dt = datetime.now()

        if trdata[0] == 'login' and trdata[1] == '0000':

            #txt = '3rd 백그라운드 프로세스 로그인 성공 !!!\r'
            txt = '지수옵션 호가 프로세스(Process ID = {0}) 생성 성공 !!!\r'.format(option_quote_process.pid)
            self.textBrowser.append(txt)
            self.statusbar.showMessage(trdata[3] + ' ' + trdata[2])

            if self.mp_number == 1:

                # 버티칼 스크롤바를 항상 bottom으로...
                self.textBrowser.verticalScrollBar().setValue(self.textBrowser.verticalScrollBar().maximum())
                
                if AUTO_START:
                    txt = '[{0:02d}:{1:02d}:{2:02d}] Score Board Dialog를 자동시작 합니다...\r'.format(dt.hour, dt.minute, dt.second)
                    self.textBrowser.append(txt)

                    self.dialog['선물옵션전광판'] = 화면_선물옵션전광판(parent=self)
                    self.dialog['선물옵션전광판'].show()

                    self.dialog['선물옵션전광판'].RunCode()
                else:
                    pass
            
        elif trdata[0] == 'login' and trdata[1] != '0000':

            txt = '3rd 로그인 실패({0})!  다시 로그인하세요...'.format(trdata[0])
            self.statusbar.showMessage(txt)

        elif trdata[0] == 'quote':

            txt = '[{0:02d}:{1:02d}:{2:02d}] 지수옵션 호가 요청항목 = {3}, 총 {4}개\r'.format(dt.hour, dt.minute, dt.second, trdata, len(trdata) - 1)
            self.textBrowser.append(txt)
        else:
            pass
    
    @pyqtSlot(dict)
    def transfer_mp_option_quote_realdata(self, tickdata):

        global option_tick_total_size, ovc_tick_total_size
        global total_packet_size

        dt = datetime.now()

        szTrCode = tickdata['tr_code']

        if self.mp_number == 1:

            first_dropcount = 0
            first_sys_dropcount = 0
            first_qsize = 0
            first_totalcount = 0
            first_totalsize = 0

            second_dropcount = 0
            second_sys_dropcount = 0
            second_qsize = 0
            second_totalcount = 0
            option_tick_total_size = 0

            third_dropcount = 0
            third_sys_dropcount = 0
            third_qsize = 0
            third_totalcount = 0
            third_totalsize = 0

            fourth_dropcount = 0
            fourth_sys_dropcount = 0
            fourth_qsize = 0
            fourth_totalcount = 0
            ovc_tick_total_size = 0

        if len(tickdata['system_time']) == 5:
            systime = int(tickdata['system_time'][0:1]) * 3600 + int(tickdata['system_time'][1:3]) * 60 + int(tickdata['system_time'][3:5])
        else:
            systime = int(tickdata['system_time'][0:2]) * 3600 + int(tickdata['system_time'][2:4]) * 60 + int(tickdata['system_time'][4:6])        
        
        if szTrCode == 'EH0' and int(tickdata['수신시간'][0:2]) >= 24:                
            realtime = (int(tickdata['수신시간'][0:2]) - 24) * 3600 + int(tickdata['수신시간'][2:4]) * 60 + int(tickdata['수신시간'][4:6])                
        else:
            if len(tickdata['수신시간']) == 5:
                realtime = int(tickdata['수신시간'][0:1]) * 3600 + int(tickdata['수신시간'][1:3]) * 60 + int(tickdata['수신시간'][3:5]) 
            else:                    
                realtime = int(tickdata['수신시간'][0:2]) * 3600 + int(tickdata['수신시간'][2:4]) * 60 + int(tickdata['수신시간'][4:6])     
        
        time_gap = systime - system_server_time_gap - realtime
        time_gap_abs = abs((systime - system_server_time_gap) - realtime)

        if FUTURES_REQUEST:
            first_dropcount, first_sys_dropcount, first_qsize, first_totalcount, first_totalsize = self.realtime_futures_dataworker.get_packet_info()

        if OPTION_TICK_REQUEST:   
            second_dropcount, second_sys_dropcount, second_qsize, second_totalcount, option_tick_total_size = self.realtime_option_tick_dataworker.get_packet_info()

        if OPTION_QUOTE_REQUEST:    
            third_dropcount, third_sys_dropcount, third_qsize, third_totalcount, third_totalsize = self.realtime_option_quote_dataworker.get_packet_info()

        if OVC_REQUEST:    
            fourth_dropcount, fourth_sys_dropcount, fourth_qsize, fourth_totalcount, ovc_tick_total_size = self.realtime_ovc_dataworker.get_packet_info()

        total_dropcount = first_dropcount + second_dropcount + third_dropcount + fourth_dropcount
        total_sys_dropcount = first_sys_dropcount + second_sys_dropcount + third_sys_dropcount + fourth_sys_dropcount
        total_waiting_count = first_qsize + second_qsize + third_qsize + fourth_qsize
        totalcount = first_totalcount + second_totalcount + third_totalcount + fourth_totalcount
        total_packet_size = first_totalsize + option_tick_total_size + third_totalsize + ovc_tick_total_size

        if totalcount > 0:
            drop_percent = (total_dropcount / totalcount) * 100
        else:
            pass

        if DayTime:
            drop_txt = '{0}/{1}({2}k), {3}k, [{4:.1f}%]'.format(format(total_dropcount, ','), format(totalcount, ','), format(int(total_packet_size/1000), ','), format(int(option_tick_total_size/1000), ','), drop_percent)
        else:
            drop_txt = '{0}/{1}({2}k), {3}k, [{4:.1f}%]'.format(format(total_dropcount, ','), format(totalcount, ','), format(int(total_packet_size/1000), ','), format(int(ovc_tick_total_size/1000), ','), drop_percent)
        
        txt = ' [{0}]수신 = [{1:02d}:{2:02d}:{3:02d}/{4:02d}:{5:02d}:{6:02d}]({7}), {8}\r'.format(szTrCode, \
            dt.hour, dt.minute, dt.second, int(tickdata['수신시간'][0:2]), int(tickdata['수신시간'][2:4]), int(tickdata['수신시간'][4:6]), time_gap, drop_txt)

        if time_gap_abs >= view_time_tolerance:
            self.statusbar.setStyleSheet("color : red")
        else:
            if DARK_STYLESHEET:
                self.statusbar.setStyleSheet("color : lawngreen")
            else:
                self.statusbar.setStyleSheet("color : darkgreen")

        self.statusbar.showMessage(txt)        
        
        if time_gap_abs >= view_time_tolerance:
            self.label_3rd.setStyleSheet("background-color: yellow; color: red; font-family: Consolas; font-size: 10pt; font: Normal; border-style: solid; border-width: 1px; border-color: black; border-radius: 5px")

            if szTrCode == 'OH0' and tickdata['단축코드'][0:3] == '201':
                txt = "{0}\n({1})".format('COH0', time_gap_abs)
            elif szTrCode == 'EH0' and tickdata['단축코드'][0:3] == '201':
                txt = "{0}\n({1})".format('CEH0', time_gap_abs)
            elif szTrCode == 'OH0' and tickdata['단축코드'][0:3] == '301':
                txt = "{0}\n({1})".format('POH0', time_gap_abs)
            elif szTrCode == 'EH0' and tickdata['단축코드'][0:3] == '301':
                txt = "{0}\n({1})".format('PEH0', time_gap_abs)
            else:
                pass
        else:
            if flag_3rd_process_queue_empty:
                self.label_3rd.setStyleSheet("background-color: lime; color: black; font-family: Consolas; font-size: 10pt; font: Normal; border-style: solid; border-width: 1px; border-color: black; border-radius: 5px")
            else:
                self.label_3rd.setStyleSheet("background-color: black; color: lime; font-family: Consolas; font-size: 10pt; font: Normal; border-style: solid; border-width: 1px; border-color: black; border-radius: 5px")

            if szTrCode == 'OH0' and tickdata['단축코드'][0:3] == '201':
                txt = "{0}\n({1:.2f})".format('COH0', args_processing_time)
            elif szTrCode == 'EH0' and tickdata['단축코드'][0:3] == '201':
                txt = "{0}\n({1:.2f})".format('CEH0', args_processing_time)
            elif szTrCode == 'OH0' and tickdata['단축코드'][0:3] == '301':
                txt = "{0}\n({1:.2f})".format('POH0', args_processing_time)
            elif szTrCode == 'EH0' and tickdata['단축코드'][0:3] == '301':
                txt = "{0}\n({1:.2f})".format('PEH0', args_processing_time)
            else:
                pass
        
        self.label_3rd.setText(txt)

        # 3rd 프로세스 실시간데이타 갱신
        if self.dialog['선물옵션전광판'] is not None and self.dialog['선물옵션전광판'].flag_score_board_open:

            if time_gap_abs < view_time_tolerance:
                self.update_3rd_process(tickdata)
            else:
                pass
        else:
            pass

    @pyqtSlot(list)
    def transfer_mp_ovc_trdata(self, trdata):

        dt = datetime.now()

        if trdata[0] == 'login' and trdata[1] == '0000':

            #txt = '4th 백그라운드 프로세스 로그인 성공 !!!\r'
            txt = '해외선물 체결 프로세스(Process ID = {0}) 생성 성공 !!!\r'.format(ovc_process.pid)
            self.textBrowser.append(txt)
            self.statusbar.showMessage(trdata[3] + ' ' + trdata[2])

            if self.mp_number == 1:

                # 버티칼 스크롤바를 항상 bottom으로...
                self.textBrowser.verticalScrollBar().setValue(self.textBrowser.verticalScrollBar().maximum())
                
                if AUTO_START:
                    txt = '[{0:02d}:{1:02d}:{2:02d}] Score Board Dialog를 자동시작 합니다...\r'.format(dt.hour, dt.minute, dt.second)
                    self.textBrowser.append(txt)

                    self.dialog['선물옵션전광판'] = 화면_선물옵션전광판(parent=self)
                    self.dialog['선물옵션전광판'].show()

                    self.dialog['선물옵션전광판'].RunCode()
                else:
                    pass
            
        elif trdata[0] == 'login' and trdata[1] != '0000':

            txt = '4th 로그인 실패({0})!  다시 로그인하세요...'.format(trdata[0])
            self.statusbar.showMessage(txt)
        else:
            pass

    @pyqtSlot(dict)
    def transfer_mp_ovc_realdata(self, tickdata):

        global drop_txt, drop_percent, time_gap, main_totalsize, option_tick_total_size, ovc_tick_total_size
        global total_packet_size
        
        dt = datetime.now()        

        # 수신된 실시간데이타 정보표시(누락된 패킷수, 큐의 크기, 수신된 총 패킷수, 수신된 총 패킷크기)            
        szTrCode = tickdata['tr_code']

        if self.mp_number == 1:

            first_dropcount = 0
            first_sys_dropcount = 0
            first_qsize = 0
            first_totalcount = 0
            first_totalsize = 0

            second_dropcount = 0
            second_sys_dropcount = 0
            second_qsize = 0
            second_totalcount = 0
            option_tick_total_size = 0

            third_dropcount = 0
            third_sys_dropcount = 0
            third_qsize = 0
            third_totalcount = 0
            third_totalsize = 0

            fourth_dropcount = 0
            fourth_sys_dropcount = 0
            fourth_qsize = 0
            fourth_totalcount = 0
            ovc_tick_total_size = 0

        systime = int(tickdata['system_time'][0:2]) * 3600 + int(tickdata['system_time'][2:4]) * 60 + int(tickdata['system_time'][4:6])

        realtime_hour = int(tickdata['수신시간'][0:2])
        realtime_min = int(tickdata['수신시간'][2:4])
        realtime_sec = int(tickdata['수신시간'][4:6])

        realtime = realtime_hour * 3600 + realtime_min * 60 + realtime_sec

        time_gap = systime - system_server_time_gap - realtime
        time_gap_abs = abs((systime - system_server_time_gap) - realtime)

        if FUTURES_REQUEST:
            first_dropcount, first_sys_dropcount, first_qsize, first_totalcount, first_totalsize = self.realtime_futures_dataworker.get_packet_info()

        if OPTION_TICK_REQUEST:   
            second_dropcount, second_sys_dropcount, second_qsize, second_totalcount, option_tick_total_size = self.realtime_option_tick_dataworker.get_packet_info()

        if OPTION_QUOTE_REQUEST:    
            third_dropcount, third_sys_dropcount, third_qsize, third_totalcount, third_totalsize = self.realtime_option_quote_dataworker.get_packet_info()

        if OVC_REQUEST:    
            fourth_dropcount, fourth_sys_dropcount, fourth_qsize, fourth_totalcount, ovc_tick_total_size = self.realtime_ovc_dataworker.get_packet_info()

        total_dropcount = first_dropcount + second_dropcount + third_dropcount + fourth_dropcount
        total_sys_dropcount = first_sys_dropcount + second_sys_dropcount + third_sys_dropcount + fourth_sys_dropcount
        total_waiting_count = first_qsize + second_qsize + third_qsize + fourth_qsize
        totalcount = first_totalcount + second_totalcount + third_totalcount + fourth_totalcount
        total_packet_size = first_totalsize + option_tick_total_size + third_totalsize + ovc_tick_total_size

        if totalcount > 0:
            drop_percent = (total_dropcount / totalcount) * 100
        else:
            pass

        if DayTime:
            drop_txt = '{0}/{1}({2}k), {3}k, [{4:.1f}%]'.format(format(total_dropcount, ','), format(totalcount, ','), format(int(total_packet_size/1000), ','), format(int(option_tick_total_size/1000), ','), drop_percent)
        else:
            drop_txt = '{0}/{1}({2}k), {3}k, [{4:.1f}%]'.format(format(total_dropcount, ','), format(totalcount, ','), format(int(total_packet_size/1000), ','), format(int(ovc_tick_total_size/1000), ','), drop_percent)
        
        txt = ' [{0}]수신 = [{1:02d}:{2:02d}:{3:02d}/{4:02d}:{5:02d}:{6:02d}]({7}), {8}\r'.format(szTrCode, \
            dt.hour, dt.minute, dt.second, int(tickdata['수신시간'][0:2]), int(tickdata['수신시간'][2:4]), int(tickdata['수신시간'][4:6]), time_gap, drop_txt)

        if time_gap_abs >= view_time_tolerance:
            self.statusbar.setStyleSheet("color : red")
        else:
            if DARK_STYLESHEET:
                self.statusbar.setStyleSheet("color : lawngreen")
            else:
                self.statusbar.setStyleSheet("color : darkgreen")

        self.statusbar.showMessage(txt)
        
        if time_gap_abs >= view_time_tolerance:
            self.label_4th.setStyleSheet("background-color: yellow; color: red; font-family: Consolas; font-size: 10pt; font: Normal; border-style: solid; border-width: 1px; border-color: black; border-radius: 5px")

            txt = "{0}\n({1})".format(tickdata['종목코드'], time_gap_abs)
        else:
            if flag_4th_process_queue_empty:
                self.label_4th.setStyleSheet("background-color: lime; color: black; font-family: Consolas; font-size: 10pt; font: Normal; border-style: solid; border-width: 1px; border-color: black; border-radius: 5px")
            else:
                self.label_4th.setStyleSheet("background-color: black; color: lime; font-family: Consolas; font-size: 10pt; font: Normal; border-style: solid; border-width: 1px; border-color: black; border-radius: 5px")
        
            txt = "{0}\n({1:.2f})".format(tickdata['종목코드'], args_processing_time)

        self.label_4th.setText(txt)                

        # 4th 프로세스 실시간데이타 갱신
        if self.dialog['선물옵션전광판'] is not None and self.dialog['선물옵션전광판'].flag_score_board_open:

            if time_gap_abs < view_time_tolerance:
                self.update_4th_process(tickdata)
            else:
                pass
        else:
            pass

    @logging_time_with_args
    def update_1st_process(self, tickdata):
        
        global flag_futures_update_is_running
        
        dt = datetime.now()

        try:               
            flag_futures_update_is_running = True

            szTrCode = tickdata['tr_code']
            
            if szTrCode == 'NWS':

                self.nws_update(tickdata)

            elif szTrCode == 'JIF':

                self.jif_update(tickdata)

            elif szTrCode == 'YJ_':

                if len(tickdata['수신시간']) == 5:
                    realtime_hour = int(tickdata['수신시간'][0:1])
                else:
                    realtime_hour = int(tickdata['수신시간'][0:2])

                if realtime_hour < 15:
                    self.yj_update(tickdata)
                else:
                    pass

            elif szTrCode == 'YFC':

                if len(tickdata['수신시간']) == 5:
                    realtime_hour = int(tickdata['수신시간'][0:1])
                else:
                    realtime_hour = int(tickdata['수신시간'][0:2])

                if realtime_hour < 15:
                    self.yfc_update(tickdata)
                else:
                    pass

            elif szTrCode == 'YS3':

                if len(tickdata['수신시간']) == 5:
                    realtime_hour = int(tickdata['수신시간'][0:1])
                else:
                    realtime_hour = int(tickdata['수신시간'][0:2])

                if realtime_hour < 15:    
                    self.ys3_update(tickdata)
                else:
                    pass
            
            elif szTrCode == 'YOC':

                pass
            
            elif szTrCode == 'S3_':

                self.s3_update(tickdata)
                
            elif szTrCode == 'IJ_':

                self.ij_update(tickdata)

            elif szTrCode == 'BM_':

                self.bm_update(tickdata)

            elif szTrCode == 'PM_':

                self.pm_update(tickdata)

            elif szTrCode == 'FC0' or szTrCode == 'NC0':
                if flag_t8433_response_ok:
                    self.futures_tick_update(tickdata)
                else:
                    pass
            elif szTrCode == 'FH0' or szTrCode == 'NH0':
                if flag_t8433_response_ok:
                    self.futures_quote_update(tickdata)
                else:
                    pass
            else:
                pass
            
        except Exception as e:

            txt = '[{0:02d}:{1:02d}:{2:02d}] Exception : update_1st_process 에서 {3} \n상기 오류가 발생했습니다.\r'.format(dt.hour, dt.minute, dt.second, traceback.format_exc())
            self.textBrowser.append(txt)

        finally:
            flag_futures_update_is_running = False

    @logging_time_with_args
    def update_2nd_process(self, tickdata):
        
        global flag_option_tick_update_is_running
        
        dt = datetime.now()

        try:               
            flag_option_tick_update_is_running = True

            szTrCode = tickdata['tr_code']

            if szTrCode == 'OC0' or szTrCode == 'EC0':
                if flag_t8416_data_receive_done:            
                    self.option_tick_update(tickdata)
                else:
                    pass
            else:
                pass
            
            if szTrCode == 'YOC':

                if len(tickdata['수신시간']) == 5:
                    realtime_hour = int(tickdata['수신시간'][0:1])
                else:
                    realtime_hour = int(tickdata['수신시간'][0:2])

                if realtime_hour < 15:
                    self.yoc_update(tickdata)
                else:
                    pass
            else:
                pass
            
        except Exception as e:

            txt = '[{0:02d}:{1:02d}:{2:02d}] Exception : update_2nd_process 에서 {3} \n상기 오류가 발생했습니다.\r'.format(dt.hour, dt.minute, dt.second, traceback.format_exc())
            self.textBrowser.append(txt)

        finally:
            flag_option_tick_update_is_running = False

    @logging_time_with_args
    def update_3rd_process(self, tickdata):
        
        global flag_option_quote_update_is_running
        
        dt = datetime.now()

        try:               
            flag_option_quote_update_is_running = True

            if flag_t8416_data_receive_done:
                self.option_quote_update(tickdata)
            else:
                pass
            
        except Exception as e:

            txt = '[{0:02d}:{1:02d}:{2:02d}] Exception : update_3rd_process 에서 {3} \n상기 오류가 발생했습니다.\r'.format(dt.hour, dt.minute, dt.second, traceback.format_exc())
            self.textBrowser.append(txt)

        finally:
            flag_option_quote_update_is_running = False

    @logging_time_with_args
    def update_4th_process(self, tickdata):
        
        global flag_ovc_update_is_running
        
        dt = datetime.now()

        try:               
            flag_ovc_update_is_running = True
            
            if flag_t8433_response_ok:
                self.ovc_update(tickdata)
            else:
                pass
            
        except Exception as e:

            txt = '[{0:02d}:{1:02d}:{2:02d}] Exception : update_4th_process 에서 {3} \n상기 오류가 발생했습니다.\r'.format(dt.hour, dt.minute, dt.second, traceback.format_exc())
            self.textBrowser.append(txt)

        finally:
            flag_ovc_update_is_running = False
    #####################################################################################################################################################################
    # 쓰레드방식 처리관련 함수들
    #####################################################################################################################################################################
    @pyqtSlot(str, str)
    def transfer_thread_exception(self, str, error):

        dt = datetime.now()

        txt = '[{0:02d}:{1:02d}:{2:02d}] {3} 큐 쓰레드에서 {4}예외가 발생했습니다.\r'.format(dt.hour, dt.minute, dt.second, str, error)
        self.textBrowser.append(txt)

        #playsound('Resources/notify.wav')
        #winsound.PlaySound('Resources/notify.wav', winsound.SND_FILENAME)

    @pyqtSlot(dict)
    def transfer_thread_realdata(self, data):

        global drop_txt, drop_percent, time_gap, main_opt_totalsize, main_totalsize

        dt = datetime.now()

        # 수신된 실시간데이타 정보표시(누락된 패킷수, 큐의 크기, 수신된 총 패킷수, 수신된 총 패킷크기)            
        szTrCode = data['tr_code']

        if flag_1st_process_queue_empty:
            self.label_1st.setStyleSheet("background-color: white; color: blue; font-family: Consolas; font-size: 10pt; font: Normal; border-style: solid; border-width: 1px; border-color: black; border-radius: 5px")
        else:
            self.label_1st.setStyleSheet("background-color: black; color: cyan; font-family: Consolas; font-size: 10pt; font: Normal; border-style: solid; border-width: 1px; border-color: black; border-radius: 5px")

        txt = "{0}\n({1:.2f})".format(szTrCode, args_processing_time)
        self.label_1st.setText(txt)        

        if szTrCode == 'JIF' or szTrCode == 'BM_' or szTrCode == 'PM_':
            pass
        else:
            if szTrCode == 'EH0' and int(data['수신시간'][0:2]) >= 24:
                    time_gap = (dt.hour * 3600 + dt.minute * 60 + dt.second) - system_server_time_gap - ((int(data['수신시간'][0:2]) - 24) * 3600 + int(data['수신시간'][2:4]) * 60 + int(data['수신시간'][4:6]))
            else:                    
                time_gap = (dt.hour * 3600 + dt.minute * 60 + dt.second) - system_server_time_gap - (int(data['수신시간'][0:2]) * 3600 + int(data['수신시간'][2:4]) * 60 + int(data['수신시간'][4:6]))

             # 수신된 실시간데이타 정보표시(누락된 패킷수, 누락된 패킷, 수신된 총 패킷수, 수신된 총 패킷크기)
            dropcount, sys_dropcount, qsize, totalcount, main_totalsize, main_opt_totalsize = self.realtime_thread_dataworker.get_packet_info()

            if totalcount > 0:
                drop_percent = ((dropcount + sys_dropcount) / totalcount) * 100
            else:
                pass

            if OPTION_SIZE:
                drop_txt = '{0}({1})/{2}({3}k), [{4:.1f}%]'.format(format(dropcount, ','), format(sys_dropcount, ','), format(totalcount, ','), format(int(main_opt_totalsize/1000), ','), drop_percent)
            else:
                drop_txt = '{0}({1})/{2}({3}k), [{4:.1f}%]'.format(format(dropcount, ','), format(sys_dropcount, ','), format(totalcount, ','), format(int(main_totalsize/1000), ','), drop_percent)

            txt = ' [{0}]수신시간 = [{1:02d}:{2:02d}:{3:02d}]({4}), {5}\r'.format(szTrCode, int(data['수신시간'][0:2]), int(data['수신시간'][2:4]), int(data['수신시간'][4:6]), time_gap, drop_txt)

            if abs(time_gap) >= view_time_tolerance:
                self.statusbar.setStyleSheet("color : red")
            else:
                if DARK_STYLESHEET:
                    self.statusbar.setStyleSheet("color : lawngreen")
                else:
                    self.statusbar.setStyleSheet("color : darkgreen")

            self.statusbar.showMessage(txt)      

        # 데이타를 전광판 다이얼로그로 전달
        if self.dialog['선물옵션전광판'] is not None and self.dialog['선물옵션전광판'].flag_score_board_open:
            
            szTrCode = data['tr_code']
            
            if szTrCode == 'NWS':
                self.nws_update(data)
            elif szTrCode == 'JIF':
                self.jif_update(data)
            elif szTrCode == 'YJ_':
                self.yj_update(data)
            elif szTrCode == 'YFC':
                self.yfc_update(data)
            elif szTrCode == 'YS3':
                self.ys3_update(data)
            elif szTrCode == 'YOC':
                self.yoc_update(data)
            elif szTrCode == 'S3_':
                self.s3_update(data)
            elif szTrCode == 'IJ_':
                self.ij_update(data)
            elif szTrCode == 'BM_':

                self.bm_update(data)

            elif szTrCode == 'PM_':

                self.pm_update(data)

            elif szTrCode == 'FC0' or szTrCode == 'NC0':
                self.futures_tick_update(data)
            elif szTrCode == 'FH0' or szTrCode == 'NH0':
                self.futures_quote_update(data)            
            elif szTrCode == 'OVC':
                self.ovc_update(data)
            else:
                pass            
        else:
            pass

    #####################################################################################################################################################################
    # 실시간 처리관련 함수들
    #####################################################################################################################################################################
    def nws_update(self, tickdata):

        try:
            szTrCode = tickdata['tr_code']
            dt = datetime.now()

            if NEWS_CHK:

                if len(tickdata['수신시간']) == 5:
                    realtime_hour = int(tickdata['수신시간'][0:1])
                    realtime_min = int(tickdata['수신시간'][1:3])
                    realtime_sec = int(tickdata['수신시간'][3:5])
                else:
                    realtime_hour = int(tickdata['수신시간'][0:2])
                    realtime_min = int(tickdata['수신시간'][2:4])
                    realtime_sec = int(tickdata['수신시간'][4:6])

                txt = '[{0:02d}:{1:02d}:{2:02d}] NEWS : {3}\r'.format(realtime_hour, realtime_min, realtime_sec, tickdata['제목'])
                self.textBrowser.append(txt)
            else:
                pass
        
        except Exception as e:

            txt = '[{0:02d}:{1:02d}:{2:02d}] Exception : nws_update {3}에서 {4}타입의 {5}예외가 발생했습니다.\r'.format(dt.hour, dt.minute, dt.second, szTrCode, type(e).__name__, str(e))
            self.textBrowser.append(txt)

    def jif_update(self, tickdata):

        global SP500_주간_시작가, DOW_주간_시작가, NASDAQ_주간_시작가, WTI_주간_시작가, ADI_주간_시작가
        global SP500_야간_시작가, DOW_야간_시작가, NASDAQ_야간_시작가, WTI_야간_시작가, ADI_야간_시작가
        global flag_market_service, service_terminate, jugan_service_terminate, flag_option_start, receive_quote
        global flag_score_board_start, flag_telegram_send_start, flag_telegram_listen_start, dongsi_quote

        try:
            dt = datetime.now()

            txt = '[{0:02d}:{1:02d}:{2:02d}] 장구분[{3}], 장상태[{4}]\r'.format(dt.hour, dt.minute, dt.second, tickdata['장구분'], tickdata['장상태'])
            self.dialog['선물옵션전광판'].textBrowser.append(txt)
            self.textBrowser.append(txt)

            # 장시작 10분전
            if tickdata['장구분'] == '5' and tickdata['장상태'] == '25':

                txt = '[{0:02d}:{1:02d}:{2:02d}] 장시작 10분전입니다.\r'.format(dt.hour, dt.minute, dt.second)
                self.dialog['선물옵션전광판'].textBrowser.append(txt)
                self.textBrowser.append(txt)

            # 현물장 시작 10초전
            elif tickdata['장구분'] == '1' and tickdata['장상태'] == '22':

                txt = '[{0:02d}:{1:02d}:{2:02d}] 현물장 시작 10초전입니다.\r'.format(dt.hour, dt.minute, dt.second)
                self.dialog['선물옵션전광판'].textBrowser.append(txt)
                self.textBrowser.append(txt)

            # 현물장 장전 동시호가 개시
            elif tickdata['장구분'] == '1' and tickdata['장상태'] == '11':

                txt = '[{0:02d}:{1:02d}:{2:02d}] 장전 동시호가가 시작됩니다.\r'.format(dt.hour, dt.minute, dt.second)
                self.dialog['선물옵션전광판'].textBrowser.append(txt)
                self.textBrowser.append(txt)

            # 선물장 시작 10초전
            elif tickdata['장구분'] == '5' and tickdata['장상태'] == '22':
            
                txt = '[{0:02d}:{1:02d}:{2:02d}] 선물장 시작 10초전입니다.\r'.format(dt.hour, dt.minute, dt.second)
                self.dialog['선물옵션전광판'].textBrowser.append(txt)
                self.textBrowser.append(txt)

            # 주간 선물/옵션장 시작
            elif tickdata['장구분'] == '5' and tickdata['장상태'] == '21':

                flag_market_service = True

                SP500_주간_시작가 = SP500_현재가
                DOW_주간_시작가 = DOW_현재가
                NASDAQ_주간_시작가 = NASDAQ_현재가
                WTI_주간_시작가 = WTI_현재가
                ADI_주간_시작가 = ADI_현재가

                txt = '[{0:02d}:{1:02d}:{2:02d}] 주간장이 시작됩니다.\r'.format(dt.hour, dt.minute, dt.second)
                self.dialog['선물옵션전광판'].textBrowser.append(txt)
                self.textBrowser.append(txt)

                txt = '[{0:02d}:{1:02d}:{2:02d}] S&P 500 주간시작가 = {3}\r'.format(dt.hour, dt.minute, dt.second, SP500_주간_시작가)
                self.dialog['선물옵션전광판'].textBrowser.append(txt)
                self.textBrowser.append(txt)

                txt = '[{0:02d}:{1:02d}:{2:02d}] DOW 주간시작가 = {3}\r'.format(dt.hour, dt.minute, dt.second, DOW_주간_시작가)
                self.dialog['선물옵션전광판'].textBrowser.append(txt)
                self.textBrowser.append(txt)

                txt = '[{0:02d}:{1:02d}:{2:02d}] NASDAQ 주간시작가 = {3}\r'.format(dt.hour, dt.minute, dt.second, NASDAQ_주간_시작가)
                self.dialog['선물옵션전광판'].textBrowser.append(txt)
                self.textBrowser.append(txt)

                txt = '[{0:02d}:{1:02d}:{2:02d}] ADI 주간시작가 = {3}\r'.format(dt.hour, dt.minute, dt.second, ADI_주간_시작가)
                self.dialog['선물옵션전광판'].textBrowser.append(txt)
                self.textBrowser.append(txt)

                if flag_tts and TARGET_MONTH == 'CM':
                    #playsound( "Resources/doorbell.wav" )
                    winsound.PlaySound('Resources/doorbell.wav', winsound.SND_FILENAME)
                else:
                    pass

            # 야간 선물장 시작
            elif tickdata['장구분'] == '7' and tickdata['장상태'] == '21':
            
                flag_market_service = True

                txt = '[{0:02d}:{1:02d}:{2:02d}] 야간 선물장이 시작됩니다.\r'.format(dt.hour, dt.minute, dt.second)
                self.dialog['선물옵션전광판'].textBrowser.append(txt)
                self.textBrowser.append(txt)
                '''
                SP500_야간_시작가 = SP500_현재가
                DOW_야간_시작가 = DOW_현재가
                WTI_야간_시작가 = WTI_현재가

                jisu_txt = "S&P 500 야간시작가: {0}".format(SP500_야간_시작가)

                self.dialog['선물옵션전광판'].label_4th_index.setStyleSheet('background-color: black; color: yellow; font-family: Consolas; font-size: 9pt; font: Bold; border-style: solid; border-width: 1px; border-color: yellow; border-radius: 5px')
                self.dialog['선물옵션전광판'].label_4th_index.setText(jisu_txt)

                txt = '[{0:02d}:{1:02d}:{2:02d}] SP500 야간시작가 = {3}\r'.format(dt.hour, dt.minute, dt.second, SP500_야간_시작가)
                self.dialog['선물옵션전광판'].textBrowser.append(txt)
                self.textBrowser.append(txt)

                jisu_txt = "DOW 야간시작가: {0}".format(DOW_야간_시작가)

                self.dialog['선물옵션전광판'].label_5th_index.setStyleSheet('background-color: black; color: yellow; font-family: Consolas; font-size: 9pt; font: Bold; border-style: solid; border-width: 1px; border-color: yellow; border-radius: 5px')
                self.dialog['선물옵션전광판'].label_5th_index.setText(jisu_txt)

                txt = '[{0:02d}:{1:02d}:{2:02d}] DOW 야간시작가 = {3}\r'.format(dt.hour, dt.minute, dt.second, DOW_야간_시작가)
                self.dialog['선물옵션전광판'].textBrowser.append(txt)
                self.textBrowser.append(txt)

                jisu_txt = "WTI 야간시작가: {0}".format(WTI_야간_시작가)

                self.dialog['선물옵션전광판'].label_6th_index.setStyleSheet('background-color: black; color: yellow; font-family: Consolas; font-size: 9pt; font: Bold; border-style: solid; border-width: 1px; border-color: yellow; border-radius: 5px')
                self.dialog['선물옵션전광판'].label_6th_index.setText(jisu_txt)

                txt = '[{0:02d}:{1:02d}:{2:02d}] WTI 야간시작가 = {3}\r'.format(dt.hour, dt.minute, dt.second, WTI_야간_시작가)
                self.dialog['선물옵션전광판'].textBrowser.append(txt)
                self.textBrowser.append(txt)
                '''
            # 야간 옵션장 시작
            elif tickdata['장구분'] == '8' and tickdata['장상태'] == '21':

                flag_market_service = True

                txt = '[{0:02d}:{1:02d}:{2:02d}] 야간 옵션장이 시작됩니다.\r'.format(dt.hour, dt.minute, dt.second)
                self.dialog['선물옵션전광판'].textBrowser.append(txt)
                self.textBrowser.append(txt)

                SP500_야간_시작가 = SP500_현재가
                DOW_야간_시작가 = DOW_현재가
                NASDAQ_야간_시작가 = NASDAQ_현재가
                WTI_야간_시작가 = WTI_현재가
                ADI_야간_시작가 = ADI_현재가

                jisu_txt = "S&P 500 야간시작가: {0}".format(SP500_야간_시작가)

                self.dialog['선물옵션전광판'].label_4th_index.setStyleSheet('background-color: black; color: yellow; font-family: Consolas; font-size: 9pt; font: Bold; border-style: solid; border-width: 1px; border-color: yellow; border-radius: 5px')
                self.dialog['선물옵션전광판'].label_4th_index.setText(jisu_txt)

                txt = '[{0:02d}:{1:02d}:{2:02d}] SP500 야간시작가 = {3}\r'.format(dt.hour, dt.minute, dt.second, SP500_야간_시작가)
                self.dialog['선물옵션전광판'].textBrowser.append(txt)
                self.textBrowser.append(txt)

                jisu_txt = "NASDAQ 야간시작가: {0}".format(NASDAQ_야간_시작가)

                self.dialog['선물옵션전광판'].label_5th_index.setStyleSheet('background-color: black; color: yellow; font-family: Consolas; font-size: 9pt; font: Bold; border-style: solid; border-width: 1px; border-color: yellow; border-radius: 5px')
                self.dialog['선물옵션전광판'].label_5th_index.setText(jisu_txt)

                txt = '[{0:02d}:{1:02d}:{2:02d}] NASDAQ 야간시작가 = {3}\r'.format(dt.hour, dt.minute, dt.second, NASDAQ_야간_시작가)
                self.dialog['선물옵션전광판'].textBrowser.append(txt)
                self.textBrowser.append(txt)

                jisu_txt = "ADI 야간시작가: {0}".format(ADI_야간_시작가)

                self.dialog['선물옵션전광판'].label_6th_index.setStyleSheet('background-color: black; color: yellow; font-family: Consolas; font-size: 9pt; font: Bold; border-style: solid; border-width: 1px; border-color: yellow; border-radius: 5px')
                self.dialog['선물옵션전광판'].label_6th_index.setText(jisu_txt)

                txt = '[{0:02d}:{1:02d}:{2:02d}] ADI 야간시작가 = {3}\r'.format(dt.hour, dt.minute, dt.second, ADI_야간_시작가)
                self.dialog['선물옵션전광판'].textBrowser.append(txt)
                self.textBrowser.append(txt)

            # 미국 주식장 시작
            elif tickdata['장구분'] == '9' and tickdata['장상태'] == '21':

                txt = '[{0:02d}:{1:02d}:{2:02d}] 미국 주식장이 시작됩니다.\r'.format(dt.hour, dt.minute, dt.second)
                self.dialog['선물옵션전광판'].textBrowser.append(txt)
                self.textBrowser.append(txt)

            # 현물 장마감 5분전
            elif tickdata['장구분'] == '1' and tickdata['장상태'] == '44':

                txt = '[{0:02d}:{1:02d}:{2:02d}] 현물 장마감 5분전입니다.\r'.format(dt.hour, dt.minute, dt.second)
                self.dialog['선물옵션전광판'].textBrowser.append(txt)
                self.textBrowser.append(txt)

            # 현물 장마감 1분전
            elif tickdata['장구분'] == '1' and tickdata['장상태'] == '43':

                txt = '[{0:02d}:{1:02d}:{2:02d}] 현물 장마감 1분전입니다.\r'.format(dt.hour, dt.minute, dt.second)
                self.dialog['선물옵션전광판'].textBrowser.append(txt)
                self.textBrowser.append(txt)

            # 장후 동시호가 시작
            elif tickdata['장구분'] == '1' and tickdata['장상태'] == '31':

                txt = '[{0:02d}:{1:02d}:{2:02d}] 장후 동시호가가 시작됩니다.\r'.format(dt.hour, dt.minute, dt.second)
                self.dialog['선물옵션전광판'].textBrowser.append(txt)
                self.textBrowser.append(txt)

                dongsi_quote = True

            # 주간 선물/옵션장 종료
            elif tickdata['장구분'] == '5' and tickdata['장상태'] == '41':

                txt = '[{0:02d}:{1:02d}:{2:02d}] 주간 선물/옵션장이 종료되었습니다.\r'.format(dt.hour, dt.minute, dt.second)
                self.dialog['선물옵션전광판'].textBrowser.append(txt)
                self.textBrowser.append(txt)

                txt = '[{0:02d}:{1:02d}:{2:02d}] 주간장 종료시 S&P 500 지수 = {3}\r'.format(dt.hour, dt.minute, dt.second, SP500_현재가)
                self.dialog['선물옵션전광판'].textBrowser.append(txt)
                self.textBrowser.append(txt)

                txt = '[{0:02d}:{1:02d}:{2:02d}] 주간장 종료시 DOW 지수 = {3}\r'.format(dt.hour, dt.minute, dt.second, DOW_현재가)
                self.dialog['선물옵션전광판'].textBrowser.append(txt)
                self.textBrowser.append(txt)

                txt = '[{0:02d}:{1:02d}:{2:02d}] 주간장 종료시 NASDAQ 지수 = {3}\r'.format(dt.hour, dt.minute, dt.second, NASDAQ_현재가)
                self.dialog['선물옵션전광판'].textBrowser.append(txt)
                self.textBrowser.append(txt)

                txt = '[{0:02d}:{1:02d}:{2:02d}] 주간장 종료시 WTI 지수 = {3}\r'.format(dt.hour, dt.minute, dt.second, WTI_현재가)
                self.dialog['선물옵션전광판'].textBrowser.append(txt)
                self.textBrowser.append(txt)

                txt = '[{0:02d}:{1:02d}:{2:02d}] 텔레그램 쓰레드를 종료합니다.\r'.format(dt.hour, dt.minute, dt.second)
                self.dialog['선물옵션전광판'].textBrowser.append(txt)
                self.textBrowser.append(txt)

                flag_telegram_send_start = False
                flag_telegram_listen_start = False

                if flag_market_service:

                    flag_market_service = False
                    service_terminate = True
                    jugan_service_terminate = True
                    flag_option_start = False

                    call_atm_value = df_call.at[ATM_INDEX, '현재가']
                    put_atm_value = df_put.at[ATM_INDEX, '현재가']

                    # 저장을 위한 중심가 계산 및 표시
                    if call_atm_value >= put_atm_value:
                        atm_zero_cha = round((call_atm_value - put_atm_value) , 2)
                    else:
                        atm_zero_cha = round((put_atm_value - call_atm_value) , 2)

                    if call_atm_value > put_atm_value:

                        옵션_중심가 = round((put_atm_value + atm_zero_cha / 2), 2)

                    elif put_atm_value > call_atm_value:

                        옵션_중심가 = round((call_atm_value + atm_zero_cha / 2), 2)
                    else:
                        옵션_중심가 = call_atm_value

                    # KP200의 주요정보를 저장
                    with open('daytime.txt', mode='w') as daytime_file:

                        file_txt = '################# < KOSPI Price of the Last Day > ###################\n'                        
                        daytime_file.write(file_txt)
                        file_txt = 'KOSPI Price = {0}\n'.format(kospi_price)
                        daytime_file.write(file_txt)

                        file_txt = '################# < KOSDAQ Price of the Last Day > ###################\n'                        
                        daytime_file.write(file_txt)
                        file_txt = 'KOSDAQ Price = {0}\n'.format(kosdaq_price)
                        daytime_file.write(file_txt)

                        file_txt = '################# < KP200 Index of the Last Day > ###################\n'                        
                        daytime_file.write(file_txt)
                        file_txt = 'Center Value = {0}\n'.format(옵션_중심가)
                        daytime_file.write(file_txt)
                        file_txt = 'KP200 Last Close = {0}\n'.format(KP200_전일종가)
                        daytime_file.write(file_txt)
                        file_txt = 'KP200 Open = {0}\n'.format(KP200_당일시가)
                        daytime_file.write(file_txt)                            
                        file_txt = 'KP200 High = {0}\n'.format(kp200_고가)
                        daytime_file.write(file_txt)
                        file_txt = 'KP200 Low = {0}\n'.format(kp200_저가)
                        daytime_file.write(file_txt)
                        file_txt = 'KP200 Close = {0}\n'.format(kp200_현재가)
                        daytime_file.write(file_txt)

                        file_txt = '################### < Foreign Futures Index of the Day > #####################\n'
                        daytime_file.write(file_txt)
                        file_txt = 'SP500 Day Close = {0}\n'.format(SP500_현재가)
                        daytime_file.write(file_txt)
                        file_txt = 'DOW Day Close = {0}\n'.format(DOW_현재가)
                        daytime_file.write(file_txt)
                        file_txt = 'NASDAQ Day Close = {0}\n'.format(NASDAQ_현재가)
                        daytime_file.write(file_txt)
                        file_txt = 'HANGSENG Day Close = {0}\n'.format(HANGSENG_현재가)
                        daytime_file.write(file_txt)
                        file_txt = 'WTI Day Close = {0}\n'.format(WTI_현재가)
                        daytime_file.write(file_txt)
                        file_txt = 'GOLD Day Close = {0}\n'.format(GOLD_현재가)
                        daytime_file.write(file_txt)
                        file_txt = 'EURO Day Close = {0}\n'.format(EURO_현재가)
                        daytime_file.write(file_txt)
                        file_txt = 'YEN Day Close = {0}\n'.format(YEN_현재가)
                        daytime_file.write(file_txt)
                        file_txt = 'ADI Day Close = {0}\n'.format(ADI_현재가)
                        daytime_file.write(file_txt)                       

                        daytime_file.close()

                    receive_quote = False

                    if flag_search_moving_node:
                        self.dialog['선물옵션전광판'].pushButton_start.setStyleSheet('QPushButton {background-color: lawngreen; color: black; font-family: Consolas; font-size: 10pt; font: Bold; border-style: solid; border-width: 1px; border-color: black; border-radius: 5px} \
                                                            QPushButton:hover {background-color: black; color: white} \
                                                            QPushButton:pressed {background-color: gold}') 
                    else:
                        self.dialog['선물옵션전광판'].pushButton_start.setStyleSheet('QPushButton {background-color: black; color: lawngreen; font-family: Consolas; font-size: 10pt; font: Bold; border-style: solid; border-width: 1px; border-color: black; border-radius: 5px} \
                                                            QPushButton:hover {background-color: black; color: white} \
                                                            QPushButton:pressed {background-color: gold}')

                    #self.dialog['선물옵션전광판'].pushButton_start.setText(' ScrShot ')
                    #self.dialog['선물옵션전광판'].SaveResult()                                        
                else:
                    pass                                               

            # 야간 선물장 종료
            elif tickdata['장구분'] == '7' and tickdata['장상태'] == '41':

                txt = '[{0:02d}:{1:02d}:{2:02d}] 야간 선물장이 종료되었습니다.\r'.format(dt.hour, dt.minute, dt.second)
                self.dialog['선물옵션전광판'].textBrowser.append(txt)
                self.textBrowser.append(txt)

                txt = '[{0:02d}:{1:02d}:{2:02d}] 야간장 종료시 S&P 500 지수 = {3}\r'.format(dt.hour, dt.minute, dt.second, SP500_현재가)
                self.dialog['선물옵션전광판'].textBrowser.append(txt)

                txt = '[{0:02d}:{1:02d}:{2:02d}] 야간장 종료시 DOW 지수 = {3}\r'.format(dt.hour, dt.minute, dt.second, DOW_현재가)
                self.dialog['선물옵션전광판'].textBrowser.append(txt)

                txt = '[{0:02d}:{1:02d}:{2:02d}] 야간장 종료시 NASDAQ 지수 = {3}\r'.format(dt.hour, dt.minute, dt.second, NASDAQ_현재가)
                self.dialog['선물옵션전광판'].textBrowser.append(txt)

                txt = '[{0:02d}:{1:02d}:{2:02d}] 야간장 종료시 WTI 지수 = {3}\r'.format(dt.hour, dt.minute, dt.second, WTI_현재가)
                self.dialog['선물옵션전광판'].textBrowser.append(txt)

                if flag_market_service:

                    flag_market_service = False
                    service_terminate = True
                    receive_quote = False

                    if flag_search_moving_node:
                        self.dialog['선물옵션전광판'].pushButton_start.setStyleSheet('QPushButton {background-color: lawngreen; color: black; font-family: Consolas; font-size: 10pt; font: Bold; border-style: solid; border-width: 1px; border-color: black; border-radius: 5px} \
                                                            QPushButton:hover {background-color: black; color: white} \
                                                            QPushButton:pressed {background-color: gold}')
                    else:
                        self.dialog['선물옵션전광판'].pushButton_start.setStyleSheet('QPushButton {background-color: black; color: lawngreen; font-family: Consolas; font-size: 10pt; font: Bold; border-style: solid; border-width: 1px; border-color: black; border-radius: 5px} \
                                                            QPushButton:hover {background-color: black; color: white} \
                                                            QPushButton:pressed {background-color: gold}')                   

                    txt = '[{0:02d}:{1:02d}:{2:02d}] 텔레그램 쓰레드를 종료합니다.\r'.format(dt.hour, dt.minute, dt.second)
                    self.dialog['선물옵션전광판'].textBrowser.append(txt)

                    flag_telegram_send_start = False
                    flag_telegram_listen_start = False

                    #self.dialog['선물옵션전광판'].pushButton_start.setText(' ScrShot ')
                    #self.dialog['선물옵션전광판'].SaveResult()
                else:
                    pass                    

            # 야간 옵션장 종료(선물장보다 1시간 먼저 종료됨)
            elif tickdata['장구분'] == '8' and tickdata['장상태'] == '41':

                txt = '[{0:02d}:{1:02d}:{2:02d}] 야간 옵션장이 종료되었습니다.\r'.format(dt.hour, dt.minute, dt.second)
                self.dialog['선물옵션전광판'].textBrowser.append(txt)
                self.textBrowser.append(txt)

                if flag_market_service:

                    #flag_market_service = False
                    #service_terminate = True
                    #receive_quote = False

                    if flag_search_moving_node:
                        self.dialog['선물옵션전광판'].pushButton_start.setStyleSheet('QPushButton {background-color: lawngreen; color: black; font-family: Consolas; font-size: 10pt; font: Bold; border-style: solid; border-width: 1px; border-color: black; border-radius: 5px} \
                                                            QPushButton:hover {background-color: black; color: white} \
                                                            QPushButton:pressed {background-color: gold}')
                    else:
                        self.dialog['선물옵션전광판'].pushButton_start.setStyleSheet('QPushButton {background-color: black; color: lawngreen; font-family: Consolas; font-size: 10pt; font: Bold; border-style: solid; border-width: 1px; border-color: black; border-radius: 5px} \
                                                            QPushButton:hover {background-color: black; color: white} \
                                                            QPushButton:pressed {background-color: gold}')                    

                    txt = '[{0:02d}:{1:02d}:{2:02d}] 텔레그램 쓰레드를 종료합니다.\r'.format(dt.hour, dt.minute, dt.second)
                    self.dialog['선물옵션전광판'].textBrowser.append(txt)

                    flag_telegram_send_start = False
                    flag_telegram_listen_start = False

                    #self.dialog['선물옵션전광판'].pushButton_start.setText(' ScrShot ')
                    #self.dialog['선물옵션전광판'].SaveResult()
                else:
                    pass

            # 아침 6경/7경 발생 --> 미국주식 장마감
            elif tickdata['장구분'] == '9' and tickdata['장상태'] == '41':

                txt = '[{0:02d}:{1:02d}:{2:02d}] 미국주식장 마감합니다.\r'.format(dt.hour, dt.minute, dt.second)
                self.dialog['선물옵션전광판'].textBrowser.append(txt)
                self.textBrowser.append(txt)

                yagan_service_terminate = True
            else:
                pass

        except Exception as e:

            txt = '[{0:02d}:{1:02d}:{2:02d}] Exception : jif_update 에서 {3}타입의 {4}예외가 발생했습니다.\r'.format(dt.hour, dt.minute, dt.second, type(e).__name__, str(e))
            self.textBrowser.append(txt)

    def yj_update(self, tickdata):

        global df_futures_cm_graph, df_kp200_graph, KP200_당일시가
        global plot_time_index

        try:
            dt = datetime.now()

            if len(tickdata['수신시간']) == 5:
                plot_time_index = (int(tickdata['수신시간'][0:1]) - DayTime_PreStart_Hour) * 60 + int(tickdata['수신시간'][1:3]) + 1
            else:
                plot_time_index = (int(tickdata['수신시간'][0:2]) - DayTime_PreStart_Hour) * 60 + int(tickdata['수신시간'][2:4]) + 1

            if tickdata['업종코드'] == KOSPI200:

                KP200_당일시가 = float(tickdata['예상지수'])

                self.dialog['선물옵션전광판'].kp200_realdata['시가'] = KP200_당일시가
                self.dialog['선물옵션전광판'].fut_realdata['KP200'] = KP200_당일시가

                #df_futures_cm_graph.at[plot_time_index, 'kp200'] = KP200_당일시가
                df_kp200_graph.at[plot_time_index, 'Price'] = KP200_당일시가

                item = QTableWidgetItem(tickdata['예상지수'])
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(흰색))  

                if KP200_당일시가 > KP200_전일종가:
                    item.setForeground(QBrush(적색))                
                elif KP200_당일시가 < KP200_전일종가:
                    item.setForeground(QBrush(청색))
                else:
                    item.setForeground(QBrush(검정색))

                self.dialog['선물옵션전광판'].tableWidget_fut.setItem(2, Futures_column.시가.value, item)

                시가갭 = KP200_당일시가 - KP200_전일종가

                item = QTableWidgetItem("{0:.2f}".format(시가갭))
                item.setTextAlignment(Qt.AlignCenter)

                if KP200_당일시가 > KP200_전일종가:
                    item.setBackground(QBrush(콜기준가색))
                    item.setForeground(QBrush(검정색))
                elif KP200_당일시가 < KP200_전일종가:
                    item.setBackground(QBrush(풋기준가색))
                    item.setForeground(QBrush(흰색))
                else:
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))

                self.dialog['선물옵션전광판'].tableWidget_fut.setItem(2, Futures_column.시가갭.value, item)

                if 근월물_선물_시가 > 0:
                    예상_Basis = 근월물_선물_시가 - KP200_당일시가                            
                else:
                    pass

            elif tickdata['업종코드'] == KOSPI:

                if tickdata['예상전일대비구분'] == '5':

                    jisu_txt = "KOSPI: {0} (-{1:.2f}, {2:0.1f}%)".format(tickdata['예상지수'], float(tickdata['예상전일비']), float(tickdata['예상등락율']))

                    self.dialog['선물옵션전광판'].label_1st_index.setStyleSheet('background-color: black; color: cyan; font-family: Consolas; font-size: 9pt; font: Bold; border-style: solid; border-width: 1px; border-color: blue; border-radius: 5px')
                    self.dialog['선물옵션전광판'].label_1st_index.setText(jisu_txt)

                elif tickdata['예상전일대비구분'] == '2':

                    jisu_txt = "KOSPI: {0} ({1:.2f}, {2:0.1f}%)".format(tickdata['예상지수'], float(tickdata['예상전일비']), float(tickdata['예상등락율']))

                    self.dialog['선물옵션전광판'].label_1st_index.setStyleSheet('background-color: black; color: magenta; font-family: Consolas; font-size: 9pt; font: Bold; border-style: solid; border-width: 1px; border-color: red; border-radius: 5px')
                    self.dialog['선물옵션전광판'].label_1st_index.setText(jisu_txt)
                else:
                    pass

            elif tickdata['업종코드'] == KOSDAQ:
                pass
            else:
                pass

        except Exception as e:

            txt = '[{0:02d}:{1:02d}:{2:02d}] Exception : yj_update 에서 {3}타입의 {4}예외가 발생했습니다.\r'.format(dt.hour, dt.minute, dt.second, type(e).__name__, str(e))
            self.textBrowser.append(txt)

    def make_yfc_ohlc_dataframe(self, dataframe):

        df = dataframe.copy()

        df.drop(columns=["system_time", "tr_code", "예상체결가전일종가대비구분", "예상체결가전일종가대비", "예상체결가전일종가등락율", "단축코드"], inplace=True)
        
        # Converting the index as date
        df['수신시간'] = pd.to_datetime(date.today().strftime('%Y-%m-%d') + ' ' + df['수신시간'], format='%Y-%m-%d %H%M%S')
        df.set_index('수신시간', inplace=True)
        df['예상체결가격'] = pd.to_numeric(df['예상체결가격'])

        df_ohlc = df.resample(분봉주기)['예상체결가격'].ohlc().bfill()
        QApplication.processEvents()

        return df_ohlc

    def yfc_update(self, tickdata):

        global flag_market_service, 근월물_선물_종가대비_등락율, 선물_진폭비
        global flag_fut_vs_sp500_drate_direction, plot_drate_scale_factor
        global DOW_기준_예상시가, SP500_기준_예상시가
        global 근월물_선물_시가, 근월물_선물_현재가_버퍼, df_futures_cm_graph, flag_futures_cm_ohlc_open
        global 차월물_선물_시가, 차월물_선물_현재가_버퍼, df_futures_nm_graph, flag_futures_nm_ohlc_open
        global 근월물_선물_저가, 근월물_선물_고가, 근월물_선물_피봇
        global 차월물_선물_저가, 차월물_선물_고가, 차월물_선물_피봇
        global old_plot_time_index, plot_time_index
        global df_futures_cm_ta_graph, df_futures_nm_ta_graph
        global df_cm_fut_tick, df_cm_fut_tick_ohlc, df_nm_fut_tick, df_nm_fut_tick_ohlc
        global flag_fut_zero_sec
        
        try:
            dt = datetime.now()

            old_plot_time_index = plot_time_index

            if len(tickdata['수신시간']) == 5:
                plot_time_index = (int(tickdata['수신시간'][0:1]) - DayTime_PreStart_Hour) * 60 + int(tickdata['수신시간'][1:3]) + 1
                fut_plot_sec = int(tickdata['수신시간'][3:5])
            else:
                plot_time_index = (int(tickdata['수신시간'][0:2]) - DayTime_PreStart_Hour) * 60 + int(tickdata['수신시간'][2:4]) + 1
                fut_plot_sec = int(tickdata['수신시간'][4:6])

            if fut_plot_sec != 0:
                flag_fut_zero_sec = False

            if fut_plot_sec == 0 and not flag_fut_zero_sec:

                flag_fut_zero_sec = True

                if flag_ohlc:

                    df_cm_fut_tick = df_cm_fut_tick.drop(df_cm_fut_tick.index[0:df_cm_fut_tick.shape[0]])
                    df_nm_fut_tick = df_nm_fut_tick.drop(df_nm_fut_tick.index[0:df_nm_fut_tick.shape[0]])

                    flag_fut_zero_sec = True

                    df_futures_cm_ta_graph['Open'].fillna(method='bfill', inplace=True)
                    df_futures_cm_ta_graph['High'].fillna(method='bfill', inplace=True) 
                    df_futures_cm_ta_graph['Low'].fillna(method='bfill', inplace=True)
                    df_futures_cm_ta_graph['Close'].fillna(method='bfill', inplace=True)

                    df_futures_nm_ta_graph['Open'].fillna(method='bfill', inplace=True)
                    df_futures_nm_ta_graph['High'].fillna(method='bfill', inplace=True) 
                    df_futures_nm_ta_graph['Low'].fillna(method='bfill', inplace=True)
                    df_futures_nm_ta_graph['Close'].fillna(method='bfill', inplace=True)

                if not flag_ohlc:

                    del 근월물_선물_현재가_버퍼[:]
                    del 차월물_선물_현재가_버퍼[:]
                                
            else:
                pass
                        
            if tickdata['단축코드'] == GMSHCODE:
                                
                근월물_선물_시가 = float(tickdata['예상체결가격'])
                근월물_선물_현재가 = float(tickdata['예상체결가격'])
                근월물_선물_저가 = float(tickdata['예상체결가격'])
                근월물_선물_고가 = float(tickdata['예상체결가격'])

                # 그래프 가격갱신
                df_futures_cm_graph.at[plot_time_index, 'Time'] = tickdata['수신시간']
                df_futures_cm_graph.at[plot_time_index, 'Price'] = 근월물_선물_시가

                if flag_ohlc:

                    df_cm_fut_tick = df_cm_fut_tick.append(tickdata, ignore_index=True)                
                    df_cm_fut_tick_ohlc = self.make_yfc_ohlc_dataframe(df_cm_fut_tick)

                    df_futures_cm_ta_graph.at[plot_time_index, 'Open'] = df_cm_fut_tick_ohlc.iat[df_cm_fut_tick_ohlc.shape[0] - 1, 0]
                    df_futures_cm_ta_graph.at[plot_time_index, 'High'] = df_cm_fut_tick_ohlc.iat[df_cm_fut_tick_ohlc.shape[0] - 1, 1]
                    df_futures_cm_ta_graph.at[plot_time_index, 'Low'] = df_cm_fut_tick_ohlc.iat[df_cm_fut_tick_ohlc.shape[0] - 1, 2]
                    df_futures_cm_ta_graph.at[plot_time_index, 'Close'] = df_cm_fut_tick_ohlc.iat[df_cm_fut_tick_ohlc.shape[0] - 1, 3]

                # 1T OHLC 생성
                
                if not flag_ohlc:

                    df_futures_cm_ta_graph['Open'].fillna(method='bfill', inplace=True)
                    df_futures_cm_ta_graph['High'].fillna(method='bfill', inplace=True) 
                    df_futures_cm_ta_graph['Low'].fillna(method='bfill', inplace=True) 
                    df_futures_cm_ta_graph['Close'].fillna(method='bfill', inplace=True)

                    df_futures_cm_ta_graph.at[plot_time_index, 'Close'] = 근월물_선물_현재가

                    if not 근월물_선물_현재가_버퍼:
                        근월물_선물_현재가_버퍼.append(근월물_선물_현재가)
                        df_futures_cm_ta_graph.at[plot_time_index, 'Open'] = 근월물_선물_현재가
                    else:
                        근월물_선물_현재가_버퍼.append(근월물_선물_현재가)
                        df_futures_cm_ta_graph.at[plot_time_index, 'High'] = max(근월물_선물_현재가_버퍼)
                        df_futures_cm_ta_graph.at[plot_time_index, 'Low'] = min(근월물_선물_현재가_버퍼)                                        
                    
                self.dialog['선물옵션전광판'].fut_realdata['시가'] = 근월물_선물_시가

                txt = '{0}\n({1:.2f})'.format(tickdata['예상체결가격'], SP500_기준_예상시가)

                item = QTableWidgetItem(txt)
                item.setTextAlignment(Qt.AlignCenter)

                if 근월물_선물_시가 > 근월물_선물_종가:
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(적색))                    
                elif 근월물_선물_시가 < 근월물_선물_종가:
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(청색))                    
                else:
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))                    

                self.dialog['선물옵션전광판'].tableWidget_fut.setItem(1, Futures_column.시가.value, item)

                시가갭 = 근월물_선물_시가 - self.dialog['선물옵션전광판'].fut_realdata['종가']

                item = QTableWidgetItem("{0:.2f}".format(시가갭))
                item.setTextAlignment(Qt.AlignCenter)

                if 근월물_선물_시가 > self.dialog['선물옵션전광판'].fut_realdata['종가']:
                    item.setBackground(QBrush(콜기준가색))
                    item.setForeground(QBrush(검정색))
                elif 근월물_선물_시가 < self.dialog['선물옵션전광판'].fut_realdata['종가']:
                    item.setBackground(QBrush(풋기준가색))
                    item.setForeground(QBrush(흰색))
                else:
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))

                self.dialog['선물옵션전광판'].tableWidget_fut.setItem(1, Futures_column.시가갭.value, item)

                if SP500_전일종가 > 0:
                    SP500_기준_예상시가 = (근월물_선물_종가 * SP500_현재가) / SP500_Day_종가
                else:
                    pass            

                txt = '[{0:02d}:{1:02d}:{2:02d}] S&P500 기준 예상 선물시가 = {3:.2f}\r'.format(dt.hour, dt.minute, dt.second, SP500_기준_예상시가)
                self.dialog['선물옵션전광판'].textBrowser.append(txt)

                근월물_선물_피봇 = calc_pivot(근월물_선물_전저, 근월물_선물_전고, 근월물_선물_종가, 근월물_선물_시가, 2)

                item = QTableWidgetItem("{0:.2f}".format(근월물_선물_피봇))
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(흰색))
                item.setForeground(QBrush(검정색))
                self.dialog['선물옵션전광판'].tableWidget_fut.setItem(1, Futures_column.피봇.value, item)

                self.dialog['선물옵션전광판'].fut_realdata['피봇'] = 근월물_선물_피봇

                if 근월물_선물_종가 > 0:
                    근월물_선물_종가대비_등락율 = ((근월물_선물_시가 - 근월물_선물_종가) / 근월물_선물_종가) * 100
                else:
                    pass

                item = QTableWidgetItem("선물\n({0:.2f}%)".format(근월물_선물_종가대비_등락율))
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(흰색))
                item.setForeground(QBrush(검정색))
                self.dialog['선물옵션전광판'].tableWidget_fut.setItem(1, Futures_column.대비.value, item)

                #df_futures_cm_graph.at[plot_time_index, 'Drate'] = plot_drate_scale_factor * 근월물_선물_종가대비_등락율
                df_futures_cm_graph.at[plot_time_index, 'Drate'] = 근월물_선물_종가대비_등락율

                if fut_quote_energy_direction == 'call':

                    self.dialog['선물옵션전광판'].tableWidget_fut.item(1, 0).setBackground(QBrush(적색))
                    self.dialog['선물옵션전광판'].tableWidget_fut.item(1, 0).setForeground(QBrush(흰색))                        

                elif fut_quote_energy_direction == 'put':

                    self.dialog['선물옵션전광판'].tableWidget_fut.item(1, 0).setBackground(QBrush(청색))
                    self.dialog['선물옵션전광판'].tableWidget_fut.item(1, 0).setForeground(QBrush(흰색))                        
                else:
                    self.dialog['선물옵션전광판'].tableWidget_fut.item(1, 0).setBackground(QBrush(검정색))
                    self.dialog['선물옵션전광판'].tableWidget_fut.item(1, 0).setForeground(QBrush(흰색))                        

                item = QTableWidgetItem("CME\n({0:.2f}%)".format(SP500_등락율))
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(흰색))
                item.setForeground(QBrush(검정색))
                self.dialog['선물옵션전광판'].tableWidget_fut.setItem(2, Futures_column.대비.value, item)

                item = QTableWidgetItem("{0:.2f}\n({1:.2f}%)".format(근월물_선물_시가대비, 근월물_선물_종가대비_등락율))
                item.setTextAlignment(Qt.AlignCenter)

                if 근월물_선물_종가대비_등락율 > 0 and SP500_등락율 > 0 and flag_fut_vs_sp500_drate_direction:

                    item.setBackground(QBrush(pink))
                    item.setForeground(QBrush(검정색))

                elif 근월물_선물_종가대비_등락율 < 0 and SP500_등락율 < 0 and flag_fut_vs_sp500_drate_direction:

                    item.setBackground(QBrush(lightskyblue))
                    item.setForeground(QBrush(검정색))
                else:                
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))

                self.dialog['선물옵션전광판'].tableWidget_fut.setItem(1, Futures_column.대비.value, item)                    

                if 근월물_선물_시가 > 0:
                    선물_진폭비 = (근월물_선물_고가 - 근월물_선물_저가) / 근월물_선물_시가
                else:
                    pass

                if SP500_진폭비 > 0:            
                    선물_SP500_진폭비율 = 선물_진폭비 / SP500_진폭비

                    item = QTableWidgetItem("{0:.2f}".format(선물_SP500_진폭비율))
                    item.setTextAlignment(Qt.AlignCenter)

                    item.setBackground(QBrush(라임))
                    item.setForeground(QBrush(검정색))

                    self.dialog['선물옵션전광판'].tableWidget_fut.setItem(0, Futures_column.대비.value, item)                        
                else:
                    pass

                # ICHIMOKU
                df_futures_cm_ta_graph['OE_CONV'], df_futures_cm_ta_graph['OE_BASE'], df_futures_cm_ta_graph['SPAN_A'], df_futures_cm_ta_graph['SPAN_B'], df_futures_cm_ta_graph['LAGGING_SPAN'] = self.Calc_ICHIMOKU(df_futures_cm_ta_graph, CONVERSION_LINE_PERIOD, BASE_LINE_PERIOD, SPAN_B_PERIOD)                

            elif tickdata['단축코드'] == CMSHCODE:

                차월물_선물_시가 = float(tickdata['예상체결가격'])
                차월물_선물_현재가 = float(tickdata['예상체결가격'])
                차월물_선물_저가 = float(tickdata['예상체결가격'])
                차월물_선물_고가 = float(tickdata['예상체결가격'])

                # 그래프 가격갱신
                if 차월물_선물_시가 > 0:
                    
                    df_futures_nm_graph.at[plot_time_index, 'Price'] = 차월물_선물_시가
                    df_futures_nm_graph.at[plot_time_index, 'Time'] = tickdata['수신시간']
                    
                    if flag_ohlc:

                        df_nm_fut_tick = df_nm_fut_tick.append(tickdata, ignore_index=True)                
                        df_nm_fut_tick_ohlc = self.make_yfc_ohlc_dataframe(df_nm_fut_tick)

                        df_futures_nm_ta_graph.at[plot_time_index, 'Open'] = df_nm_fut_tick_ohlc.iat[df_nm_fut_tick_ohlc.shape[0] - 1, 0]
                        df_futures_nm_ta_graph.at[plot_time_index, 'High'] = df_nm_fut_tick_ohlc.iat[df_nm_fut_tick_ohlc.shape[0] - 1, 1]
                        df_futures_nm_ta_graph.at[plot_time_index, 'Low'] = df_nm_fut_tick_ohlc.iat[df_nm_fut_tick_ohlc.shape[0] - 1, 2]
                        df_futures_nm_ta_graph.at[plot_time_index, 'Close'] = df_nm_fut_tick_ohlc.iat[df_nm_fut_tick_ohlc.shape[0] - 1, 3]
                                        
                    # 1T OHLC 생성                    
                    if not flag_ohlc:

                        df_futures_nm_ta_graph['Open'].fillna(method='bfill', inplace=True)
                        df_futures_nm_ta_graph['High'].fillna(method='bfill', inplace=True) 
                        df_futures_nm_ta_graph['Low'].fillna(method='bfill', inplace=True) 
                        df_futures_nm_ta_graph['Close'].fillna(method='bfill', inplace=True)

                        df_futures_nm_ta_graph.at[plot_time_index, 'Close'] = 차월물_선물_현재가

                        if not 차월물_선물_현재가_버퍼:
                            차월물_선물_현재가_버퍼.append(차월물_선물_현재가)
                            df_futures_nm_ta_graph.at[plot_time_index, 'Open'] = 차월물_선물_현재가
                        else:
                            차월물_선물_현재가_버퍼.append(차월물_선물_현재가)
                            df_futures_nm_ta_graph.at[plot_time_index, 'High'] = max(차월물_선물_현재가_버퍼)
                            df_futures_nm_ta_graph.at[plot_time_index, 'Low'] = min(차월물_선물_현재가_버퍼)
                        
                    item = QTableWidgetItem("{0:.2f}".format(차월물_선물_시가))
                    item.setTextAlignment(Qt.AlignCenter)

                    if 차월물_선물_시가 > 차월물_선물_종가:
                        item.setForeground(QBrush(magenta))
                        item.setBackground(QBrush(검정색))
                    elif 차월물_선물_시가 < 차월물_선물_종가:
                        item.setForeground(QBrush(cyan))
                        item.setBackground(QBrush(검정색))
                    else:
                        item.setForeground(QBrush(흰색))
                        item.setBackground(QBrush(검정색))

                    self.dialog['선물옵션전광판'].tableWidget_fut.setItem(0, Futures_column.시가.value, item)

                    시가갭 = 차월물_선물_시가 - 차월물_선물_종가

                    item = QTableWidgetItem("{0:.2f}".format(시가갭))
                    item.setTextAlignment(Qt.AlignCenter)

                    if 차월물_선물_시가 > 차월물_선물_종가:
                        item.setBackground(QBrush(콜기준가색))
                        item.setForeground(QBrush(검정색))
                    elif 차월물_선물_시가 < 차월물_선물_종가:
                        item.setBackground(QBrush(풋기준가색))
                        item.setForeground(QBrush(흰색))
                    else:
                        item.setBackground(QBrush(흰색))

                    self.dialog['선물옵션전광판'].tableWidget_fut.setItem(0, Futures_column.시가갭.value, item)                    
                else:
                    pass

                self.dialog['선물옵션전광판'].tableWidget_fut.resizeRowsToContents()
                self.dialog['선물옵션전광판'].tableWidget_fut.resizeColumnsToContents()
            else:
                pass

        except Exception as e:

            txt = '[{0:02d}:{1:02d}:{2:02d}] Exception : yfc_update 에서 {3}타입의 {4}예외가 발생했습니다.\r'.format(dt.hour, dt.minute, dt.second, type(e).__name__, str(e))
            self.textBrowser.append(txt)

    def ys3_update(self, tickdata):

        try:
            dt = datetime.now()

            현재가 = format(int(tickdata['예상체결가격']), ',')

            if tickdata['단축코드'] == SAMSUNG:

                if tickdata['예상체결가전일종가대비구분'] == '5':

                    jisu_txt = "SAMSUNG: {0}({1}, {2:0.1f}%)".format(현재가, format(-int(tickdata['예상체결가전일종가대비']), ','), float(tickdata['예상체결가전일종가등락율']))

                    self.dialog['선물옵션전광판'].label_3rd_index.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold; border-style: solid; border-width: 1px; border-color: white; border-radius: 5px')
                    self.dialog['선물옵션전광판'].label_3rd_index.setText(jisu_txt)

                elif tickdata['예상체결가전일종가대비구분'] == '2':

                    jisu_txt = "SAMSUNG: {0}({1}, {2:0.1f}%)".format(현재가, format(int(tickdata['예상체결가전일종가대비']), ','), float(tickdata['예상체결가전일종가등락율']))

                    self.dialog['선물옵션전광판'].label_3rd_index.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold; border-style: solid; border-width: 1px; border-color: white; border-radius: 5px')
                    self.dialog['선물옵션전광판'].label_3rd_index.setText(jisu_txt)

                else:
                    jisu_txt = "SAMSUNG: {0}({1})".format(현재가, format(int(tickdata['예상체결가전일종가대비']), ','))

                    self.dialog['선물옵션전광판'].label_3rd_index.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold; border-style: solid; border-width: 1px; border-color: black; border-radius: 5px')
                    self.dialog['선물옵션전광판'].label_3rd_index.setText(jisu_txt)

            elif tickdata['단축코드'] == HYUNDAI:

                if tickdata['예상체결가전일종가대비구분'] == '5':

                    jisu_txt = "HYUNDAI: {0}({1}, {2:0.1f}%)".format(현재가, format(-int(tickdata['예상체결가전일종가대비']), ','), float(tickdata['예상체결가전일종가등락율']))

                    self.dialog['선물옵션전광판'].label_4th_index.setStyleSheet('background-color: blue; color: white; font-family: Consolas; font-size: 9pt; font: Bold; border-style: solid; border-width: 1px; border-color: white; border-radius: 5px')
                    self.dialog['선물옵션전광판'].label_4th_index.setText(jisu_txt)

                elif tickdata['예상체결가전일종가대비구분'] == '2':

                    jisu_txt = "HYUNDAI: {0}({1}, {2:0.1f}%)".format(현재가, format(int(tickdata['예상체결가전일종가대비']), ','), float(tickdata['예상체결가전일종가등락율']))

                    self.dialog['선물옵션전광판'].label_4th_index.setStyleSheet('background-color: red; color: white; font-family: Consolas; font-size: 9pt; font: Bold; border-style: solid; border-width: 1px; border-color: white; border-radius: 5px')
                    self.dialog['선물옵션전광판'].label_4th_index.setText(jisu_txt)

                else:
                    jisu_txt = "HYUNDAI: {0}({1})".format(현재가, format(int(tickdata['예상체결가전일종가대비']), ','))

                    self.dialog['선물옵션전광판'].label_4th_index.setStyleSheet('background-color: yellow; color: black; font-family: Consolas; font-size: 9pt; font: Bold; border-style: solid; border-width: 1px; border-color: black; border-radius: 5px')
                    self.dialog['선물옵션전광판'].label_4th_index.setText(jisu_txt)
            else:
                pass

        except Exception as e:

            txt = '[{0:02d}:{1:02d}:{2:02d}] Exception : ys3_update 에서 {3}타입의 {4}예외가 발생했습니다.\r'.format(dt.hour, dt.minute, dt.second, type(e).__name__, str(e))
            self.textBrowser.append(txt)

    def yoc_update(self, tickdata):

        try:
            dt = datetime.now()

            if tickdata['단축코드'][0:3] == '201':

                index = call_행사가.index(tickdata['단축코드'][5:8])

                # 예상시가 갱신
                콜예상시가 = float(tickdata['예상체결가격'])    

                # 테이블 갱신
                콜종가 = df_call.at[index, '종가']

                item = QTableWidgetItem(tickdata['예상체결가격'])
                item.setTextAlignment(Qt.AlignCenter)

                if 콜예상시가 > 콜종가:
                    item.setForeground(QBrush(magenta))
                    item.setBackground(QBrush(검정색))
                elif 콜예상시가 < 콜종가:
                    item.setForeground(QBrush(cyan))
                    item.setBackground(QBrush(검정색))
                else:
                    item.setForeground(QBrush(흰색))
                    item.setBackground(QBrush(검정색))

                self.dialog['선물옵션전광판'].tableWidget_call.setItem(index, Option_column.시가.value, item)

                if 콜예상시가 in COREVAL:
                    self.dialog['선물옵션전광판'].tableWidget_call.item(index, Option_column.시가.value).setBackground(QBrush(대맥점색))
                    self.dialog['선물옵션전광판'].tableWidget_call.item(index, Option_column.시가.value).setForeground(QBrush(검정색))
                else:
                    pass                                  

            elif tickdata['단축코드'][0:3] == '301':

                index = put_행사가.index(tickdata['단축코드'][5:8])

                # 예상시가 갱신
                풋예상시가 = float(tickdata['예상체결가격'])

                # 테이블 갱신
                풋종가 = df_put.at[index, '종가']

                item = QTableWidgetItem(tickdata['예상체결가격'])
                item.setTextAlignment(Qt.AlignCenter)

                if 풋예상시가 > 풋종가:
                    item.setForeground(QBrush(magenta))
                    item.setBackground(QBrush(검정색))
                elif 풋예상시가 < 풋종가:
                    item.setForeground(QBrush(cyan))
                    item.setBackground(QBrush(검정색))
                else:
                    item.setForeground(QBrush(흰색))
                    item.setBackground(QBrush(검정색))

                self.dialog['선물옵션전광판'].tableWidget_put.setItem(index, Option_column.시가.value, item)

                if 풋예상시가 in COREVAL:
                    self.dialog['선물옵션전광판'].tableWidget_put.item(index, Option_column.시가.value).setBackground(QBrush(대맥점색))
                    self.dialog['선물옵션전광판'].tableWidget_put.item(index, Option_column.시가.value).setForeground(QBrush(검정색))
                else:
                    pass                                
            else:
                pass

        except Exception as e:

            txt = '[{0:02d}:{1:02d}:{2:02d}] Exception : yoc_update 에서 {3}타입의 {4}예외가 발생했습니다.\r'.format(dt.hour, dt.minute, dt.second, type(e).__name__, str(e))
            self.textBrowser.append(txt)

    def s3_update(self, tickdata):

        global samsung_price

        try:
            dt = datetime.now()
        
            # S3 데이타표시
            if tickdata['단축코드'] == SAMSUNG:

                현재가 = float(tickdata['현재가'])

                if 현재가 != samsung_price:

                    if 현재가 > samsung_price:

                        temp_txt = format(현재가, ',')

                        if tickdata['전일대비구분'] == '5':

                            jisu_txt = "SS: {0} ▲ (-{1}, {2:0.1f}%)".format(temp_txt, format(int(tickdata['전일대비']), ','), float(tickdata['등락율']))

                            self.dialog['선물옵션전광판'].label_3rd_index.setStyleSheet('background-color: pink; color: blue; font-family: Consolas; font-size: 9pt; font: Bold; border-style: solid; border-width: 1px; border-color: blue; border-radius: 5px')
                            self.dialog['선물옵션전광판'].label_3rd_index.setText(jisu_txt)

                        elif tickdata['전일대비구분'] == '2':

                            jisu_txt = "SS: {0} ▲ ({1}, {2:0.1f}%)".format(temp_txt, format(int(tickdata['전일대비']), ','), float(tickdata['등락율']))

                            self.dialog['선물옵션전광판'].label_3rd_index.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold; border-style: solid; border-width: 1px; border-color: red; border-radius: 5px')
                            self.dialog['선물옵션전광판'].label_3rd_index.setText(jisu_txt)
                        else:
                            pass

                    elif 현재가 < samsung_price:

                        temp_txt = format(현재가, ',')

                        if tickdata['전일대비구분'] == '5':

                            jisu_txt = "SS: {0} ▼ (-{1}, {2:0.1f}%)".format(temp_txt, format(int(tickdata['전일대비']), ','), float(tickdata['등락율']))

                            self.dialog['선물옵션전광판'].label_3rd_index.setStyleSheet('background-color: lightskyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold; border-style: solid; border-width: 1px; border-color: blue; border-radius: 5px')
                            self.dialog['선물옵션전광판'].label_3rd_index.setText(jisu_txt)

                        elif tickdata['전일대비구분'] == '2':

                            jisu_txt = "SS: {0} ▼ ({1}, {2:0.1f}%)".format(temp_txt, format(int(tickdata['전일대비']), ','), float(tickdata['등락율']))

                            self.dialog['선물옵션전광판'].label_3rd_index.setStyleSheet('background-color: lightskyblue; color: red; font-family: Consolas; font-size: 9pt; font: Bold; border-style: solid; border-width: 1px; border-color: red; border-radius: 5px')
                            self.dialog['선물옵션전광판'].label_3rd_index.setText(jisu_txt)
                        else:
                            pass
                    else:
                        pass

                    samsung_price = 현재가
                else:
                    pass                    
            else:
                pass

        except Exception as e:

            txt = '[{0:02d}:{1:02d}:{2:02d}] Exception : s3_update 에서 {3}타입의 {4}예외가 발생했습니다.\r'.format(dt.hour, dt.minute, dt.second, type(e).__name__, str(e))
            self.textBrowser.append(txt) 

    def ij_update(self, tickdata):

        global df_fut, df_futures_cm_graph, df_kp200_graph
        global ATM_INDEX, call_atm_value, put_atm_value, KP200_COREVAL, 장시작_양합, 장시작_중심가
        global flag_kp200_low, flag_kp200_high
        global kospi_price, kosdaq_price, KP200_당일시가, kp200_저가, kp200_현재가, kp200_고가, kp200_진폭
        global plot_time_index

        try:
            dt = datetime.now()

            if len(tickdata['수신시간']) == 5:
                plot_time_index = (int(tickdata['수신시간'][0:1]) - DayTime_PreStart_Hour) * 60 + int(tickdata['수신시간'][1:3]) + 1
            else:
                plot_time_index = (int(tickdata['수신시간'][0:2]) - DayTime_PreStart_Hour) * 60 + int(tickdata['수신시간'][2:4]) + 1 
        
            if tickdata['업종코드'] == KOSPI200:

                지수 = tickdata['지수']
                시가지수 = tickdata['시가지수']
                저가지수 = tickdata['저가지수']
                고가지수 = tickdata['고가지수']

                # 그래프 가격갱신
                kp200_현재가 = float(tickdata['지수'])
                #df_futures_cm_graph.at[plot_time_index, 'kp200'] = kp200_현재가
                df_kp200_graph.at[plot_time_index, 'Price'] = kp200_현재가

                # kp200 현재가
                if 지수 != self.dialog['선물옵션전광판'].tableWidget_fut.item(2, Futures_column.현재가.value).text().split('\n')[0]:

                    self.dialog['선물옵션전광판'].fut_realdata['KP200'] = kp200_현재가
                    self.dialog['선물옵션전광판'].kp200_realdata['현재가'] = kp200_현재가
                    df_fut.at[2, '현재가'] = kp200_현재가

                    temp = self.dialog['선물옵션전광판'].tableWidget_fut.item(2, Futures_column.현재가.value).text().split('\n')[0]

                    if kp200_현재가 < float(temp):
                        item = QTableWidgetItem(지수 + '\n' + '▼')
                        item.setBackground(QBrush(lightskyblue))
                    elif kp200_현재가 > float(temp):
                        item = QTableWidgetItem(지수 + '\n' + '▲')
                        item.setBackground(QBrush(pink))
                    else:    
                        item = QTableWidgetItem(지수)
                        item.setBackground(QBrush(옅은회색))

                    if kp200_현재가 > KP200_당일시가:
                        item.setForeground(QBrush(적색))
                    elif kp200_현재가 < KP200_당일시가:
                        item.setForeground(QBrush(청색))
                    else:
                        item.setForeground(QBrush(검정색))

                    item.setTextAlignment(Qt.AlignCenter)
                    self.dialog['선물옵션전광판'].tableWidget_fut.setItem(2, Futures_column.현재가.value, item)

                    item = QTableWidgetItem("CME\n({0:.2f}%)".format(SP500_시가대비_등락율))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.dialog['선물옵션전광판'].tableWidget_fut.setItem(2, Futures_column.대비.value, item)

                    self.dialog['선물옵션전광판'].tableWidget_fut.resizeRowToContents(2)
                else:
                    pass

                if 시가지수 != self.dialog['선물옵션전광판'].tableWidget_fut.item(2, Futures_column.시가.value).text():

                    KP200_당일시가 = float(tickdata['시가지수'])

                    self.dialog['선물옵션전광판'].kp200_realdata['시가'] = KP200_당일시가
                    #df_futures_cm_graph.at[plot_time_index, 'kp200'] = KP200_당일시가
                    df_kp200_graph.at[plot_time_index, 'Price'] = KP200_당일시가

                    item = QTableWidgetItem(시가지수)
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))

                    if KP200_당일시가 > KP200_전일종가:
                        item.setForeground(QBrush(적색))
                    elif KP200_당일시가 < KP200_전일종가:
                        item.setForeground(QBrush(청색))
                    else:
                        item.setForeground(QBrush(검정색))

                    self.dialog['선물옵션전광판'].tableWidget_fut.setItem(2, Futures_column.시가.value, item)

                    item = QTableWidgetItem("{0:.2f}".format(KP200_당일시가 - KP200_전일종가))
                    item.setTextAlignment(Qt.AlignCenter)

                    if KP200_당일시가 > KP200_전일종가:
                        item.setBackground(QBrush(콜기준가색))
                        item.setForeground(QBrush(검정색))
                    elif KP200_당일시가 < KP200_전일종가:
                        item.setBackground(QBrush(풋기준가색))
                        item.setForeground(QBrush(흰색))
                    else:
                        item.setBackground(QBrush(흰색)) 

                    self.dialog['선물옵션전광판'].tableWidget_fut.setItem(2, Futures_column.시가갭.value, item)

                    txt = '[{0:02d}:{1:02d}:{2:02d}] KP200 시작가 {3:.2f}를 수신했습니다.\r'.format(dt.hour, dt.minute, dt.second, KP200_당일시가)
                    self.dialog['선물옵션전광판'].textBrowser.append(txt)

                    if KP200_전저 > 0 and KP200_전고 > 0:

                        kp200_피봇 = calc_pivot(KP200_전저, KP200_전고, KP200_전일종가, KP200_당일시가, 2)         

                        item = QTableWidgetItem("{0:.2f}".format(kp200_피봇))
                        item.setTextAlignment(Qt.AlignCenter)
                        self.dialog['선물옵션전광판'].tableWidget_fut.setItem(2, Futures_column.피봇.value, item)
                    else:
                        pass
                    
                    atm_txt = self.dialog['선물옵션전광판'].get_atm_txt(KP200_당일시가)
                    ATM_INDEX = opt_actval.index(atm_txt)

                    if atm_txt[-1] == '2' or atm_txt[-1] == '7':

                        atm_val = float(atm_txt) + 0.5
                    else:
                        atm_val = float(atm_txt)

                    call_atm_value = df_call.at[ATM_INDEX, '현재가']
                    put_atm_value = df_put.at[ATM_INDEX, '현재가']

                    if call_atm_value >= put_atm_value:
                        atm_zero_cha = round((call_atm_value - put_atm_value) , 2)
                    else:
                        atm_zero_cha = round((put_atm_value - call_atm_value) , 2)

                    장시작_양합 = call_atm_value + put_atm_value

                    if call_atm_value > put_atm_value:

                        장시작_중심가 = round((put_atm_value + atm_zero_cha / 2), 2)

                    elif put_atm_value > call_atm_value:

                        장시작_중심가 = round((call_atm_value + atm_zero_cha / 2), 2)
                    else:
                        장시작_중심가 = call_atm_value 

                    # kp200 맥점 10개를 리스트로 만듬
                    # KP200_COREVAL 리스트 기존데이타 삭제(초기화)
                    del KP200_COREVAL[:]

                    for i in range(6):

                        KP200_COREVAL.append(atm_val - 2.5 * i + 1.25) 

                    for i in range(1, 5):

                        KP200_COREVAL.append(atm_val + 2.5 * i + 1.25)

                    KP200_COREVAL.sort()

                    txt = '[{0:02d}:{1:02d}:{2:02d}] KP200 맥점리스트 = {3}\r'.format(dt.hour, dt.minute, dt.second, KP200_COREVAL)
                    self.dialog['선물옵션전광판'].textBrowser.append(txt)                         
                else:
                    pass

                if 저가지수 != self.dialog['선물옵션전광판'].tableWidget_fut.item(2, Futures_column.저가.value).text():

                    flag_kp200_low = True

                    kp200_저가 = float(tickdata['저가지수'])
                    self.dialog['선물옵션전광판'].kp200_realdata['저가'] = kp200_저가               

                    item = QTableWidgetItem(저가지수)
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))                     
                    self.dialog['선물옵션전광판'].tableWidget_fut.setItem(2, Futures_column.저가.value, item)

                    kp200_진폭 = kp200_고가 - kp200_저가

                    item = QTableWidgetItem("{0:.2f}".format(kp200_진폭))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.dialog['선물옵션전광판'].tableWidget_fut.setItem(2, Futures_column.진폭.value, item)

                    self.dialog['선물옵션전광판'].kp200_node_color_clear()
                    self.dialog['선물옵션전광판'].kp200_node_coloring()
                    self.dialog['선물옵션전광판'].kp200_low_node_coloring()

                    txt = '[{0:02d}:{1:02d}:{2:02d}] kp200 저가 {3} Update...\r'.format(dt.hour, dt.minute, dt.second, kp200_저가)
                    self.dialog['선물옵션전광판'].textBrowser.append(txt)
                else:
                    pass

                if 고가지수 != self.dialog['선물옵션전광판'].tableWidget_fut.item(2, Futures_column.고가.value).text():

                    flag_kp200_high = True

                    kp200_고가 = float(tickdata['고가지수'])
                    self.dialog['선물옵션전광판'].kp200_realdata['고가'] = kp200_고가            

                    item = QTableWidgetItem(고가지수)
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    self.dialog['선물옵션전광판'].tableWidget_fut.setItem(2, Futures_column.고가.value, item)

                    kp200_진폭 = kp200_고가 - kp200_저가

                    item = QTableWidgetItem("{0:.2f}".format(kp200_진폭))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.dialog['선물옵션전광판'].tableWidget_fut.setItem(2, Futures_column.진폭.value, item)

                    self.dialog['선물옵션전광판'].kp200_node_color_clear()
                    self.dialog['선물옵션전광판'].kp200_node_coloring()
                    self.dialog['선물옵션전광판'].kp200_high_node_coloring()

                    txt = '[{0:02d}:{1:02d}:{2:02d}] kp200 고가 {3} Update...\r'.format(dt.hour, dt.minute, dt.second, kp200_고가)
                    self.dialog['선물옵션전광판'].textBrowser.append(txt)
                else:
                    pass

            elif tickdata['업종코드'] == KOSPI:

                실수_지수 = float(tickdata['지수'])                                

                if 실수_지수 != kospi_price:

                    kospi_txt = format(실수_지수, ',')

                    if 실수_지수 > kospi_price:

                        if tickdata['전일대비구분'] == '5':

                            jisu_txt = "KOSPI: {0} ▲ (-{1:.2f}, {2:0.1f}%)".format(kospi_txt, float(tickdata['전일비']), float(tickdata['등락율']))

                            self.dialog['선물옵션전광판'].label_1st_index.setStyleSheet('background-color: pink; color: blue; font-family: Consolas; font-size: 9pt; font: Bold; border-style: solid; border-width: 1px; border-color: blue; border-radius: 5px')
                            self.dialog['선물옵션전광판'].label_1st_index.setText(jisu_txt)

                        elif tickdata['전일대비구분'] == '2':

                            jisu_txt = "KOSPI: {0} ▲ ({1:.2f}, {2:0.1f}%)".format(kospi_txt, float(tickdata['전일비']), float(tickdata['등락율']))

                            self.dialog['선물옵션전광판'].label_1st_index.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold; border-style: solid; border-width: 1px; border-color: red; border-radius: 5px')
                            self.dialog['선물옵션전광판'].label_1st_index.setText(jisu_txt)
                        else:
                            pass

                    elif 실수_지수 < kospi_price:

                        if tickdata['전일대비구분'] == '5':

                            jisu_txt = "KOSPI: {0} ▼ (-{1:.2f}, {2:0.1f}%)".format(kospi_txt, float(tickdata['전일비']), float(tickdata['등락율']))

                            self.dialog['선물옵션전광판'].label_1st_index.setStyleSheet('background-color: lightskyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold; border-style: solid; border-width: 1px; border-color: blue; border-radius: 5px')
                            self.dialog['선물옵션전광판'].label_1st_index.setText(jisu_txt)

                        elif tickdata['전일대비구분'] == '2':

                            jisu_txt = "KOSPI: {0} ▼ ({1:.2f}, {2:0.1f}%)".format(kospi_txt, float(tickdata['전일비']), float(tickdata['등락율']))

                            self.dialog['선물옵션전광판'].label_1st_index.setStyleSheet('background-color: lightskyblue; color: red; font-family: Consolas; font-size: 9pt; font: Bold; border-style: solid; border-width: 1px; border-color: red; border-radius: 5px')
                            self.dialog['선물옵션전광판'].label_1st_index.setText(jisu_txt)
                        else:
                            pass
                    else:
                        pass

                    kospi_price = 실수_지수
                else:
                    pass                    

            elif tickdata['업종코드'] == KOSDAQ:

                실수_지수 = float(tickdata['지수'])                                

                if 실수_지수 != kosdaq_price:    
                
                    kosdaq_txt = format(실수_지수, ',')                    

                    if 실수_지수 > kosdaq_price:

                        if tickdata['전일대비구분'] == '5':

                            jisu_txt = "KOSDAQ: {0} ▲ (-{1:.2f}, {2:0.1f}%)".format(kosdaq_txt, float(tickdata['전일비']), float(tickdata['등락율']))

                            self.dialog['선물옵션전광판'].label_2nd_index.setStyleSheet('background-color: pink; color: blue; font-family: Consolas; font-size: 9pt; font: Bold; border-style: solid; border-width: 1px; border-color: blue; border-radius: 5px')
                            self.dialog['선물옵션전광판'].label_2nd_index.setText(jisu_txt)

                        elif tickdata['전일대비구분'] == '2':

                            jisu_txt = "KOSDAQ: {0} ▲ ({1:.2f}, {2:0.1f}%)".format(kosdaq_txt, float(tickdata['전일비']), float(tickdata['등락율']))

                            self.dialog['선물옵션전광판'].label_2nd_index.setStyleSheet('background-color: pink; color: red; font-family: Consolas; font-size: 9pt; font: Bold; border-style: solid; border-width: 1px; border-color: red; border-radius: 5px')
                            self.dialog['선물옵션전광판'].label_2nd_index.setText(jisu_txt)
                        else:
                            pass

                    elif 실수_지수 < kosdaq_price:

                        if tickdata['전일대비구분'] == '5':

                            jisu_txt = "KOSDAQ: {0} ▼ (-{1:.2f}, {2:0.1f}%)".format(kosdaq_txt, float(tickdata['전일비']), float(tickdata['등락율']))

                            self.dialog['선물옵션전광판'].label_2nd_index.setStyleSheet('background-color: lightskyblue; color: blue; font-family: Consolas; font-size: 9pt; font: Bold; border-style: solid; border-width: 1px; border-color: blue; border-radius: 5px')
                            self.dialog['선물옵션전광판'].label_2nd_index.setText(jisu_txt)

                        elif tickdata['전일대비구분'] == '2':

                            jisu_txt = "KOSDAQ: {0} ▼ ({1:.2f}, {2:0.1f}%)".format(kosdaq_txt, float(tickdata['전일비']), float(tickdata['등락율']))

                            self.dialog['선물옵션전광판'].label_2nd_index.setStyleSheet('background-color: lightskyblue; color: red; font-family: Consolas; font-size: 9pt; font: Bold; border-style: solid; border-width: 1px; border-color: red; border-radius: 5px')
                            self.dialog['선물옵션전광판'].label_2nd_index.setText(jisu_txt)
                        else:
                            pass
                    else:
                        pass

                    kosdaq_price = 실수_지수
                else:
                    pass

            elif tickdata['업종코드'] == FUTURES:

                txt = '[{0:02d}:{1:02d}:{2:02d}] 외인 순매수금액 = {3}\r'.format(dt.hour, dt.minute, dt.second, int(tickdata['외인순매수금액']))
                self.dialog['선물옵션전광판'].textBrowser.append(txt)
            else:                    
                pass

        except Exception as e:

            txt = '[{0:02d}:{1:02d}:{2:02d}] Exception : ij_update 에서 {3}타입의 {4}예외가 발생했습니다.\r'.format(dt.hour, dt.minute, dt.second, type(e).__name__, str(e))
            self.textBrowser.append(txt)

    def bm_update(self, tickdata):

        global 외인선물_순매수, 외인현물_순매수, 기관선물_순매수, 기관현물_순매수, 개인선물_순매수, 개인현물_순매수
        
        global 개인선물_순매수, FUT_INSTITUTIONAL_거래대금순매수, FUT_STOCK_거래대금순매수, \
            FUT_BOHEOM_거래대금순매수, FUT_TOOSIN_거래대금순매수, FUT_BANK_거래대금순매수, FUT_JONGGEUM_거래대금순매수, \
            FUT_GIGEUM_거래대금순매수, FUT_GITA_거래대금순매수

        global FUT_FOREIGNER_거래대금순매수_직전대비, FUT_RETAIL_거래대금순매수_직전대비, FUT_INSTITUTIONAL_거래대금순매수_직전대비, \
            FUT_STOCK_거래대금순매수_직전대비, FUT_BOHEOM_거래대금순매수_직전대비, FUT_TOOSIN_거래대금순매수_직전대비, \
            FUT_BANK_거래대금순매수_직전대비, FUT_JONGGEUM_거래대금순매수_직전대비, FUT_GIGEUM_거래대금순매수_직전대비, \
            FUT_GITA_거래대금순매수_직전대비

        global 외인현물_순매수, 개인현물_순매수, KOSPI_INSTITUTIONAL_거래대금순매수, KOSPI_STOCK_거래대금순매수, \
            KOSPI_BOHEOM_거래대금순매수, KOSPI_TOOSIN_거래대금순매수, KOSPI_BANK_거래대금순매수, KOSPI_JONGGEUM_거래대금순매수, \
            KOSPI_GIGEUM_거래대금순매수, KOSPI_GITA_거래대금순매수

        global KOSPI_FOREIGNER_거래대금순매수_직전대비, KOSPI_RETAIL_거래대금순매수_직전대비, KOSPI_INSTITUTIONAL_거래대금순매수_직전대비, \
            KOSPI_STOCK_거래대금순매수_직전대비, KOSPI_BOHEOM_거래대금순매수_직전대비, KOSPI_TOOSIN_거래대금순매수_직전대비, \
            KOSPI_BANK_거래대금순매수_직전대비, KOSPI_JONGGEUM_거래대금순매수_직전대비, KOSPI_GIGEUM_거래대금순매수_직전대비, \
            KOSPI_GITA_거래대금순매수_직전대비

        global FUT_FOREIGNER_직전대비, FUT_RETAIL_직전대비, FUT_INSTITUTIONAL_직전대비, KOSPI_FOREIGNER_직전대비, PROGRAM_직전대비
        global 선물_총순매수, 선물_총순매수_직전대비, 현물_총순매수, 현물_총순매수_직전대비

        try:
            dt = datetime.now()

            매수거래대금 = int(tickdata['매수거래대금'])
            매도거래대금 = int(tickdata['매도거래대금'])

            #거래대금순매수 = int(tickdata['거래대금순매수'])
            거래대금순매수 = 매수거래대금 - 매도거래대금

            if tickdata['거래대금순매수직전대비'] == '-':
                거래대금순매수직전대비 = 0
            else:
                거래대금순매수직전대비 = int(tickdata['거래대금순매수직전대비'])

            if (tickdata['업종코드'] == FUTURES and tickdata['투자자코드'] == FOREIGNER) or (tickdata['업종코드'] == CME and tickdata['투자자코드'] == FOREIGNER):

                외인선물_순매수 = 거래대금순매수
                순매수 = format(외인선물_순매수, ',')

                FUT_FOREIGNER_거래대금순매수_직전대비 = 거래대금순매수직전대비
                FUT_FOREIGNER_직전대비.extend([FUT_FOREIGNER_거래대금순매수_직전대비])
                temp = list(FUT_FOREIGNER_직전대비)                

                if min(temp) > 0:

                    item_txt = "{0}\n({1})⬈".format(순매수, 거래대금순매수직전대비)

                    if item_txt != self.dialog['선물옵션전광판'].tableWidget_supply.item(0, 0).text():
                        item = QTableWidgetItem(item_txt)
                        item.setTextAlignment(Qt.AlignCenter)
                        item.setBackground(QBrush(적색))
                        item.setForeground(QBrush(흰색))
                        self.dialog['선물옵션전광판'].tableWidget_supply.setItem(0, 0, item)
                    else:
                        pass

                elif max(temp) < 0:

                    item_txt = "{0}\n({1})⬊".format(순매수, 거래대금순매수직전대비)

                    if item_txt != self.dialog['선물옵션전광판'].tableWidget_supply.item(0, 0).text():
                        item = QTableWidgetItem(item_txt)
                        item.setTextAlignment(Qt.AlignCenter)
                        item.setBackground(QBrush(청색))
                        item.setForeground(QBrush(흰색))
                        self.dialog['선물옵션전광판'].tableWidget_supply.setItem(0, 0, item)
                    else:
                        pass

                else:
                    item_txt = "{0}\n({1})".format(순매수, 거래대금순매수직전대비)

                    if item_txt != self.dialog['선물옵션전광판'].tableWidget_supply.item(0, 0).text():
                        item = QTableWidgetItem(item_txt)
                        item.setTextAlignment(Qt.AlignCenter)
                        item.setBackground(QBrush(흰색))
                        item.setForeground(QBrush(검정색))
                        self.dialog['선물옵션전광판'].tableWidget_supply.setItem(0, 0, item)
                    else:
                        pass

            elif (tickdata['업종코드'] == FUTURES and tickdata['투자자코드'] == RETAIL) or (tickdata['업종코드'] == CME and tickdata['투자자코드'] == RETAIL):

                개인선물_순매수 = 거래대금순매수
                순매수 = format(개인선물_순매수, ',')

                FUT_RETAIL_거래대금순매수_직전대비 = 거래대금순매수직전대비
                FUT_FOREIGNER_직전대비.extend([FUT_RETAIL_거래대금순매수_직전대비])
                temp = list(FUT_FOREIGNER_직전대비)

                if min(temp) > 0:

                    item_txt = "{0}\n({1})⬈".format(순매수, 거래대금순매수직전대비)

                    if item_txt != self.dialog['선물옵션전광판'].tableWidget_supply.item(0, 4).text():
                        item = QTableWidgetItem(item_txt)
                        item.setTextAlignment(Qt.AlignCenter)
                        self.dialog['선물옵션전광판'].tableWidget_supply.setItem(0, 4, item)
                    else:
                        pass

                elif max(temp) < 0:

                    item_txt = "{0}\n({1})⬊".format(순매수, 거래대금순매수직전대비)

                    if item_txt != self.dialog['선물옵션전광판'].tableWidget_supply.item(0, 4).text():
                        item = QTableWidgetItem(item_txt)
                        item.setTextAlignment(Qt.AlignCenter)
                        self.dialog['선물옵션전광판'].tableWidget_supply.setItem(0, 4, item)
                    else:
                        pass

                else:
                    item_txt = "{0}\n({1})".format(순매수, 거래대금순매수직전대비)

                    if item_txt != self.dialog['선물옵션전광판'].tableWidget_supply.item(0, 4).text():
                        item = QTableWidgetItem(item_txt)
                        item.setTextAlignment(Qt.AlignCenter)
                        self.dialog['선물옵션전광판'].tableWidget_supply.setItem(0, 4, item)
                    else:
                        pass

            elif (tickdata['업종코드'] == FUTURES and tickdata['투자자코드'] == INSTITUTIONAL) or (tickdata['업종코드'] == CME and tickdata['투자자코드'] == INSTITUTIONAL):

                FUT_INSTITUTIONAL_거래대금순매수 = 거래대금순매수
                FUT_INSTITUTIONAL_거래대금순매수_직전대비 = 거래대금순매수직전대비

                기관선물_순매수 = FUT_INSTITUTIONAL_거래대금순매수 + FUT_STOCK_거래대금순매수 + FUT_BOHEOM_거래대금순매수 + \
                             FUT_TOOSIN_거래대금순매수 + FUT_BANK_거래대금순매수 + FUT_JONGGEUM_거래대금순매수 + \
                             FUT_GIGEUM_거래대금순매수 + FUT_GITA_거래대금순매수

                기관선물_거래대금순매수_직전대비 = FUT_INSTITUTIONAL_거래대금순매수_직전대비 + FUT_STOCK_거래대금순매수_직전대비 + \
                                  FUT_BOHEOM_거래대금순매수_직전대비 + FUT_TOOSIN_거래대금순매수_직전대비 + FUT_BANK_거래대금순매수_직전대비 + \
                                  FUT_JONGGEUM_거래대금순매수_직전대비 + FUT_GIGEUM_거래대금순매수_직전대비 + FUT_GITA_거래대금순매수_직전대비

                FUT_INSTITUTIONAL_직전대비.extend([기관선물_거래대금순매수_직전대비])
                temp = list(FUT_INSTITUTIONAL_직전대비)

                순매수 = format(기관선물_순매수, ',')

                if min(temp) > 0:

                    item_txt = "{0}\n({1})⬈".format(순매수, 기관선물_거래대금순매수_직전대비)

                    if item_txt != self.dialog['선물옵션전광판'].tableWidget_supply.item(0, 2).text():
                        item = QTableWidgetItem(item_txt)
                        item.setTextAlignment(Qt.AlignCenter)
                        item.setBackground(QBrush(적색))
                        item.setForeground(QBrush(흰색))
                        self.dialog['선물옵션전광판'].tableWidget_supply.setItem(0, 2, item)
                    else:
                        pass

                elif max(temp) < 0:

                    item_txt = "{0}\n({1})⬊".format(순매수, 기관선물_거래대금순매수_직전대비)

                    if item_txt != self.dialog['선물옵션전광판'].tableWidget_supply.item(0, 2).text():
                        item = QTableWidgetItem(item_txt)
                        item.setTextAlignment(Qt.AlignCenter)
                        item.setBackground(QBrush(청색))
                        item.setForeground(QBrush(흰색))
                        self.dialog['선물옵션전광판'].tableWidget_supply.setItem(0, 2, item)
                    else:
                        pass

                else:
                    item_txt = "{0}\n({1})".format(순매수, 기관선물_거래대금순매수_직전대비)

                    if item_txt != self.dialog['선물옵션전광판'].tableWidget_supply.item(0, 2).text():
                        item = QTableWidgetItem(item_txt)
                        item.setTextAlignment(Qt.AlignCenter)
                        item.setBackground(QBrush(흰색))
                        item.setForeground(QBrush(검정색))
                        self.dialog['선물옵션전광판'].tableWidget_supply.setItem(0, 2, item)
                    else:
                        pass

            elif (tickdata['업종코드'] == FUTURES and tickdata['투자자코드'] == STOCK) or (tickdata['업종코드'] == CME and tickdata['투자자코드'] == STOCK):

                FUT_STOCK_거래대금순매수 = 거래대금순매수
                FUT_STOCK_거래대금순매수_직전대비 = 거래대금순매수직전대비

            elif (tickdata['업종코드'] == FUTURES and tickdata['투자자코드'] == BOHEOM) or (tickdata['업종코드'] == CME and tickdata['투자자코드'] == BOHEOM):

                FUT_BOHEOM_거래대금순매수 = 거래대금순매수
                FUT_BOHEOM_거래대금순매수_직전대비 = 거래대금순매수직전대비

            elif (tickdata['업종코드'] == FUTURES and tickdata['투자자코드'] == TOOSIN) or (tickdata['업종코드'] == CME and tickdata['투자자코드'] == TOOSIN):

                FUT_TOOSIN_거래대금순매수 = 거래대금순매수
                FUT_TOOSIN_거래대금순매수_직전대비 = 거래대금순매수직전대비

            elif (tickdata['업종코드'] == FUTURES and tickdata['투자자코드'] == BANK) or (tickdata['업종코드'] == CME and tickdata['투자자코드'] == BANK):

                FUT_BANK_거래대금순매수 = 거래대금순매수
                FUT_BANK_거래대금순매수_직전대비 = 거래대금순매수직전대비

            elif (tickdata['업종코드'] == FUTURES and tickdata['투자자코드'] == JONGGEUM) or (tickdata['업종코드'] == CME and tickdata['투자자코드'] == JONGGEUM):

                FUT_JONGGEUM_거래대금순매수 = 거래대금순매수
                FUT_JONGGEUM_거래대금순매수_직전대비 = 거래대금순매수직전대비

            elif (tickdata['업종코드'] == FUTURES and tickdata['투자자코드'] == GIGEUM) or (tickdata['업종코드'] == CME and tickdata['투자자코드'] == GIGEUM):

                FUT_GIGEUM_거래대금순매수 = 거래대금순매수
                FUT_GIGEUM_거래대금순매수_직전대비 = 거래대금순매수직전대비

            elif (tickdata['업종코드'] == FUTURES and tickdata['투자자코드'] == GITA) or (tickdata['업종코드'] == CME and tickdata['투자자코드'] == GITA):

                FUT_GITA_거래대금순매수 = 거래대금순매수
                FUT_GITA_거래대금순매수_직전대비 = 거래대금순매수직전대비

            elif tickdata['업종코드'] == KOSPI and tickdata['투자자코드'] == FOREIGNER:

                외인현물_순매수 = 거래대금순매수
                순매수 = format(외인현물_순매수, ',')

                KOSPI_FOREIGNER_거래대금순매수_직전대비 = 거래대금순매수직전대비
                KOSPI_FOREIGNER_직전대비.extend([KOSPI_FOREIGNER_거래대금순매수_직전대비])
                temp = list(KOSPI_FOREIGNER_직전대비)              

                if min(temp) > 0:

                    item_txt = "{0}\n({1})⬈".format(순매수, 거래대금순매수직전대비)

                    if item_txt != self.dialog['선물옵션전광판'].tableWidget_supply.item(0, 1).text():
                        item = QTableWidgetItem(item_txt)
                        item.setTextAlignment(Qt.AlignCenter)
                        item.setBackground(QBrush(적색))
                        item.setForeground(QBrush(흰색))
                        self.dialog['선물옵션전광판'].tableWidget_supply.setItem(0, 1, item)
                    else:
                        pass

                elif max(temp) < 0:

                    item_txt = "{0}\n({1})⬊".format(순매수, 거래대금순매수직전대비)

                    if item_txt != self.dialog['선물옵션전광판'].tableWidget_supply.item(0, 1).text():
                        item = QTableWidgetItem(item_txt)
                        item.setTextAlignment(Qt.AlignCenter)
                        item.setBackground(QBrush(청색))
                        item.setForeground(QBrush(흰색))
                        self.dialog['선물옵션전광판'].tableWidget_supply.setItem(0, 1, item)
                    else:
                        pass

                else:
                    item_txt = "{0}\n({1})".format(순매수, 거래대금순매수직전대비)

                    if item_txt != self.dialog['선물옵션전광판'].tableWidget_supply.item(0, 1).text():
                        item = QTableWidgetItem(item_txt)
                        item.setTextAlignment(Qt.AlignCenter)
                        item.setBackground(QBrush(흰색))
                        item.setForeground(QBrush(검정색))
                        self.dialog['선물옵션전광판'].tableWidget_supply.setItem(0, 1, item)
                    else:
                        pass

            elif tickdata['업종코드'] == KOSPI and tickdata['투자자코드'] == RETAIL:

                개인현물_순매수 = 거래대금순매수
                KOSPI_RETAIL_거래대금순매수_직전대비 = 거래대금순매수직전대비

                item_txt = "{0}\n({1})".format(개인현물_순매수, KOSPI_RETAIL_거래대금순매수_직전대비)

                if item_txt != self.dialog['선물옵션전광판'].tableWidget_supply.item(0, 1).text():
                    item = QTableWidgetItem(item_txt)
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.dialog['선물옵션전광판'].tableWidget_supply.setItem(0, 5, item)
                else:
                    pass

            elif tickdata['업종코드'] == KOSPI and tickdata['투자자코드'] == INSTITUTIONAL:

                KOSPI_INSTITUTIONAL_거래대금순매수 = 거래대금순매수
                KOSPI_INSTITUTIONAL_거래대금순매수_직전대비 = 거래대금순매수직전대비

            elif tickdata['업종코드'] == KOSPI and tickdata['투자자코드'] == STOCK:

                KOSPI_STOCK_거래대금순매수 = 거래대금순매수
                KOSPI_STOCK_거래대금순매수_직전대비 = 거래대금순매수직전대비

            elif tickdata['업종코드'] == KOSPI and tickdata['투자자코드'] == BOHEOM:

                KOSPI_BOHEOM_거래대금순매수 = 거래대금순매수
                KOSPI_BOHEOM_거래대금순매수_직전대비 = 거래대금순매수직전대비

            elif tickdata['업종코드'] == KOSPI and tickdata['투자자코드'] == TOOSIN:

                KOSPI_TOOSIN_거래대금순매수 = 거래대금순매수
                KOSPI_TOOSIN_거래대금순매수_직전대비 = 거래대금순매수직전대비

            elif tickdata['업종코드'] == KOSPI and tickdata['투자자코드'] == BANK:

                KOSPI_BANK_거래대금순매수 = 거래대금순매수
                KOSPI_BANK_거래대금순매수_직전대비 = 거래대금순매수직전대비

            elif tickdata['업종코드'] == KOSPI and tickdata['투자자코드'] == JONGGEUM:

                KOSPI_JONGGEUM_거래대금순매수 = 거래대금순매수
                KOSPI_JONGGEUM_거래대금순매수_직전대비 = 거래대금순매수직전대비

            elif tickdata['업종코드'] == KOSPI and tickdata['투자자코드'] == GIGEUM:

                KOSPI_GIGEUM_거래대금순매수 = 거래대금순매수
                KOSPI_GIGEUM_거래대금순매수_직전대비 = 거래대금순매수직전대비

            elif tickdata['업종코드'] == KOSPI and tickdata['투자자코드'] == GITA:

                KOSPI_GITA_거래대금순매수 = 거래대금순매수
                KOSPI_GITA_거래대금순매수_직전대비 = 거래대금순매수직전대비
            else:
                pass

            기관현물_순매수 = KOSPI_INSTITUTIONAL_거래대금순매수 + KOSPI_STOCK_거래대금순매수 + KOSPI_BOHEOM_거래대금순매수 + KOSPI_TOOSIN_거래대금순매수 + KOSPI_BANK_거래대금순매수 + KOSPI_JONGGEUM_거래대금순매수 + \
                KOSPI_GIGEUM_거래대금순매수 + KOSPI_GITA_거래대금순매수

            기관현물_순매수_직전대비 = KOSPI_INSTITUTIONAL_거래대금순매수_직전대비 + KOSPI_STOCK_거래대금순매수_직전대비 + KOSPI_BOHEOM_거래대금순매수_직전대비 + KOSPI_TOOSIN_거래대금순매수_직전대비 + KOSPI_BANK_거래대금순매수_직전대비 + \
                KOSPI_JONGGEUM_거래대금순매수_직전대비 + KOSPI_GIGEUM_거래대금순매수_직전대비 + KOSPI_GITA_거래대금순매수_직전대비

            item_txt = "{0}\n({1})".format(기관현물_순매수, 기관현물_순매수_직전대비)

            if item_txt != self.dialog['선물옵션전광판'].tableWidget_supply.item(0, 1).text():
                item = QTableWidgetItem(item_txt)
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(흰색))
                item.setForeground(QBrush(검정색))
                self.dialog['선물옵션전광판'].tableWidget_supply.setItem(0, 3, item)
            else:
                pass

            선물_총순매수_직전대비 = FUT_FOREIGNER_거래대금순매수_직전대비 + FUT_RETAIL_거래대금순매수_직전대비 + \
                              FUT_INSTITUTIONAL_거래대금순매수_직전대비 + FUT_STOCK_거래대금순매수_직전대비 + \
                              FUT_BOHEOM_거래대금순매수_직전대비 + FUT_TOOSIN_거래대금순매수_직전대비 + FUT_BANK_거래대금순매수_직전대비 + \
                              FUT_JONGGEUM_거래대금순매수_직전대비 + FUT_GIGEUM_거래대금순매수_직전대비 + \
                              FUT_GITA_거래대금순매수_직전대비

            현물_총순매수_직전대비 = KOSPI_FOREIGNER_거래대금순매수_직전대비 + KOSPI_RETAIL_거래대금순매수_직전대비 + \
                              KOSPI_INSTITUTIONAL_거래대금순매수_직전대비 + KOSPI_STOCK_거래대금순매수_직전대비 + \
                              KOSPI_BOHEOM_거래대금순매수_직전대비 + KOSPI_TOOSIN_거래대금순매수_직전대비 + KOSPI_BANK_거래대금순매수_직전대비 + \
                              KOSPI_JONGGEUM_거래대금순매수_직전대비 + KOSPI_GIGEUM_거래대금순매수_직전대비 + \
                              KOSPI_GITA_거래대금순매수_직전대비 + 프로그램_순매수직전대비

        except Exception as e:

            txt = '[{0:02d}:{1:02d}:{2:02d}] Exception : bm_update 에서 {3} \n상기 오류가 발생했습니다.\r'.format(dt.hour, dt.minute, dt.second, traceback.format_exc())
            self.textBrowser.append(txt)       

    def pm_update(self, tickdata):

        global 프로그램_순매수, 프로그램_순매수직전대비
        global 선물_총순매수, 현물_총순매수
        global 수급방향, 과거_수급방향
        global df_demand_supply_graph
        global plot_time_index

        try:
            dt = datetime.now()

            if len(tickdata['수신시간']) == 5:
                plot_time_index = (int(tickdata['수신시간'][0:1]) - DayTime_PreStart_Hour) * 60 + int(tickdata['수신시간'][1:3]) + 1
            else:
                plot_time_index = (int(tickdata['수신시간'][0:2]) - DayTime_PreStart_Hour) * 60 + int(tickdata['수신시간'][2:4]) + 1

            if tickdata['전체순매수금액합계'] == '-':
                프로그램_순매수 = 0
            else:
                프로그램_순매수 = int(int(tickdata['전체순매수금액합계']) / 100)

            if tickdata['전체순매수금액직전대비'] == '-':
                프로그램_순매수직전대비 = 0
            else:
                프로그램_순매수직전대비 = int(int(tickdata['전체순매수금액직전대비']) / 100)

            선물_총순매수 = 외인선물_순매수 + 개인선물_순매수 + 기관선물_순매수
            현물_총순매수 = 외인현물_순매수 + 개인현물_순매수 + 기관현물_순매수

            PROGRAM_직전대비.extend([프로그램_순매수직전대비])
            temp = list(PROGRAM_직전대비)

            순매수 = format(프로그램_순매수, ',')

            df_demand_supply_graph.at[plot_time_index, 'Program'] = 프로그램_순매수
            df_demand_supply_graph.at[plot_time_index, 'kospi_total'] = 현물_총순매수
            df_demand_supply_graph.at[plot_time_index, 'kospi_foreigner'] = 외인현물_순매수
            df_demand_supply_graph.at[plot_time_index, 'futures_foreigner'] = 외인선물_순매수

            if min(temp) > 0:

                item_txt = "{0}\n({1})⬈".format(순매수, 프로그램_순매수직전대비)

                if item_txt != self.dialog['선물옵션전광판'].tableWidget_supply.item(0, 6).text():
                    item = QTableWidgetItem(item_txt)
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(적색))
                    item.setForeground(QBrush(흰색))
                    self.dialog['선물옵션전광판'].tableWidget_supply.setItem(0, 6, item)
                else:
                    pass

            elif max(temp) < 0:

                item_txt = "{0}\n({1})⬊".format(순매수, 프로그램_순매수직전대비)

                if item_txt != self.dialog['선물옵션전광판'].tableWidget_supply.item(0, 6).text():
                    item = QTableWidgetItem(item_txt)
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(청색))
                    item.setForeground(QBrush(흰색))
                    self.dialog['선물옵션전광판'].tableWidget_supply.setItem(0, 6, item)
                else:
                    pass

            else:
                item_txt = "{0}\n({1})".format(순매수, 프로그램_순매수직전대비)

                if item_txt != self.dialog['선물옵션전광판'].tableWidget_supply.item(0, 6).text():
                    item = QTableWidgetItem(item_txt)
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.dialog['선물옵션전광판'].tableWidget_supply.setItem(0, 6, item)
                else:
                    pass        
                
            선물 = format(선물_총순매수, ',')
            현물 = format(현물_총순매수, ',')

            item_txt = "{0}\n{1}".format(선물, 현물)

            과거_수급방향 = 수급방향

            if item_txt != self.dialog['선물옵션전광판'].tableWidget_supply.item(0, 7).text():

                item = QTableWidgetItem(item_txt)
                item.setTextAlignment(Qt.AlignCenter)

                수급방향 = 'None'
                item.setBackground(QBrush(흰색))
                item.setForeground(QBrush(검정색))

                if 프로그램_순매수 > 0 and 현물_총순매수 > 0:

                    if 외인선물_순매수 < 0 and 외인현물_순매수 < 0:
                        수급방향 = 'C-None'
                        item.setBackground(QBrush(흰색))
                        item.setForeground(QBrush(검정색))

                    if 외인선물_순매수 < 0 and 외인현물_순매수 > 0:
                        수급방향 = 'C-Cross1'
                        item.setBackground(QBrush(검정색))
                        item.setForeground(QBrush(chocolate))

                    if 외인선물_순매수 > 0 and 외인현물_순매수 < 0:
                        수급방향 = 'C-Cross2'
                        item.setBackground(QBrush(검정색))
                        item.setForeground(QBrush(chocolate)) 

                    if 외인선물_순매수 > 0 and 외인현물_순매수 > 0:
                        수급방향 = 'Call'
                        item.setBackground(QBrush(magenta))
                        item.setForeground(QBrush(검정색))

                elif 프로그램_순매수 < 0 and 현물_총순매수 < 0:

                    if 외인선물_순매수 > 0 and 외인현물_순매수 > 0:
                        수급방향 = 'P-None'
                        item.setBackground(QBrush(흰색))
                        item.setForeground(QBrush(검정색))

                    if 외인선물_순매수 > 0 and 외인현물_순매수 < 0:
                        수급방향 = 'P-Cross1'
                        item.setBackground(QBrush(검정색))
                        item.setForeground(QBrush(deepskyblue))

                    if 외인선물_순매수 < 0 and 외인현물_순매수 > 0:
                        수급방향 = 'P-Cross2'
                        item.setBackground(QBrush(검정색))
                        item.setForeground(QBrush(deepskyblue))                

                    if 외인선물_순매수 < 0 and 외인현물_순매수 < 0:
                        수급방향 = 'Put'
                        item.setBackground(QBrush(cyan))
                        item.setForeground(QBrush(검정색))
                else:
                    pass                

                self.dialog['선물옵션전광판'].tableWidget_supply.setItem(0, 7, item)

                if 수급방향 != 과거_수급방향:
                    send_txt = "[{0:02d}:{1:02d}:{2:02d}] ★ 수급방향이 {3}에서 {4}로 바뀜 ★\r".format(dt.hour, dt.minute, dt.second, 과거_수급방향, 수급방향)
                    self.dialog['선물옵션전광판'].textBrowser.append(send_txt)

                    if flag_telegram_service:
                        ToYourTelegram(send_txt)

                    if 수급방향 == 'Call':
                        speak_txt = '콜'
                    elif 수급방향 == 'Put':
                        speak_txt = '풋'
                    else:
                        speak_txt = 'None'

                    self.speaker.setText(speak_txt)
                else:
                    pass
            else:
                pass

        except Exception as e:

            txt = '[{0:02d}:{1:02d}:{2:02d}] Exception : pm_update 에서 {3} \n상기 오류가 발생했습니다.\r'.format(dt.hour, dt.minute, dt.second, traceback.format_exc())
            self.textBrowser.append(txt)

    def make_fut_ohlc_dataframe(self, dataframe):

        df = dataframe.copy()

        df.drop(columns=["system_time", "tr_code", "대비기호", "전일대비", "등락율", "현재가", "시가", "고가", "저가", "체결구분", "체결량", "누적거래량", "누적거래대금", "매도누적체결량", "매도누적체결건수",  \
            "매수누적체결수량", "매수누적체결건수", "체결강도", "매도호가1", "매수호가1", "미결제약정수량", "KOSPI200지수", "이론가", "괴리율", "시장BASIS", "이론BASIS", "미결제약정증감", "장운영정보", "전일동시간대거래량", "단축코드"], inplace=True)
        
        # Converting the index as date
        df['수신시간'] = pd.to_datetime(date.today().strftime('%Y-%m-%d') + ' ' + df['수신시간'], format='%Y-%m-%d %H%M%S')
        df.set_index('수신시간', inplace=True)
        df['현재가'] = pd.to_numeric(df['현재가'])

        df_ohlc = df.resample(분봉주기)['현재가'].ohlc().bfill()
        QApplication.processEvents()

        return df_ohlc
        
    def futures_tick_update(self, tickdata):

        global pre_start, flag_fut_vs_sp500_drate_direction, plot_drate_scale_factor, fut_volume_power_energy_direction
        global fut_cm_volume_power, fut_nm_volume_power
        global 근월물_선물_종가대비_등락율, 근월물_선물_시가등락율, 근월물_선물_시가대비_등락율, kp200_시가등락율
        global df_futures_cm_graph, 근월물_선물_현재가, 근월물_선물_현재가_버퍼, flag_futures_cm_ohlc_open
        global df_futures_nm_graph, 차월물_선물_현재가, 차월물_선물_현재가_버퍼, flag_futures_nm_ohlc_open
        global flag_cm_drate_scale_factor_set, flag_nm_drate_scale_factor_set
        global 차월물_선물_종가대비_등락율, 차월물_선물_시가대비_등락율, 차월물_선물_시가등락율
        global old_plot_time_index, plot_time_index, fut_plot_sec, SP500_FUT_시가_등락율비
        global df_futures_cm_ta_graph, df_futures_nm_ta_graph
        global df_cm_fut_tick, df_cm_fut_tick_ohlc
        global flag_fut_zero_sec

        try:
            dt = datetime.now()

            if pre_start:
                pre_start = False
            else:
                pass

            old_plot_time_index = plot_time_index

            if len(tickdata['수신시간']) == 5:
                plot_time_index = (int(tickdata['수신시간'][0:1]) - DayTime_PreStart_Hour) * 60 + int(tickdata['수신시간'][1:3]) + 1
                fut_plot_sec = int(tickdata['수신시간'][3:5])
            else:
                plot_time_index = (int(tickdata['수신시간'][0:2]) - DayTime_PreStart_Hour) * 60 + int(tickdata['수신시간'][2:4]) + 1
                fut_plot_sec = int(tickdata['수신시간'][4:6])

            if plot_time_index < 0:                    

                txt = '[{0:02d}:{1:02d}:{2:02d}] futures_tick_update plot_time_index({3}) 오류발생(수신시간 = {4})! \r'.format(dt.hour, dt.minute, dt.second, plot_time_index, tickdata['수신시간'])
                self.dialog['선물옵션전광판'].textBrowser.append(txt)
                self.textBrowser.append(txt)

                plot_time_index = old_plot_time_index
            else:
                pass
            
            if fut_plot_sec != 0:
                flag_fut_zero_sec = False

            if fut_plot_sec == 0 and not flag_fut_zero_sec:

                flag_fut_zero_sec = True

                if flag_ohlc:

                    df_cm_fut_tick = df_cm_fut_tick.drop(df_cm_fut_tick.index[0:df_cm_fut_tick.shape[0]])
                    df_nm_fut_tick = df_nm_fut_tick.drop(df_nm_fut_tick.index[0:df_nm_fut_tick.shape[0]])

                    df_futures_cm_ta_graph['Open'].fillna(method='bfill', inplace=True)
                    df_futures_cm_ta_graph['High'].fillna(method='bfill', inplace=True) 
                    df_futures_cm_ta_graph['Low'].fillna(method='bfill', inplace=True)
                    df_futures_cm_ta_graph['Close'].fillna(method='bfill', inplace=True)

                    df_futures_nm_ta_graph['Open'].fillna(method='bfill', inplace=True)
                    df_futures_nm_ta_graph['High'].fillna(method='bfill', inplace=True) 
                    df_futures_nm_ta_graph['Low'].fillna(method='bfill', inplace=True)
                    df_futures_nm_ta_graph['Close'].fillna(method='bfill', inplace=True)

                
                if not flag_ohlc:

                    del 근월물_선물_현재가_버퍼[:]
                    del 차월물_선물_현재가_버퍼[:]                
            else:
                pass
            
            if tickdata['단축코드'] == GMSHCODE:
                
                if flag_ohlc:

                    df_cm_fut_tick = df_cm_fut_tick.append(tickdata, ignore_index=True)                
                    df_cm_fut_tick_ohlc = self.make_fut_ohlc_dataframe(df_cm_fut_tick)

                    df_futures_cm_ta_graph.at[plot_time_index, 'Open'] = df_cm_fut_tick_ohlc.iat[df_cm_fut_tick_ohlc.shape[0] - 1, 0]
                    df_futures_cm_ta_graph.at[plot_time_index, 'High'] = df_cm_fut_tick_ohlc.iat[df_cm_fut_tick_ohlc.shape[0] - 1, 1]
                    df_futures_cm_ta_graph.at[plot_time_index, 'Low'] = df_cm_fut_tick_ohlc.iat[df_cm_fut_tick_ohlc.shape[0] - 1, 2]
                    df_futures_cm_ta_graph.at[plot_time_index, 'Close'] = df_cm_fut_tick_ohlc.iat[df_cm_fut_tick_ohlc.shape[0] - 1, 3]
                
                # 그래프관련 처리 먼저...
                if float(tickdata['현재가']) == float('inf') or float(tickdata['현재가']) == float('-inf'):
                    근월물_선물_현재가 = float('nan')
                    txt = '[{0:02d}:{1:02d}:{2:02d}] 근월물 선물 현재가 무한대 오류발생...\r'.format(dt.hour, dt.minute, dt.second)
                    self.textBrowser.append(txt)
                else:
                    근월물_선물_현재가 = float(tickdata['현재가'])

                df_futures_cm_graph.at[plot_time_index, 'Time'] = tickdata['수신시간']
                df_futures_cm_graph.at[plot_time_index, 'Price'] = 근월물_선물_현재가
                df_futures_cm_ta_graph.at[plot_time_index, 'Time'] = tickdata['수신시간']
                df_futures_cm_ta_graph.at[plot_time_index, 'Price'] = 근월물_선물_현재가                

                # 1T OHLC 생성
                if not flag_ohlc:

                    df_futures_cm_ta_graph['Open'].fillna(method='bfill', inplace=True)
                    df_futures_cm_ta_graph['High'].fillna(method='bfill', inplace=True) 
                    df_futures_cm_ta_graph['Low'].fillna(method='bfill', inplace=True) 
                    df_futures_cm_ta_graph['Close'].fillna(method='bfill', inplace=True)

                    df_futures_cm_ta_graph.at[plot_time_index, 'Close'] = 근월물_선물_현재가

                    if not 근월물_선물_현재가_버퍼:
                        근월물_선물_현재가_버퍼.append(근월물_선물_현재가)
                        df_futures_cm_ta_graph.at[plot_time_index, 'Open'] = 근월물_선물_현재가
                    else:
                        근월물_선물_현재가_버퍼.append(근월물_선물_현재가)
                        df_futures_cm_ta_graph.at[plot_time_index, 'High'] = max(근월물_선물_현재가_버퍼)
                        df_futures_cm_ta_graph.at[plot_time_index, 'Low'] = min(근월물_선물_현재가_버퍼)
                    
                fut_cm_volume_power = int(tickdata['매수누적체결량']) - int(tickdata['매도누적체결량'])
                df_futures_cm_graph.at[plot_time_index, 'Volume'] = fut_cm_volume_power

                temp = '{0}k'.format(int(fut_cm_volume_power/1000))

                item = QTableWidgetItem(temp)
                item.setTextAlignment(Qt.AlignCenter)

                if fut_cm_volume_power > 0:

                    item.setBackground(QBrush(적색))
                    item.setForeground(QBrush(흰색))

                elif fut_cm_volume_power < 0:

                    item.setBackground(QBrush(청색))
                    item.setForeground(QBrush(흰색))
                else:
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))

                self.dialog['선물옵션전광판'].tableWidget_fut.setItem(1, Futures_column.거래량.value, item)

                근월물_선물_종가대비_등락율 = float(tickdata['등락율'])
                근월물_선물_시가등락율 = ((float(tickdata['시가']) - 근월물_선물_종가) / 근월물_선물_종가) * 100           
                근월물_선물_시가대비_등락율 = ((float(tickdata['현재가']) - float(tickdata['시가'])) / float(tickdata['시가'])) * 100

                if CALL_ATM_DRATE_REFERENCE:
                    drate_reference = 콜_등가_시가등락율
                else:
                    drate_reference = 풋_등가_시가등락율

                if TARGET_MONTH == 'CM' and abs(근월물_선물_시가등락율) > 0 and abs(drate_reference) > 0 and not flag_cm_drate_scale_factor_set:                    

                    plot_drate_scale_factor = int(abs(drate_reference / 근월물_선물_시가등락율))

                    if plot_drate_scale_factor > 100:
                        plot_drate_scale_factor = int(plot_drate_scale_factor / 10)
                    else:
                        pass

                    item = QTableWidgetItem("{0}".format(plot_drate_scale_factor))
                    item.setTextAlignment(Qt.AlignCenter)
                    self.dialog['선물옵션전광판'].tableWidget_fut.setItem(2, Futures_column.OLOH.value, item)

                    if DayTime:
                        if abs(SP500_시가_등락율) > 0:
                            SP500_FUT_시가_등락율비 = int(abs(근월물_선물_시가등락율 / SP500_시가_등락율)) * 10
                        else:
                            SP500_FUT_시가_등락율비 = plot_drate_scale_factor
                    else:
                        SP500_FUT_시가_등락율비 = plot_drate_scale_factor

                    flag_cm_drate_scale_factor_set = True
                else:
                    plot_drate_scale_factor = int(SP500_전일종가 / FUT_전일종가)                

                if abs(근월물_선물_종가대비_등락율) > abs(SP500_등락율):
                    flag_fut_vs_sp500_drate_direction = True
                else:
                    flag_fut_vs_sp500_drate_direction = False

                #df_futures_cm_graph.at[plot_time_index, 'Drate'] = plot_drate_scale_factor * 근월물_선물_종가대비_등락율
                df_futures_cm_graph.at[plot_time_index, 'Drate'] = 근월물_선물_시가대비_등락율

                self.dialog['선물옵션전광판'].fut_cm_update(tickdata)
                self.dialog['선물옵션전광판'].fut_cm_etc_update(tickdata)
                
                # ICHIMOKU
                df_futures_cm_ta_graph['OE_CONV'], df_futures_cm_ta_graph['OE_BASE'], df_futures_cm_ta_graph['SPAN_A'], df_futures_cm_ta_graph['SPAN_B'], df_futures_cm_ta_graph['LAGGING_SPAN'] = self.Calc_ICHIMOKU(df_futures_cm_ta_graph, CONVERSION_LINE_PERIOD, BASE_LINE_PERIOD, SPAN_B_PERIOD)                
                
            elif tickdata['단축코드'] == CMSHCODE:
                
                if flag_ohlc:

                    df_nm_fut_tick = df_nm_fut_tick.append(tickdata, ignore_index=True)                
                    df_nm_fut_tick_ohlc = self.make_fut_ohlc_dataframe(df_nm_fut_tick)

                    df_futures_nm_ta_graph.at[plot_time_index, 'Open'] = df_nm_fut_tick_ohlc.iat[df_nm_fut_tick_ohlc.shape[0] - 1, 0]
                    df_futures_nm_ta_graph.at[plot_time_index, 'High'] = df_nm_fut_tick_ohlc.iat[df_nm_fut_tick_ohlc.shape[0] - 1, 1]
                    df_futures_nm_ta_graph.at[plot_time_index, 'Low'] = df_nm_fut_tick_ohlc.iat[df_nm_fut_tick_ohlc.shape[0] - 1, 2]
                    df_futures_nm_ta_graph.at[plot_time_index, 'Close'] = df_nm_fut_tick_ohlc.iat[df_nm_fut_tick_ohlc.shape[0] - 1, 3]
                
                # 그래프관련 처리 먼저...
                if float(tickdata['현재가']) == float('inf') or float(tickdata['현재가']) == float('-inf'):
                    차월물_선물_현재가 = float('nan')
                    txt = '[{0:02d}:{1:02d}:{2:02d}] 차월물 선물 현재가 무한대 오류발생...\r'.format(dt.hour, dt.minute, dt.second)
                    self.textBrowser.append(txt)
                else:
                    차월물_선물_현재가 = float(tickdata['현재가'])

                차월물_선물_종가대비_등락율 = float(tickdata['등락율'])
                차월물_선물_시가등락율 = ((float(tickdata['시가']) - 차월물_선물_종가) / 차월물_선물_종가) * 100            
                차월물_선물_시가대비_등락율 = ((float(tickdata['현재가']) - float(tickdata['시가'])) / float(tickdata['시가'])) * 100

                if CALL_ATM_DRATE_REFERENCE:
                    drate_reference = 콜_등가_시가등락율
                else:
                    drate_reference = 풋_등가_시가등락율

                if TARGET_MONTH == 'NM' and abs(차월물_선물_시가등락율) > 0 and abs(drate_reference) > 0 and not flag_nm_drate_scale_factor_set:

                    plot_drate_scale_factor = int(abs(drate_reference / 차월물_선물_시가등락율))

                    if plot_drate_scale_factor > 100:
                        plot_drate_scale_factor = int(plot_drate_scale_factor / 10)
                    else:
                        pass

                    item = QTableWidgetItem("{0}".format(plot_drate_scale_factor))
                    item.setTextAlignment(Qt.AlignCenter)
                    self.dialog['선물옵션전광판'].tableWidget_fut.setItem(2, Futures_column.OLOH.value, item)

                    if DayTime:
                        if abs(SP500_시가_등락율) > 0:
                            SP500_FUT_시가_등락율비 = int(abs(차월물_선물_시가등락율 / SP500_시가_등락율)) * 10
                        else:
                            SP500_FUT_시가_등락율비 = plot_drate_scale_factor
                    else:
                        SP500_FUT_시가_등락율비 = plot_drate_scale_factor

                    flag_nm_drate_scale_factor_set = True
                else:
                    plot_drate_scale_factor = int(SP500_전일종가 / FUT_전일종가)

                #df_futures_nm_graph.at[plot_time_index, 'Drate'] = plot_drate_scale_factor * 차월물_선물_시가대비_등락율
                df_futures_nm_graph.at[plot_time_index, 'Drate'] = 차월물_선물_시가대비_등락율
                
                df_futures_nm_graph.at[plot_time_index, 'Time'] = tickdata['수신시간']
                df_futures_nm_graph.at[plot_time_index, 'Price'] = 차월물_선물_현재가
                df_futures_nm_ta_graph.at[plot_time_index, 'Time'] = tickdata['수신시간']
                df_futures_nm_ta_graph.at[plot_time_index, 'Price'] = 차월물_선물_현재가
                                                
                # 1T OHLC 생성
                if not flag_ohlc:

                    df_futures_nm_ta_graph['Open'].fillna(method='bfill', inplace=True)
                    df_futures_nm_ta_graph['High'].fillna(method='bfill', inplace=True) 
                    df_futures_nm_ta_graph['Low'].fillna(method='bfill', inplace=True) 
                    df_futures_nm_ta_graph['Close'].fillna(method='bfill', inplace=True)

                    df_futures_nm_ta_graph.at[plot_time_index, 'Close'] = 차월물_선물_현재가

                    if not 차월물_선물_현재가_버퍼:
                        차월물_선물_현재가_버퍼.append(차월물_선물_현재가)
                        df_futures_nm_ta_graph.at[plot_time_index, 'Open'] = 차월물_선물_현재가
                    else:
                        차월물_선물_현재가_버퍼.append(차월물_선물_현재가)
                        df_futures_nm_ta_graph.at[plot_time_index, 'High'] = max(차월물_선물_현재가_버퍼)
                        df_futures_nm_ta_graph.at[plot_time_index, 'Low'] = min(차월물_선물_현재가_버퍼)
                    
                fut_nm_volume_power = int(tickdata['매수누적체결량']) - int(tickdata['매도누적체결량'])

                temp = format(fut_nm_volume_power, ',')

                item = QTableWidgetItem(temp)
                item.setTextAlignment(Qt.AlignCenter)

                if fut_nm_volume_power > 0:

                    item.setBackground(QBrush(적색))
                    item.setForeground(QBrush(흰색))

                elif fut_nm_volume_power < 0:

                    item.setBackground(QBrush(청색))
                    item.setForeground(QBrush(흰색))
                else:
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))

                self.dialog['선물옵션전광판'].tableWidget_fut.setItem(0, Futures_column.거래량.value, item)

                if fut_cm_volume_power > 0 and fut_nm_volume_power > 0:
                    fut_volume_power_energy_direction = 'call'
                elif fut_cm_volume_power < 0 and fut_nm_volume_power < 0:
                    fut_volume_power_energy_direction = 'put'
                else:
                    fut_volume_power_energy_direction = ''

                self.dialog['선물옵션전광판'].fut_nm_update(tickdata)
                self.dialog['선물옵션전광판'].fut_nm_etc_update(tickdata)    
            else:
                pass

            if TARGET_MONTH == 'CM':

                if 근월물_선물_현재가 < volatility_breakout_downward_point:

                    item = QTableWidgetItem('VDB')
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(검정색))
                    item.setForeground(QBrush(cyan))               

                elif 근월물_선물_현재가 > volatility_breakout_upward_point and volatility_breakout_upward_point > 0:

                    item = QTableWidgetItem('VUB')
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(검정색))
                    item.setForeground(QBrush(magenta))                              
                else:
                    item = QTableWidgetItem('-')
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(검정색))
                    item.setForeground(QBrush(흰색))
                
                self.dialog['선물옵션전광판'].tableWidget_fut.setItem(2, 0, item)

            elif TARGET_MONTH == 'NM':

                if 근월물_선물_현재가 < volatility_breakout_downward_point:

                    item = QTableWidgetItem('VDB')
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(검정색))
                    item.setForeground(QBrush(cyan))              

                elif 근월물_선물_현재가 > volatility_breakout_upward_point and volatility_breakout_upward_point > 0:

                    item = QTableWidgetItem('VUB')
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(검정색))
                    item.setForeground(QBrush(magenta))            
                else:
                    item = QTableWidgetItem('-')
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(검정색))
                    item.setForeground(QBrush(흰색))
                    
                self.dialog['선물옵션전광판'].tableWidget_fut.setItem(2, 0, item)                
            else:
                pass

        except Exception as e:

            txt = '[{0:02d}:{1:02d}:{2:02d}] Exception : futures_tick_update 에서 {3}타입의 {4}예외가 발생했습니다.\r'.format(dt.hour, dt.minute, dt.second, type(e).__name__, str(e))
            self.textBrowser.append(txt)           

    def futures_quote_update(self, tickdata):

        global flag_market_service, 선물_호가순매수
        global df_futures_cm_graph, fut_quote_count_ratio, 선물_근월물_호가_잔량비, cm_fut_quote_min, cm_fut_quote_mean, cm_fut_quote_max
        global fut_cms_quote_count_ratio, 선물_차월물_호가_잔량비, nm_fut_quote_min, nm_fut_quote_mean, nm_fut_quote_max
        global fut_ccms_quote_count_ratio, fut_ccms_quote_remainder_ratio, fut_quote_energy_direction
        global quote_count_ratio, quote_remainder_ratio
        global flag_under_call, flag_over_call
        global 차월물_선물_호가잔량비_최소, 차월물_선물_호가잔량비_최대
        global plot_time_index
        global 근월물_매수호가_총수량, 근월물_매도호가_총수량, 차월물_매수호가_총수량, 차월물_매도호가_총수량

        try:
            dt = datetime.now()
        
            if not flag_market_service:
                pass
                #flag_market_service = True
            else:
                pass

            if len(tickdata['수신시간']) == 5:
                plot_time_index = (int(tickdata['수신시간'][0:1]) - DayTime_PreStart_Hour) * 60 + int(tickdata['수신시간'][1:3]) + 1
            else:
                plot_time_index = (int(tickdata['수신시간'][0:2]) - DayTime_PreStart_Hour) * 60 + int(tickdata['수신시간'][2:4]) + 1

            if tickdata['단축코드'] == GMSHCODE:

                근월물_매수호가_총수량 = int(tickdata['매수호가총수량'])
                근월물_매도호가_총수량 = int(tickdata['매도호가총수량'])

                # 그래프관련 처리 먼저...
                if int(tickdata['매도호가총건수']) > 0:
                    fut_quote_count_ratio = int(tickdata['매수호가총건수']) / int(tickdata['매도호가총건수'])
                else:
                    pass

                선물_호가순매수 = 근월물_매수호가_총수량 - 근월물_매도호가_총수량
                
                df_futures_cm_graph.at[plot_time_index, 'c_ms_quote'] = 근월물_매수호가_총수량
                df_futures_cm_graph.at[plot_time_index, 'c_md_quote'] = 근월물_매도호가_총수량

                if 근월물_매수호가_총수량 > 0 and 근월물_매도호가_총수량 > 0:

                    선물_근월물_호가_잔량비 = 근월물_매수호가_총수량 / 근월물_매도호가_총수량
                    df_futures_cm_graph.at[plot_time_index, 'c_quote_remainder_ratio'] = 선물_근월물_호가_잔량비

                    cm_fut_quote_min = df_futures_cm_graph['c_quote_remainder_ratio'].min()
                    cm_fut_quote_mean = df_futures_cm_graph['c_quote_remainder_ratio'].mean()
                    cm_fut_quote_max = df_futures_cm_graph['c_quote_remainder_ratio'].max()

                    item_txt = '{0:.2f}'.format(cm_fut_quote_min)

                    if item_txt != self.dialog['선물옵션전광판'].tableWidget_fut.horizontalHeaderItem(6).text():                        
                        item = QTableWidgetItem(item_txt)
                        item.setTextAlignment(Qt.AlignCenter)
                        self.dialog['선물옵션전광판'].tableWidget_fut.setHorizontalHeaderItem(6, item)
                    else:
                        pass                         
                else:
                    pass

                # 선물호가 갱신
                item = QTableWidgetItem("{0}".format(format(int(tickdata['매수호가총건수']), ',')))
                item.setTextAlignment(Qt.AlignCenter)

                if NightTime:
                    self.dialog['선물옵션전광판'].tableWidget_fut.setItem(0, Futures_column.매수건수.value, item)
                else:
                    self.dialog['선물옵션전광판'].tableWidget_fut.setItem(1, Futures_column.매수건수.value, item)

                self.dialog['선물옵션전광판'].tableWidget_fut.resizeColumnToContents(Futures_column.매수건수.value)

                item = QTableWidgetItem("{0}".format(format(int(tickdata['매도호가총건수']), ',')))
                item.setTextAlignment(Qt.AlignCenter)

                if NightTime:
                    self.dialog['선물옵션전광판'].tableWidget_fut.setItem(0, Futures_column.매도건수.value, item)
                else:
                    self.dialog['선물옵션전광판'].tableWidget_fut.setItem(1, Futures_column.매도건수.value, item)

                self.dialog['선물옵션전광판'].tableWidget_fut.resizeColumnToContents(Futures_column.매도건수.value)

                item = QTableWidgetItem("{0}".format(format(근월물_매수호가_총수량, ',')))
                item.setTextAlignment(Qt.AlignCenter)

                if NightTime:
                    self.dialog['선물옵션전광판'].tableWidget_fut.setItem(0, Futures_column.매수잔량.value, item)
                else:
                    self.dialog['선물옵션전광판'].tableWidget_fut.setItem(1, Futures_column.매수잔량.value, item)

                self.dialog['선물옵션전광판'].tableWidget_fut.resizeColumnToContents(Futures_column.매수잔량.value)

                item = QTableWidgetItem("{0}".format(format(근월물_매도호가_총수량, ',')))
                item.setTextAlignment(Qt.AlignCenter)

                if NightTime:
                    self.dialog['선물옵션전광판'].tableWidget_fut.setItem(0, Futures_column.매도잔량.value, item)
                else:
                    self.dialog['선물옵션전광판'].tableWidget_fut.setItem(1, Futures_column.매도잔량.value, item)

                self.dialog['선물옵션전광판'].tableWidget_fut.resizeColumnToContents(Futures_column.매도잔량.value)

            # 차월물 처리
            elif tickdata['단축코드'] == CMSHCODE:

                차월물_매수호가_총수량 = int(tickdata['매수호가총수량'])
                차월물_매도호가_총수량 = int(tickdata['매도호가총수량'])

                # 그래프관련 처리 먼저...
                if int(tickdata['매도호가총건수']) > 0:
                    fut_cms_quote_count_ratio = int(tickdata['매수호가총건수']) / int(tickdata['매도호가총건수'])
                else:
                    pass

                df_futures_cm_graph.at[plot_time_index, 'n_ms_quote'] = 차월물_매수호가_총수량
                df_futures_cm_graph.at[plot_time_index, 'n_md_quote'] = 차월물_매도호가_총수량

                if 차월물_매수호가_총수량 > 0 and 차월물_매도호가_총수량 > 0:

                    선물_차월물_호가_잔량비 = 차월물_매수호가_총수량 / 차월물_매도호가_총수량
                    df_futures_cm_graph.at[plot_time_index, 'n_quote_remainder_ratio'] = 선물_차월물_호가_잔량비

                    if flag_market_service:

                        nm_fut_quote_min = df_futures_cm_graph['n_quote_remainder_ratio'].min()
                        nm_fut_quote_mean = df_futures_cm_graph['n_quote_remainder_ratio'].mean()
                        nm_fut_quote_max = df_futures_cm_graph['n_quote_remainder_ratio'].max()

                        if nm_fut_quote_min < 차월물_선물_호가잔량비_최소:
                            차월물_선물_호가잔량비_최소 = nm_fut_quote_min
                        else:
                            pass

                        if nm_fut_quote_max > 차월물_선물_호가잔량비_최대:
                            차월물_선물_호가잔량비_최대 = nm_fut_quote_max
                        else:
                            pass

                        if 선물_차월물_호가_잔량비 < UNDER_CALL_LIMIT_VAL:
                            flag_under_call = True
                        else:
                            flag_under_call = False

                        if 선물_차월물_호가_잔량비 >= OVER_CALL_LIMIT_VAL:
                            flag_over_call = True
                        else:
                            flag_over_call = False

                        item_txt = '{0:.2f}'.format(nm_fut_quote_min)

                        if item_txt != self.dialog['선물옵션전광판'].tableWidget_fut.horizontalHeaderItem(7).text():                        
                            item = QTableWidgetItem(item_txt)
                            item.setTextAlignment(Qt.AlignCenter)
                            self.dialog['선물옵션전광판'].tableWidget_fut.setHorizontalHeaderItem(7, item)
                        else:
                            pass
                    else:
                        pass
                else:
                    pass

                # 선물호가 갱신
                item = QTableWidgetItem("{0}".format(format(int(tickdata['매수호가총건수']), ',')))
                item.setTextAlignment(Qt.AlignCenter)

                if NightTime:
                    self.dialog['선물옵션전광판'].tableWidget_fut.setItem(0, Futures_column.매수건수.value, item)
                else:
                    self.dialog['선물옵션전광판'].tableWidget_fut.setItem(1, Futures_column.매수건수.value, item)

                item = QTableWidgetItem("{0}".format(format(int(tickdata['매도호가총건수']), ',')))
                item.setTextAlignment(Qt.AlignCenter)

                if NightTime:
                    self.dialog['선물옵션전광판'].tableWidget_fut.setItem(0, Futures_column.매도건수.value, item)
                else:
                    self.dialog['선물옵션전광판'].tableWidget_fut.setItem(1, Futures_column.매도건수.value, item)

                item = QTableWidgetItem("{0}".format(format(차월물_매수호가_총수량, ',')))
                item.setTextAlignment(Qt.AlignCenter)

                if NightTime:
                    self.dialog['선물옵션전광판'].tableWidget_fut.setItem(0, Futures_column.매수잔량.value, item)
                else:
                    self.dialog['선물옵션전광판'].tableWidget_fut.setItem(1, Futures_column.매수잔량.value, item)

                item = QTableWidgetItem("{0}".format(format(차월물_매도호가_총수량, ',')))
                item.setTextAlignment(Qt.AlignCenter)

                if NightTime:
                    self.dialog['선물옵션전광판'].tableWidget_fut.setItem(0, Futures_column.매도잔량.value, item)
                else:
                    self.dialog['선물옵션전광판'].tableWidget_fut.setItem(1, Futures_column.매도잔량.value, item)                    

            elif tickdata['단축코드'] == CCMSHCODE:

                # 그래프관련 처리 먼저...
                if int(tickdata['매도호가총건수']) > 0:
                    fut_ccms_quote_count_ratio = int(tickdata['매수호가총건수']) / int(tickdata['매도호가총건수'])
                else:
                    pass

                if int(tickdata['매수호가총수량']) > 0 and int(tickdata['매도호가총수량']) > 0:
                    fut_ccms_quote_remainder_ratio = int(tickdata['매수호가총수량']) / int(tickdata['매도호가총수량'])
                else:
                    pass

                # 선물호가 갱신                    
                item = QTableWidgetItem("C{0}".format(format(int(tickdata['매수호가총건수']), ',')))
                item.setTextAlignment(Qt.AlignCenter)

                if NightTime:
                    self.dialog['선물옵션전광판'].tableWidget_fut.setItem(0, Futures_column.매수건수.value, item)
                else:
                    self.dialog['선물옵션전광판'].tableWidget_fut.setItem(1, Futures_column.매수건수.value, item)

                item = QTableWidgetItem("C{0}".format(format(int(tickdata['매도호가총건수']), ',')))
                item.setTextAlignment(Qt.AlignCenter)

                if NightTime:
                    self.dialog['선물옵션전광판'].tableWidget_fut.setItem(0, Futures_column.매도건수.value, item)
                else:
                    self.dialog['선물옵션전광판'].tableWidget_fut.setItem(1, Futures_column.매도건수.value, item)

                item = QTableWidgetItem("C{0}".format(format(int(tickdata['매수호가총수량']), ',')))
                item.setTextAlignment(Qt.AlignCenter)

                if NightTime:
                    self.dialog['선물옵션전광판'].tableWidget_fut.setItem(0, Futures_column.매수잔량.value, item)
                else:
                    self.dialog['선물옵션전광판'].tableWidget_fut.setItem(1, Futures_column.매수잔량.value, item)

                item = QTableWidgetItem("C{0}".format(format(int(tickdata['매도호가총수량']), ',')))
                item.setTextAlignment(Qt.AlignCenter)

                if NightTime:
                    self.dialog['선물옵션전광판'].tableWidget_fut.setItem(0, Futures_column.매도잔량.value, item)
                else:
                    self.dialog['선물옵션전광판'].tableWidget_fut.setItem(1, Futures_column.매도잔량.value, item)
            else:
                pass

            # 에너지방향
            if DayTime and CM_FUT_QUOTE and NM_FUT_QUOTE:

                if 선물_차월물_호가_잔량비 > 선물_근월물_호가_잔량비:

                    fut_quote_energy_direction = 'call'

                    if NightTime:
                        self.dialog['선물옵션전광판'].tableWidget_fut.item(0, 0).setBackground(QBrush(적색))
                        self.dialog['선물옵션전광판'].tableWidget_fut.item(0, 0).setForeground(QBrush(흰색))
                    else:
                        self.dialog['선물옵션전광판'].tableWidget_fut.item(1, 0).setBackground(QBrush(적색))
                        self.dialog['선물옵션전광판'].tableWidget_fut.item(1, 0).setForeground(QBrush(흰색))

                elif 선물_차월물_호가_잔량비 < 선물_근월물_호가_잔량비:

                    fut_quote_energy_direction = 'put'

                    if NightTime:
                        self.dialog['선물옵션전광판'].tableWidget_fut.item(0, 0).setBackground(QBrush(청색))
                        self.dialog['선물옵션전광판'].tableWidget_fut.item(0, 0).setForeground(QBrush(흰색))
                    else:
                        self.dialog['선물옵션전광판'].tableWidget_fut.item(1, 0).setBackground(QBrush(청색))
                        self.dialog['선물옵션전광판'].tableWidget_fut.item(1, 0).setForeground(QBrush(흰색))

                else:
                    if NightTime:
                        self.dialog['선물옵션전광판'].tableWidget_fut.item(0, 0).setBackground(QBrush(검정색))
                        self.dialog['선물옵션전광판'].tableWidget_fut.item(0, 0).setForeground(QBrush(흰색))
                    else:
                        self.dialog['선물옵션전광판'].tableWidget_fut.item(1, 0).setBackground(QBrush(검정색))
                        self.dialog['선물옵션전광판'].tableWidget_fut.item(1, 0).setForeground(QBrush(흰색))                    
            else:
                pass

            # 건수비 표시
            item = QTableWidgetItem("{0:.2f}\n({1:.2f})".format(fut_quote_count_ratio, fut_cms_quote_count_ratio))
            item.setTextAlignment(Qt.AlignCenter)

            if NightTime:
                self.dialog['선물옵션전광판'].tableWidget_fut.setItem(0, Futures_column.건수비.value, item)
            else:
                self.dialog['선물옵션전광판'].tableWidget_fut.setItem(1, Futures_column.건수비.value, item)

            self.dialog['선물옵션전광판'].tableWidget_fut.resizeColumnToContents(Futures_column.건수비.value)

            # 잔량비 표시
            item = QTableWidgetItem("{0:.2f}\n({1:.2f})".format(선물_근월물_호가_잔량비, 선물_차월물_호가_잔량비))                
            item.setTextAlignment(Qt.AlignCenter)

            if NightTime:
                self.dialog['선물옵션전광판'].tableWidget_fut.setItem(0, Futures_column.잔량비.value, item)
            else:
                self.dialog['선물옵션전광판'].tableWidget_fut.setItem(1, Futures_column.잔량비.value, item)

            self.dialog['선물옵션전광판'].tableWidget_fut.resizeColumnToContents(Futures_column.잔량비.value)

            if TARGET_MONTH == 'CM':
                quote_count_ratio = fut_quote_count_ratio
                quote_remainder_ratio = 선물_근월물_호가_잔량비
            elif TARGET_MONTH == 'NM':
                quote_count_ratio = fut_cms_quote_count_ratio
                quote_remainder_ratio = 선물_차월물_호가_잔량비
            else:
                pass

            if DayTime:

                if quote_count_ratio > 1.0 and quote_remainder_ratio > 1.0:

                    if quote_count_ratio > quote_remainder_ratio:

                        self.dialog['선물옵션전광판'].tableWidget_fut.item(1, Futures_column.건수비.value).setBackground(QBrush(적색))
                        self.dialog['선물옵션전광판'].tableWidget_fut.item(1, Futures_column.건수비.value).setForeground(QBrush(흰색))
                        self.dialog['선물옵션전광판'].tableWidget_fut.item(1, Futures_column.잔량비.value).setBackground(QBrush(적색))
                        self.dialog['선물옵션전광판'].tableWidget_fut.item(1, Futures_column.잔량비.value).setForeground(QBrush(흰색))
                    else:
                        self.dialog['선물옵션전광판'].tableWidget_fut.item(1, Futures_column.건수비.value).setBackground(QBrush(pink))
                        self.dialog['선물옵션전광판'].tableWidget_fut.item(1, Futures_column.건수비.value).setForeground(QBrush(검정색))
                        self.dialog['선물옵션전광판'].tableWidget_fut.item(1, Futures_column.잔량비.value).setBackground(QBrush(pink))
                        self.dialog['선물옵션전광판'].tableWidget_fut.item(1, Futures_column.잔량비.value).setForeground(QBrush(검정색))

                elif quote_count_ratio < 1.0 and quote_remainder_ratio < 1.0:

                    if quote_count_ratio < quote_remainder_ratio:

                        self.dialog['선물옵션전광판'].tableWidget_fut.item(1, Futures_column.건수비.value).setBackground(QBrush(청색))
                        self.dialog['선물옵션전광판'].tableWidget_fut.item(1, Futures_column.건수비.value).setForeground(QBrush(흰색))
                        self.dialog['선물옵션전광판'].tableWidget_fut.item(1, Futures_column.잔량비.value).setBackground(QBrush(청색))
                        self.dialog['선물옵션전광판'].tableWidget_fut.item(1, Futures_column.잔량비.value).setForeground(QBrush(흰색))
                    else:
                        self.dialog['선물옵션전광판'].tableWidget_fut.item(1, Futures_column.건수비.value).setBackground(QBrush(lightskyblue))
                        self.dialog['선물옵션전광판'].tableWidget_fut.item(1, Futures_column.건수비.value).setForeground(QBrush(검정색))
                        self.dialog['선물옵션전광판'].tableWidget_fut.item(1, Futures_column.잔량비.value).setBackground(QBrush(lightskyblue))
                        self.dialog['선물옵션전광판'].tableWidget_fut.item(1, Futures_column.잔량비.value).setForeground(QBrush(검정색))
                else:
                    self.dialog['선물옵션전광판'].tableWidget_fut.item(1, Futures_column.건수비.value).setBackground(QBrush(흰색))
                    self.dialog['선물옵션전광판'].tableWidget_fut.item(1, Futures_column.건수비.value).setForeground(QBrush(검정색))
                    self.dialog['선물옵션전광판'].tableWidget_fut.item(1, Futures_column.잔량비.value).setBackground(QBrush(흰색))
                    self.dialog['선물옵션전광판'].tableWidget_fut.item(1, Futures_column.잔량비.value).setForeground(QBrush(검정색))
            else:
                pass

            if ResizeRowsToContents:
                self.dialog['선물옵션전광판'].tableWidget_fut.resizeRowsToContents()
            else:
                pass

        except Exception as e:

            txt = '[{0:02d}:{1:02d}:{2:02d}] Exception : futures_quote_update 에서 {3}타입의 {4}예외가 발생했습니다.\r'.format(dt.hour, dt.minute, dt.second, type(e).__name__, str(e))
            self.textBrowser.append(txt)

    def option_tick_update(self, tickdata):
        
        global flag_option_start, pre_start, receive_quote, flag_market_service
        global df_call, call_tickdata, df_call_graph, df_call_information_graph, df_call_volume, call_volume_power, 콜_등가_등락율
        global df_put, put_tickdata, df_put_graph, df_put_information_graph, df_put_volume, put_volume_power, 풋_등가_등락율
        global 콜_수정미결합, 풋_수정미결합, 콜_수정미결퍼센트, 풋_수정미결퍼센트, 콜잔량비, 풋잔량비
        global 콜_현재가, 풋_현재가
        global flag_cm_drate_scale_factor_set
        global flag_nm_oloh_direction_call_set, flag_nm_oloh_direction_put_set
        global old_plot_time_index, plot_time_index

        try:
            dt = datetime.now()

            if not flag_option_start:
                flag_option_start = True
            else:
                pass

            if pre_start:
                pre_start = False
            else:
                pass

            if not flag_market_service:                
                flag_market_service = True
            else:
                pass            

            if NightTime:            

                if CALL_ATM_DRATE_REFERENCE:
                    drate_reference = 콜_등가_시가등락율
                else:
                    drate_reference = 풋_등가_시가등락율

                if abs(근월물_선물_시가등락율) > 0 and abs(drate_reference) > 0 and not flag_cm_drate_scale_factor_set:

                    plot_drate_scale_factor = int(abs(drate_reference / 근월물_선물_시가등락율))

                    if plot_drate_scale_factor > 100:
                        plot_drate_scale_factor = int(plot_drate_scale_factor / 10)
                    else:
                        pass

                    item = QTableWidgetItem("{0}".format(plot_drate_scale_factor))
                    item.setTextAlignment(Qt.AlignCenter)
                    self.dialog['선물옵션전광판'].tableWidget_fut.setItem(2, Futures_column.OLOH.value, item)

                    flag_cm_drate_scale_factor_set = True
                else:
                    plot_drate_scale_factor = int(SP500_전일종가 / FUT_전일종가)
            else:
                pass

            old_plot_time_index = plot_time_index

            if DayTime:
                if len(tickdata['수신시간']) == 5:
                    plot_time_index = (int(tickdata['수신시간'][0:1]) - DayTime_PreStart_Hour) * 60 + int(tickdata['수신시간'][1:3]) + 1
                else:
                    plot_time_index = (int(tickdata['수신시간'][0:2]) - DayTime_PreStart_Hour) * 60 + int(tickdata['수신시간'][2:4]) + 1
            else:
                option_plot_hour = int(tickdata['수신시간'][0:2])

                if SUMMER_TIME:
                    cme_close_hour = 6
                else:
                    cme_close_hour = 7

                if 0 <= option_plot_hour <= cme_close_hour:
                    option_plot_hour = option_plot_hour + 24
                else:
                    pass

                plot_time_index = (option_plot_hour - NightTime_PreStart_Hour) * 60 + int(tickdata['수신시간'][2:4]) + 1

            if plot_time_index < 0:                    

                txt = '[{0:02d}:{1:02d}:{2:02d}] option_tick_update plot_time_index({3}) 오류발생(수신시간 = {4})! \r'.format(dt.hour, dt.minute, dt.second, plot_time_index, tickdata['수신시간'])
                self.dialog['선물옵션전광판'].textBrowser.append(txt)
                self.textBrowser.append(txt)

                plot_time_index = old_plot_time_index
            else:
                pass

            if tickdata['단축코드'][0:3] == '201':

                index = call_행사가.index(tickdata['단축코드'][5:8])

                # 현재가 갱신
                콜_현재가 = float(tickdata['현재가'])
                df_call_graph[index].at[plot_time_index, 'Price'] = 콜_현재가

                # 등락율 갱신, 근월물 기준으로 계산
                if DayTime and index == ATM_INDEX:
                    콜_등가_등락율 = float(tickdata['등락율'])
                else:
                    pass

                # 체결량 갱신
                콜시가갭 = df_call.at[index, '시가갭']

                if 콜_현재가 <= 콜시가갭:

                    매도누적체결량 = int(tickdata['매도누적체결량']) * 콜_현재가
                    매수누적체결량 = int(tickdata['매수누적체결량']) * 콜_현재가
                else:
                    매도누적체결량 = int(tickdata['매도누적체결량']) * (콜_현재가 - 콜시가갭)
                    매수누적체결량 = int(tickdata['매수누적체결량']) * (콜_현재가 - 콜시가갭)

                df_call_volume.at[index, '매도누적체결량'] = int(매도누적체결량)
                df_call_volume.at[index, '매수누적체결량'] = int(매수누적체결량)

                call_volume_power = df_call_volume['매수누적체결량'].sum() - df_call_volume['매도누적체결량'].sum()
                df_call_information_graph.at[plot_time_index, 'Volume'] = call_volume_power

                # 미결 갱신
                if DayTime:

                    if 콜_현재가 <= 콜시가갭:

                        수정미결 = int(tickdata['미결제약정수량']) * 콜_현재가
                        수정미결증감 = int(tickdata['미결제약정증감']) * 콜_현재가
                    else:
                        수정미결 = int(tickdata['미결제약정수량']) * (콜_현재가 - 콜시가갭)
                        수정미결증감 = int(tickdata['미결제약정증감']) * (콜_현재가 - 콜시가갭)

                    df_call.at[index, '수정미결'] = int(수정미결)
                    df_call.at[index, '수정미결증감'] = int(수정미결증감)
                else:
                    pass                    

                if FLAG_GUEST_CONTROL:

                    # 테이블 갱신
                    self.dialog['선물옵션전광판'].call_update(tickdata)
                    self.dialog['선물옵션전광판'].call_db_update()
                    call_tickdata = copy.deepcopy(tickdata)                

                    if not flag_option_periodic_update_mode:
                        self.dialog['선물옵션전광판'].call_volume_power_update()

                        if DayTime:
                            self.dialog['선물옵션전광판'].call_oi_update()
                        else:
                            pass                       
                    else:
                        pass
                else:
                    pass                                    

            elif tickdata['단축코드'][0:3] == '301':

                index = put_행사가.index(tickdata['단축코드'][5:8])

                # 현재가 갱신
                풋_현재가 = float(tickdata['현재가'])
                df_put_graph[index].at[plot_time_index, 'Price'] = 풋_현재가

                # 등락율 갱신, 근월물 기준으로 계산
                if DayTime and index == ATM_INDEX:
                    풋_등가_등락율 = float(tickdata['등락율'])
                else:
                    pass

                # 체결량 갱신
                풋시가갭 = df_put.at[index, '시가갭']

                if 풋_현재가 <= 풋시가갭:

                    매도누적체결량 = int(tickdata['매도누적체결량']) * 풋_현재가
                    매수누적체결량 = int(tickdata['매수누적체결량']) * 풋_현재가
                else:
                    매도누적체결량 = int(tickdata['매도누적체결량']) * (풋_현재가 - 풋시가갭)
                    매수누적체결량 = int(tickdata['매수누적체결량']) * (풋_현재가 - 풋시가갭)

                df_put_volume.at[index, '매도누적체결량'] = int(매도누적체결량)
                df_put_volume.at[index, '매수누적체결량'] = int(매수누적체결량)

                put_volume_power = df_put_volume['매수누적체결량'].sum() - df_put_volume['매도누적체결량'].sum()
                df_put_information_graph.at[plot_time_index, 'Volume'] = put_volume_power 

                # 미결 갱신
                if DayTime:

                    if 풋_현재가 <= 풋시가갭:

                        수정미결 = int(tickdata['미결제약정수량']) * 풋_현재가
                        수정미결증감 = int(tickdata['미결제약정증감']) * 풋_현재가
                    else:
                        수정미결 = int(tickdata['미결제약정수량']) * (풋_현재가 - 풋시가갭)
                        수정미결증감 = int(tickdata['미결제약정증감']) * (풋_현재가 - 풋시가갭)

                    df_put.at[index, '수정미결'] = int(수정미결)
                    df_put.at[index, '수정미결증감'] = int(수정미결증감)
                else:
                    pass 

                # 테이블 갱신
                self.dialog['선물옵션전광판'].put_update(tickdata)
                self.dialog['선물옵션전광판'].put_db_update()
                put_tickdata = copy.deepcopy(tickdata)                                                                              

                if not flag_option_periodic_update_mode:
                    self.dialog['선물옵션전광판'].put_volume_power_update()

                    if DayTime:
                        self.dialog['선물옵션전광판'].put_oi_update()
                        self.dialog['선물옵션전광판'].oi_total_update()
                    else:
                        pass
                else:
                    pass                                 
            else:
                pass

            # 차월물 OLOH 알람
            if TARGET_MONTH == 'NM':                

                if call_ol_count > call_oh_count and put_ol_count < put_oh_count:                    

                    if not flag_nm_oloh_direction_call_set:

                        item = QTableWidgetItem("CD")
                        item.setTextAlignment(Qt.AlignCenter)
                        item.setBackground(QBrush(적색))
                        item.setForeground(QBrush(흰색))
                        self.dialog['선물옵션전광판'].tableWidget_fut.setItem(0, 0, item)

                        flag_nm_oloh_direction_call_set = True

                        if flag_fut_nm_ol:
                            txt = '[{0:02d}:{1:02d}:{2:02d}] All ▲ ▲...\r'.format(dt.hour, dt.minute, dt.second)
                            self.dialog['선물옵션전광판'].textBrowser.append(txt)
                            self.textBrowser.append(txt)

                            txt = 'NM All Up'
                            self.speaker.setText(txt)
                        else:
                            txt = '[{0:02d}:{1:02d}:{2:02d}] 차월물 콜...\r'.format(dt.hour, dt.minute, dt.second)
                            self.dialog['선물옵션전광판'].textBrowser.append(txt)
                            self.textBrowser.append(txt)

                            txt = 'NM 콜'
                            self.speaker.setText(txt)
                    else:
                        pass

                elif call_ol_count < call_oh_count and put_ol_count > put_oh_count:                    

                    if not flag_nm_oloh_direction_put_set:

                        item = QTableWidgetItem("PD")
                        item.setTextAlignment(Qt.AlignCenter)
                        item.setBackground(QBrush(청색))
                        item.setForeground(QBrush(흰색))
                        self.dialog['선물옵션전광판'].tableWidget_fut.setItem(0, 0, item)

                        flag_nm_oloh_direction_put_set = True

                        if flag_fut_nm_oh:
                            txt = '[{0:02d}:{1:02d}:{2:02d}] All ▼ ▼...\r'.format(dt.hour, dt.minute, dt.second)
                            self.dialog['선물옵션전광판'].textBrowser.append(txt)
                            self.textBrowser.append(txt)

                            txt = 'NM All Down'
                            self.speaker.setText(txt)
                        else:
                            txt = '[{0:02d}:{1:02d}:{2:02d}] 차월물 풋...\r'.format(dt.hour, dt.minute, dt.second)
                            self.dialog['선물옵션전광판'].textBrowser.append(txt)
                            self.textBrowser.append(txt)

                            txt = 'NM 풋'
                            self.speaker.setText(txt)
                    else:
                        pass
                else:
                    if flag_nm_oloh_direction_call_set:

                        item = QTableWidgetItem("-")
                        item.setTextAlignment(Qt.AlignCenter)
                        item.setBackground(QBrush(검정색))
                        item.setForeground(QBrush(흰색))
                        self.dialog['선물옵션전광판'].tableWidget_fut.setItem(0, 0, item)

                        flag_nm_oloh_direction_call_set = False
                    else:
                        pass

                    if flag_nm_oloh_direction_put_set:

                        item = QTableWidgetItem("-")
                        item.setTextAlignment(Qt.AlignCenter)
                        item.setBackground(QBrush(검정색))
                        item.setForeground(QBrush(흰색))
                        self.dialog['선물옵션전광판'].tableWidget_fut.setItem(0, 0, item)

                        flag_nm_oloh_direction_put_set = False
                    else:
                        pass                
            else:
                pass

            # 미결 그래프 갱신
            if True:

                if DayTime:

                    콜_수정미결합 = df_call['수정미결'].sum()
                    풋_수정미결합 = df_put['수정미결'].sum()
                    수정미결합 = 콜_수정미결합 + 풋_수정미결합

                    if 수정미결합 > 0:

                        콜_수정미결퍼센트 = (콜_수정미결합 / 수정미결합) * 100
                        풋_수정미결퍼센트 = 100 - 콜_수정미결퍼센트
                    else:
                        콜_수정미결퍼센트 = 0
                        풋_수정미결퍼센트 = 0

                    df_call_information_graph.at[plot_time_index, 'open_interest'] = 콜_수정미결퍼센트
                    df_put_information_graph.at[plot_time_index, 'open_interest'] = 풋_수정미결퍼센트
                else:
                    pass
            else:
                pass

        except Exception as e:

            txt = '[{0:02d}:{1:02d}:{2:02d}] Exception : option_tick_update 에서 {3}타입의 {4}예외가 발생했습니다.\r'.format(dt.hour, dt.minute, dt.second, type(e).__name__, str(e))
            self.textBrowser.append(txt)

    def option_quote_update(self, tickdata):

        global receive_quote, flag_market_service
        global df_call_quote, df_put_quote, 콜잔량비, 풋잔량비, call_remainder_ratio, put_remainder_ratio
        global df_call_information_graph, df_put_information_graph
        global flag_telegram_send_start, flag_telegram_listen_start
        global 옵션_잔량비차
        global 콜_잔량비_최소, 콜_잔량비_최대, 풋_잔량비_최소, 풋_잔량비_최대
        global 옵션_잔량비_최소, 옵션_잔량비_최대
        global old_plot_time_index, plot_time_index
        global call_quote, put_quote

        try:
            dt = datetime.now()

            if not receive_quote:
                receive_quote = True
            else:
                pass

            old_plot_time_index = plot_time_index

            if DayTime:
                if len(tickdata['수신시간']) == 5:
                    plot_time_index = (int(tickdata['수신시간'][0:1]) - DayTime_PreStart_Hour) * 60 + int(tickdata['수신시간'][1:3]) + 1
                else:
                    plot_time_index = (int(tickdata['수신시간'][0:2]) - DayTime_PreStart_Hour) * 60 + int(tickdata['수신시간'][2:4]) + 1
            else:
                if len(tickdata['수신시간']) == 1:
                    plot_time_index = (24 - NightTime_PreStart_Hour) * 60 + 0 + 1
                elif len(tickdata['수신시간']) == 2:
                    plot_time_index = (24 - NightTime_PreStart_Hour) * 60 + 0 + 1
                elif len(tickdata['수신시간']) == 3:
                    plot_time_index = (24 - NightTime_PreStart_Hour) * 60 + int(tickdata['수신시간'][0:1]) + 1
                elif len(tickdata['수신시간']) == 4:
                    plot_time_index = (24 - NightTime_PreStart_Hour) * 60 + int(tickdata['수신시간'][0:2]) + 1
                elif len(tickdata['수신시간']) == 5:
                    plot_time_index = (int(tickdata['수신시간'][0:1]) - NightTime_PreStart_Hour) * 60 + int(tickdata['수신시간'][1:3]) + 1
                elif len(tickdata['수신시간']) == 6:
                    plot_time_index = (int(tickdata['수신시간'][0:2]) - NightTime_PreStart_Hour) * 60 + int(tickdata['수신시간'][2:4]) + 1
                else:
                    pass

            if plot_time_index < 0:                    

                txt = '[{0:02d}:{1:02d}:{2:02d}] option_quote_update plot_time_index({3}) 오류발생(수신시간 = {4})! \r'.format(dt.hour, dt.minute, dt.second, plot_time_index, tickdata['수신시간'])
                self.dialog['선물옵션전광판'].textBrowser.append(txt)
                self.textBrowser.append(txt)

                plot_time_index = old_plot_time_index
            else:
                pass

            if tickdata['단축코드'][0:3] == '201':

                index = call_행사가.index(tickdata['단축코드'][5:8])

                df_call_quote.at[index, '매수건수'] = int(tickdata['매수호가총건수'])
                df_call_quote.at[index, '매도건수'] = int(tickdata['매도호가총건수'])
                df_call_quote.at[index, '매수잔량'] = int(tickdata['매수호가총수량'])
                df_call_quote.at[index, '매도잔량'] = int(tickdata['매도호가총수량'])

                call_quote = df_call_quote.sum()

                df_call_information_graph.at[plot_time_index, 'ms_quote'] = call_quote['매수잔량']
                df_call_information_graph.at[plot_time_index, 'md_quote'] = call_quote['매도잔량']

                if call_quote['매도잔량'] > 0:
                    call_remainder_ratio = round((call_quote['매수잔량'] / call_quote['매도잔량']), 2)
                else:
                    call_remainder_ratio = 0

                콜잔량비 = call_remainder_ratio

            elif tickdata['단축코드'][0:3] == '301':

                index = put_행사가.index(tickdata['단축코드'][5:8])

                df_put_quote.at[index, '매수건수'] = int(tickdata['매수호가총건수'])
                df_put_quote.at[index, '매도건수'] = int(tickdata['매도호가총건수'])
                df_put_quote.at[index, '매수잔량'] = int(tickdata['매수호가총수량'])
                df_put_quote.at[index, '매도잔량'] = int(tickdata['매도호가총수량'])

                put_quote = df_put_quote.sum()

                df_put_information_graph.at[plot_time_index, 'ms_quote'] = put_quote['매수잔량']
                df_put_information_graph.at[plot_time_index, 'md_quote'] = put_quote['매도잔량']

                if put_quote['매도잔량'] > 0:
                    put_remainder_ratio = round((put_quote['매수잔량'] / put_quote['매도잔량']), 2)
                else:
                    put_remainder_ratio = 0

                풋잔량비 = put_remainder_ratio
            else:
                pass

            if flag_market_service:

                df_call_information_graph.at[plot_time_index, 'quote_remainder_ratio'] = 콜잔량비
                df_put_information_graph.at[plot_time_index, 'quote_remainder_ratio'] = 풋잔량비

                옵션_잔량비차 = abs(콜잔량비 - 풋잔량비)
                
                if 콜잔량비 < 콜_잔량비_최소:
                    콜_잔량비_최소 = 콜잔량비
                else:
                    pass

                if 콜잔량비 > 옵션_잔량비_최대:
                    콜_잔량비_최대 = 콜잔량비
                else:
                    pass

                if 풋잔량비 < 풋_잔량비_최소:
                    풋_잔량비_최소 = 풋잔량비
                else:
                    pass

                if 풋잔량비 > 풋_잔량비_최대:
                    풋_잔량비_최대 = 풋잔량비
                else:
                    pass

                if 콜_잔량비_최소 < 풋_잔량비_최소:
                    옵션_잔량비_최소 = 콜_잔량비_최소
                else:
                    옵션_잔량비_최소 = 풋_잔량비_최소

                if 콜_잔량비_최대 > 풋_잔량비_최대:
                    옵션_잔량비_최대 = 콜_잔량비_최대
                else:
                    옵션_잔량비_최대 = 풋_잔량비_최대
                
                if 옵션_잔량비_최대 > 10.0:
                    옵션_잔량비_최대 = 10.0
                else:
                    pass                                    
            else:
                if 콜잔량비 > 5.0:
                    df_call_information_graph.at[plot_time_index, 'quote_remainder_ratio'] = 5.0
                else:
                    df_call_information_graph.at[plot_time_index, 'quote_remainder_ratio'] = 콜잔량비

                if 풋잔량비 > 5.0:
                    df_put_information_graph.at[plot_time_index, 'quote_remainder_ratio'] = 5.0
                else:
                    df_put_information_graph.at[plot_time_index, 'quote_remainder_ratio'] = 풋잔량비            

            # 야간선물이 없어짐에 따른 텔레그램 기동 대응
            '''
            if NightTime:

                global telegram_send_worker_on_time, flag_telegram_send_worker, flag_telegram_listen_worker

                dt = datetime.now()

                opt_time = dt.hour * 3600 + dt.minute * 60 + dt.second

                if TELEGRAM_SERVICE and not flag_telegram_send_worker:

                    #self.telegram_send_worker.start()
                    flag_telegram_send_start = True

                    telegram_send_worker_on_time = opt_time 

                    txt = '[{0:02d}:{1:02d}:{2:02d}] telegram send worker({3})가 시작됩니다...\r'.format(dt.hour, dt.minute, dt.second, telegram_send_worker_on_time)
                    self.textBrowser.append(txt)
                    print(txt) 

                    if TARGET_MONTH == 'CM':

                        txt = '[{0:02d}:{1:02d}:{2:02d}] CM 텔레그램이 시작됩니다.\r'.format(dt.hour, dt.minute, dt.second)
                        ToYourTelegram(txt)

                    elif TARGET_MONTH == 'NM':

                        txt = '[{0:02d}:{1:02d}:{2:02d}] NM 텔레그램이 시작됩니다.\r'.format(dt.hour, dt.minute, dt.second)
                        ToYourTelegram(txt)
                    else:
                        pass         

                    flag_telegram_send_worker = True             
                else:
                    pass

                # Telegram Send Worker 시작 후 TELEGRAM_START_TIME분에 Telegram Listen을 위한 Polling Thread 시작 !!!
                if not flag_telegram_listen_worker and opt_time > telegram_send_worker_on_time + 60 * TELEGRAM_START_TIME:

                    if TELEGRAM_SERVICE:

                        #self.telegram_listen_worker.start()
                        flag_telegram_listen_start = True

                        if TARGET_MONTH == 'CM':                        

                            if window.id == 'soojin65':
                                txt = '[{0:02d}:{1:02d}:{2:02d}] ***님 텔레그램 Polling이 시작됩니다.'.format(dt.hour, dt.minute, dt.second)
                                #ToMyTelegram(txt)
                            else:
                                ToYourTelegram("CM 텔레그램 Polling이 시작됩니다.")

                        elif TARGET_MONTH == 'NM':

                            ToYourTelegram("NM 텔레그램 Polling이 시작됩니다.")
                        else:
                            pass

                        self.pushButton_scrshot.setStyleSheet('QPushButton {background-color: lawngreen; color: black; font-family: Consolas; font-size: 10pt; font: Bold; border-style: solid; border-width: 1px; border-color: black; border-radius: 5px} \
                                                                QPushButton:hover {background-color: black; color: white} \
                                                                QPushButton:pressed {background-color: gold}')
                        flag_telegram_listen_worker = True
                    else:
                        pass            
                else:
                    pass
            else:
                pass
            '''

        except Exception as e:

            txt = '[{0:02d}:{1:02d}:{2:02d}] Exception : option_quote_update 에서 {3}타입의 {4}예외가 발생했습니다.\r'.format(dt.hour, dt.minute, dt.second, type(e).__name__, str(e))
            self.textBrowser.append(txt)

    def make_ovc_ohlc_dataframe(self, dataframe):

        df = dataframe.copy()

        df.drop(columns=["system_time", "tr_code", "종목코드", "체결일자_현지", "체결일자_한국", "체결시간_현지", "전일대비", "전일대비기호", "시가", "고가", "저가", "등락율", \
            "건별체결수량", "누적체결수량", "체결구분", "매도누적체결수량", "매수누적체결수량", "장마감일"], inplace=True)
        
        # Converting the index as date
        df['수신시간'] = pd.to_datetime(date.today().strftime('%Y-%m-%d') + ' ' + df['수신시간'], format='%Y-%m-%d %H%M%S')
        df.set_index('수신시간', inplace=True)
        df['체결가격'] = pd.to_numeric(df['체결가격'])

        df_ohlc = df.resample(분봉주기)['체결가격'].ohlc().bfill()
        #QApplication.processEvents()

        return df_ohlc

    def ovc_update(self, tickdata):

        global CME_체결시간, cme_plot_hour, cme_plot_minute, cme_plot_sec, t0167_hour, t0167_minute, t0167_second
        global old_plot_time_index, plot_time_index
        global df_sp500_graph, df_dow_graph, df_nasdaq_graph, df_hsi_graph, df_wti_graph, df_gold_graph, df_euro_graph, df_yen_graph, df_adi_graph
        global df_sp500_ta_graph, df_dow_ta_graph, df_nasdaq_ta_graph, df_hsi_ta_graph, df_wti_ta_graph, df_gold_ta_graph, df_euro_ta_graph, df_yen_ta_graph, df_adi_ta_graph        

        global SP500_전일종가, SP500_피봇, SP500_시가, SP500_저가, SP500_현재가, SP500_전일대비, SP500_등락율, SP500_진폭, SP500_고가        
        global DOW_전일종가, DOW_피봇, DOW_시가, DOW_저가, DOW_현재가, DOW_전일대비, DOW_등락율, DOW_진폭, DOW_고가
        global NASDAQ_전일종가, NASDAQ_피봇, NASDAQ_시가, NASDAQ_저가, NASDAQ_현재가, NASDAQ_전일대비, NASDAQ_등락율, NASDAQ_진폭, NASDAQ_고가
        global WTI_전일종가, WTI_피봇, WTI_시가, WTI_저가, WTI_현재가, WTI_전일대비, WTI_등락율, WTI_진폭, WTI_고가
        global EURO_전일종가, EURO_피봇, EURO_시가, EURO_저가, EURO_현재가, EURO_전일대비, EURO_등락율, EURO_진폭, EURO_고가
        global YEN_전일종가, YEN_피봇, YEN_시가, YEN_저가, YEN_현재가, YEN_전일대비, YEN_등락율, YEN_진폭, YEN_고가
        global ADI_전일종가, ADI_피봇, ADI_시가, ADI_저가, ADI_현재가, ADI_전일대비, ADI_등락율, ADI_진폭, ADI_고가
        global HANGSENG_전일종가, HANGSENG_피봇, HANGSENG_시가, HANGSENG_저가, HANGSENG_현재가, HANGSENG_전일대비, HANGSENG_등락율, HANGSENG_진폭, HANGSENG_고가
        global GOLD_전일종가, GOLD_피봇, GOLD_시가, GOLD_저가, GOLD_현재가, GOLD_전일대비, GOLD_등락율, GOLD_진폭, GOLD_고가
        global SP500_현재가_버퍼, DOW_현재가_버퍼, NASDAQ_현재가_버퍼, HANGSENG_현재가_버퍼, WTI_현재가_버퍼, GOLD_현재가_버퍼, EURO_현재가_버퍼, YEN_현재가_버퍼, ADI_현재가_버퍼
        global SP500_과거가, DOW_과거가, NASDAQ_과거가, WTI_과거가, EURO_과거가, YEN_과거가, ADI_과거가, HANGSENG_과거가, GOLD_과거가
        global SP500_진폭비, DOW_진폭비, NASDAQ_진폭비, HANGSENG_진폭비, WTI_진폭비, GOLD_진폭비, EURO_진폭비, YEN_진폭비, ADI_진폭비

        global DOW_당일종가, SP500_당일종가, NASDAQ_당일종가, WTI_당일종가, EURO_당일종가, YEN_당일종가, ADI_당일종가, HANGSENG_당일종가, GOLD_당일종가
        global DOW_주간_시작가, WTI_주간_시작가, DOW_야간_시작가, WTI_야간_시작가
        
        global flag_sp500_ohlc_open, flag_dow_ohlc_open, flag_nasdaq_ohlc_open, flag_hsi_ohlc_open
        global flag_wti_ohlc_open, flag_gold_ohlc_open, flag_euro_ohlc_open, flag_yen_ohlc_open, flag_adi_ohlc_open

        global SP500_종가대비, DOW_종가대비, NASDAQ_종가대비, HANGSENG_종가대비, WTI_종가대비, GOLD_종가대비, EURO_종가대비, YEN_종가대비, ADI_종가대비
        global SP500_시가대비, DOW_시가대비, NASDAQ_시가대비, HANGSENG_시가대비, WTI_시가대비, GOLD_시가대비, EURO_시가대비, YEN_시가대비, ADI_시가대비
        global SP500_진폭_틱, DOW_진폭_틱, NASDAQ_진폭_틱, HANGSENG_진폭_틱, WTI_진폭_틱, GOLD_진폭_틱, EURO_진폭_틱, YEN_진폭_틱, ADI_진폭_틱
        global SP500_시가_등락율, SP500_시가대비_등락율, SP500_FUT_시가_등락율비
        global sp500_fibonacci_levels, dow_fibonacci_levels, nasdaq_fibonacci_levels, hsi_fibonacci_levels
        global wti_fibonacci_levels, gold_fibonacci_levels, euro_fibonacci_levels, yen_fibonacci_levels, adi_fibonacci_levels
        global cme_close_hour
        global df_sp500_tick, df_dow_tick, df_nasdaq_tick, df_hsi_tick, df_wti_tick, df_gold_tick, df_euro_tick, df_yen_tick, df_adi_tick
        global df_sp500_tick_ohlc, df_dow_tick_ohlc, df_nasdaq_tick_ohlc, df_hsi_tick_ohlc, df_wti_tick_ohlc, df_gold_tick_ohlc, df_euro_tick_ohlc, df_yen_tick_ohlc, df_adi_tick_ohlc
        global flag_ovc_zero_sec

        try:
            dt = datetime.now()

            CME_체결시간 = tickdata['수신시간']

            cme_plot_hour = int(tickdata['수신시간'][0:2])
            cme_plot_minute = int(tickdata['수신시간'][2:4])
            cme_plot_sec = int(tickdata['수신시간'][4:6])

            t0167_hour = cme_plot_hour
            t0167_minute = cme_plot_minute
            t0167_second = cme_plot_sec

            # 과거값 저장
            old_plot_time_index = plot_time_index                       

            # X축 시간좌표 계산, 해외선물 시간과 동기를 맞춤
            if NightTime:

                if SUMMER_TIME:
                    cme_close_hour = 6
                else:
                    cme_close_hour = 7

                if 0 <= cme_plot_hour <= cme_close_hour:
                    cme_plot_hour = cme_plot_hour + 24
                else:
                    pass

                plot_time_index = (cme_plot_hour - NightTime_PreStart_Hour) * 60 + cme_plot_minute + 1                          
            else:                    
                # 해외선물 개장시간은 국내시장의 2시간 전
                plot_time_index = (cme_plot_hour - DayTime_PreStart_Hour) * 60 + cme_plot_minute + 1

            if plot_time_index < 0:                    

                txt = '[{0:02d}:{1:02d}:{2:02d}] ovc_update plot_time_index({3}) 오류발생(수신시간 = {4})! \r'.format(dt.hour, dt.minute, dt.second, plot_time_index, tickdata['수신시간'])
                self.dialog['선물옵션전광판'].textBrowser.append(txt)
                self.textBrowser.append(txt)

                plot_time_index = old_plot_time_index
            else:
                pass

            if cme_plot_sec != 0:
                flag_ovc_zero_sec = False
            
            if cme_plot_sec == 0 and not flag_ovc_zero_sec:

                flag_ovc_zero_sec = True
                
                if flag_ohlc:

                    df_sp500_tick = df_sp500_tick.drop(df_sp500_tick.index[0:df_sp500_tick.shape[0]])
                    df_dow_tick = df_dow_tick.drop(df_dow_tick.index[0:df_dow_tick.shape[0]])
                    df_nasdaq_tick = df_nasdaq_tick.drop(df_nasdaq_tick.index[0:df_nasdaq_tick.shape[0]])
                    df_hsi_tick = df_hsi_tick.drop(df_hsi_tick.index[0:df_hsi_tick.shape[0]])
                    df_wti_tick = df_wti_tick.drop(df_wti_tick.index[0:df_wti_tick.shape[0]])
                    df_gold_tick = df_gold_tick.drop(df_gold_tick.index[0:df_gold_tick.shape[0]])
                    df_euro_tick = df_euro_tick.drop(df_euro_tick.index[0:df_euro_tick.shape[0]])
                    df_yen_tick = df_yen_tick.drop(df_yen_tick.index[0:df_yen_tick.shape[0]])
                    df_adi_tick = df_adi_tick.drop(df_adi_tick.index[0:df_adi_tick.shape[0]])                    

                    df_sp500_ta_graph['Open'].fillna(method='bfill', inplace=True)
                    df_sp500_ta_graph['High'].fillna(method='bfill', inplace=True) 
                    df_sp500_ta_graph['Low'].fillna(method='bfill', inplace=True)
                    df_sp500_ta_graph['Close'].fillna(method='bfill', inplace=True)

                    df_dow_ta_graph['Open'].fillna(method='bfill', inplace=True)
                    df_dow_ta_graph['High'].fillna(method='bfill', inplace=True) 
                    df_dow_ta_graph['Low'].fillna(method='bfill', inplace=True)
                    df_dow_ta_graph['Close'].fillna(method='bfill', inplace=True)

                    df_nasdaq_ta_graph['Open'].fillna(method='bfill', inplace=True)
                    df_nasdaq_ta_graph['High'].fillna(method='bfill', inplace=True) 
                    df_nasdaq_ta_graph['Low'].fillna(method='bfill', inplace=True)
                    df_nasdaq_ta_graph['Close'].fillna(method='bfill', inplace=True)

                    df_hsi_ta_graph['Open'].fillna(method='bfill', inplace=True)
                    df_hsi_ta_graph['High'].fillna(method='bfill', inplace=True) 
                    df_hsi_ta_graph['Low'].fillna(method='bfill', inplace=True)
                    df_hsi_ta_graph['Close'].fillna(method='bfill', inplace=True)

                    df_wti_ta_graph['Open'].fillna(method='bfill', inplace=True)
                    df_wti_ta_graph['High'].fillna(method='bfill', inplace=True) 
                    df_wti_ta_graph['Low'].fillna(method='bfill', inplace=True)
                    df_wti_ta_graph['Close'].fillna(method='bfill', inplace=True)

                    df_gold_ta_graph['Open'].fillna(method='bfill', inplace=True)
                    df_gold_ta_graph['High'].fillna(method='bfill', inplace=True) 
                    df_gold_ta_graph['Low'].fillna(method='bfill', inplace=True)
                    df_gold_ta_graph['Close'].fillna(method='bfill', inplace=True)

                    df_euro_ta_graph['Open'].fillna(method='bfill', inplace=True)
                    df_euro_ta_graph['High'].fillna(method='bfill', inplace=True) 
                    df_euro_ta_graph['Low'].fillna(method='bfill', inplace=True)
                    df_euro_ta_graph['Close'].fillna(method='bfill', inplace=True)

                    df_yen_ta_graph['Open'].fillna(method='bfill', inplace=True)
                    df_yen_ta_graph['High'].fillna(method='bfill', inplace=True) 
                    df_yen_ta_graph['Low'].fillna(method='bfill', inplace=True)
                    df_yen_ta_graph['Close'].fillna(method='bfill', inplace=True)

                    df_adi_ta_graph['Open'].fillna(method='bfill', inplace=True)
                    df_adi_ta_graph['High'].fillna(method='bfill', inplace=True) 
                    df_adi_ta_graph['Low'].fillna(method='bfill', inplace=True)
                    df_adi_ta_graph['Close'].fillna(method='bfill', inplace=True)
                
                if not flag_ohlc:

                    del SP500_현재가_버퍼[:]
                    del DOW_현재가_버퍼[:]
                    del NASDAQ_현재가_버퍼[:]
                    del HANGSENG_현재가_버퍼[:]
                    del WTI_현재가_버퍼[:]
                    del GOLD_현재가_버퍼[:]
                    del EURO_현재가_버퍼[:]
                    del YEN_현재가_버퍼[:]
                    del ADI_현재가_버퍼[:]
            else:
                pass

            if tickdata['종목코드'] == SP500:                
                
                if flag_ohlc:

                    df_sp500_tick = df_sp500_tick.append(tickdata, ignore_index=True)
                    df_sp500_tick_ohlc = self.make_ovc_ohlc_dataframe(df_sp500_tick)

                    df_sp500_ta_graph.at[plot_time_index, 'Open'] = df_sp500_tick_ohlc.iat[df_sp500_tick_ohlc.shape[0] - 1, 0]
                    df_sp500_ta_graph.at[plot_time_index, 'High'] = df_sp500_tick_ohlc.iat[df_sp500_tick_ohlc.shape[0] - 1, 1]
                    df_sp500_ta_graph.at[plot_time_index, 'Low'] = df_sp500_tick_ohlc.iat[df_sp500_tick_ohlc.shape[0] - 1, 2]
                    df_sp500_ta_graph.at[plot_time_index, 'Close'] = df_sp500_tick_ohlc.iat[df_sp500_tick_ohlc.shape[0] - 1, 3]
                    
                    print('\r')
                    print('*************************************************************************')
                    print(df_sp500_tick_ohlc)
                    print('OHLC high = {0}\r'.format(df_sp500_ta_graph.at[plot_time_index, 'High']))
                    print('OHLC low = {0}\r'.format(df_sp500_ta_graph.at[plot_time_index, 'Low']))
                    print('*************************************************************************')
                    print('\r')
                    
                # 그래프 가격갱신
                SP500_현재가 = float(tickdata['체결가격'])
                df_sp500_graph.at[plot_time_index, 'Price'] = SP500_현재가
                df_sp500_ta_graph.at[plot_time_index, 'Price'] = SP500_현재가
                
                SP500_전일대비 = float(tickdata['전일대비'])

                if tickdata['전일대비기호'] == '5':
                    SP500_전일종가 = SP500_현재가 + SP500_전일대비
                    SP500_종가대비 = -SP500_전일대비
                else:
                    SP500_전일종가 = SP500_현재가 - SP500_전일대비
                    SP500_종가대비 = SP500_전일대비

                SP500_등락율 = float(tickdata['등락율'])
                SP500_시가 = float(tickdata['시가'])

                SP500_시가대비_등락율 = ((SP500_현재가 - SP500_시가) / SP500_시가) * 100
                
                SP500_저가 =  float(tickdata['저가'])
                SP500_고가 =  float(tickdata['고가'])
                SP500_진폭 = SP500_고가 - SP500_저가
                SP500_진폭_틱 = int(SP500_진폭 / sp500_tick_value)                
                
                SP500_시가대비 = int((SP500_현재가 - SP500_시가) / sp500_tick_value)
                SP500_시가_등락율 = ((SP500_시가 - SP500_전일종가) / SP500_전일종가) * 100                

                #df_sp500_graph.at[0, 'Price'] = SP500_전일종가

                if df_sp500_graph.at[1, 'Price'] == 0:
                    df_sp500_graph.at[1, 'Price'] = SP500_시가

                SP500_진폭비 = SP500_진폭 / SP500_시가                                    
                
                # 그래프 등락율 가격갱신
                df_sp500_graph.at[plot_time_index, 'Drate'] = SP500_시가대비_등락율

                #SP500_체결가격 = locale.format('%.2f', SP500_현재가, 1)

                # 1T OHLC 생성
                df_sp500_graph.at[plot_time_index, 'Time'] = CME_체결시간
                df_sp500_ta_graph.at[plot_time_index, 'Time'] = CME_체결시간

                if not flag_ohlc:

                    df_sp500_ta_graph['Open'].fillna(method='bfill', inplace=True)
                    df_sp500_ta_graph['High'].fillna(method='bfill', inplace=True) 
                    df_sp500_ta_graph['Low'].fillna(method='bfill', inplace=True)
                    df_sp500_ta_graph['Close'].fillna(method='bfill', inplace=True)

                    df_sp500_ta_graph.at[plot_time_index, 'Close'] = SP500_현재가

                    if not SP500_현재가_버퍼:
                        SP500_현재가_버퍼.append(SP500_현재가)
                        df_sp500_ta_graph.at[plot_time_index, 'Open'] = SP500_현재가                        
                    else:
                        SP500_현재가_버퍼.append(SP500_현재가)
                        df_sp500_ta_graph.at[plot_time_index, 'High'] = max(SP500_현재가_버퍼)
                        df_sp500_ta_graph.at[plot_time_index, 'Low'] = min(SP500_현재가_버퍼)
                    
                if SP500_피봇 == 0:

                    if SP500_전저 > 0 and SP500_전고 > 0:
                        SP500_피봇 = calc_pivot(SP500_전저, SP500_전고, SP500_전일종가, SP500_시가, 2)
                    else:
                        pass
                else:
                    pass

                # ICHIMOKU
                df_sp500_ta_graph['OE_CONV'], df_sp500_ta_graph['OE_BASE'], df_sp500_ta_graph['SPAN_A'], df_sp500_ta_graph['SPAN_B'], df_sp500_ta_graph['LAGGING_SPAN'] = self.Calc_ICHIMOKU(df_sp500_ta_graph, CONVERSION_LINE_PERIOD, BASE_LINE_PERIOD, SPAN_B_PERIOD)
                
                if df_sp500_ta_graph.at[plot_time_index, 'OE_CONV'] < df_sp500_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                    df_sp500_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] < df_sp500_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:

                    self.tableWidget_cme.item(0, 0).setBackground(QBrush(검정색))
                    self.tableWidget_cme.item(0, 0).setForeground(QBrush(cyan))

                elif df_sp500_ta_graph.at[plot_time_index, 'OE_CONV'] > df_sp500_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                    df_sp500_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] > df_sp500_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:

                    self.tableWidget_cme.item(0, 0).setBackground(QBrush(검정색))
                    self.tableWidget_cme.item(0, 0).setForeground(QBrush(magenta))
                else:
                    self.tableWidget_cme.item(0, 0).setBackground(QBrush(검정색))
                    self.tableWidget_cme.item(0, 0).setForeground(QBrush(노란색))

                if "{0:.2f}".format(SP500_전저) != self.tableWidget_cme.item(0, 1).text():
                    item = QTableWidgetItem("{0:.2f}".format(SP500_전저))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_cme.setItem(0, 1, item)
                else:
                    pass

                if "{0:.2f}".format(SP500_전고) != self.tableWidget_cme.item(0, 2).text():
                    item = QTableWidgetItem("{0:.2f}".format(SP500_전고))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_cme.setItem(0, 2, item)
                else:
                    pass

                if "{0:.2f}".format(SP500_전일종가) != self.tableWidget_cme.item(0, 3).text():
                    item = QTableWidgetItem("{0:.2f}".format(SP500_전일종가))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_cme.setItem(0, 3, item)
                else:
                    pass

                if "{0:.2f}".format(SP500_피봇) != self.tableWidget_cme.item(0, 4).text():
                    item = QTableWidgetItem("{0:.2f}".format(SP500_피봇))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_cme.setItem(0, 4, item)
                else:
                    pass

                if "{0:.2f}".format(SP500_시가) != self.tableWidget_cme.item(0, 5).text():
                    item = QTableWidgetItem("{0:.2f}".format(SP500_시가))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_cme.setItem(0, 5, item)

                    if SP500_현재가 >= SP500_시가:
                        sp500_fibonacci_levels = self.Calc_Fibonacci_Levels(SP500_저가, SP500_고가, True)
                    else:
                        sp500_fibonacci_levels = self.Calc_Fibonacci_Levels(SP500_저가, SP500_고가, False)
                else:
                    pass

                if "{0:.2f}".format(SP500_저가) != self.tableWidget_cme.item(0, 6).text():
                    item = QTableWidgetItem("{0:.2f}".format(SP500_저가))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(청색))
                    item.setForeground(QBrush(흰색))
                    self.tableWidget_cme.setItem(0, 6, item)

                    item = QTableWidgetItem('{0}'.format(SP500_진폭_틱))
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_cme.setItem(0, 10, item)

                    sp500_fibonacci_levels = self.Calc_Fibonacci_Levels(SP500_저가, SP500_고가, False)
                    self.ovc_node_coloring(0, sp500_tick_value, SP500_전저, SP500_전고, SP500_전일종가, SP500_피봇, SP500_시가, SP500_저가, SP500_고가)
                else:
                    pass

                if "{0:.2f}".format(SP500_고가) != self.tableWidget_cme.item(0, 8).text():
                    item = QTableWidgetItem("{0:.2f}".format(SP500_고가))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(적색))
                    item.setForeground(QBrush(흰색))
                    self.tableWidget_cme.setItem(0, 8, item)

                    item = QTableWidgetItem('{0}'.format(SP500_진폭_틱))
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_cme.setItem(0, 10, item)

                    sp500_fibonacci_levels = self.Calc_Fibonacci_Levels(SP500_저가, SP500_고가, True)
                    self.ovc_node_coloring(0, sp500_tick_value, SP500_전저, SP500_전고, SP500_전일종가, SP500_피봇, SP500_시가, SP500_저가, SP500_고가)
                else:
                    pass

                SP500_과거가 = float(self.tableWidget_cme.item(0, 7).text().split('\n')[0])

                if SP500_현재가 != SP500_과거가:

                    if SP500_현재가 > SP500_과거가:

                        item = QTableWidgetItem(tickdata['체결가격'] + '\n' + '▲')
                        item.setBackground(QBrush(pink))

                        if SP500_시가 < SP500_현재가:
                            item.setForeground(QBrush(적색))
                        elif SP500_시가 > SP500_현재가:
                            item.setForeground(QBrush(청색))
                        else:
                            item.setForeground(QBrush(검정색))

                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_cme.setItem(0, 7, item)
                        
                    elif SP500_현재가 < SP500_과거가:

                        item = QTableWidgetItem(tickdata['체결가격'] + '\n' + '▼')
                        item.setBackground(QBrush(lightskyblue))

                        if SP500_시가 < SP500_현재가:
                            item.setForeground(QBrush(적색))
                        elif SP500_시가 > SP500_현재가:
                            item.setForeground(QBrush(청색))
                        else:
                            item.setForeground(QBrush(검정색))

                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_cme.setItem(0, 7, item)                        
                    else:
                        pass

                    item = QTableWidgetItem('{0}'.format(SP500_시가대비))
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_cme.setItem(0, 9, item)

                    self.tableWidget_cme.resizeRowToContents(0)
                else:
                    pass

            elif tickdata['종목코드'] == DOW:
                
                if flag_ohlc:

                    df_dow_tick = df_dow_tick.append(tickdata, ignore_index=True)
                    df_dow_tick_ohlc = self.make_ovc_ohlc_dataframe(df_dow_tick)

                    df_dow_ta_graph.at[plot_time_index, 'Open'] = df_dow_tick_ohlc.iat[df_dow_tick_ohlc.shape[0] - 1, 0]
                    df_dow_ta_graph.at[plot_time_index, 'High'] = df_dow_tick_ohlc.iat[df_dow_tick_ohlc.shape[0] - 1, 1]
                    df_dow_ta_graph.at[plot_time_index, 'Low'] = df_dow_tick_ohlc.iat[df_dow_tick_ohlc.shape[0] - 1, 2]
                    df_dow_ta_graph.at[plot_time_index, 'Close'] = df_dow_tick_ohlc.iat[df_dow_tick_ohlc.shape[0] - 1, 3]
                
                # 그래프 가격갱신
                DOW_현재가 = int(float(tickdata['체결가격']))
                df_dow_graph.at[plot_time_index, 'Price'] = DOW_현재가
                df_dow_ta_graph.at[plot_time_index, 'Price'] = DOW_현재가
                
                DOW_전일대비 = float(tickdata['전일대비'])

                if tickdata['전일대비기호'] == '5':
                    DOW_전일종가 = int(DOW_현재가 + DOW_전일대비)
                    DOW_종가대비 = -DOW_전일대비
                else:
                    DOW_전일종가 = int(DOW_현재가 - DOW_전일대비)
                    DOW_종가대비 = DOW_전일대비

                DOW_등락율 = float(tickdata['등락율'])                

                DOW_시가 = int(float(tickdata['시가']))
                DOW_저가 =  int(float(tickdata['저가']))
                DOW_고가 =  int(float(tickdata['고가']))
                DOW_진폭 = DOW_고가 - DOW_저가
                DOW_진폭_틱 = DOW_진폭
                
                DOW_시가대비 = DOW_현재가 - DOW_시가

                #df_dow_graph.at[0, 'Price'] = DOW_전일종가

                if df_dow_graph.at[1, 'Price'] == 0:
                    df_dow_graph.at[1, 'Price'] = DOW_시가
                
                DOW_진폭비 = DOW_진폭 / DOW_시가
                
                # 그래프 등락율 가격갱신
                df_dow_graph.at[plot_time_index, 'Drate'] = DOW_등락율

                # 1T OHLC 생성
                df_dow_graph.at[plot_time_index, 'Time'] = CME_체결시간
                df_dow_ta_graph.at[plot_time_index, 'Time'] = CME_체결시간
                
                if not flag_ohlc:

                    df_dow_ta_graph['Open'].fillna(method='bfill', inplace=True)
                    df_dow_ta_graph['High'].fillna(method='bfill', inplace=True) 
                    df_dow_ta_graph['Low'].fillna(method='bfill', inplace=True)
                    df_dow_ta_graph['Close'].fillna(method='bfill', inplace=True)

                    df_dow_ta_graph.at[plot_time_index, 'Close'] = DOW_현재가

                    if not DOW_현재가_버퍼:
                        DOW_현재가_버퍼.append(DOW_현재가)
                        df_dow_ta_graph.at[plot_time_index, 'Open'] = DOW_현재가 
                    else:
                        DOW_현재가_버퍼.append(DOW_현재가)
                        df_dow_ta_graph.at[plot_time_index, 'High'] = max(DOW_현재가_버퍼)
                        df_dow_ta_graph.at[plot_time_index, 'Low'] = min(DOW_현재가_버퍼)               
                    
                if DOW_피봇 == 0:

                    if DOW_전저 > 0 and DOW_전고 > 0:
                        DOW_피봇 = int(calc_pivot(DOW_전저, DOW_전고, DOW_전일종가, DOW_시가, 0))
                    else:
                        pass
                else:
                    pass

                # ICHIMOKU
                #df_dow_ta_graph['OE_CONV'], df_dow_ta_graph['OE_BASE'], df_dow_ta_graph['SPAN_A'], df_dow_ta_graph['SPAN_B'], lagging_span = self.Calc_ICHIMOKU(df_dow_ta_graph, CONVERSION_LINE_PERIOD, BASE_LINE_PERIOD, SPAN_B_PERIOD)
                
                if df_dow_ta_graph.at[plot_time_index, 'OE_CONV'] < df_dow_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                    df_dow_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] < df_dow_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:

                    self.tableWidget_cme.item(1, 0).setBackground(QBrush(검정색))
                    self.tableWidget_cme.item(1, 0).setForeground(QBrush(cyan))

                elif df_dow_ta_graph.at[plot_time_index, 'OE_CONV'] > df_dow_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                    df_dow_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] > df_dow_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:

                    self.tableWidget_cme.item(1, 0).setBackground(QBrush(검정색))
                    self.tableWidget_cme.item(1, 0).setForeground(QBrush(magenta))
                else:
                    self.tableWidget_cme.item(1, 0).setBackground(QBrush(검정색))
                    self.tableWidget_cme.item(1, 0).setForeground(QBrush(노란색))

                if "{0}".format(DOW_전저) != self.tableWidget_cme.item(1, 1).text():
                    item = QTableWidgetItem("{0}".format(DOW_전저))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_cme.setItem(1, 1, item)
                else:
                    pass

                if "{0}".format(DOW_전고) != self.tableWidget_cme.item(1, 2).text():
                    item = QTableWidgetItem("{0}".format(DOW_전고))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_cme.setItem(1, 2, item)
                else:
                    pass

                if "{0}".format(DOW_전일종가) != self.tableWidget_cme.item(1, 3).text():
                    item = QTableWidgetItem("{0}".format(DOW_전일종가))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_cme.setItem(1, 3, item)
                else:
                    pass

                if "{0}".format(DOW_피봇) != self.tableWidget_cme.item(1, 4).text():
                    item = QTableWidgetItem("{0}".format(DOW_피봇))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_cme.setItem(1, 4, item)
                else:
                    pass

                if "{0}".format(DOW_시가) != self.tableWidget_cme.item(1, 5).text():
                    item = QTableWidgetItem("{0}".format(DOW_시가))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_cme.setItem(1, 5, item)

                    if DOW_현재가 >= DOW_시가:
                        dow_fibonacci_levels = self.Calc_Fibonacci_Levels(DOW_저가, DOW_고가, True)
                    else:
                        dow_fibonacci_levels = self.Calc_Fibonacci_Levels(DOW_저가, DOW_고가, False)
                else:
                    pass

                if "{0}".format(DOW_저가) != self.tableWidget_cme.item(1, 6).text():
                    item = QTableWidgetItem("{0}".format(DOW_저가))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(청색))
                    item.setForeground(QBrush(흰색))
                    self.tableWidget_cme.setItem(1, 6, item)

                    item = QTableWidgetItem('{0}'.format(DOW_진폭_틱))
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_cme.setItem(1, 10, item)

                    dow_fibonacci_levels = self.Calc_Fibonacci_Levels(DOW_저가, DOW_고가, False)
                    self.ovc_node_coloring(1, dow_tick_value, DOW_전저, DOW_전고, DOW_전일종가, DOW_피봇, DOW_시가, DOW_저가, DOW_고가)
                else:
                    pass

                if "{0}".format(DOW_고가) != self.tableWidget_cme.item(1, 8).text():
                    item = QTableWidgetItem("{0}".format(DOW_고가))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(적색))
                    item.setForeground(QBrush(흰색))
                    self.tableWidget_cme.setItem(1, 8, item)

                    item = QTableWidgetItem('{0}'.format(DOW_진폭_틱))
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_cme.setItem(1, 10, item)

                    dow_fibonacci_levels = self.Calc_Fibonacci_Levels(DOW_저가, DOW_고가, True)
                    self.ovc_node_coloring(1, dow_tick_value, DOW_전저, DOW_전고, DOW_전일종가, DOW_피봇, DOW_시가, DOW_저가, DOW_고가)
                else:
                    pass

                DOW_과거가 = int(self.tableWidget_cme.item(1, 7).text().split('\n')[0])                             

                if DOW_현재가 != DOW_과거가:                       

                    if DOW_현재가 > DOW_과거가:

                        item = QTableWidgetItem(str(DOW_현재가) + '\n' + '▲')
                        item.setBackground(QBrush(pink))

                        if DOW_시가 < DOW_현재가:
                            item.setForeground(QBrush(적색))
                        elif DOW_시가 > DOW_현재가:
                            item.setForeground(QBrush(청색))
                        else:
                            item.setForeground(QBrush(검정색))

                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_cme.setItem(1, 7, item)
                        
                    elif DOW_현재가 < DOW_과거가:

                        item = QTableWidgetItem(str(DOW_현재가) + '\n' + '▼')
                        item.setBackground(QBrush(lightskyblue))

                        if DOW_시가 < DOW_현재가:
                            item.setForeground(QBrush(적색))
                        elif DOW_시가 > DOW_현재가:
                            item.setForeground(QBrush(청색))
                        else:
                            item.setForeground(QBrush(검정색))

                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_cme.setItem(1, 7, item)                        
                    else:
                        pass

                    item = QTableWidgetItem('{0}'.format(DOW_시가대비))
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_cme.setItem(1, 9, item)

                    self.tableWidget_cme.resizeRowToContents(1) 
                else:
                    pass

            elif tickdata['종목코드'] == NASDAQ:
                
                if flag_ohlc:

                    df_nasdaq_tick = df_nasdaq_tick.append(tickdata, ignore_index=True)
                    df_nasdaq_tick_ohlc = self.make_ovc_ohlc_dataframe(df_nasdaq_tick)

                    df_nasdaq_ta_graph.at[plot_time_index, 'Open'] = df_nasdaq_tick_ohlc.iat[df_nasdaq_tick_ohlc.shape[0] - 1, 0]
                    df_nasdaq_ta_graph.at[plot_time_index, 'High'] = df_nasdaq_tick_ohlc.iat[df_nasdaq_tick_ohlc.shape[0] - 1, 1]
                    df_nasdaq_ta_graph.at[plot_time_index, 'Low'] = df_nasdaq_tick_ohlc.iat[df_nasdaq_tick_ohlc.shape[0] - 1, 2]
                    df_nasdaq_ta_graph.at[plot_time_index, 'Close'] = df_nasdaq_tick_ohlc.iat[df_nasdaq_tick_ohlc.shape[0] - 1, 3]
                
                # 그래프 가격갱신
                NASDAQ_현재가 = float(tickdata['체결가격'])
                df_nasdaq_graph.at[plot_time_index, 'Price'] = NASDAQ_현재가
                df_nasdaq_ta_graph.at[plot_time_index, 'Price'] = NASDAQ_현재가
                
                NASDAQ_전일대비 = float(tickdata['전일대비'])

                if tickdata['전일대비기호'] == '5':
                    NASDAQ_전일종가 = NASDAQ_현재가 + NASDAQ_전일대비
                    NASDAQ_종가대비 = -NASDAQ_전일대비
                else:
                    NASDAQ_전일종가 = NASDAQ_현재가 - NASDAQ_전일대비
                    NASDAQ_종가대비 = NASDAQ_전일대비

                NASDAQ_등락율 = float(tickdata['등락율'])                 

                NASDAQ_시가 = float(tickdata['시가'])
                NASDAQ_저가 =  float(tickdata['저가'])
                NASDAQ_고가 =  float(tickdata['고가'])                    
                NASDAQ_진폭 = NASDAQ_고가 - NASDAQ_저가
                NASDAQ_진폭_틱 = int(NASDAQ_진폭 / nasdaq_tick_value)
                
                NASDAQ_시가대비 = int((NASDAQ_현재가 - NASDAQ_시가) / nasdaq_tick_value)                

                #df_nasdaq_graph.at[0, 'Price'] = NASDAQ_전일종가

                if df_nasdaq_graph.at[1, 'Price'] == 0:
                    df_nasdaq_graph.at[1, 'Price'] = NASDAQ_시가

                NASDAQ_진폭비 = NASDAQ_진폭 / NASDAQ_시가

                # 1T OHLC 생성
                df_nasdaq_graph.at[plot_time_index, 'Time'] = CME_체결시간
                df_nasdaq_ta_graph.at[plot_time_index, 'Time'] = CME_체결시간

                #NASDAQ_체결가격 = locale.format('%.2f', NASDAQ_현재가, 1)
                
                if not flag_ohlc:

                    df_nasdaq_ta_graph['Open'].fillna(method='bfill', inplace=True)
                    df_nasdaq_ta_graph['High'].fillna(method='bfill', inplace=True) 
                    df_nasdaq_ta_graph['Low'].fillna(method='bfill', inplace=True)
                    df_nasdaq_ta_graph['Close'].fillna(method='bfill', inplace=True)

                    df_nasdaq_ta_graph.at[plot_time_index, 'Close'] = NASDAQ_현재가

                    if not NASDAQ_현재가_버퍼:
                        NASDAQ_현재가_버퍼.append(NASDAQ_현재가)
                        df_nasdaq_ta_graph.at[plot_time_index, 'Open'] = NASDAQ_현재가 
                    else:
                        NASDAQ_현재가_버퍼.append(NASDAQ_현재가)
                        df_nasdaq_ta_graph.at[plot_time_index, 'High'] = max(NASDAQ_현재가_버퍼)
                        df_nasdaq_ta_graph.at[plot_time_index, 'Low'] = min(NASDAQ_현재가_버퍼)
                    
                if NASDAQ_피봇 == 0:

                    if NASDAQ_전저 > 0 and NASDAQ_전고 > 0:
                        NASDAQ_피봇 = calc_pivot(NASDAQ_전저, NASDAQ_전고, NASDAQ_전일종가, NASDAQ_시가, 2)
                    else:
                        pass
                else:
                    pass

                # ICHIMOKU
                #df_nasdaq_ta_graph['OE_CONV'], df_nasdaq_ta_graph['OE_BASE'], df_nasdaq_ta_graph['SPAN_A'], df_nasdaq_ta_graph['SPAN_B'], lagging_span = self.Calc_ICHIMOKU(df_nasdaq_ta_graph, CONVERSION_LINE_PERIOD, BASE_LINE_PERIOD, SPAN_B_PERIOD)
                                
                if df_nasdaq_ta_graph.at[plot_time_index, 'OE_CONV'] < df_nasdaq_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                    df_nasdaq_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] < df_nasdaq_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:

                    self.tableWidget_cme.item(2, 0).setBackground(QBrush(검정색))
                    self.tableWidget_cme.item(2, 0).setForeground(QBrush(cyan))

                elif df_nasdaq_ta_graph.at[plot_time_index, 'OE_CONV'] > df_nasdaq_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                    df_nasdaq_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] > df_nasdaq_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:

                    self.tableWidget_cme.item(2, 0).setBackground(QBrush(검정색))
                    self.tableWidget_cme.item(2, 0).setForeground(QBrush(magenta))
                else:
                    self.tableWidget_cme.item(2, 0).setBackground(QBrush(검정색))
                    self.tableWidget_cme.item(2, 0).setForeground(QBrush(노란색))

                if "{0:.2f}".format(NASDAQ_전저) != self.tableWidget_cme.item(2, 1).text():
                    item = QTableWidgetItem("{0:.2f}".format(NASDAQ_전저))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_cme.setItem(2, 1, item)
                else:
                    pass

                if "{0:.2f}".format(NASDAQ_전고) != self.tableWidget_cme.item(2, 2).text():
                    item = QTableWidgetItem("{0:.2f}".format(NASDAQ_전고))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_cme.setItem(2, 2, item)
                else:
                    pass

                if "{0:.2f}".format(NASDAQ_전일종가) != self.tableWidget_cme.item(2, 3).text():
                    item = QTableWidgetItem("{0:.2f}".format(NASDAQ_전일종가))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_cme.setItem(2, 3, item)
                else:
                    pass

                if "{0:.2f}".format(NASDAQ_피봇) != self.tableWidget_cme.item(2, 4).text():
                    item = QTableWidgetItem("{0:.2f}".format(NASDAQ_피봇))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_cme.setItem(2, 4, item)
                else:
                    pass

                if "{0:.2f}".format(NASDAQ_시가) != self.tableWidget_cme.item(2, 5).text():
                    item = QTableWidgetItem("{0:.2f}".format(NASDAQ_시가))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_cme.setItem(2, 5, item)

                    if NASDAQ_현재가 >= NASDAQ_시가:
                        nasdaq_fibonacci_levels = self.Calc_Fibonacci_Levels(NASDAQ_저가, NASDAQ_고가, True)
                    else:
                        nasdaq_fibonacci_levels = self.Calc_Fibonacci_Levels(NASDAQ_저가, NASDAQ_고가, False)
                else:
                    pass

                if "{0:.2f}".format(NASDAQ_저가) != self.tableWidget_cme.item(2, 6).text():
                    item = QTableWidgetItem("{0:.2f}".format(NASDAQ_저가))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(청색))
                    item.setForeground(QBrush(흰색))
                    self.tableWidget_cme.setItem(2, 6, item)

                    item = QTableWidgetItem('{0}'.format(NASDAQ_진폭_틱))
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_cme.setItem(2, 10, item)

                    nasdaq_fibonacci_levels = self.Calc_Fibonacci_Levels(NASDAQ_저가, NASDAQ_고가, False)
                    self.ovc_node_coloring(2, nasdaq_tick_value, NASDAQ_전저, NASDAQ_전고, NASDAQ_전일종가, NASDAQ_피봇, NASDAQ_시가, NASDAQ_저가, NASDAQ_고가)
                else:
                    pass

                if "{0:.2f}".format(NASDAQ_고가) != self.tableWidget_cme.item(2, 8).text():
                    item = QTableWidgetItem("{0:.2f}".format(NASDAQ_고가))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(적색))
                    item.setForeground(QBrush(흰색))
                    self.tableWidget_cme.setItem(2, 8, item)

                    item = QTableWidgetItem('{0}'.format(NASDAQ_진폭_틱))
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_cme.setItem(2, 10, item)

                    nasdaq_fibonacci_levels = self.Calc_Fibonacci_Levels(NASDAQ_저가, NASDAQ_고가, True)
                    self.ovc_node_coloring(2, nasdaq_tick_value, NASDAQ_전저, NASDAQ_전고, NASDAQ_전일종가, NASDAQ_피봇, NASDAQ_시가, NASDAQ_저가, NASDAQ_고가)
                else:
                    pass

                NASDAQ_과거가 = float(self.tableWidget_cme.item(2, 7).text().split('\n')[0])               

                if NASDAQ_현재가 != NASDAQ_과거가:

                    if NASDAQ_현재가 > NASDAQ_과거가:

                        item = QTableWidgetItem(tickdata['체결가격'] + '\n' + '▲')
                        item.setBackground(QBrush(pink))

                        if NASDAQ_시가 < NASDAQ_현재가:
                            item.setForeground(QBrush(적색))
                        elif NASDAQ_시가 > NASDAQ_현재가:
                            item.setForeground(QBrush(청색))
                        else:
                            item.setForeground(QBrush(검정색))

                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_cme.setItem(2, 7, item)
                        
                    elif NASDAQ_현재가 < NASDAQ_과거가:

                        item = QTableWidgetItem(tickdata['체결가격'] + '\n' + '▼')
                        item.setBackground(QBrush(lightskyblue))

                        if NASDAQ_시가 < NASDAQ_현재가:
                            item.setForeground(QBrush(적색))
                        elif NASDAQ_시가 > NASDAQ_현재가:
                            item.setForeground(QBrush(청색))
                        else:
                            item.setForeground(QBrush(검정색))

                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_cme.setItem(2, 7, item)                        
                    else:
                        pass

                    item = QTableWidgetItem('{0}'.format(NASDAQ_시가대비))
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_cme.setItem(2, 9, item)
                    
                    self.tableWidget_cme.resizeRowToContents(2)
                else:
                    pass
            
            elif tickdata['종목코드'] == HANGSENG:
                
                if flag_ohlc:

                    df_hsi_tick = df_hsi_tick.append(tickdata, ignore_index=True)
                    df_hsi_tick_ohlc = self.make_ovc_ohlc_dataframe(df_hsi_tick)

                    df_hsi_ta_graph.at[plot_time_index, 'Open'] = df_hsi_tick_ohlc.iat[df_hsi_tick_ohlc.shape[0] - 1, 0]
                    df_hsi_ta_graph.at[plot_time_index, 'High'] = df_hsi_tick_ohlc.iat[df_hsi_tick_ohlc.shape[0] - 1, 1]
                    df_hsi_ta_graph.at[plot_time_index, 'Low'] = df_hsi_tick_ohlc.iat[df_hsi_tick_ohlc.shape[0] - 1, 2]
                    df_hsi_ta_graph.at[plot_time_index, 'Close'] = df_hsi_tick_ohlc.iat[df_hsi_tick_ohlc.shape[0] - 1, 3]
                
                # 그래프 가격갱신
                HANGSENG_현재가 = int(float(tickdata['체결가격']))
                df_hsi_graph.at[plot_time_index, 'Price'] = HANGSENG_현재가
                df_hsi_ta_graph.at[plot_time_index, 'Price'] = HANGSENG_현재가
                
                HANGSENG_전일대비 = float(tickdata['전일대비'])

                if tickdata['전일대비기호'] == '5':
                    HANGSENG_전일종가 = int(HANGSENG_현재가 + HANGSENG_전일대비)
                    HANGSENG_종가대비 = -HANGSENG_전일대비
                else:
                    HANGSENG_전일종가 = int(HANGSENG_현재가 - HANGSENG_전일대비)
                    HANGSENG_종가대비 = -HANGSENG_전일대비

                HANGSENG_등락율 = float(tickdata['등락율'])

                HANGSENG_시가 = int(float(tickdata['시가']))
                HANGSENG_저가 =  int(float(tickdata['저가']))
                HANGSENG_고가 =  int(float(tickdata['고가']))                 
                HANGSENG_진폭 = HANGSENG_고가 - HANGSENG_저가
                HANGSENG_진폭_틱 = HANGSENG_진폭
                
                HANGSENG_시가대비 = HANGSENG_현재가 - HANGSENG_시가                

                #df_hsi_graph.at[0, 'Price'] = HANGSENG_전일종가

                if df_hsi_graph.at[1, 'Price'] == 0:
                    df_hsi_graph.at[1, 'Price'] = HANGSENG_시가

                HANGSENG_진폭비 = HANGSENG_진폭 / HANGSENG_시가

                # 1T OHLC 생성
                df_hsi_graph.at[plot_time_index, 'Time'] = CME_체결시간
                df_hsi_ta_graph.at[plot_time_index, 'Time'] = CME_체결시간
                
                if not flag_ohlc:

                    df_hsi_ta_graph['Open'].fillna(method='bfill', inplace=True)
                    df_hsi_ta_graph['High'].fillna(method='bfill', inplace=True) 
                    df_hsi_ta_graph['Low'].fillna(method='bfill', inplace=True)
                    df_hsi_ta_graph['Close'].fillna(method='bfill', inplace=True)

                    df_hsi_ta_graph.at[plot_time_index, 'Close'] = HANGSENG_현재가

                    if not HANGSENG_현재가_버퍼:
                        HANGSENG_현재가_버퍼.append(HANGSENG_현재가)
                        df_hsi_ta_graph.at[plot_time_index, 'Open'] = HANGSENG_현재가 
                    else:
                        HANGSENG_현재가_버퍼.append(HANGSENG_현재가)
                        df_hsi_ta_graph.at[plot_time_index, 'High'] = max(HANGSENG_현재가_버퍼)
                        df_hsi_ta_graph.at[plot_time_index, 'Low'] = min(HANGSENG_현재가_버퍼)
                    
                if HANGSENG_피봇 == 0:

                    if HANGSENG_전저 > 0 and HANGSENG_전고 > 0:
                        HANGSENG_피봇 = int(calc_pivot(HANGSENG_전저, HANGSENG_전고, HANGSENG_전일종가, HANGSENG_시가, 0))
                    else:
                        pass
                else:
                    pass

                # ICHIMOKU
                #df_hsi_ta_graph['OE_CONV'], df_hsi_ta_graph['OE_BASE'], df_hsi_ta_graph['SPAN_A'], df_hsi_ta_graph['SPAN_B'], lagging_span = self.Calc_ICHIMOKU(df_hsi_ta_graph, CONVERSION_LINE_PERIOD, BASE_LINE_PERIOD, SPAN_B_PERIOD)
                
                if df_hsi_ta_graph.at[plot_time_index, 'OE_CONV'] < df_hsi_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                    df_hsi_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] < df_hsi_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:

                    self.tableWidget_cme.item(3, 0).setBackground(QBrush(검정색))
                    self.tableWidget_cme.item(3, 0).setForeground(QBrush(cyan))

                elif df_hsi_ta_graph.at[plot_time_index, 'OE_CONV'] > df_hsi_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                    df_hsi_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] > df_hsi_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:

                    self.tableWidget_cme.item(3, 0).setBackground(QBrush(검정색))
                    self.tableWidget_cme.item(3, 0).setForeground(QBrush(magenta))
                else:
                    self.tableWidget_cme.item(3, 0).setBackground(QBrush(검정색))
                    self.tableWidget_cme.item(3, 0).setForeground(QBrush(노란색))

                if "{0}".format(HANGSENG_전저) != self.tableWidget_cme.item(3, 1).text():
                    item = QTableWidgetItem("{0}".format(HANGSENG_전저))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_cme.setItem(3, 1, item)
                else:
                    pass

                if "{0}".format(HANGSENG_전고) != self.tableWidget_cme.item(3, 2).text():
                    item = QTableWidgetItem("{0}".format(HANGSENG_전고))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_cme.setItem(3, 2, item)
                else:
                    pass

                if "{0}".format(HANGSENG_전일종가) != self.tableWidget_cme.item(3, 3).text():
                    item = QTableWidgetItem("{0}".format(HANGSENG_전일종가))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_cme.setItem(3, 3, item)
                else:
                    pass

                if "{0}".format(HANGSENG_피봇) != self.tableWidget_cme.item(3, 4).text():
                    item = QTableWidgetItem("{0}".format(HANGSENG_피봇))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_cme.setItem(3, 4, item)
                else:
                    pass

                if "{0}".format(HANGSENG_시가) != self.tableWidget_cme.item(3, 5).text():
                    item = QTableWidgetItem("{0}".format(HANGSENG_시가))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_cme.setItem(3, 5, item)

                    if HANGSENG_현재가 >= HANGSENG_시가:
                        hsi_fibonacci_levels = self.Calc_Fibonacci_Levels(HANGSENG_저가, HANGSENG_고가, True)
                    else:
                        hsi_fibonacci_levels = self.Calc_Fibonacci_Levels(HANGSENG_저가, HANGSENG_고가, False)
                else:
                    pass

                if "{0}".format(HANGSENG_저가) != self.tableWidget_cme.item(3, 6).text():
                    item = QTableWidgetItem("{0}".format(HANGSENG_저가))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(청색))
                    item.setForeground(QBrush(흰색))
                    self.tableWidget_cme.setItem(3, 6, item)

                    item = QTableWidgetItem('{0}'.format(HANGSENG_진폭_틱))
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_cme.setItem(3, 10, item)

                    hsi_fibonacci_levels = self.Calc_Fibonacci_Levels(HANGSENG_저가, HANGSENG_고가, False)
                    self.ovc_node_coloring(3, hsi_tick_value, HANGSENG_전저, HANGSENG_전고, HANGSENG_전일종가, HANGSENG_피봇, HANGSENG_시가, HANGSENG_저가, HANGSENG_고가)
                else:
                    pass

                if "{0}".format(HANGSENG_고가) != self.tableWidget_cme.item(3, 8).text():
                    item = QTableWidgetItem("{0}".format(HANGSENG_고가))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(적색))
                    item.setForeground(QBrush(흰색))
                    self.tableWidget_cme.setItem(3, 8, item)

                    item = QTableWidgetItem('{0}'.format(HANGSENG_진폭_틱))
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_cme.setItem(3, 10, item)

                    hsi_fibonacci_levels = self.Calc_Fibonacci_Levels(HANGSENG_저가, HANGSENG_고가, True)
                    self.ovc_node_coloring(3, hsi_tick_value, HANGSENG_전저, HANGSENG_전고, HANGSENG_전일종가, HANGSENG_피봇, HANGSENG_시가, HANGSENG_저가, HANGSENG_고가)
                else:
                    pass

                HANGSENG_과거가 = int(self.tableWidget_cme.item(3, 7).text().split('\n')[0])

                if HANGSENG_현재가 != HANGSENG_과거가:

                    if HANGSENG_현재가 > HANGSENG_과거가:

                        item = QTableWidgetItem(str(HANGSENG_현재가) + '\n' + '▲')
                        item.setBackground(QBrush(pink))

                        if HANGSENG_시가 < HANGSENG_현재가:
                            item.setForeground(QBrush(적색))
                        elif HANGSENG_시가 > HANGSENG_현재가:
                            item.setForeground(QBrush(청색))
                        else:
                            item.setForeground(QBrush(검정색))

                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_cme.setItem(3, 7, item)
                        
                    elif HANGSENG_현재가 < HANGSENG_과거가:

                        item = QTableWidgetItem(str(HANGSENG_현재가) + '\n' + '▼')
                        item.setBackground(QBrush(lightskyblue))

                        if HANGSENG_시가 < HANGSENG_현재가:
                            item.setForeground(QBrush(적색))
                        elif HANGSENG_시가 > HANGSENG_현재가:
                            item.setForeground(QBrush(청색))
                        else:
                            item.setForeground(QBrush(검정색))

                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_cme.setItem(3, 7, item)                                            
                    else:
                        pass

                    item = QTableWidgetItem('{0}'.format(HANGSENG_시가대비))
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_cme.setItem(3, 9, item)

                    self.tableWidget_cme.resizeRowToContents(3)                    
                else:
                    pass            
            
            elif tickdata['종목코드'] == WTI:
                
                if flag_ohlc:

                    df_wti_tick = df_wti_tick.append(tickdata, ignore_index=True)
                    df_wti_tick_ohlc = self.make_ovc_ohlc_dataframe(df_wti_tick)

                    df_wti_ta_graph.at[plot_time_index, 'Open'] = df_wti_tick_ohlc.iat[df_wti_tick_ohlc.shape[0] - 1, 0]
                    df_wti_ta_graph.at[plot_time_index, 'High'] = df_wti_tick_ohlc.iat[df_wti_tick_ohlc.shape[0] - 1, 1]
                    df_wti_ta_graph.at[plot_time_index, 'Low'] = df_wti_tick_ohlc.iat[df_wti_tick_ohlc.shape[0] - 1, 2]
                    df_wti_ta_graph.at[plot_time_index, 'Close'] = df_wti_tick_ohlc.iat[df_wti_tick_ohlc.shape[0] - 1, 3]
                
                # 그래프 가격갱신
                WTI_현재가 = float(tickdata['체결가격'])
                df_wti_graph.at[plot_time_index, 'Price'] = WTI_현재가
                df_wti_ta_graph.at[plot_time_index, 'Price'] = WTI_현재가
                
                WTI_전일대비 = float(tickdata['전일대비'])

                if tickdata['전일대비기호'] == '5':
                    WTI_전일종가 = round((WTI_현재가 + WTI_전일대비), 2)
                    WTI_종가대비 = -WTI_전일대비
                else:
                    WTI_전일종가 = round((WTI_현재가 - WTI_전일대비), 2)
                    WTI_종가대비 = WTI_전일대비
                
                WTI_등락율 = float(tickdata['등락율'])

                WTI_시가 = float(tickdata['시가'])
                WTI_저가 =  float(tickdata['저가'])
                WTI_고가 =  float(tickdata['고가'])
                WTI_진폭 = WTI_고가 - WTI_저가
                WTI_진폭_틱 = int(WTI_진폭 / wti_tick_value)
                
                WTI_시가대비 = int((WTI_현재가 - WTI_시가) / wti_tick_value)                

                #df_wti_graph.at[0, 'Price'] = WTI_전일종가

                if df_wti_graph.at[1, 'Price'] == 0:
                    df_wti_graph.at[1, 'Price'] = WTI_시가

                WTI_진폭비 = WTI_진폭 / WTI_시가
                
                #WTI_체결가격 = locale.format('%.2f', WTI_현재가, 1)

                # 1T OHLC 생성
                df_wti_graph.at[plot_time_index, 'Time'] = CME_체결시간
                df_wti_ta_graph.at[plot_time_index, 'Time'] = CME_체결시간
                
                if not flag_ohlc:

                    df_wti_ta_graph['Open'].fillna(method='bfill', inplace=True)
                    df_wti_ta_graph['High'].fillna(method='bfill', inplace=True) 
                    df_wti_ta_graph['Low'].fillna(method='bfill', inplace=True)
                    df_wti_ta_graph['Close'].fillna(method='bfill', inplace=True)

                    df_wti_ta_graph.at[plot_time_index, 'Close'] = WTI_현재가

                    if not WTI_현재가_버퍼:
                        WTI_현재가_버퍼.append(WTI_현재가)
                        df_wti_ta_graph.at[plot_time_index, 'Open'] = WTI_현재가 
                    else:
                        WTI_현재가_버퍼.append(WTI_현재가)
                        df_wti_ta_graph.at[plot_time_index, 'High'] = max(WTI_현재가_버퍼)
                        df_wti_ta_graph.at[plot_time_index, 'Low'] = min(WTI_현재가_버퍼)
                    
                if WTI_피봇 == 0:

                    if WTI_전저 > 0 and WTI_전고 > 0:
                        WTI_피봇 = calc_pivot(WTI_전저, WTI_전고, WTI_전일종가, WTI_시가, 2)
                    else:
                        pass
                else:
                    pass

                # ICHIMOKU
                #df_wti_ta_graph['OE_CONV'], df_wti_ta_graph['OE_BASE'], df_wti_ta_graph['SPAN_A'], df_wti_ta_graph['SPAN_B'], lagging_span = self.Calc_ICHIMOKU(df_wti_ta_graph, CONVERSION_LINE_PERIOD, BASE_LINE_PERIOD, SPAN_B_PERIOD)
                
                if df_wti_ta_graph.at[plot_time_index, 'OE_CONV'] < df_wti_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                    df_wti_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] < df_wti_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:

                    self.tableWidget_cme.item(4, 0).setBackground(QBrush(검정색))
                    self.tableWidget_cme.item(4, 0).setForeground(QBrush(cyan))

                elif df_wti_ta_graph.at[plot_time_index, 'OE_CONV'] > df_wti_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                    df_wti_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] > df_wti_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:

                    self.tableWidget_cme.item(4, 0).setBackground(QBrush(검정색))
                    self.tableWidget_cme.item(4, 0).setForeground(QBrush(magenta))
                else:
                    self.tableWidget_cme.item(4, 0).setBackground(QBrush(검정색))
                    self.tableWidget_cme.item(4, 0).setForeground(QBrush(노란색))

                if "{0:.2f}".format(WTI_전저) != self.tableWidget_cme.item(4, 1).text():
                    item = QTableWidgetItem("{0:.2f}".format(WTI_전저))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_cme.setItem(4, 1, item)
                else:
                    pass

                if "{0:.2f}".format(WTI_전고) != self.tableWidget_cme.item(4, 2).text():
                    item = QTableWidgetItem("{0:.2f}".format(WTI_전고))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_cme.setItem(4, 2, item)
                else:
                    pass

                if "{0:.2f}".format(WTI_전일종가) != self.tableWidget_cme.item(4, 3).text():
                    item = QTableWidgetItem("{0:.2f}".format(WTI_전일종가))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_cme.setItem(4, 3, item)
                else:
                    pass

                if "{0:.2f}".format(WTI_피봇) != self.tableWidget_cme.item(4, 4).text():
                    item = QTableWidgetItem("{0:.2f}".format(WTI_피봇))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_cme.setItem(4, 4, item)
                else:
                    pass

                if "{0:.2f}".format(WTI_시가) != self.tableWidget_cme.item(4, 5).text():
                    item = QTableWidgetItem("{0:.2f}".format(WTI_시가))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_cme.setItem(4, 5, item)

                    if WTI_현재가 >= WTI_시가:
                        wti_fibonacci_levels = self.Calc_Fibonacci_Levels(WTI_저가, WTI_고가, True)
                    else:
                        wti_fibonacci_levels = self.Calc_Fibonacci_Levels(WTI_저가, WTI_고가, False)
                else:
                    pass

                if "{0:.2f}".format(WTI_저가) != self.tableWidget_cme.item(4, 6).text():
                    item = QTableWidgetItem("{0:.2f}".format(WTI_저가))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(청색))
                    item.setForeground(QBrush(흰색))
                    self.tableWidget_cme.setItem(4, 6, item)

                    item = QTableWidgetItem('{0}'.format(WTI_진폭_틱))
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_cme.setItem(4, 10, item)

                    wti_fibonacci_levels = self.Calc_Fibonacci_Levels(WTI_저가, WTI_고가, False)
                    self.ovc_node_coloring(4, wti_tick_value, WTI_전저, WTI_전고, WTI_전일종가, WTI_피봇, WTI_시가, WTI_저가, WTI_고가)
                else:
                    pass

                if "{0:.2f}".format(WTI_고가) != self.tableWidget_cme.item(4, 8).text():
                    item = QTableWidgetItem("{0:.2f}".format(WTI_고가))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(적색))
                    item.setForeground(QBrush(흰색))
                    self.tableWidget_cme.setItem(4, 8, item)

                    item = QTableWidgetItem('{0}'.format(WTI_진폭_틱))
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_cme.setItem(4, 10, item)

                    wti_fibonacci_levels = self.Calc_Fibonacci_Levels(WTI_저가, WTI_고가, True)
                    self.ovc_node_coloring(4, wti_tick_value, WTI_전저, WTI_전고, WTI_전일종가, WTI_피봇, WTI_시가, WTI_저가, WTI_고가)
                else:
                    pass

                WTI_과거가 = float(self.tableWidget_cme.item(4, 7).text().split('\n')[0])

                if WTI_현재가 != WTI_과거가:

                    if WTI_현재가 > WTI_과거가:

                        item = QTableWidgetItem(tickdata['체결가격'] + '\n' + '▲')
                        item.setBackground(QBrush(pink))

                        if WTI_시가 < WTI_현재가:
                            item.setForeground(QBrush(적색))
                        elif WTI_시가 > WTI_현재가:
                            item.setForeground(QBrush(청색))
                        else:
                            item.setForeground(QBrush(검정색))

                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_cme.setItem(4, 7, item)
                                                
                    elif WTI_현재가 < WTI_과거가:

                        item = QTableWidgetItem(tickdata['체결가격'] + '\n' + '▼')
                        item.setBackground(QBrush(lightskyblue))

                        if WTI_시가 < WTI_현재가:
                            item.setForeground(QBrush(적색))
                        elif WTI_시가 > WTI_현재가:
                            item.setForeground(QBrush(청색))
                        else:
                            item.setForeground(QBrush(검정색))

                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_cme.setItem(4, 7, item)                                             
                    else:
                        pass

                    item = QTableWidgetItem('{0}'.format(WTI_시가대비))
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_cme.setItem(4, 9, item)

                    self.tableWidget_cme.resizeRowToContents(4)
                else:
                    pass

            elif tickdata['종목코드'] == GOLD:
                
                if flag_ohlc:

                    df_gold_tick = df_gold_tick.append(tickdata, ignore_index=True)
                    df_gold_tick_ohlc = self.make_ovc_ohlc_dataframe(df_gold_tick)

                    df_gold_ta_graph.at[plot_time_index, 'Open'] = df_gold_tick_ohlc.iat[df_gold_tick_ohlc.shape[0] - 1, 0]
                    df_gold_ta_graph.at[plot_time_index, 'High'] = df_gold_tick_ohlc.iat[df_gold_tick_ohlc.shape[0] - 1, 1]
                    df_gold_ta_graph.at[plot_time_index, 'Low'] = df_gold_tick_ohlc.iat[df_gold_tick_ohlc.shape[0] - 1, 2]
                    df_gold_ta_graph.at[plot_time_index, 'Close'] = df_gold_tick_ohlc.iat[df_gold_tick_ohlc.shape[0] - 1, 3]
                
                # 그래프 가격갱신
                GOLD_현재가 = float(tickdata['체결가격'])
                df_gold_graph.at[plot_time_index, 'Price'] = GOLD_현재가
                df_gold_ta_graph.at[plot_time_index, 'Price'] = GOLD_현재가
                
                GOLD_전일대비 = float(tickdata['전일대비'])

                if tickdata['전일대비기호'] == '5':
                    GOLD_전일종가 = round((GOLD_현재가 + GOLD_전일대비), 1)
                    GOLD_종가대비 = -GOLD_전일대비
                else:
                    GOLD_전일종가 = round((GOLD_현재가 - GOLD_전일대비), 1)
                    GOLD_종가대비 = GOLD_전일대비

                GOLD_등락율 = float(tickdata['등락율'])

                GOLD_시가 = float(tickdata['시가'])
                GOLD_저가 =  float(tickdata['저가'])
                GOLD_고가 =  float(tickdata['고가'])                    
                GOLD_진폭 = GOLD_고가 - GOLD_저가
                GOLD_진폭_틱 = int(GOLD_진폭 / gold_tick_value)
                
                GOLD_시가대비 = int((GOLD_현재가 - GOLD_시가) / gold_tick_value)                

                #df_gold_graph.at[0, 'Price'] = GOLD_전일종가

                if df_gold_graph.at[1, 'Price'] == 0:
                    df_gold_graph.at[1, 'Price'] = GOLD_시가

                GOLD_진폭비 = GOLD_진폭 / GOLD_시가

                # 1T OHLC 생성
                df_gold_graph.at[plot_time_index, 'Time'] = CME_체결시간
                df_gold_ta_graph.at[plot_time_index, 'Time'] = CME_체결시간
                
                if not flag_ohlc:

                    df_gold_ta_graph['Open'].fillna(method='bfill', inplace=True)
                    df_gold_ta_graph['High'].fillna(method='bfill', inplace=True) 
                    df_gold_ta_graph['Low'].fillna(method='bfill', inplace=True)
                    df_gold_ta_graph['Close'].fillna(method='bfill', inplace=True)

                    df_gold_ta_graph.at[plot_time_index, 'Close'] = GOLD_현재가

                    if not GOLD_현재가_버퍼:
                        GOLD_현재가_버퍼.append(GOLD_현재가)
                        df_gold_ta_graph.at[plot_time_index, 'Open'] = GOLD_현재가 
                    else:
                        GOLD_현재가_버퍼.append(GOLD_현재가)
                        df_gold_ta_graph.at[plot_time_index, 'High'] = max(GOLD_현재가_버퍼)
                        df_gold_ta_graph.at[plot_time_index, 'Low'] = min(GOLD_현재가_버퍼)
                    
                if GOLD_피봇 == 0:

                    if GOLD_전저 > 0 and GOLD_전고 > 0:
                        GOLD_피봇 = calc_pivot(GOLD_전저, GOLD_전고, GOLD_전일종가, GOLD_시가, 1)
                    else:
                        pass
                else:
                    pass

                # ICHIMOKU
                #df_gold_ta_graph['OE_CONV'], df_gold_ta_graph['OE_BASE'], df_gold_ta_graph['SPAN_A'], df_gold_ta_graph['SPAN_B'], lagging_span = self.Calc_ICHIMOKU(df_gold_ta_graph, CONVERSION_LINE_PERIOD, BASE_LINE_PERIOD, SPAN_B_PERIOD)
                
                if df_gold_ta_graph.at[plot_time_index, 'OE_CONV'] < df_gold_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                    df_gold_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] < df_gold_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:

                    self.tableWidget_cme.item(5, 0).setBackground(QBrush(검정색))
                    self.tableWidget_cme.item(5, 0).setForeground(QBrush(cyan))

                elif df_gold_ta_graph.at[plot_time_index, 'OE_CONV'] > df_gold_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                    df_gold_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] > df_gold_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:

                    self.tableWidget_cme.item(5, 0).setBackground(QBrush(검정색))
                    self.tableWidget_cme.item(5, 0).setForeground(QBrush(magenta))
                else:
                    self.tableWidget_cme.item(5, 0).setBackground(QBrush(검정색))
                    self.tableWidget_cme.item(5, 0).setForeground(QBrush(노란색))

                if "{0:.1f}".format(GOLD_전저) != self.tableWidget_cme.item(5, 1).text():
                    item = QTableWidgetItem("{0:.1f}".format(GOLD_전저))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_cme.setItem(5, 1, item)
                else:
                    pass

                if "{0:.1f}".format(GOLD_전고) != self.tableWidget_cme.item(5, 2).text():
                    item = QTableWidgetItem("{0:.1f}".format(GOLD_전고))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_cme.setItem(5, 2, item)
                else:
                    pass

                if "{0:.1f}".format(GOLD_전일종가) != self.tableWidget_cme.item(5, 3).text():
                    item = QTableWidgetItem("{0:.1f}".format(GOLD_전일종가))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_cme.setItem(5, 3, item)
                else:
                    pass

                if "{0:.1f}".format(GOLD_피봇) != self.tableWidget_cme.item(5, 4).text():
                    item = QTableWidgetItem("{0:.1f}".format(GOLD_피봇))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_cme.setItem(5, 4, item)
                else:
                    pass

                if "{0:.1f}".format(GOLD_시가) != self.tableWidget_cme.item(5, 5).text():
                    item = QTableWidgetItem("{0:.1f}".format(GOLD_시가))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_cme.setItem(5, 5, item)

                    if GOLD_현재가 >= GOLD_시가:
                        gold_fibonacci_levels = self.Calc_Fibonacci_Levels(GOLD_저가, GOLD_고가, True)
                    else:
                        gold_fibonacci_levels = self.Calc_Fibonacci_Levels(GOLD_저가, GOLD_고가, False)
                else:
                    pass

                if "{0:.1f}".format(GOLD_저가) != self.tableWidget_cme.item(5, 6).text():
                    item = QTableWidgetItem("{0:.1f}".format(GOLD_저가))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(청색))
                    item.setForeground(QBrush(흰색))
                    self.tableWidget_cme.setItem(5, 6, item)

                    item = QTableWidgetItem('{0}'.format(GOLD_진폭_틱))
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_cme.setItem(5, 10, item)

                    gold_fibonacci_levels = self.Calc_Fibonacci_Levels(GOLD_저가, GOLD_고가, False)
                    self.ovc_node_coloring(5, gold_tick_value, GOLD_전저, GOLD_전고, GOLD_전일종가, GOLD_피봇, GOLD_시가, GOLD_저가, GOLD_고가)
                else:
                    pass

                if "{0:.1f}".format(GOLD_고가) != self.tableWidget_cme.item(5, 8).text():
                    item = QTableWidgetItem("{0:.1f}".format(GOLD_고가))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(적색))
                    item.setForeground(QBrush(흰색))
                    self.tableWidget_cme.setItem(5, 8, item)

                    item = QTableWidgetItem('{0}'.format(GOLD_진폭_틱))
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_cme.setItem(5, 10, item)

                    gold_fibonacci_levels = self.Calc_Fibonacci_Levels(GOLD_저가, GOLD_고가, True)
                    self.ovc_node_coloring(5, gold_tick_value, GOLD_전저, GOLD_전고, GOLD_전일종가, GOLD_피봇, GOLD_시가, GOLD_저가, GOLD_고가)
                else:
                    pass

                GOLD_과거가 = float(self.tableWidget_cme.item(5, 7).text().split('\n')[0])

                if GOLD_현재가 != GOLD_과거가:

                    if GOLD_현재가 > GOLD_과거가:

                        item = QTableWidgetItem(tickdata['체결가격'] + '\n' + '▲')
                        item.setBackground(QBrush(pink))

                        if GOLD_시가 < GOLD_현재가:
                            item.setForeground(QBrush(적색))
                        elif GOLD_시가 > GOLD_현재가:
                            item.setForeground(QBrush(청색))
                        else:
                            item.setForeground(QBrush(검정색))

                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_cme.setItem(5, 7, item)
                        
                    elif GOLD_현재가 < GOLD_과거가:

                        item = QTableWidgetItem(tickdata['체결가격'] + '\n' + '▼')
                        item.setBackground(QBrush(lightskyblue))

                        if GOLD_시가 < GOLD_현재가:
                            item.setForeground(QBrush(적색))
                        elif GOLD_시가 > GOLD_현재가:
                            item.setForeground(QBrush(청색))
                        else:
                            item.setForeground(QBrush(검정색))

                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_cme.setItem(5, 7, item)                                               
                    else:
                        pass

                    item = QTableWidgetItem('{0}'.format(GOLD_시가대비))
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_cme.setItem(5, 9, item)

                    self.tableWidget_cme.resizeRowToContents(5)
                else:
                    pass            
            
            elif tickdata['종목코드'] == EURO:
                
                if flag_ohlc:

                    df_euro_tick = df_euro_tick.append(tickdata, ignore_index=True)
                    df_euro_tick_ohlc = self.make_ovc_ohlc_dataframe(df_euro_tick)

                    df_euro_ta_graph.at[plot_time_index, 'Open'] = df_euro_tick_ohlc.iat[df_euro_tick_ohlc.shape[0] - 1, 0]
                    df_euro_ta_graph.at[plot_time_index, 'High'] = df_euro_tick_ohlc.iat[df_euro_tick_ohlc.shape[0] - 1, 1]
                    df_euro_ta_graph.at[plot_time_index, 'Low'] = df_euro_tick_ohlc.iat[df_euro_tick_ohlc.shape[0] - 1, 2]
                    df_euro_ta_graph.at[plot_time_index, 'Close'] = df_euro_tick_ohlc.iat[df_euro_tick_ohlc.shape[0] - 1, 3]
                
                # 그래프 가격갱신
                EURO_현재가 = float(tickdata['체결가격'])
                df_euro_graph.at[plot_time_index, 'Price'] = EURO_현재가
                df_euro_ta_graph.at[plot_time_index, 'Price'] = EURO_현재가

                EURO_전일대비 = float(tickdata['전일대비'])

                if tickdata['전일대비기호'] == '5':
                    EURO_전일종가 = round((EURO_현재가 + EURO_전일대비), 5)
                    EURO_종가대비 = -EURO_전일대비
                else:
                    EURO_전일종가 = round((EURO_현재가 - EURO_전일대비), 5)
                    EURO_종가대비 = EURO_전일대비

                EURO_등락율 = float(tickdata['등락율'])

                EURO_시가 = float(tickdata['시가'])
                EURO_저가 =  float(tickdata['저가'])
                EURO_고가 =  float(tickdata['고가'])                    
                EURO_진폭 = EURO_고가 - EURO_저가
                EURO_진폭_틱 = int(EURO_진폭 / euro_tick_value)

                EURO_시가대비 = int((EURO_현재가 - EURO_시가) / euro_tick_value)                

                #df_euro_graph.at[0, 'Price'] = EURO_전일종가

                if df_euro_graph.at[1, 'Price'] == 0:
                    df_euro_graph.at[1, 'Price'] = EURO_시가

                EURO_진폭비 = EURO_진폭 / EURO_시가

                # 1T OHLC 생성
                df_euro_graph.at[plot_time_index, 'Time'] = CME_체결시간
                df_euro_ta_graph.at[plot_time_index, 'Time'] = CME_체결시간
                
                if not flag_ohlc:

                    df_euro_ta_graph['Open'].fillna(method='bfill', inplace=True)
                    df_euro_ta_graph['High'].fillna(method='bfill', inplace=True) 
                    df_euro_ta_graph['Low'].fillna(method='bfill', inplace=True)
                    df_euro_ta_graph['Close'].fillna(method='bfill', inplace=True)

                    df_euro_ta_graph.at[plot_time_index, 'Close'] = EURO_현재가

                    if not EURO_현재가_버퍼:
                        EURO_현재가_버퍼.append(EURO_현재가)
                        df_euro_ta_graph.at[plot_time_index, 'Open'] = EURO_현재가 
                    else:
                        EURO_현재가_버퍼.append(EURO_현재가)
                        df_euro_ta_graph.at[plot_time_index, 'High'] = max(EURO_현재가_버퍼)
                        df_euro_ta_graph.at[plot_time_index, 'Low'] = min(EURO_현재가_버퍼)
                    
                if EURO_피봇 == 0:

                    if EURO_전저 > 0 and EURO_전고 > 0:
                        EURO_피봇 = calc_pivot(EURO_전저, EURO_전고, EURO_전일종가, EURO_시가, 5)
                    else:
                        pass
                else:
                    pass

                # ICHIMOKU
                #df_euro_ta_graph['OE_CONV'], df_euro_ta_graph['OE_BASE'], df_euro_ta_graph['SPAN_A'], df_euro_ta_graph['SPAN_B'], lagging_span = self.Calc_ICHIMOKU(df_euro_ta_graph, CONVERSION_LINE_PERIOD, BASE_LINE_PERIOD, SPAN_B_PERIOD)
                                
                if df_euro_ta_graph.at[plot_time_index, 'OE_CONV'] < df_euro_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                    df_euro_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] < df_euro_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:

                    self.tableWidget_cme.item(6, 0).setBackground(QBrush(검정색))
                    self.tableWidget_cme.item(6, 0).setForeground(QBrush(cyan))

                elif df_euro_ta_graph.at[plot_time_index, 'OE_CONV'] > df_euro_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                    df_euro_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] > df_euro_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:

                    self.tableWidget_cme.item(6, 0).setBackground(QBrush(검정색))
                    self.tableWidget_cme.item(6, 0).setForeground(QBrush(magenta))
                else:
                    self.tableWidget_cme.item(6, 0).setBackground(QBrush(검정색))
                    self.tableWidget_cme.item(6, 0).setForeground(QBrush(노란색))

                if "{0:.5f}".format(EURO_전저) != self.tableWidget_cme.item(6, 1).text():
                    item = QTableWidgetItem("{0:.5f}".format(EURO_전저))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_cme.setItem(6, 1, item)
                else:
                    pass

                if "{0:.5f}".format(EURO_전고) != self.tableWidget_cme.item(6, 2).text():
                    item = QTableWidgetItem("{0:.5f}".format(EURO_전고))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_cme.setItem(6, 2, item)
                else:
                    pass

                if "{0:.5f}".format(EURO_전일종가) != self.tableWidget_cme.item(6, 3).text():
                    item = QTableWidgetItem("{0:.5f}".format(EURO_전일종가))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_cme.setItem(6, 3, item)
                else:
                    pass

                if "{0:.5f}".format(EURO_피봇) != self.tableWidget_cme.item(6, 4).text():
                    item = QTableWidgetItem("{0:.5f}".format(EURO_피봇))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_cme.setItem(6, 4, item)
                else:
                    pass

                if "{0:.5f}".format(EURO_시가) != self.tableWidget_cme.item(6, 5).text():
                    item = QTableWidgetItem("{0:.5f}".format(EURO_시가))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_cme.setItem(6, 5, item)

                    if EURO_현재가 >= EURO_시가:
                        euro_fibonacci_levels = self.Calc_Fibonacci_Levels(EURO_저가, EURO_고가, True)
                    else:
                        euro_fibonacci_levels = self.Calc_Fibonacci_Levels(EURO_저가, EURO_고가, False)
                else:
                    pass

                if "{0:.5f}".format(EURO_저가) != self.tableWidget_cme.item(6, 6).text():
                    item = QTableWidgetItem("{0:.5f}".format(EURO_저가))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(청색))
                    item.setForeground(QBrush(흰색))
                    self.tableWidget_cme.setItem(6, 6, item)
                    
                    item = QTableWidgetItem('{0}'.format(EURO_진폭_틱))
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_cme.setItem(6, 10, item)

                    euro_fibonacci_levels = self.Calc_Fibonacci_Levels(EURO_저가, EURO_고가, False)
                    self.ovc_node_coloring(6, euro_tick_value, EURO_전저, EURO_전고, EURO_전일종가, EURO_피봇, EURO_시가, EURO_저가, EURO_고가)
                else:
                    pass

                if "{0:.5f}".format(EURO_고가) != self.tableWidget_cme.item(6, 8).text():
                    item = QTableWidgetItem("{0:.5f}".format(EURO_고가))
                    item.setTextAlignment(Qt.AlignCenter)                    
                    item.setBackground(QBrush(적색))
                    item.setForeground(QBrush(흰색))
                    self.tableWidget_cme.setItem(6, 8, item)

                    item = QTableWidgetItem('{0}'.format(EURO_진폭_틱))
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_cme.setItem(6, 10, item)

                    euro_fibonacci_levels = self.Calc_Fibonacci_Levels(EURO_저가, EURO_고가, True)
                    self.ovc_node_coloring(6, euro_tick_value, EURO_전저, EURO_전고, EURO_전일종가, EURO_피봇, EURO_시가, EURO_저가, EURO_고가)
                else:
                    pass

                EURO_과거가 = float(self.tableWidget_cme.item(6, 7).text().split('\n')[0])              
                
                if EURO_현재가 != EURO_과거가:                       

                    if EURO_현재가 > EURO_과거가:

                        item = QTableWidgetItem(tickdata['체결가격'] + '\n' + '▲')
                        item.setBackground(QBrush(pink))

                        if EURO_시가 < EURO_현재가:
                            item.setForeground(QBrush(적색))
                        elif EURO_시가 > EURO_현재가:
                            item.setForeground(QBrush(청색))
                        else:
                            item.setForeground(QBrush(검정색))

                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_cme.setItem(6, 7, item)
                        
                    elif EURO_현재가 < EURO_과거가:

                        item = QTableWidgetItem(tickdata['체결가격'] + '\n' + '▼')
                        item.setBackground(QBrush(lightskyblue))

                        if EURO_시가 < EURO_현재가:
                            item.setForeground(QBrush(적색))
                        elif EURO_시가 > EURO_현재가:
                            item.setForeground(QBrush(청색))
                        else:
                            item.setForeground(QBrush(검정색))

                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_cme.setItem(6, 7, item)                                                
                    else:
                        pass                    

                    item = QTableWidgetItem('{0}'.format(EURO_시가대비))
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_cme.setItem(6, 9, item)

                    self.tableWidget_cme.resizeRowToContents(6)
                else:
                    pass

            elif tickdata['종목코드'] == YEN:
                
                if flag_ohlc:

                    df_yen_tick = df_yen_tick.append(tickdata, ignore_index=True)
                    df_yen_tick_ohlc = self.make_ovc_ohlc_dataframe(df_yen_tick)

                    df_yen_ta_graph.at[plot_time_index, 'Open'] = df_yen_tick_ohlc.iat[df_yen_tick_ohlc.shape[0] - 1, 0]
                    df_yen_ta_graph.at[plot_time_index, 'High'] = df_yen_tick_ohlc.iat[df_yen_tick_ohlc.shape[0] - 1, 1]
                    df_yen_ta_graph.at[plot_time_index, 'Low'] = df_yen_tick_ohlc.iat[df_yen_tick_ohlc.shape[0] - 1, 2]
                    df_yen_ta_graph.at[plot_time_index, 'Close'] = df_yen_tick_ohlc.iat[df_yen_tick_ohlc.shape[0] - 1, 3]
                
                # 그래프 가격갱신
                YEN_현재가 = float(tickdata['체결가격'])
                df_yen_graph.at[plot_time_index, 'Price'] = YEN_현재가
                df_yen_ta_graph.at[plot_time_index, 'Price'] = YEN_현재가

                YEN_전일대비 = float(tickdata['전일대비'])

                if tickdata['전일대비기호'] == '5':
                    YEN_전일종가 = round((YEN_현재가 + YEN_전일대비), 1)
                    YEN_종가대비 = -YEN_전일대비
                else:
                    YEN_전일종가 = round((YEN_현재가 - YEN_전일대비), 1)
                    YEN_종가대비 = YEN_전일대비

                YEN_등락율 = float(tickdata['등락율'])

                YEN_시가 = float(tickdata['시가'])
                YEN_저가 =  float(tickdata['저가'])
                YEN_고가 =  float(tickdata['고가'])                    
                YEN_진폭 = YEN_고가 - YEN_저가
                YEN_진폭_틱 = int(YEN_진폭 / yen_tick_value)

                YEN_시가대비 = int((YEN_현재가 - YEN_시가) / yen_tick_value)

                #df_yen_graph.at[0, 'Price'] = YEN_전일종가

                if df_yen_graph.at[1, 'Price'] == 0:
                    df_yen_graph.at[1, 'Price'] = YEN_시가

                YEN_진폭비 = YEN_진폭 / YEN_시가

                # 1T OHLC 생성
                df_yen_graph.at[plot_time_index, 'Time'] = CME_체결시간
                df_yen_ta_graph.at[plot_time_index, 'Time'] = CME_체결시간
                
                if not flag_ohlc:

                    df_yen_ta_graph['Open'].fillna(method='bfill', inplace=True)
                    df_yen_ta_graph['High'].fillna(method='bfill', inplace=True) 
                    df_yen_ta_graph['Low'].fillna(method='bfill', inplace=True)
                    df_yen_ta_graph['Close'].fillna(method='bfill', inplace=True)

                    df_yen_ta_graph.at[plot_time_index, 'Close'] = YEN_현재가

                    if not YEN_현재가_버퍼:
                        YEN_현재가_버퍼.append(YEN_현재가)
                        df_yen_ta_graph.at[plot_time_index, 'Open'] = YEN_현재가 
                    else:
                        YEN_현재가_버퍼.append(YEN_현재가)
                        df_yen_ta_graph.at[plot_time_index, 'High'] = max(YEN_현재가_버퍼)
                        df_yen_ta_graph.at[plot_time_index, 'Low'] = min(YEN_현재가_버퍼)
                    
                if YEN_피봇 == 0:

                    if YEN_전저 > 0 and YEN_전고 > 0:
                        YEN_피봇 = calc_pivot(YEN_전저, YEN_전고, YEN_전일종가, YEN_시가, 1)
                    else:
                        pass
                else:
                    pass

                # ICHIMOKU
                #df_yen_ta_graph['OE_CONV'], df_yen_ta_graph['OE_BASE'], df_yen_ta_graph['SPAN_A'], df_yen_ta_graph['SPAN_B'], lagging_span = self.Calc_ICHIMOKU(df_yen_ta_graph, CONVERSION_LINE_PERIOD, BASE_LINE_PERIOD, SPAN_B_PERIOD)
                                
                if df_yen_ta_graph.at[plot_time_index, 'OE_CONV'] < df_yen_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                    df_yen_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] < df_yen_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:

                    self.tableWidget_cme.item(7, 0).setBackground(QBrush(검정색))
                    self.tableWidget_cme.item(7, 0).setForeground(QBrush(cyan))

                elif df_yen_ta_graph.at[plot_time_index, 'OE_CONV'] > df_yen_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                    df_yen_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] > df_yen_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:

                    self.tableWidget_cme.item(7, 0).setBackground(QBrush(검정색))
                    self.tableWidget_cme.item(7, 0).setForeground(QBrush(magenta))
                else:
                    self.tableWidget_cme.item(7, 0).setBackground(QBrush(검정색))
                    self.tableWidget_cme.item(7, 0).setForeground(QBrush(노란색))

                if "{0:.1f}".format(YEN_전저) != self.tableWidget_cme.item(7, 1).text():
                    item = QTableWidgetItem("{0:.1f}".format(YEN_전저))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_cme.setItem(7, 1, item)
                else:
                    pass

                if "{0:.1f}".format(YEN_전고) != self.tableWidget_cme.item(7, 2).text():
                    item = QTableWidgetItem("{0:.1f}".format(YEN_전고))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_cme.setItem(7, 2, item)
                else:
                    pass

                if "{0:.1f}".format(YEN_전일종가) != self.tableWidget_cme.item(7, 3).text():
                    item = QTableWidgetItem("{0:.1f}".format(YEN_전일종가))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_cme.setItem(7, 3, item)
                else:
                    pass

                if "{0:.1f}".format(YEN_피봇) != self.tableWidget_cme.item(7, 4).text():
                    item = QTableWidgetItem("{0:.1f}".format(YEN_피봇))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_cme.setItem(7, 4, item)
                else:
                    pass

                if "{0:.1f}".format(YEN_시가) != self.tableWidget_cme.item(7, 5).text():
                    item = QTableWidgetItem("{0:.1f}".format(YEN_시가))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_cme.setItem(7, 5, item)

                    if YEN_현재가 >= YEN_시가:
                        yen_fibonacci_levels = self.Calc_Fibonacci_Levels(YEN_저가, YEN_고가, True)
                    else:
                        yen_fibonacci_levels = self.Calc_Fibonacci_Levels(YEN_저가, YEN_고가, False)
                else:
                    pass

                if "{0:.1f}".format(YEN_저가) != self.tableWidget_cme.item(7, 6).text():
                    item = QTableWidgetItem("{0:.1f}".format(YEN_저가))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(청색))
                    item.setForeground(QBrush(흰색))
                    self.tableWidget_cme.setItem(7, 6, item)

                    item = QTableWidgetItem('{0}'.format(YEN_진폭_틱))
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_cme.setItem(7, 10, item)

                    yen_fibonacci_levels = self.Calc_Fibonacci_Levels(YEN_저가, YEN_고가, False)
                    self.ovc_node_coloring(7, yen_tick_value, YEN_전저, YEN_전고, YEN_전일종가, YEN_피봇, YEN_시가, YEN_저가, YEN_고가)
                else:
                    pass

                if "{0:.1f}".format(YEN_고가) != self.tableWidget_cme.item(7, 8).text():
                    item = QTableWidgetItem("{0:.1f}".format(YEN_고가))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(적색))
                    item.setForeground(QBrush(흰색))
                    self.tableWidget_cme.setItem(7, 8, item)

                    item = QTableWidgetItem('{0}'.format(YEN_진폭_틱))
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_cme.setItem(7, 10, item)

                    yen_fibonacci_levels = self.Calc_Fibonacci_Levels(YEN_저가, YEN_고가, True)
                    self.ovc_node_coloring(7, yen_tick_value, YEN_전저, YEN_전고, YEN_전일종가, YEN_피봇, YEN_시가, YEN_저가, YEN_고가)
                else:
                    pass

                YEN_과거가 = float(self.tableWidget_cme.item(7, 7).text().split('\n')[0])
                
                if YEN_현재가 != YEN_과거가:                                        

                    if YEN_현재가 > YEN_과거가:

                        item = QTableWidgetItem(tickdata['체결가격'] + '\n' + '▲')
                        item.setBackground(QBrush(pink))

                        if YEN_시가 < YEN_현재가:
                            item.setForeground(QBrush(적색))
                        elif YEN_시가 > YEN_현재가:
                            item.setForeground(QBrush(청색))
                        else:
                            item.setForeground(QBrush(검정색))

                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_cme.setItem(7, 7, item)
                        
                    elif YEN_현재가 < YEN_과거가:

                        item = QTableWidgetItem(tickdata['체결가격'] + '\n' + '▼')
                        item.setBackground(QBrush(lightskyblue))

                        if YEN_시가 < YEN_현재가:
                            item.setForeground(QBrush(적색))
                        elif YEN_시가 > YEN_현재가:
                            item.setForeground(QBrush(청색))
                        else:
                            item.setForeground(QBrush(검정색))

                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_cme.setItem(7, 7, item)                                            
                    else:
                        pass                    

                    item = QTableWidgetItem('{0}'.format(YEN_시가대비))
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_cme.setItem(7, 9, item)                   

                    self.tableWidget_cme.resizeRowToContents(7)
                else:
                    pass

            elif tickdata['종목코드'] == ADI:
                
                if flag_ohlc:

                    df_adi_tick = df_adi_tick.append(tickdata, ignore_index=True)
                    df_adi_tick_ohlc = self.make_ovc_ohlc_dataframe(df_adi_tick)

                    df_adi_ta_graph.at[plot_time_index, 'Open'] = df_adi_tick_ohlc.iat[df_adi_tick_ohlc.shape[0] - 1, 0]
                    df_adi_ta_graph.at[plot_time_index, 'High'] = df_adi_tick_ohlc.iat[df_adi_tick_ohlc.shape[0] - 1, 1]
                    df_adi_ta_graph.at[plot_time_index, 'Low'] = df_adi_tick_ohlc.iat[df_adi_tick_ohlc.shape[0] - 1, 2]
                    df_adi_ta_graph.at[plot_time_index, 'Close'] = df_adi_tick_ohlc.iat[df_adi_tick_ohlc.shape[0] - 1, 3]
                
                # 그래프 가격갱신
                ADI_현재가 = float(tickdata['체결가격']) 
                df_adi_graph.at[plot_time_index, 'Price'] = ADI_현재가
                df_adi_ta_graph.at[plot_time_index, 'Price'] = ADI_현재가                         

                ADI_전일대비 = float(tickdata['전일대비'])

                if tickdata['전일대비기호'] == '5':
                    ADI_전일종가 = round((ADI_현재가 + ADI_전일대비), 5)
                    ADI_종가대비 = -ADI_전일대비
                else:
                    ADI_전일종가 = round((ADI_현재가 - ADI_전일대비), 5)
                    ADI_종가대비 = ADI_전일대비

                ADI_등락율 = float(tickdata['등락율'])

                ADI_시가 = float(tickdata['시가'])
                ADI_저가 =  float(tickdata['저가'])
                ADI_고가 =  float(tickdata['고가'])                    
                ADI_진폭 = ADI_고가 - ADI_저가
                ADI_진폭_틱 = int(ADI_진폭 / adi_tick_value)

                ADI_시가대비 = int((ADI_현재가 - ADI_시가) / adi_tick_value)

                #df_adi_graph.at[0, 'Price'] = ADI_전일종가

                if df_adi_graph.at[1, 'Price'] == 0:
                    df_adi_graph.at[1, 'Price'] = ADI_시가

                ADI_진폭비 = ADI_진폭 / ADI_시가

                # 1T OHLC 생성
                df_adi_graph.at[plot_time_index, 'Time'] = CME_체결시간
                df_adi_ta_graph.at[plot_time_index, 'Time'] = CME_체결시간
                
                if not flag_ohlc:

                    df_adi_ta_graph['Open'].fillna(method='bfill', inplace=True)
                    df_adi_ta_graph['High'].fillna(method='bfill', inplace=True) 
                    df_adi_ta_graph['Low'].fillna(method='bfill', inplace=True) 
                    df_adi_ta_graph['Close'].fillna(method='bfill', inplace=True)

                    df_adi_ta_graph.at[plot_time_index, 'Close'] = ADI_현재가

                    if not ADI_현재가_버퍼:
                        ADI_현재가_버퍼.append(ADI_현재가)
                        df_adi_ta_graph.at[plot_time_index, 'Open'] = ADI_현재가 
                    else:
                        ADI_현재가_버퍼.append(ADI_현재가)
                        df_adi_ta_graph.at[plot_time_index, 'High'] = max(ADI_현재가_버퍼)
                        df_adi_ta_graph.at[plot_time_index, 'Low'] = min(ADI_현재가_버퍼)                        
                    
                if ADI_피봇 == 0:

                    if ADI_전저 > 0 and ADI_전고 > 0:
                        ADI_피봇 = calc_pivot(ADI_전저, ADI_전고, ADI_전일종가, ADI_시가, 5)
                    else:
                        pass
                else:
                    pass

                # ICHIMOKU
                df_adi_ta_graph['OE_CONV'], df_adi_ta_graph['OE_BASE'], df_adi_ta_graph['SPAN_A'], df_adi_ta_graph['SPAN_B'], df_adi_ta_graph['LAGGING_SPAN'] = self.Calc_ICHIMOKU(df_adi_ta_graph, CONVERSION_LINE_PERIOD, BASE_LINE_PERIOD, SPAN_B_PERIOD)
                
                if df_adi_ta_graph.at[plot_time_index, 'OE_CONV'] < df_adi_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                    df_adi_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] < df_adi_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:

                    self.tableWidget_cme.item(8, 0).setBackground(QBrush(검정색))
                    self.tableWidget_cme.item(8, 0).setForeground(QBrush(cyan))

                elif df_adi_ta_graph.at[plot_time_index, 'OE_CONV'] > df_adi_ta_graph.at[plot_time_index, 'OE_BASE'] and \
                    df_adi_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_A'] > df_adi_ta_graph.at[plot_time_index+BASE_LINE_PERIOD, 'SPAN_B']:

                    self.tableWidget_cme.item(8, 0).setBackground(QBrush(검정색))
                    self.tableWidget_cme.item(8, 0).setForeground(QBrush(magenta))
                else:
                    self.tableWidget_cme.item(8, 0).setBackground(QBrush(검정색))
                    self.tableWidget_cme.item(8, 0).setForeground(QBrush(노란색))

                if "{0:.5f}".format(ADI_전저) != self.tableWidget_cme.item(8, 1).text():
                    item = QTableWidgetItem("{0:.5f}".format(ADI_전저))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_cme.setItem(8, 1, item)
                else:
                    pass

                if "{0:.5f}".format(ADI_전고) != self.tableWidget_cme.item(8, 2).text():
                    item = QTableWidgetItem("{0:.5f}".format(ADI_전고))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_cme.setItem(8, 2, item)
                else:
                    pass

                if "{0:.5f}".format(ADI_전일종가) != self.tableWidget_cme.item(8, 3).text():
                    item = QTableWidgetItem("{0:.5f}".format(ADI_전일종가))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_cme.setItem(8, 3, item)
                else:
                    pass

                if "{0:.5f}".format(ADI_피봇) != self.tableWidget_cme.item(8, 4).text():
                    item = QTableWidgetItem("{0:.5f}".format(ADI_피봇))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_cme.setItem(8, 4, item)
                else:
                    pass

                if "{0:.5f}".format(ADI_시가) != self.tableWidget_cme.item(8, 5).text():
                    item = QTableWidgetItem("{0:.5f}".format(ADI_시가))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_cme.setItem(8, 5, item)

                    if ADI_현재가 >= ADI_시가:
                        adi_fibonacci_levels = self.Calc_Fibonacci_Levels(ADI_저가, ADI_고가, True)
                    else:
                        adi_fibonacci_levels = self.Calc_Fibonacci_Levels(ADI_저가, ADI_고가, False)
                else:
                    pass

                if "{0:.5f}".format(ADI_저가) != self.tableWidget_cme.item(8, 6).text():
                    item = QTableWidgetItem("{0:.5f}".format(ADI_저가))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(청색))
                    item.setForeground(QBrush(흰색))
                    self.tableWidget_cme.setItem(8, 6, item)

                    item = QTableWidgetItem('{0}'.format(ADI_진폭_틱))
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_cme.setItem(8, 10, item)

                    adi_fibonacci_levels = self.Calc_Fibonacci_Levels(ADI_저가, ADI_고가, False)
                    self.ovc_node_coloring(8, adi_tick_value, ADI_전저, ADI_전고, ADI_전일종가, ADI_피봇, ADI_시가, ADI_저가, ADI_고가)
                else:
                    pass

                if "{0:.5f}".format(ADI_고가) != self.tableWidget_cme.item(8, 8).text():
                    item = QTableWidgetItem("{0:.5f}".format(ADI_고가))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(적색))
                    item.setForeground(QBrush(흰색))
                    self.tableWidget_cme.setItem(8, 8, item)

                    item = QTableWidgetItem('{0}'.format(ADI_진폭_틱))
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_cme.setItem(8, 10, item)

                    adi_fibonacci_levels = self.Calc_Fibonacci_Levels(ADI_저가, ADI_고가, True)
                    self.ovc_node_coloring(8, adi_tick_value, ADI_전저, ADI_전고, ADI_전일종가, ADI_피봇, ADI_시가, ADI_저가, ADI_고가)
                else:
                    pass
                
                ADI_과거가 = float(self.tableWidget_cme.item(8, 7).text().split('\n')[0])
                
                if ADI_현재가 != ADI_과거가:                                        

                    if ADI_현재가 > ADI_과거가:

                        item = QTableWidgetItem(tickdata['체결가격'] + '\n' + '▲')
                        item.setBackground(QBrush(pink))

                        if ADI_시가 < ADI_현재가:
                            item.setForeground(QBrush(적색))
                        elif ADI_시가 > ADI_현재가:
                            item.setForeground(QBrush(청색))
                        else:
                            item.setForeground(QBrush(검정색))

                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_cme.setItem(8, 7, item)
                        
                    elif ADI_현재가 < ADI_과거가:

                        item = QTableWidgetItem(tickdata['체결가격'] + '\n' + '▼')
                        item.setBackground(QBrush(lightskyblue))

                        if ADI_시가 < ADI_현재가:
                            item.setForeground(QBrush(적색))
                        elif ADI_시가 > ADI_현재가:
                            item.setForeground(QBrush(청색))
                        else:
                            item.setForeground(QBrush(검정색))

                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_cme.setItem(8, 7, item)                                            
                    else:
                        pass                  

                    item = QTableWidgetItem('{0}'.format(ADI_시가대비))
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_cme.setItem(8, 9, item)                   

                    self.tableWidget_cme.resizeRowToContents(8)
                else:
                    pass                
            else:
                pass

            self.tableWidget_cme.resizeColumnsToContents()

        except Exception as e:

            txt = '[{0:02d}:{1:02d}:{2:02d}] Exception : ovc_update 에서 {3} \n상기 오류가 발생했습니다.\r'.format(dt.hour, dt.minute, dt.second, traceback.format_exc())
            self.textBrowser.append(txt)

    #####################################################################################################################################################################
    # SSL Channel Indicator
    #####################################################################################################################################################################
    def Calc_SSLChannels(self, dataframe, length=10, mode="sma"):
        """
        Source: https://www.tradingview.com/script/xzIoaIJC-SSL-channel/
        Author: xmatthias
        Pinescript Author: ErwinBeckers

        SSL Channels.
        Average over highs and lows form a channel - lines "flip" when close crosses
        either of the 2 lines.
        Trading ideas:
            * Channel cross
            * as confirmation based on up > down for long

        Usage:
            dataframe['SSLDown'], dataframe['SSLUp'] = Calc_SSLChannels(dataframe, 10, 'sma')
        """

        df = dataframe.copy()

        if mode == "sma":
            df["maHigh"] = df["High"].rolling(length).mean()
            df["maLow"] = df["Low"].rolling(length).mean()
        elif mode == "ema":
            df["maHigh"] = df["High"].ewm(length).mean()
            df["maLow"] = df["Low"].ewm(length).mean()

        df["hlv"] = np.where(df["Close"] > df["maHigh"], 1, np.where(df["Close"] < df["maLow"], -1, np.NAN))
        df["hlv"] = df["hlv"].ffill()

        df["SSLDown"] = np.where(df["hlv"] < 0, df["maHigh"], df["maLow"])
        df["SSLUp"] = np.where(df["hlv"] < 0, df["maLow"], df["maHigh"])

        return df["SSLDown"], df["SSLUp"]

    #####################################################################################################################################################################
    # ICHIMOKU
    #####################################################################################################################################################################
    def Calc_ICHIMOKU(
        self,
        ohlc: DataFrame,
        window1=9,
        window2=26,
        window3=52,
    ):
        # Tenkan-sen (Conversion Line): (9-period high + 9-period low)/2))
        nine_period_high = ohlc['High'].rolling(window1).max()
        nine_period_low = ohlc['Low'].rolling(window1).min()
        tenkan_sen = (nine_period_high + nine_period_low) /2

        # Kijun-sen (Base Line): (25-period high + 25-period low)/2))
        period26_high = ohlc['High'].rolling(window2).max()
        period26_low = ohlc['Low'].rolling(window2).min()
        kijun_sen = (period26_high + period26_low) / 2

        # Senkou Span A (Leading Span A): (Conversion Line + Base Line)/2))
        senkou_span_a = ((tenkan_sen + kijun_sen) / 2).shift(window2)

        # Senkou Span B (Leading Span B): (50-period high + 50-period low)/2))
        period52_high = ohlc['High'].rolling(window3).max()
        period52_low = ohlc['Low'].rolling(window3).min()
        senkou_span_b = ((period52_high + period52_low) / 2).shift(window2)

        # The most current closing price plotted 26 time periods behind (optional)
        lagging_span = ohlc['Close'].shift(-window2)

        return tenkan_sen, kijun_sen, senkou_span_a, senkou_span_b, lagging_span

    #####################################################################################################################################################################
    # BOLLINGER
    #####################################################################################################################################################################
    def Calc_Bollinger(self, type):

        global df_futures_cm_ta_graph, df_sp500_ta_graph, df_dow_ta_graph, df_nasdaq_ta_graph, df_hsi_ta_graph, df_wti_ta_graph, df_gold_ta_graph, df_euro_ta_graph, df_yen_ta_graph, df_adi_ta_graph

        if type == 'FUT':

            df_futures_cm_ta_graph['BBUpper_1st'], df_futures_cm_ta_graph['BBMiddle_1st'], df_futures_cm_ta_graph['BBLower_1st'] = talib.BBANDS(df_futures_cm_ta_graph['Close'], timeperiod=BB_PERIOD, nbdevup=BB_1ST_STD, nbdevdn=BB_1ST_STD, matype=MA_TYPE)
            df_futures_cm_ta_graph['BBUpper_2nd'], df_futures_cm_ta_graph['BBMiddle_2nd'], df_futures_cm_ta_graph['BBLower_2nd'] = talib.BBANDS(df_futures_cm_ta_graph['Close'], timeperiod=BB_PERIOD, nbdevup=BB_2ND_STD, nbdevdn=BB_2ND_STD, matype=MA_TYPE)
            
        elif type == 'SP500':

            df_sp500_ta_graph['BBUpper_1st'], df_sp500_ta_graph['BBMiddle_1st'], df_sp500_ta_graph['BBLower_1st'] = talib.BBANDS(df_sp500_ta_graph['Close'], timeperiod=BB_PERIOD, nbdevup=BB_1ST_STD, nbdevdn=BB_1ST_STD, matype=MA_TYPE)
            df_sp500_ta_graph['BBUpper_2nd'], df_sp500_ta_graph['BBMiddle_2nd'], df_sp500_ta_graph['BBLower_2nd'] = talib.BBANDS(df_sp500_ta_graph['Close'], timeperiod=BB_PERIOD, nbdevup=BB_2ND_STD, nbdevdn=BB_2ND_STD, matype=MA_TYPE)
            
        elif type == 'DOW':

            df_dow_ta_graph['BBUpper_1st'], df_dow_ta_graph['BBMiddle_1st'], df_dow_ta_graph['BBLower_1st'] = talib.BBANDS(df_dow_ta_graph['Close'], timeperiod=BB_PERIOD, nbdevup=BB_1ST_STD, nbdevdn=BB_1ST_STD, matype=MA_TYPE)
            df_dow_ta_graph['BBUpper_2nd'], df_dow_ta_graph['BBMiddle_2nd'], df_dow_ta_graph['BBLower_2nd'] = talib.BBANDS(df_dow_ta_graph['Close'], timeperiod=BB_PERIOD, nbdevup=BB_2ND_STD, nbdevdn=BB_2ND_STD, matype=MA_TYPE)            
            
        elif type == 'NASDAQ':

            df_nasdaq_ta_graph['BBUpper_1st'], df_nasdaq_ta_graph['BBMiddle_1st'], df_nasdaq_ta_graph['BBLower_1st'] = talib.BBANDS(df_nasdaq_ta_graph['Close'], timeperiod=BB_PERIOD, nbdevup=BB_1ST_STD, nbdevdn=BB_1ST_STD, matype=MA_TYPE)
            df_nasdaq_ta_graph['BBUpper_2nd'], df_nasdaq_ta_graph['BBMiddle_2nd'], df_nasdaq_ta_graph['BBLower_2nd'] = talib.BBANDS(df_nasdaq_ta_graph['Close'], timeperiod=BB_PERIOD, nbdevup=BB_2ND_STD, nbdevdn=BB_2ND_STD, matype=MA_TYPE)            
            
        elif type == 'HSI':

            df_hsi_ta_graph['BBUpper_1st'], df_hsi_ta_graph['BBMiddle_1st'], df_hsi_ta_graph['BBLower_1st'] = talib.BBANDS(df_hsi_ta_graph['Close'], timeperiod=BB_PERIOD, nbdevup=BB_1ST_STD, nbdevdn=BB_1ST_STD, matype=MA_TYPE)
            df_hsi_ta_graph['BBUpper_2nd'], df_hsi_ta_graph['BBMiddle_2nd'], df_hsi_ta_graph['BBLower_2nd'] = talib.BBANDS(df_hsi_ta_graph['Close'], timeperiod=BB_PERIOD, nbdevup=BB_2ND_STD, nbdevdn=BB_2ND_STD, matype=MA_TYPE)            
            
        elif type == 'WTI':

            df_wti_ta_graph['BBUpper_1st'], df_wti_ta_graph['BBMiddle_1st'], df_wti_ta_graph['BBLower_1st'] = talib.BBANDS(df_wti_ta_graph['Close'], timeperiod=BB_PERIOD, nbdevup=BB_1ST_STD, nbdevdn=BB_1ST_STD, matype=MA_TYPE)
            df_wti_ta_graph['BBUpper_2nd'], df_wti_ta_graph['BBMiddle_2nd'], df_wti_ta_graph['BBLower_2nd'] = talib.BBANDS(df_wti_ta_graph['Close'], timeperiod=BB_PERIOD, nbdevup=BB_2ND_STD, nbdevdn=BB_2ND_STD, matype=MA_TYPE)

        elif type == 'GOLD':

            df_gold_ta_graph['BBUpper_1st'], df_gold_ta_graph['BBMiddle_1st'], df_gold_ta_graph['BBLower_1st'] = talib.BBANDS(df_gold_ta_graph['Close'], timeperiod=BB_PERIOD, nbdevup=BB_1ST_STD, nbdevdn=BB_1ST_STD, matype=MA_TYPE)
            df_gold_ta_graph['BBUpper_2nd'], df_gold_ta_graph['BBMiddle_2nd'], df_gold_ta_graph['BBLower_2nd'] = talib.BBANDS(df_gold_ta_graph['Close'], timeperiod=BB_PERIOD, nbdevup=BB_2ND_STD, nbdevdn=BB_2ND_STD, matype=MA_TYPE)
            
        elif type == 'EURO':

            df_euro_ta_graph['BBUpper_1st'], df_euro_ta_graph['BBMiddle_1st'], df_euro_ta_graph['BBLower_1st'] = talib.BBANDS(df_euro_ta_graph['Close'], timeperiod=BB_PERIOD, nbdevup=BB_1ST_STD, nbdevdn=BB_1ST_STD, matype=MA_TYPE)
            df_euro_ta_graph['BBUpper_2nd'], df_euro_ta_graph['BBMiddle_2nd'], df_euro_ta_graph['BBLower_2nd'] = talib.BBANDS(df_euro_ta_graph['Close'], timeperiod=BB_PERIOD, nbdevup=BB_2ND_STD, nbdevdn=BB_2ND_STD, matype=MA_TYPE)
            
        elif type == 'YEN':

            df_yen_ta_graph['BBUpper_1st'], df_yen_ta_graph['BBMiddle_1st'], df_yen_ta_graph['BBLower_1st'] = talib.BBANDS(df_yen_ta_graph['Close'], timeperiod=BB_PERIOD, nbdevup=BB_1ST_STD, nbdevdn=BB_1ST_STD, matype=MA_TYPE)
            df_yen_ta_graph['BBUpper_2nd'], df_yen_ta_graph['BBMiddle_2nd'], df_yen_ta_graph['BBLower_2nd'] = talib.BBANDS(df_yen_ta_graph['Close'], timeperiod=BB_PERIOD, nbdevup=BB_2ND_STD, nbdevdn=BB_2ND_STD, matype=MA_TYPE)
            
        elif type == 'ADI':

            df_adi_ta_graph['BBUpper_1st'], df_adi_ta_graph['BBMiddle_1st'], df_adi_ta_graph['BBLower_1st'] = talib.BBANDS(df_adi_ta_graph['Close'], timeperiod=BB_PERIOD, nbdevup=BB_1ST_STD, nbdevdn=BB_1ST_STD, matype=MA_TYPE)
            df_adi_ta_graph['BBUpper_2nd'], df_adi_ta_graph['BBMiddle_2nd'], df_adi_ta_graph['BBLower_2nd'] = talib.BBANDS(df_adi_ta_graph['Close'], timeperiod=BB_PERIOD, nbdevup=BB_2ND_STD, nbdevdn=BB_2ND_STD, matype=MA_TYPE)
        else:
            pass

    #####################################################################################################################################################################
    # PSAR & MAMA
    #####################################################################################################################################################################
    def Calc_PSAR_MAMA(self, type):

        global df_futures_cm_ta_graph, df_sp500_ta_graph, df_dow_ta_graph, df_nasdaq_ta_graph, df_hsi_ta_graph, df_wti_ta_graph, df_gold_ta_graph, df_euro_ta_graph, df_yen_ta_graph, df_adi_ta_graph

        if type == 'FUT':

            # Parabolic SAR
            df_futures_cm_ta_graph['PSAR'] = talib.SAR(df_futures_cm_ta_graph['High'], df_futures_cm_ta_graph['Low'], acceleration=0.02, maximum=0.2)

            # MAMA
            df_futures_cm_ta_graph['MAMA'], df_futures_cm_ta_graph['FAMA'] = talib.MAMA(df_futures_cm_ta_graph['Close'], fastlimit=0.5, slowlimit=0.05)
            
            # SSL
            #df_futures_cm_ta_graph['SSLDown'], df_futures_cm_ta_graph['SSLUp'] = self.Calc_SSLChannels(df_futures_cm_ta_graph, SSL_PERIOD, 'sma')
            
        elif type == 'SP500':

            # Parabolic SAR
            df_sp500_ta_graph['PSAR'] = talib.SAR(df_sp500_ta_graph['High'], df_sp500_ta_graph['Low'], acceleration=0.02, maximum=0.2)

            # # MAMA
            df_sp500_ta_graph['MAMA'], df_sp500_ta_graph['FAMA'] = talib.MAMA(df_sp500_ta_graph['Close'], fastlimit=0.5, slowlimit=0.05)

            # SSL
            #df_sp500_ta_graph['SSLDown'], df_sp500_ta_graph['SSLUp'] = self.Calc_SSLChannels(df_sp500_ta_graph, SSL_PERIOD, 'sma')
            
        elif type == 'DOW':

            # Parabolic SAR
            df_dow_ta_graph['PSAR'] = talib.SAR(df_dow_ta_graph['High'], df_dow_ta_graph['Low'], acceleration=0.02, maximum=0.2)

            # MAMA(약 32 샘플후에 출력값이 나옴)
            df_dow_ta_graph['MAMA'], df_dow_ta_graph['FAMA'] = talib.MAMA(df_dow_ta_graph['Close'], fastlimit=0.5, slowlimit=0.05)

            # SSL
            #df_dow_ta_graph['SSLDown'], df_dow_ta_graph['SSLUp'] = self.Calc_SSLChannels(df_dow_ta_graph, SSL_PERIOD, 'sma')
            
        elif type == 'NASDAQ':

            # Parabolic SAR
            df_nasdaq_ta_graph['PSAR'] = talib.SAR(df_nasdaq_ta_graph['High'], df_nasdaq_ta_graph['Low'], acceleration=0.02, maximum=0.2)

            # # MAMA
            df_nasdaq_ta_graph['MAMA'], df_nasdaq_ta_graph['FAMA'] = talib.MAMA(df_nasdaq_ta_graph['Close'], fastlimit=0.5, slowlimit=0.05)

            # SSL
            #df_nasdaq_ta_graph['SSLDown'], df_nasdaq_ta_graph['SSLUp'] = self.Calc_SSLChannels(df_nasdaq_ta_graph, SSL_PERIOD, 'sma')
            
        elif type == 'HSI':

            # Parabolic SAR
            df_hsi_ta_graph['PSAR'] = talib.SAR(df_hsi_ta_graph['High'], df_hsi_ta_graph['Low'], acceleration=0.02, maximum=0.2)

            # # MAMA
            df_hsi_ta_graph['MAMA'], df_hsi_ta_graph['FAMA'] = talib.MAMA(df_hsi_ta_graph['Close'], fastlimit=0.5, slowlimit=0.05)

            # SSL
            #df_hsi_ta_graph['SSLDown'], df_hsi_ta_graph['SSLUp'] = self.Calc_SSLChannels(df_hsi_ta_graph, SSL_PERIOD, 'sma')
            
        elif type == 'WTI':

            # Parabolic SAR
            df_wti_ta_graph['PSAR'] = talib.SAR(df_wti_ta_graph['High'], df_wti_ta_graph['Low'], acceleration=0.02, maximum=0.2)

            # # MAMA
            df_wti_ta_graph['MAMA'], df_wti_ta_graph['FAMA'] = talib.MAMA(df_wti_ta_graph['Close'], fastlimit=0.5, slowlimit=0.05)

            # SSL
            #df_wti_ta_graph['SSLDown'], df_wti_ta_graph['SSLUp'] = self.Calc_SSLChannels(df_wti_ta_graph, SSL_PERIOD, 'sma')
            
        elif type == 'GOLD':

            # Parabolic SAR
            df_gold_ta_graph['PSAR'] = talib.SAR(df_gold_ta_graph['High'], df_gold_ta_graph['Low'], acceleration=0.02, maximum=0.2)

            # # MAMA
            df_gold_ta_graph['MAMA'], df_gold_ta_graph['FAMA'] = talib.MAMA(df_gold_ta_graph['Close'], fastlimit=0.5, slowlimit=0.05)

            # SSL
            #df_gold_ta_graph['SSLDown'], df_gold_ta_graph['SSLUp'] = self.Calc_SSLChannels(df_gold_ta_graph, SSL_PERIOD, 'sma')
            
        elif type == 'EURO':

            # Parabolic SAR
            df_euro_ta_graph['PSAR'] = talib.SAR(df_euro_ta_graph['High'], df_euro_ta_graph['Low'], acceleration=0.02, maximum=0.2)

            # # MAMA
            df_euro_ta_graph['MAMA'], df_euro_ta_graph['FAMA'] = talib.MAMA(df_euro_ta_graph['Close'], fastlimit=0.5, slowlimit=0.05)

            # SSL
            #df_euro_ta_graph['SSLDown'], df_euro_ta_graph['SSLUp'] = self.Calc_SSLChannels(df_euro_ta_graph, SSL_PERIOD, 'sma')
            
        elif type == 'YEN':

            # Parabolic SAR
            df_yen_ta_graph['PSAR'] = talib.SAR(df_yen_ta_graph['High'], df_yen_ta_graph['Low'], acceleration=0.02, maximum=0.2)

            # # MAMA
            df_yen_ta_graph['MAMA'], df_yen_ta_graph['FAMA'] = talib.MAMA(df_yen_ta_graph['Close'], fastlimit=0.5, slowlimit=0.05)

            # SSL
            #df_yen_ta_graph['SSLDown'], df_yen_ta_graph['SSLUp'] = self.Calc_SSLChannels(df_yen_ta_graph, SSL_PERIOD, 'sma')
            
        elif type == 'ADI':

            # Parabolic SAR
            df_adi_ta_graph['PSAR'] = talib.SAR(df_adi_ta_graph['High'], df_adi_ta_graph['Low'], acceleration=0.02, maximum=0.2)

            # # MAMA
            df_adi_ta_graph['MAMA'], df_adi_ta_graph['FAMA'] = talib.MAMA(df_adi_ta_graph['Close'], fastlimit=0.5, slowlimit=0.05)

            # SSL
            #df_adi_ta_graph['SSLDown'], df_adi_ta_graph['SSLUp'] = self.Calc_SSLChannels(df_adi_ta_graph, SSL_PERIOD, 'sma')            
        else:
            pass

    #####################################################################################################################################################################
    # Fibonacci Levels
    #####################################################################################################################################################################
    def Calc_Fibonacci_Levels(self, min_level, max_level, uptrend):

        levels = []

        for ratio in Fibonacci_Retracements_Ratios:

            if uptrend:
                levels.append(max_level - (max_level - min_level) * ratio)
            else:
                levels.append(min_level + (max_level - min_level) * ratio)

        return levels

    # 해외선물 주요맥점 컬러링
    def ovc_node_coloring(self, index, tick_value, 전저, 전고, 종가, 피봇, 시가, 저가, 고가):

        self.tableWidget_cme.item(index, 1).setBackground(QBrush(흰색))
        self.tableWidget_cme.item(index, 1).setForeground(QBrush(검정색))
        self.tableWidget_cme.item(index, 2).setBackground(QBrush(흰색))
        self.tableWidget_cme.item(index, 2).setForeground(QBrush(검정색))
        self.tableWidget_cme.item(index, 3).setBackground(QBrush(흰색))
        self.tableWidget_cme.item(index, 3).setForeground(QBrush(검정색))
        self.tableWidget_cme.item(index, 4).setBackground(QBrush(흰색))
        self.tableWidget_cme.item(index, 4).setForeground(QBrush(검정색))
        self.tableWidget_cme.item(index, 5).setBackground(QBrush(흰색))
        self.tableWidget_cme.item(index, 5).setForeground(QBrush(검정색))
        self.tableWidget_cme.item(index, 6).setBackground(QBrush(흰색))
        self.tableWidget_cme.item(index, 6).setForeground(QBrush(검정색))
        self.tableWidget_cme.item(index, 8).setBackground(QBrush(흰색))
        self.tableWidget_cme.item(index, 8).setForeground(QBrush(검정색))

        if 전저 - tick_value * 5 <= 저가 <= 전저 + tick_value * 5:
            self.tableWidget_cme.item(index, 1).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(index, 1).setForeground(QBrush(적색))
            self.tableWidget_cme.item(index, 6).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(index, 6).setForeground(QBrush(적색))
        else:
            pass

        if 전고 - tick_value * 5 <= 저가 <= 전고 + tick_value * 5:
            self.tableWidget_cme.item(index, 2).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(index, 2).setForeground(QBrush(적색))
            self.tableWidget_cme.item(index, 6).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(index, 6).setForeground(QBrush(적색))
        else:
            pass

        if 종가 - tick_value * 5 <= 저가 <= 종가 + tick_value * 5:
            self.tableWidget_cme.item(index, 3).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(index, 3).setForeground(QBrush(적색))
            self.tableWidget_cme.item(index, 6).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(index, 6).setForeground(QBrush(적색))
        else:
            pass

        if 피봇 - tick_value * 5 <= 저가 <= 피봇 + tick_value * 5:
            self.tableWidget_cme.item(index, 4).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(index, 4).setForeground(QBrush(적색))
            self.tableWidget_cme.item(index, 6).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(index, 6).setForeground(QBrush(적색))
        else:
            pass

        if 시가 - tick_value * 5 <= 저가 <= 시가 + tick_value * 5:
            self.tableWidget_cme.item(index, 5).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(index, 5).setForeground(QBrush(적색))
            self.tableWidget_cme.item(index, 6).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(index, 6).setForeground(QBrush(적색))
        else:
            pass

        if 전저 - tick_value * 5 <= 고가 <= 전저 + tick_value * 5:
            self.tableWidget_cme.item(index, 1).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(index, 1).setForeground(QBrush(적색))
            self.tableWidget_cme.item(index, 8).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(index, 8).setForeground(QBrush(적색))
        else:
            pass

        if 전고 - tick_value * 5 <= 고가 <= 전고 + tick_value * 5:
            self.tableWidget_cme.item(index, 2).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(index, 2).setForeground(QBrush(적색))
            self.tableWidget_cme.item(index, 8).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(index, 8).setForeground(QBrush(적색))
        else:
            pass

        if 종가 - tick_value * 5 <= 고가 <= 종가 + tick_value * 5:
            self.tableWidget_cme.item(index, 3).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(index, 3).setForeground(QBrush(적색))
            self.tableWidget_cme.item(index, 8).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(index, 8).setForeground(QBrush(적색))
        else:
            pass

        if 피봇 - tick_value * 5 <= 고가 <= 피봇 + tick_value * 5:
            self.tableWidget_cme.item(index, 4).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(index, 4).setForeground(QBrush(적색))
            self.tableWidget_cme.item(index, 8).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(index, 8).setForeground(QBrush(적색))
        else:
            pass

        if 시가 - tick_value * 5 <= 고가 <= 시가 + tick_value * 5:
            self.tableWidget_cme.item(index, 5).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(index, 5).setForeground(QBrush(적색))
            self.tableWidget_cme.item(index, 8).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(index, 8).setForeground(QBrush(적색))
        else:
            pass

    def sp500_node_coloring(self):

        self.tableWidget_cme.item(0, 1).setBackground(QBrush(흰색))
        self.tableWidget_cme.item(0, 1).setForeground(QBrush(검정색))
        self.tableWidget_cme.item(0, 2).setBackground(QBrush(흰색))
        self.tableWidget_cme.item(0, 2).setForeground(QBrush(검정색))
        self.tableWidget_cme.item(0, 3).setBackground(QBrush(흰색))
        self.tableWidget_cme.item(0, 3).setForeground(QBrush(검정색))
        self.tableWidget_cme.item(0, 4).setBackground(QBrush(흰색))
        self.tableWidget_cme.item(0, 4).setForeground(QBrush(검정색))
        self.tableWidget_cme.item(0, 5).setBackground(QBrush(흰색))
        self.tableWidget_cme.item(0, 5).setForeground(QBrush(검정색))
        self.tableWidget_cme.item(0, 6).setBackground(QBrush(흰색))
        self.tableWidget_cme.item(0, 6).setForeground(QBrush(검정색))
        self.tableWidget_cme.item(0, 8).setBackground(QBrush(흰색))
        self.tableWidget_cme.item(0, 8).setForeground(QBrush(검정색))

        if SP500_전저 - 0.25 * 5 <= SP500_저가 <= SP500_전저 + 0.25 * 5:
            self.tableWidget_cme.item(0, 1).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(0, 1).setForeground(QBrush(적색))
            self.tableWidget_cme.item(0, 6).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(0, 6).setForeground(QBrush(적색))
        else:
            pass

        if SP500_전고 - 0.25 * 5 <= SP500_저가 <= SP500_전고 + 0.25 * 5:
            self.tableWidget_cme.item(0, 2).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(0, 2).setForeground(QBrush(적색))
            self.tableWidget_cme.item(0, 6).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(0, 6).setForeground(QBrush(적색))
        else:
            pass

        if SP500_전일종가 - 0.25 * 5 <= SP500_저가 <= SP500_전일종가 + 0.25 * 5:
            self.tableWidget_cme.item(0, 3).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(0, 3).setForeground(QBrush(적색))
            self.tableWidget_cme.item(0, 6).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(0, 6).setForeground(QBrush(적색))
        else:
            pass

        if SP500_피봇 - 0.25 * 5 <= SP500_저가 <= SP500_피봇 + 0.25 * 5:
            self.tableWidget_cme.item(0, 4).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(0, 4).setForeground(QBrush(적색))
            self.tableWidget_cme.item(0, 6).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(0, 6).setForeground(QBrush(적색))
        else:
            pass

        if SP500_시가 - 0.25 * 5 <= SP500_저가 <= SP500_시가 + 0.25 * 5:
            self.tableWidget_cme.item(0, 5).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(0, 5).setForeground(QBrush(적색))
            self.tableWidget_cme.item(0, 6).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(0, 6).setForeground(QBrush(적색))
        else:
            pass

        if SP500_전저 - 0.25 * 5 <= SP500_고가 <= SP500_전저 + 0.25 * 5:
            self.tableWidget_cme.item(0, 1).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(0, 1).setForeground(QBrush(적색))
            self.tableWidget_cme.item(0, 8).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(0, 8).setForeground(QBrush(적색))
        else:
            pass

        if SP500_전고 - 0.25 * 5 <= SP500_고가 <= SP500_전고 + 0.25 * 5:
            self.tableWidget_cme.item(0, 2).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(0, 2).setForeground(QBrush(적색))
            self.tableWidget_cme.item(0, 8).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(0, 8).setForeground(QBrush(적색))
        else:
            pass

        if SP500_전일종가 - 0.25 * 5 <= SP500_고가 <= SP500_전일종가 + 0.25 * 5:
            self.tableWidget_cme.item(0, 3).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(0, 3).setForeground(QBrush(적색))
            self.tableWidget_cme.item(0, 8).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(0, 8).setForeground(QBrush(적색))
        else:
            pass

        if SP500_피봇 - 0.25 * 5 <= SP500_고가 <= SP500_피봇 + 0.25 * 5:
            self.tableWidget_cme.item(0, 4).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(0, 4).setForeground(QBrush(적색))
            self.tableWidget_cme.item(0, 8).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(0, 8).setForeground(QBrush(적색))
        else:
            pass

        if SP500_시가 - 0.25 * 5 <= SP500_고가 <= SP500_시가 + 0.25 * 5:
            self.tableWidget_cme.item(0, 5).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(0, 5).setForeground(QBrush(적색))
            self.tableWidget_cme.item(0, 8).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(0, 8).setForeground(QBrush(적색))
        else:
            pass

    def dow_node_coloring(self):

        self.tableWidget_cme.item(1, 1).setBackground(QBrush(흰색))
        self.tableWidget_cme.item(1, 1).setForeground(QBrush(검정색))
        self.tableWidget_cme.item(1, 2).setBackground(QBrush(흰색))
        self.tableWidget_cme.item(1, 2).setForeground(QBrush(검정색))
        self.tableWidget_cme.item(1, 3).setBackground(QBrush(흰색))
        self.tableWidget_cme.item(1, 3).setForeground(QBrush(검정색))
        self.tableWidget_cme.item(1, 4).setBackground(QBrush(흰색))
        self.tableWidget_cme.item(1, 4).setForeground(QBrush(검정색))
        self.tableWidget_cme.item(1, 5).setBackground(QBrush(흰색))
        self.tableWidget_cme.item(1, 5).setForeground(QBrush(검정색))
        self.tableWidget_cme.item(1, 6).setBackground(QBrush(흰색))
        self.tableWidget_cme.item(1, 6).setForeground(QBrush(검정색))
        self.tableWidget_cme.item(1, 8).setBackground(QBrush(흰색))
        self.tableWidget_cme.item(1, 8).setForeground(QBrush(검정색))

        if DOW_전저 - 1 * 5 <= DOW_저가 <= DOW_전저 + 1 * 5:
            self.tableWidget_cme.item(1, 1).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(1, 1).setForeground(QBrush(적색))
            self.tableWidget_cme.item(1, 6).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(1, 6).setForeground(QBrush(적색))
        else:
            pass

        if DOW_전고 - 1 * 5 <= DOW_저가 <= DOW_전고 + 1 * 5:
            self.tableWidget_cme.item(1, 2).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(1, 2).setForeground(QBrush(적색))
            self.tableWidget_cme.item(1, 6).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(1, 6).setForeground(QBrush(적색))
        else:
            pass

        if DOW_전일종가 - 1 * 5 <= DOW_저가 <= DOW_전일종가 + 1 * 5:
            self.tableWidget_cme.item(1, 3).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(1, 3).setForeground(QBrush(적색))
            self.tableWidget_cme.item(1, 6).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(1, 6).setForeground(QBrush(적색))
        else:
            pass

        if DOW_피봇 - 1 * 5 <= DOW_저가 <= DOW_피봇 + 1 * 5:
            self.tableWidget_cme.item(1, 4).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(1, 4).setForeground(QBrush(적색))
            self.tableWidget_cme.item(1, 6).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(1, 6).setForeground(QBrush(적색))
        else:
            pass

        if DOW_시가 - 1 * 5 <= DOW_저가 <= DOW_시가 + 1 * 5:
            self.tableWidget_cme.item(1, 5).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(1, 5).setForeground(QBrush(적색))
            self.tableWidget_cme.item(1, 6).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(1, 6).setForeground(QBrush(적색))
        else:
            pass

        if DOW_전저 - 1 * 5 <= DOW_고가 <= DOW_전저 + 1 * 5:
            self.tableWidget_cme.item(1, 1).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(1, 1).setForeground(QBrush(적색))
            self.tableWidget_cme.item(1, 8).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(1, 8).setForeground(QBrush(적색))
        else:
            pass

        if DOW_전고 - 1 * 5 <= DOW_고가 <= DOW_전고 + 1 * 5:
            self.tableWidget_cme.item(1, 2).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(1, 2).setForeground(QBrush(적색))
            self.tableWidget_cme.item(1, 8).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(1, 8).setForeground(QBrush(적색))
        else:
            pass

        if DOW_전일종가 - 1 * 5 <= DOW_고가 <= DOW_전일종가 + 1 * 5:
            self.tableWidget_cme.item(1, 3).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(1, 3).setForeground(QBrush(적색))
            self.tableWidget_cme.item(1, 8).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(1, 8).setForeground(QBrush(적색))
        else:
            pass

        if DOW_피봇 - 1 * 5 <= DOW_고가 <= DOW_피봇 + 1 * 5:
            self.tableWidget_cme.item(1, 4).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(1, 4).setForeground(QBrush(적색))
            self.tableWidget_cme.item(1, 8).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(1, 8).setForeground(QBrush(적색))
        else:
            pass

        if DOW_시가 - 1 * 5 <= DOW_고가 <= DOW_시가 + 1 * 5:
            self.tableWidget_cme.item(1, 5).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(1, 5).setForeground(QBrush(적색))
            self.tableWidget_cme.item(1, 8).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(1, 8).setForeground(QBrush(적색))
        else:
            pass

    def nasdaq_node_coloring(self):

        self.tableWidget_cme.item(2, 1).setBackground(QBrush(흰색))
        self.tableWidget_cme.item(2, 1).setForeground(QBrush(검정색))
        self.tableWidget_cme.item(2, 2).setBackground(QBrush(흰색))
        self.tableWidget_cme.item(2, 2).setForeground(QBrush(검정색))
        self.tableWidget_cme.item(2, 3).setBackground(QBrush(흰색))
        self.tableWidget_cme.item(2, 3).setForeground(QBrush(검정색))
        self.tableWidget_cme.item(2, 4).setBackground(QBrush(흰색))
        self.tableWidget_cme.item(2, 4).setForeground(QBrush(검정색))
        self.tableWidget_cme.item(2, 5).setBackground(QBrush(흰색))
        self.tableWidget_cme.item(2, 5).setForeground(QBrush(검정색))
        self.tableWidget_cme.item(2, 6).setBackground(QBrush(흰색))
        self.tableWidget_cme.item(2, 6).setForeground(QBrush(검정색))
        self.tableWidget_cme.item(2, 8).setBackground(QBrush(흰색))
        self.tableWidget_cme.item(2, 8).setForeground(QBrush(검정색))

        if NASDAQ_전저 - 0.25 * 5 <= NASDAQ_저가 <= NASDAQ_전저 + 0.25 * 5:
            self.tableWidget_cme.item(2, 1).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(2, 1).setForeground(QBrush(적색))
            self.tableWidget_cme.item(2, 6).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(2, 6).setForeground(QBrush(적색))
        else:
            pass

        if NASDAQ_전고 - 0.25 * 5 <= NASDAQ_저가 <= NASDAQ_전고 + 0.25 * 5:
            self.tableWidget_cme.item(2, 2).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(2, 2).setForeground(QBrush(적색))
            self.tableWidget_cme.item(2, 6).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(2, 6).setForeground(QBrush(적색))
        else:
            pass

        if NASDAQ_전일종가 - 0.25 * 5 <= NASDAQ_저가 <= NASDAQ_전일종가 + 0.25 * 5:
            self.tableWidget_cme.item(2, 3).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(2, 3).setForeground(QBrush(적색))
            self.tableWidget_cme.item(2, 6).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(2, 6).setForeground(QBrush(적색))
        else:
            pass

        if NASDAQ_피봇 - 0.25 * 5 <= NASDAQ_저가 <= NASDAQ_피봇 + 0.25 * 5:
            self.tableWidget_cme.item(2, 4).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(2, 4).setForeground(QBrush(적색))
            self.tableWidget_cme.item(2, 6).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(2, 6).setForeground(QBrush(적색))
        else:
            pass

        if NASDAQ_시가 - 0.25 * 5 <= NASDAQ_저가 <= NASDAQ_시가 + 0.25 * 5:
            self.tableWidget_cme.item(2, 5).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(2, 5).setForeground(QBrush(적색))
            self.tableWidget_cme.item(2, 6).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(2, 6).setForeground(QBrush(적색))
        else:
            pass

        if NASDAQ_전저 - 0.25 * 5 <= NASDAQ_고가 <= NASDAQ_전저 + 0.25 * 5:
            self.tableWidget_cme.item(2, 1).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(2, 1).setForeground(QBrush(적색))
            self.tableWidget_cme.item(2, 8).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(2, 8).setForeground(QBrush(적색))
        else:
            pass

        if NASDAQ_전고 - 0.25 * 5 <= NASDAQ_고가 <= NASDAQ_전고 + 0.25 * 5:
            self.tableWidget_cme.item(2, 2).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(2, 2).setForeground(QBrush(적색))
            self.tableWidget_cme.item(2, 8).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(2, 8).setForeground(QBrush(적색))
        else:
            pass

        if NASDAQ_전일종가 - 0.25 * 5 <= NASDAQ_고가 <= NASDAQ_전일종가 + 0.25 * 5:
            self.tableWidget_cme.item(2, 3).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(2, 3).setForeground(QBrush(적색))
            self.tableWidget_cme.item(2, 8).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(2, 8).setForeground(QBrush(적색))
        else:
            pass

        if NASDAQ_피봇 - 0.25 * 5 <= NASDAQ_고가 <= NASDAQ_피봇 + 0.25 * 5:
            self.tableWidget_cme.item(2, 4).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(2, 4).setForeground(QBrush(적색))
            self.tableWidget_cme.item(2, 8).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(2, 8).setForeground(QBrush(적색))
        else:
            pass

        if NASDAQ_시가 - 0.25 * 5 <= NASDAQ_고가 <= NASDAQ_시가 + 0.25 * 5:
            self.tableWidget_cme.item(2, 5).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(2, 5).setForeground(QBrush(적색))
            self.tableWidget_cme.item(2, 8).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(2, 8).setForeground(QBrush(적색))
        else:
            pass

    def hsi_node_coloring(self):

        self.tableWidget_cme.item(3, 1).setBackground(QBrush(흰색))
        self.tableWidget_cme.item(3, 1).setForeground(QBrush(검정색))
        self.tableWidget_cme.item(3, 2).setBackground(QBrush(흰색))
        self.tableWidget_cme.item(3, 2).setForeground(QBrush(검정색))
        self.tableWidget_cme.item(3, 3).setBackground(QBrush(흰색))
        self.tableWidget_cme.item(3, 3).setForeground(QBrush(검정색))
        self.tableWidget_cme.item(3, 4).setBackground(QBrush(흰색))
        self.tableWidget_cme.item(3, 4).setForeground(QBrush(검정색))
        self.tableWidget_cme.item(3, 5).setBackground(QBrush(흰색))
        self.tableWidget_cme.item(3, 5).setForeground(QBrush(검정색))
        self.tableWidget_cme.item(3, 6).setBackground(QBrush(흰색))
        self.tableWidget_cme.item(3, 6).setForeground(QBrush(검정색))
        self.tableWidget_cme.item(3, 8).setBackground(QBrush(흰색))
        self.tableWidget_cme.item(3, 8).setForeground(QBrush(검정색))

        if HANGSENG_전저 - 1 * 5 <= HANGSENG_저가 <= HANGSENG_전저 + 1 * 5:
            self.tableWidget_cme.item(3, 1).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(3, 1).setForeground(QBrush(적색))
            self.tableWidget_cme.item(3, 6).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(3, 6).setForeground(QBrush(적색))
        else:
            pass

        if HANGSENG_전고 - 1 * 5 <= HANGSENG_저가 <= HANGSENG_전고 + 1 * 5:
            self.tableWidget_cme.item(3, 2).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(3, 2).setForeground(QBrush(적색))
            self.tableWidget_cme.item(3, 6).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(3, 6).setForeground(QBrush(적색))
        else:
            pass

        if HANGSENG_전일종가 - 1 * 5 <= HANGSENG_저가 <= HANGSENG_전일종가 + 1 * 5:
            self.tableWidget_cme.item(3, 3).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(3, 3).setForeground(QBrush(적색))
            self.tableWidget_cme.item(3, 6).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(3, 6).setForeground(QBrush(적색))
        else:
            pass

        if HANGSENG_피봇 - 1 * 5 <= HANGSENG_저가 <= HANGSENG_피봇 + 1 * 5:
            self.tableWidget_cme.item(3, 4).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(3, 4).setForeground(QBrush(적색))
            self.tableWidget_cme.item(3, 6).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(3, 6).setForeground(QBrush(적색))
        else:
            pass

        if HANGSENG_시가 - 1 * 5 <= HANGSENG_저가 <= HANGSENG_시가 + 1 * 5:
            self.tableWidget_cme.item(3, 5).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(3, 5).setForeground(QBrush(적색))
            self.tableWidget_cme.item(3, 6).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(3, 6).setForeground(QBrush(적색))
        else:
            pass

        if HANGSENG_전저 - 1 * 5 <= HANGSENG_고가 <= HANGSENG_전저 + 1 * 5:
            self.tableWidget_cme.item(3, 1).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(3, 1).setForeground(QBrush(적색))
            self.tableWidget_cme.item(3, 8).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(3, 8).setForeground(QBrush(적색))
        else:
            pass

        if HANGSENG_전고 - 1 * 5 <= HANGSENG_고가 <= HANGSENG_전고 + 1 * 5:
            self.tableWidget_cme.item(3, 2).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(3, 2).setForeground(QBrush(적색))
            self.tableWidget_cme.item(3, 8).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(3, 8).setForeground(QBrush(적색))
        else:
            pass

        if HANGSENG_전일종가 - 1 * 5 <= HANGSENG_고가 <= HANGSENG_전일종가 + 1 * 5:
            self.tableWidget_cme.item(3, 3).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(3, 3).setForeground(QBrush(적색))
            self.tableWidget_cme.item(3, 8).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(3, 8).setForeground(QBrush(적색))
        else:
            pass

        if HANGSENG_피봇 - 1 * 5 <= HANGSENG_고가 <= HANGSENG_피봇 + 1 * 5:
            self.tableWidget_cme.item(3, 4).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(3, 4).setForeground(QBrush(적색))
            self.tableWidget_cme.item(3, 8).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(3, 8).setForeground(QBrush(적색))
        else:
            pass

        if HANGSENG_시가 - 1 * 5 <= HANGSENG_고가 <= HANGSENG_시가 + 1 * 5:
            self.tableWidget_cme.item(3, 5).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(3, 5).setForeground(QBrush(적색))
            self.tableWidget_cme.item(3, 8).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(3, 8).setForeground(QBrush(적색))
        else:
            pass

    def wti_node_coloring(self):

        self.tableWidget_cme.item(4, 1).setBackground(QBrush(흰색))
        self.tableWidget_cme.item(4, 1).setForeground(QBrush(검정색))
        self.tableWidget_cme.item(4, 2).setBackground(QBrush(흰색))
        self.tableWidget_cme.item(4, 2).setForeground(QBrush(검정색))
        self.tableWidget_cme.item(4, 3).setBackground(QBrush(흰색))
        self.tableWidget_cme.item(4, 3).setForeground(QBrush(검정색))
        self.tableWidget_cme.item(4, 4).setBackground(QBrush(흰색))
        self.tableWidget_cme.item(4, 4).setForeground(QBrush(검정색))
        self.tableWidget_cme.item(4, 5).setBackground(QBrush(흰색))
        self.tableWidget_cme.item(4, 5).setForeground(QBrush(검정색))
        self.tableWidget_cme.item(4, 6).setBackground(QBrush(흰색))
        self.tableWidget_cme.item(4, 6).setForeground(QBrush(검정색))
        self.tableWidget_cme.item(4, 8).setBackground(QBrush(흰색))
        self.tableWidget_cme.item(4, 8).setForeground(QBrush(검정색))

        if WTI_전저 - 0.01 * 5 <= WTI_저가 <= WTI_전저 + 0.01 * 5:
            self.tableWidget_cme.item(4, 1).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(4, 1).setForeground(QBrush(적색))
            self.tableWidget_cme.item(4, 6).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(4, 6).setForeground(QBrush(적색))
        else:
            pass

        if WTI_전고 - 0.01 * 5 <= WTI_저가 <= WTI_전고 + 0.01 * 5:
            self.tableWidget_cme.item(4, 2).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(4, 2).setForeground(QBrush(적색))
            self.tableWidget_cme.item(4, 6).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(4, 6).setForeground(QBrush(적색))
        else:
            pass

        if WTI_전일종가 - 0.01 * 5 <= WTI_저가 <= WTI_전일종가 + 0.01 * 5:
            self.tableWidget_cme.item(4, 3).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(4, 3).setForeground(QBrush(적색))
            self.tableWidget_cme.item(4, 6).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(4, 6).setForeground(QBrush(적색))
        else:
            pass

        if WTI_피봇 - 0.01 * 5 <= WTI_저가 <= WTI_피봇 + 0.01 * 5:
            self.tableWidget_cme.item(4, 4).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(4, 4).setForeground(QBrush(적색))
            self.tableWidget_cme.item(4, 6).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(4, 6).setForeground(QBrush(적색))
        else:
            pass

        if WTI_시가 - 0.01 * 5 <= WTI_저가 <= WTI_시가 + 0.01 * 5:
            self.tableWidget_cme.item(4, 5).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(4, 5).setForeground(QBrush(적색))
            self.tableWidget_cme.item(4, 6).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(4, 6).setForeground(QBrush(적색))
        else:
            pass

        if WTI_전저 - 0.01 * 5 <= WTI_고가 <= WTI_전저 + 0.01 * 5:
            self.tableWidget_cme.item(4, 1).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(4, 1).setForeground(QBrush(적색))
            self.tableWidget_cme.item(4, 8).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(4, 8).setForeground(QBrush(적색))
        else:
            pass

        if WTI_전고 - 0.01 * 5 <= WTI_고가 <= WTI_전고 + 0.01 * 5:
            self.tableWidget_cme.item(4, 2).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(4, 2).setForeground(QBrush(적색))
            self.tableWidget_cme.item(4, 8).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(4, 8).setForeground(QBrush(적색))
        else:
            pass

        if WTI_전일종가 - 0.01 * 5 <= WTI_고가 <= WTI_전일종가 + 0.01 * 5:
            self.tableWidget_cme.item(4, 3).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(4, 3).setForeground(QBrush(적색))
            self.tableWidget_cme.item(4, 8).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(4, 8).setForeground(QBrush(적색))
        else:
            pass

        if WTI_피봇 - 0.01 * 5 <= WTI_고가 <= WTI_피봇 + 0.01 * 5:
            self.tableWidget_cme.item(4, 4).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(4, 4).setForeground(QBrush(적색))
            self.tableWidget_cme.item(4, 8).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(4, 8).setForeground(QBrush(적색))
        else:
            pass

        if WTI_시가 - 0.01 * 5 <= WTI_고가 <= WTI_시가 + 0.01 * 5:
            self.tableWidget_cme.item(4, 5).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(4, 5).setForeground(QBrush(적색))
            self.tableWidget_cme.item(4, 8).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(4, 8).setForeground(QBrush(적색))
        else:
            pass

    def gold_node_coloring(self):

        self.tableWidget_cme.item(5, 1).setBackground(QBrush(흰색))
        self.tableWidget_cme.item(5, 1).setForeground(QBrush(검정색))
        self.tableWidget_cme.item(5, 2).setBackground(QBrush(흰색))
        self.tableWidget_cme.item(5, 2).setForeground(QBrush(검정색))
        self.tableWidget_cme.item(5, 3).setBackground(QBrush(흰색))
        self.tableWidget_cme.item(5, 3).setForeground(QBrush(검정색))
        self.tableWidget_cme.item(5, 4).setBackground(QBrush(흰색))
        self.tableWidget_cme.item(5, 4).setForeground(QBrush(검정색))
        self.tableWidget_cme.item(5, 5).setBackground(QBrush(흰색))
        self.tableWidget_cme.item(5, 5).setForeground(QBrush(검정색))
        self.tableWidget_cme.item(5, 6).setBackground(QBrush(흰색))
        self.tableWidget_cme.item(5, 6).setForeground(QBrush(검정색))
        self.tableWidget_cme.item(5, 8).setBackground(QBrush(흰색))
        self.tableWidget_cme.item(5, 8).setForeground(QBrush(검정색))

        if GOLD_전저 - 0.1 * 5 <= GOLD_저가 <= GOLD_전저 + 0.1 * 5:
            self.tableWidget_cme.item(5, 1).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(5, 1).setForeground(QBrush(적색))
            self.tableWidget_cme.item(5, 6).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(5, 6).setForeground(QBrush(적색))
        else:
            pass

        if GOLD_전고 - 0.1 * 5 <= GOLD_저가 <= GOLD_전고 + 0.1 * 5:
            self.tableWidget_cme.item(5, 2).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(5, 2).setForeground(QBrush(적색))
            self.tableWidget_cme.item(5, 6).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(5, 6).setForeground(QBrush(적색))
        else:
            pass

        if GOLD_전일종가 - 0.1 * 5 <= GOLD_저가 <= GOLD_전일종가 + 0.1 * 5:
            self.tableWidget_cme.item(5, 3).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(5, 3).setForeground(QBrush(적색))
            self.tableWidget_cme.item(5, 6).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(5, 6).setForeground(QBrush(적색))
        else:
            pass

        if GOLD_피봇 - 0.1 * 5 <= GOLD_저가 <= GOLD_피봇 + 0.1 * 5:
            self.tableWidget_cme.item(5, 4).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(5, 4).setForeground(QBrush(적색))
            self.tableWidget_cme.item(5, 6).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(5, 6).setForeground(QBrush(적색))
        else:
            pass

        if GOLD_시가 - 0.1 * 5 <= GOLD_저가 <= GOLD_시가 + 0.1 * 5:
            self.tableWidget_cme.item(5, 5).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(5, 5).setForeground(QBrush(적색))
            self.tableWidget_cme.item(5, 6).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(5, 6).setForeground(QBrush(적색))
        else:
            pass

        if GOLD_전저 - 0.1 * 5 <= GOLD_고가 <= GOLD_전저 + 0.1 * 5:
            self.tableWidget_cme.item(5, 1).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(5, 1).setForeground(QBrush(적색))
            self.tableWidget_cme.item(5, 8).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(5, 8).setForeground(QBrush(적색))
        else:
            pass

        if GOLD_전고 - 0.1 * 5 <= GOLD_고가 <= GOLD_전고 + 0.1 * 5:
            self.tableWidget_cme.item(5, 2).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(5, 2).setForeground(QBrush(적색))
            self.tableWidget_cme.item(5, 8).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(5, 8).setForeground(QBrush(적색))
        else:
            pass

        if GOLD_전일종가 - 0.1 * 5 <= GOLD_고가 <= GOLD_전일종가 + 0.1 * 5:
            self.tableWidget_cme.item(5, 3).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(5, 3).setForeground(QBrush(적색))
            self.tableWidget_cme.item(5, 8).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(5, 8).setForeground(QBrush(적색))
        else:
            pass

        if GOLD_피봇 - 0.1 * 5 <= GOLD_고가 <= GOLD_피봇 + 0.1 * 5:
            self.tableWidget_cme.item(5, 4).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(5, 4).setForeground(QBrush(적색))
            self.tableWidget_cme.item(5, 8).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(5, 8).setForeground(QBrush(적색))
        else:
            pass

        if GOLD_시가 - 0.1 * 5 <= GOLD_고가 <= GOLD_시가 + 0.1 * 5:
            self.tableWidget_cme.item(5, 5).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(5, 5).setForeground(QBrush(적색))
            self.tableWidget_cme.item(5, 8).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(5, 8).setForeground(QBrush(적색))
        else:
            pass

    def euro_node_coloring(self):

        self.tableWidget_cme.item(6, 1).setBackground(QBrush(흰색))
        self.tableWidget_cme.item(6, 1).setForeground(QBrush(검정색))
        self.tableWidget_cme.item(6, 2).setBackground(QBrush(흰색))
        self.tableWidget_cme.item(6, 2).setForeground(QBrush(검정색))
        self.tableWidget_cme.item(6, 3).setBackground(QBrush(흰색))
        self.tableWidget_cme.item(6, 3).setForeground(QBrush(검정색))
        self.tableWidget_cme.item(6, 4).setBackground(QBrush(흰색))
        self.tableWidget_cme.item(6, 4).setForeground(QBrush(검정색))
        self.tableWidget_cme.item(6, 5).setBackground(QBrush(흰색))
        self.tableWidget_cme.item(6, 5).setForeground(QBrush(검정색))
        self.tableWidget_cme.item(6, 6).setBackground(QBrush(흰색))
        self.tableWidget_cme.item(6, 6).setForeground(QBrush(검정색))
        self.tableWidget_cme.item(6, 8).setBackground(QBrush(흰색))
        self.tableWidget_cme.item(6, 8).setForeground(QBrush(검정색))

        if EURO_전저 - 0.00005 * 5 <= EURO_저가 <= EURO_전저 + 0.00005 * 5:
            self.tableWidget_cme.item(6, 1).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(6, 1).setForeground(QBrush(적색))
            self.tableWidget_cme.item(6, 6).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(6, 6).setForeground(QBrush(적색))
        else:
            pass

        if EURO_전고 - 0.00005 * 5 <= EURO_저가 <= EURO_전고 + 0.00005 * 5:
            self.tableWidget_cme.item(6, 2).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(6, 2).setForeground(QBrush(적색))
            self.tableWidget_cme.item(6, 6).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(6, 6).setForeground(QBrush(적색))
        else:
            pass

        if EURO_전일종가 - 0.00005 * 5 <= EURO_저가 <= EURO_전일종가 + 0.00005 * 5:
            self.tableWidget_cme.item(6, 3).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(6, 3).setForeground(QBrush(적색))
            self.tableWidget_cme.item(6, 6).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(6, 6).setForeground(QBrush(적색))
        else:
            pass

        if EURO_피봇 - 0.00005 * 5 <= EURO_저가 <= EURO_피봇 + 0.00005 * 5:
            self.tableWidget_cme.item(6, 4).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(6, 4).setForeground(QBrush(적색))
            self.tableWidget_cme.item(6, 6).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(6, 6).setForeground(QBrush(적색))
        else:
            pass

        if EURO_시가 - 0.00005 * 5 <= EURO_저가 <= EURO_시가 + 0.00005 * 5:
            self.tableWidget_cme.item(6, 5).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(6, 5).setForeground(QBrush(적색))
            self.tableWidget_cme.item(6, 6).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(6, 6).setForeground(QBrush(적색))
        else:
            pass

        if EURO_전저 - 0.00005 * 5 <= EURO_고가 <= EURO_전저 + 0.00005 * 5:
            self.tableWidget_cme.item(6, 1).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(6, 1).setForeground(QBrush(적색))
            self.tableWidget_cme.item(6, 8).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(6, 8).setForeground(QBrush(적색))
        else:
            pass

        if EURO_전고 - 0.00005 * 5 <= EURO_고가 <= EURO_전고 + 0.00005 * 5:
            self.tableWidget_cme.item(6, 2).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(6, 2).setForeground(QBrush(적색))
            self.tableWidget_cme.item(6, 8).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(6, 8).setForeground(QBrush(적색))
        else:
            pass

        if EURO_전일종가 - 0.00005 * 5 <= EURO_고가 <= EURO_전일종가 + 0.00005 * 5:
            self.tableWidget_cme.item(6, 3).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(6, 3).setForeground(QBrush(적색))
            self.tableWidget_cme.item(6, 8).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(6, 8).setForeground(QBrush(적색))
        else:
            pass

        if EURO_피봇 - 0.00005 * 5 <= EURO_고가 <= EURO_피봇 + 0.00005 * 5:
            self.tableWidget_cme.item(6, 4).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(6, 4).setForeground(QBrush(적색))
            self.tableWidget_cme.item(6, 8).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(6, 8).setForeground(QBrush(적색))
        else:
            pass

        if EURO_시가 - 0.00005 * 5 <= EURO_고가 <= EURO_시가 + 0.00005 * 5:
            self.tableWidget_cme.item(6, 5).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(6, 5).setForeground(QBrush(적색))
            self.tableWidget_cme.item(6, 8).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(6, 8).setForeground(QBrush(적색))
        else:
            pass

    def yen_node_coloring(self):

        self.tableWidget_cme.item(7, 1).setBackground(QBrush(흰색))
        self.tableWidget_cme.item(7, 1).setForeground(QBrush(검정색))
        self.tableWidget_cme.item(7, 2).setBackground(QBrush(흰색))
        self.tableWidget_cme.item(7, 2).setForeground(QBrush(검정색))
        self.tableWidget_cme.item(7, 3).setBackground(QBrush(흰색))
        self.tableWidget_cme.item(7, 3).setForeground(QBrush(검정색))
        self.tableWidget_cme.item(7, 4).setBackground(QBrush(흰색))
        self.tableWidget_cme.item(7, 4).setForeground(QBrush(검정색))
        self.tableWidget_cme.item(7, 5).setBackground(QBrush(흰색))
        self.tableWidget_cme.item(7, 5).setForeground(QBrush(검정색))
        self.tableWidget_cme.item(7, 6).setBackground(QBrush(흰색))
        self.tableWidget_cme.item(7, 6).setForeground(QBrush(검정색))
        self.tableWidget_cme.item(7, 8).setBackground(QBrush(흰색))
        self.tableWidget_cme.item(7, 8).setForeground(QBrush(검정색))

        if YEN_전저 - 0.5 * 5 <= YEN_저가 <= YEN_전저 + 0.5 * 5:
            self.tableWidget_cme.item(7, 1).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(7, 1).setForeground(QBrush(적색))
            self.tableWidget_cme.item(7, 6).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(7, 6).setForeground(QBrush(적색))
        else:
            pass

        if YEN_전고 - 0.5 * 5 <= YEN_저가 <= YEN_전고 + 0.5 * 5:
            self.tableWidget_cme.item(7, 2).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(7, 2).setForeground(QBrush(적색))
            self.tableWidget_cme.item(7, 6).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(7, 6).setForeground(QBrush(적색))
        else:
            pass

        if YEN_전일종가 - 0.5 * 5 <= YEN_저가 <= YEN_전일종가 + 0.5 * 5:
            self.tableWidget_cme.item(7, 3).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(7, 3).setForeground(QBrush(적색))
            self.tableWidget_cme.item(7, 6).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(7, 6).setForeground(QBrush(적색))
        else:
            pass

        if YEN_피봇 - 0.5 * 5 <= YEN_저가 <= YEN_피봇 + 0.5 * 5:
            self.tableWidget_cme.item(7, 4).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(7, 4).setForeground(QBrush(적색))
            self.tableWidget_cme.item(7, 6).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(7, 6).setForeground(QBrush(적색))
        else:
            pass

        if YEN_시가 - 0.5 * 5 <= YEN_저가 <= YEN_시가 + 0.5 * 5:
            self.tableWidget_cme.item(7, 5).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(7, 5).setForeground(QBrush(적색))
            self.tableWidget_cme.item(7, 6).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(7, 6).setForeground(QBrush(적색))
        else:
            pass

        if YEN_전저 - 0.5 * 5 <= YEN_고가 <= YEN_전저 + 0.5 * 5:
            self.tableWidget_cme.item(7, 1).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(7, 1).setForeground(QBrush(적색))
            self.tableWidget_cme.item(7, 8).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(7, 8).setForeground(QBrush(적색))
        else:
            pass

        if YEN_전고 - 0.5 * 5 <= YEN_고가 <= YEN_전고 + 0.5 * 5:
            self.tableWidget_cme.item(7, 2).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(7, 2).setForeground(QBrush(적색))
            self.tableWidget_cme.item(7, 8).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(7, 8).setForeground(QBrush(적색))
        else:
            pass

        if YEN_전일종가 - 0.5 * 5 <= YEN_고가 <= YEN_전일종가 + 0.5 * 5:
            self.tableWidget_cme.item(7, 3).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(7, 3).setForeground(QBrush(적색))
            self.tableWidget_cme.item(7, 8).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(7, 8).setForeground(QBrush(적색))
        else:
            pass

        if YEN_피봇 - 0.5 * 5 <= YEN_고가 <= YEN_피봇 + 0.5 * 5:
            self.tableWidget_cme.item(7, 4).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(7, 4).setForeground(QBrush(적색))
            self.tableWidget_cme.item(7, 8).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(7, 8).setForeground(QBrush(적색))
        else:
            pass

        if YEN_시가 - 0.5 * 5 <= YEN_고가 <= YEN_시가 + 0.5 * 5:
            self.tableWidget_cme.item(7, 5).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(7, 5).setForeground(QBrush(적색))
            self.tableWidget_cme.item(7, 8).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(7, 8).setForeground(QBrush(적색))
        else:
            pass
    
    def adi_node_coloring(self):

        self.tableWidget_cme.item(8, 1).setBackground(QBrush(흰색))
        self.tableWidget_cme.item(8, 1).setForeground(QBrush(검정색))
        self.tableWidget_cme.item(8, 2).setBackground(QBrush(흰색))
        self.tableWidget_cme.item(8, 2).setForeground(QBrush(검정색))
        self.tableWidget_cme.item(8, 3).setBackground(QBrush(흰색))
        self.tableWidget_cme.item(8, 3).setForeground(QBrush(검정색))
        self.tableWidget_cme.item(8, 4).setBackground(QBrush(흰색))
        self.tableWidget_cme.item(8, 4).setForeground(QBrush(검정색))
        self.tableWidget_cme.item(8, 5).setBackground(QBrush(흰색))
        self.tableWidget_cme.item(8, 5).setForeground(QBrush(검정색))
        self.tableWidget_cme.item(8, 6).setBackground(QBrush(흰색))
        self.tableWidget_cme.item(8, 6).setForeground(QBrush(검정색))
        self.tableWidget_cme.item(8, 8).setBackground(QBrush(흰색))
        self.tableWidget_cme.item(8, 8).setForeground(QBrush(검정색))

        if ADI_전저 - 0.00005 * 5 <= ADI_저가 <= ADI_전저 + 0.00005 * 5:
            self.tableWidget_cme.item(8, 1).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(8, 1).setForeground(QBrush(적색))
            self.tableWidget_cme.item(8, 6).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(8, 6).setForeground(QBrush(적색))
        else:
            pass

        if ADI_전고 - 0.00005 * 5 <= ADI_저가 <= ADI_전고 + 0.00005 * 5:
            self.tableWidget_cme.item(8, 2).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(8, 2).setForeground(QBrush(적색))
            self.tableWidget_cme.item(8, 6).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(8, 6).setForeground(QBrush(적색))
        else:
            pass

        if ADI_전일종가 - 0.00005 * 5 <= ADI_저가 <= ADI_전일종가 + 0.00005 * 5:
            self.tableWidget_cme.item(8, 3).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(8, 3).setForeground(QBrush(적색))
            self.tableWidget_cme.item(8, 6).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(8, 6).setForeground(QBrush(적색))
        else:
            pass

        if ADI_피봇 - 0.00005 * 5 <= ADI_저가 <= ADI_피봇 + 0.00005 * 5:
            self.tableWidget_cme.item(8, 4).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(8, 4).setForeground(QBrush(적색))
            self.tableWidget_cme.item(8, 6).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(8, 6).setForeground(QBrush(적색))
        else:
            pass

        if ADI_시가 - 0.00005 * 5 <= ADI_저가 <= ADI_시가 + 0.00005 * 5:
            self.tableWidget_cme.item(8, 5).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(8, 5).setForeground(QBrush(적색))
            self.tableWidget_cme.item(8, 6).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(8, 6).setForeground(QBrush(적색))
        else:
            pass

        if ADI_전저 - 0.00005 * 5 <= ADI_고가 <= ADI_전저 + 0.00005 * 5:
            self.tableWidget_cme.item(8, 1).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(8, 1).setForeground(QBrush(적색))
            self.tableWidget_cme.item(8, 8).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(8, 8).setForeground(QBrush(적색))
        else:
            pass

        if ADI_전고 - 0.00005 * 5 <= ADI_고가 <= ADI_전고 + 0.00005 * 5:
            self.tableWidget_cme.item(8, 2).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(8, 2).setForeground(QBrush(적색))
            self.tableWidget_cme.item(8, 8).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(8, 8).setForeground(QBrush(적색))
        else:
            pass

        if ADI_전일종가 - 0.00005 * 5 <= ADI_고가 <= ADI_전일종가 + 0.00005 * 5:
            self.tableWidget_cme.item(8, 3).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(8, 3).setForeground(QBrush(적색))
            self.tableWidget_cme.item(8, 8).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(8, 8).setForeground(QBrush(적색))
        else:
            pass

        if ADI_피봇 - 0.00005 * 5 <= ADI_고가 <= ADI_피봇 + 0.00005 * 5:
            self.tableWidget_cme.item(8, 4).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(8, 4).setForeground(QBrush(적색))
            self.tableWidget_cme.item(8, 8).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(8, 8).setForeground(QBrush(적색))
        else:
            pass

        if ADI_시가 - 0.00005 * 5 <= ADI_고가 <= ADI_시가 + 0.00005 * 5:
            self.tableWidget_cme.item(8, 5).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(8, 5).setForeground(QBrush(적색))
            self.tableWidget_cme.item(8, 8).setBackground(QBrush(대맥점색))
            self.tableWidget_cme.item(8, 8).setForeground(QBrush(적색))
        else:
            pass
    
    #####################################################################################################################################################################
    # 메뉴
    #####################################################################################################################################################################    
    def MENU_Action(self, qaction):

        dt = datetime.now()

        logger.debug("Action Slot %s %s " % (qaction.objectName(), qaction.text()))
        _action = qaction.objectName()

        # 로그인
        if _action == "actionLogin":
            self.LoginThread()

        # 로그아웃
        if _action == "actionLogout":
            self.xing.main_connection.disconnect()
            self.statusbar.showMessage("접속종료 되었습니다.")             

        # 계좌정보 조회
        '''
        if _action == "actionAccountDialog":
            if self.dialog.get('계좌정보조회') is not None:
                try:
                    self.dialog['계좌정보조회'].show()
                except Exception as e:
                    self.dialog['계좌정보조회'] = 화면_계좌정보(parent=self)
                    self.dialog['계좌정보조회'].show()
            else:
                self.dialog['계좌정보조회'] = 화면_계좌정보(parent=self)
                self.dialog['계좌정보조회'].show()
        '''
        # 종료
        if _action == "actionExit":
            self.xing.main_connection.disconnect()
            self.close() 
        
        # 옵션전광판
        if _action == "actionScoreBoard":
            
            if self.dialog.get('선물옵션전광판') is not None:

                txt = '[{0:02d}:{1:02d}:{2:02d}] Score Board를 다시 오픈합니다...\r'.format(dt.hour, dt.minute, dt.second)
                self.textBrowser.append(txt)

                try:
                    self.dialog['선물옵션전광판'].show()
                except Exception as e:
                    self.dialog['선물옵션전광판'] = 화면_선물옵션전광판(parent=self)
                    self.dialog['선물옵션전광판'].show()
            else:                
                txt = '[{0:02d}:{1:02d}:{2:02d}] Score Board를 Open합니다...\r'.format(dt.hour, dt.minute, dt.second)
                self.textBrowser.append(txt)

                self.dialog['선물옵션전광판'] = 화면_선물옵션전광판(parent=self)
                self.dialog['선물옵션전광판'].show()

        # Sky Chart
        if _action == "actionBigChart":
            
            if self.dialog.get('SkyChart') is not None:

                try:
                    txt = '[{0:02d}:{1:02d}:{2:02d}] Sky Chart를 Open합니다...\r'.format(dt.hour, dt.minute, dt.second)
                    self.textBrowser.append(txt)

                    self.dialog['SkyChart'].show()
                except Exception as e:
                    self.dialog['SkyChart'] = 화면_SkyChart(parent=self)
                    self.dialog['SkyChart'].show()
            else:
                self.dialog['SkyChart'] = 화면_SkyChart(parent=self)
                self.dialog['SkyChart'].show()

                txt = '[{0:02d}:{1:02d}:{2:02d}] Sky Chart를 Open합니다...\r'.format(dt.hour, dt.minute, dt.second)
                self.textBrowser.append(txt)

        # 설정(추후 구현)
        if _action == "actionRealTimeItem":
            
            if self.dialog.get('RealTimeItem') is not None:

                try:
                    txt = '[{0:02d}:{1:02d}:{2:02d}] RealTime Item를 표시합니다...\r'.format(dt.hour, dt.minute, dt.second)
                    self.textBrowser.append(txt)

                    self.dialog['RealTimeItem'].show()
                except Exception as e:
                    self.dialog['RealTimeItem'] = 화면_RealTimeItem(parent=self)
                    self.dialog['RealTimeItem'].show()
            else:
                self.dialog['RealTimeItem'] = 화면_RealTimeItem(parent=self)
                self.dialog['RealTimeItem'].show()

                txt = '[{0:02d}:{1:02d}:{2:02d}] RealTime Item를 Open합니다...\r'.format(dt.hour, dt.minute, dt.second)
                self.textBrowser.append(txt)
        
        '''
        # 사용법
        if _action == "actionMustRead":
            print('must read...')
            pass
            #webbrowser.open('https://thinkpoolost.wixsite.com/moneybot')

        if _action == "actionUsage":
            pass
            #webbrowser.open('https://docs.google.com/document/d/1BGENxWqJyZdihQFuWcmTNy3_4J0kHolCc-qcW3RULzs/edit')
        '''

        if _action == "actionVersion":
            if self.dialog.get('Version') is not None:
                try:
                    self.dialog['Version'].show()
                except Exception as e:
                    self.dialog['Version'] = 화면_버전(parent=self)
                    self.dialog['Version'].show()
            else:
                self.dialog['Version'] = 화면_버전(parent=self)
                self.dialog['Version'].show()
    
    #####################################################################################################################################################################
    # 툴바
    #####################################################################################################################################################################
    def TOOLBAR_Action(self, qaction):

        dt = datetime.now()

        logger.debug("ToolBar Action Slot %s %s " % (qaction.objectName(), qaction.text()))
        _action = qaction.objectName()

        # 전광판
        if _action == "action_ToolBar_ScoreBoard":
            
            if self.dialog.get('선물옵션전광판') is not None:

                try:
                    txt = '[{0:02d}:{1:02d}:{2:02d}] Score Board Dialog를 표시합니다...\r'.format(dt.hour, dt.minute, dt.second)
                    #self.textBrowser.append(txt)

                    self.dialog['선물옵션전광판'].show()
                except Exception as e:
                    self.dialog['선물옵션전광판'] = 화면_선물옵션전광판(parent=self)
                    self.dialog['선물옵션전광판'].show()
            else:
                self.dialog['선물옵션전광판'] = 화면_선물옵션전광판(parent=self)
                self.dialog['선물옵션전광판'].show()

                txt = '[{0:02d}:{1:02d}:{2:02d}] Score Board Dialog를 Open합니다...\r'.format(dt.hour, dt.minute, dt.second)
                self.textBrowser.append(txt)
        
        # Sky Chart
        if _action == "action_ToolBar_BigChart":
            
            if self.dialog.get('SkyChart') is not None:

                try:
                    txt = '[{0:02d}:{1:02d}:{2:02d}] Sky Chart를 표시합니다...\r'.format(dt.hour, dt.minute, dt.second)
                    self.textBrowser.append(txt)
                    print(txt)

                    self.dialog['SkyChart'].show()
                    
                except Exception as e:
                    self.dialog['SkyChart'] = 화면_SkyChart(parent=self)
                    self.dialog['SkyChart'].show()
            else:
                self.dialog['SkyChart'] = 화면_SkyChart(parent=self)
                self.dialog['SkyChart'].show()

                txt = '[{0:02d}:{1:02d}:{2:02d}] Sky Chart를 Open합니다...\r'.format(dt.hour, dt.minute, dt.second)
                self.textBrowser.append(txt)

        # 실시간요청 설정
        if _action == "action_ToolBar_RealTime_Setting":
            
            if self.dialog.get('RealTimeItem') is not None:

                try:
                    txt = '[{0:02d}:{1:02d}:{2:02d}] 실시간요청 설정 Dialog를 표시합니다...\r'.format(dt.hour, dt.minute, dt.second)
                    #self.textBrowser.append(txt)

                    self.dialog['RealTimeItem'].show()
                except Exception as e:
                    self.dialog['RealTimeItem'] = 화면_RealTimeItem(parent=self)
                    self.dialog['RealTimeItem'].show()
            else:
                self.dialog['RealTimeItem'] = 화면_RealTimeItem(parent=self)
                self.dialog['RealTimeItem'].show()

                #txt = '[{0:02d}:{1:02d}:{2:02d}] 실시간요청 설정 Dialog를 Open합니다...\r'.format(dt.hour, dt.minute, dt.second)
                #self.textBrowser.append(txt)
    
    def closeEvent(self,event):

        global main_close_event

        dt = datetime.now()

        main_close_event = QMessageBox.question(self,"프로그램 종료"," SkyBot을 종료하시겠습니까 ? ", QMessageBox.Yes | QMessageBox.No)

        if main_close_event == QMessageBox.Yes:

            event.accept()

            if self.dialog['선물옵션전광판'] is not None:

                if self.dialog['선물옵션전광판'].flag_score_board_open:
                    self.dialog['선물옵션전광판'].KillScoreBoardAllThread()
                else:
                    pass

                if not MULTIPROCESS:
                    print('모든 실시간요청 취소...')
                    self.realtime_thread_dataworker.CancelAllRealData()

                    QTest.qWait(100)
                    
                    print('서버연결 해지...')
                    self.xing.main_connection.disconnect()
                    
                    print('쓰레드 종료...')
                    self.realtime_thread_dataworker.terminate()
                else:
                    pass
            else:
                pass

            if self.dialog['SkyChart'] is not None:

                if self.dialog['SkyChart'].flag_big_chart_open:

                    if self.dialog['SkyChart'].timer1.isActive():
                        self.dialog['SkyChart'].timer1.stop()

                    if self.dialog['SkyChart'].timer2.isActive():
                        self.dialog['SkyChart'].timer2.stop()

                    if self.dialog['SkyChart'].timer3.isActive():
                        self.dialog['SkyChart'].timer3.stop()

                    if self.dialog['SkyChart'].timer4.isActive():
                        self.dialog['SkyChart'].timer4.stop()

                    if self.dialog['SkyChart'].timer5.isActive():
                        self.dialog['SkyChart'].timer5.stop()

                    if self.dialog['SkyChart'].timer6.isActive():
                        self.dialog['SkyChart'].timer6.stop()

                    self.dialog['SkyChart'].close()
                else:
                    pass
            else:
                print('BigChart 다이얼로그가 없습니다.')

            if self.dialog['RealTimeItem'] is not None:

                del self.dialog['RealTimeItem']
            else:
                pass

            logger.info("*************************************************************************************************************************")
            logger.info("LOG STOP")

            if MULTIPROCESS and flag_internet:

                if FUTURES_REQUEST:
                    self.realtime_futures_dataworker.terminate()

                if OPTION_TICK_REQUEST:
                    self.realtime_option_tick_dataworker.terminate()

                if OPTION_QUOTE_REQUEST:
                    self.realtime_option_quote_dataworker.terminate()

                if OVC_REQUEST:
                    self.realtime_ovc_dataworker.terminate()

                QTest.qWait(10)                  

                if FUTURES_REQUEST:
                    futures_process.terminate()

                if OPTION_TICK_REQUEST:
                    option_tick_process.terminate()

                if OPTION_QUOTE_REQUEST:
                    option_quote_process.terminate()

                if OVC_REQUEST:
                    ovc_process.terminate()                

                print('모든 멀티프로세스 쓰레드 종료...')                             
            else:
                pass

            if TARGET_MONTH == 'CM':
                
                if window.id == 'soojin65':
                    txt = '[{0:02d}:{1:02d}:{2:02d}] ***님이 로그아웃 했습니다.'.format(dt.hour, dt.minute, dt.second)
                else:
                    txt = '[{0:02d}:{1:02d}:{2:02d}] {3}님이 로그아웃 했습니다.'.format(dt.hour, dt.minute, dt.second, window.id)
                
                #ToMyTelegram(txt)
            else:
                pass            

            if self.speaker.isRunning():
                self.speaker.terminate()
                print('TTS Speaker is terminated at Main Window...')
            else:
                pass

            self.xing.clock.stop()
            self.xing.main_connection.disconnect()

            QTest.qWait(10) 

            txt = '[{0:02d}:{1:02d}:{2:02d}] Main Window를 종료합니다.\r'.format(dt.hour, dt.minute, dt.second)
            self.textBrowser.append(txt)
            print(txt)            

            self.close()
        else:
            event.ignore()   
        
    def __del__(self):
                
        print('SkyBot 객체가 소멸됩니다.')
    
#####################################################################################################################################################################
# Main
#####################################################################################################################################################################
if __name__ == "__main__":

    global flag_internet

    # 인터넷 연결확인
    ipaddress = socket.gethostbyname(socket.gethostname())

    if ipaddress == '127.0.0.1':
        flag_internet = False
        Speak('인터넷 연결을 확인해주세요.')
        sys.exit(0)
    else:
        flag_internet = True    

    # 멀티프로세스
    if MULTIPROCESS and flag_internet:

        import multiprocessing as mp
        from datetime import datetime
        from multiprocessing import Process, get_context
        from multiprocessing.queues import Queue
        from xing_tick_writer import *                    

        # pyinstaller로 실행파일 만들때 필요함
        mp.freeze_support()

        main_proc = mp.current_process()
        print(f'\r메인 Process Name = {main_proc.name}, Process ID = {main_proc.pid}')
        
        mp.set_start_method('spawn')
        #ctx = mp.get_context('spawn')

        if FUTURES_REQUEST:

            futuresQ = mp.Queue()

            KOSPI_QUOTE = False               # 코스피 전종목 호가
            KOSPI_TICK = True                 # 코스피 전종목 체결
            KOSDAQ_QUOTE = False              # 코스닥 전종목 호가
            KOSDAQ_TICK = True                # 코스닥 전종목 체결

            INDEX_FUTURES_QUOTE = True        # 지수선물 전종목 호가
            INDEX_FUTURES_TICK = True         # 지수선물 전종목 체결

            futures_process = mp.Process(target=futures_crawler, args=(futuresQ, main_proc.pid, MP_FUT_HIGH_SPEED_MODE, INDEX_FUTURES_QUOTE, INDEX_FUTURES_TICK), daemon=True)
            futures_process.start()            
        
        if OPTION_TICK_REQUEST:

            option_tickQ = mp.Queue()            

            if TARGET_MONTH == 'CM':

                if MANGI_YAGAN:
                    INDEX_OPTION_CM_TICK = False
                    INDEX_OPTION_NM_TICK = True               
                else:                
                    INDEX_OPTION_CM_TICK = True       # 지수옵션 근월물 전종목 체결
                    INDEX_OPTION_NM_TICK = False      # 지수옵션 차월물 전종목 체결              
                
            elif TARGET_MONTH == 'NM':

                INDEX_OPTION_CM_TICK = False
                INDEX_OPTION_NM_TICK = True          
            else:
                INDEX_OPTION_CM_TICK = False
                INDEX_OPTION_NM_TICK = False

            option_tick_process = mp.Process(target=option_tick_crawler, args=(option_tickQ, main_proc.pid, MP_OPTION_HIGH_SPEED_MODE, CALL_ITM_REQUEST_NUMBER, CALL_OTM_REQUEST_NUMBER, PUT_ITM_REQUEST_NUMBER, PUT_OTM_REQUEST_NUMBER, INDEX_OPTION_CM_TICK, INDEX_OPTION_NM_TICK), daemon=True)
            option_tick_process.start()

        if OPTION_QUOTE_REQUEST:

            option_quoteQ = mp.Queue()

            QUOTE_REQUEST_NUMBER = OPTION_PAIRS_QUOTE_REQUEST_NUMBER

            if TARGET_MONTH == 'CM':                

                if MANGI_YAGAN:
                    INDEX_OPTION_CM_QUOTE = False
                    INDEX_OPTION_NM_QUOTE = True                
                else:
                    INDEX_OPTION_CM_QUOTE = True      # 지수옵션 근월물 전종목 호가
                    INDEX_OPTION_NM_QUOTE = False     # 지수옵션 차월물 전종목 호가                
                
            elif TARGET_MONTH == 'NM':

                INDEX_OPTION_CM_QUOTE = False
                INDEX_OPTION_NM_QUOTE = True             
            else:
                INDEX_OPTION_CM_QUOTE = False      
                INDEX_OPTION_NM_QUOTE = False

            option_quote_process = mp.Process(target=option_quote_crawler, args=(option_quoteQ, main_proc.pid, MP_OPTION_HIGH_SPEED_MODE, QUOTE_REQUEST_NUMBER, QUOTE_REQUEST_NUMBER, QUOTE_REQUEST_NUMBER, QUOTE_REQUEST_NUMBER, INDEX_OPTION_CM_QUOTE, INDEX_OPTION_NM_QUOTE), daemon=True)
            option_quote_process.start()

        if OVC_REQUEST:
            
            ovcQ = mp.Queue()
            ovc_process = mp.Process(target=ovc_crawler, args=(ovcQ, main_proc.pid, MP_CME_HIGH_SPEED_MODE), daemon=True)
            ovc_process.start()
    else:
        # 멀티프로세스가 아닌 경우
        if flag_internet:
            from XAReals import *
    
    # TTS test...
    if flag_tts:
        #Speak('근월물 하향 변동성 출현')
        '''
        text ="Welcome to SkyBot"
        tts = gTTS(text=text, lang='en')
        tts.save("tts.mp3")
        playsound("tts.mp3")
        '''
        pass
    else:
        pass
    
    # 1.로그 인스턴스를 만든다.
    logger = logging.getLogger('skybot')
    # 2.formatter를 만든다.
    formatter = logging.Formatter('[%(levelname)s|%(filename)s:%(lineno)s]%(asctime)s>%(message)s')

    loggerLevel = Logging_Level

    # 스트림과 파일로 로그를 출력하는 핸들러를 각각 만든다.
    filehandler = logging.FileHandler(log_filename)
    streamhandler = logging.StreamHandler()

    # 각 핸들러에 formatter를 지정한다.
    filehandler.setFormatter(formatter)
    streamhandler.setFormatter(formatter)

    # 로그 인스턴스에 스트림 핸들러와 파일 핸들러를 붙인다.
    logger.addHandler(filehandler)
    logger.addHandler(streamhandler)
    logger.setLevel(loggerLevel)
    logger.info("=============================================================================")
    logger.info("LOG START")
    
    app = QApplication(sys.argv)
    app.setQuitOnLastWindowClosed(True)
    
    if DARK_STYLESHEET:    
        dark_stylesheet = qdarkstyle.load_stylesheet_pyqt5()
        app.setStyleSheet(dark_stylesheet)
        #app.setPalette(DarkPalette())
    else:
        pass
    
    if TARGET_MONTH == 'NM':
        txt = '마우스 위치를 X = {0}, Y = {1} 위치로 이동합니다.\r'.format(SECOND_DISPLAY_X_POSITION, SECOND_DISPLAY_Y_POSITION)
        print(txt)            
        pyautogui.moveTo(SECOND_DISPLAY_X_POSITION, SECOND_DISPLAY_Y_POSITION)
    else:
        pass
    
    if MULTIPROCESS and flag_internet:

        if FUTURES_REQUEST and not OPTION_TICK_REQUEST and not OPTION_QUOTE_REQUEST and not OVC_REQUEST:
            window = MainWindow(futuresQ)
        elif not FUTURES_REQUEST and OPTION_TICK_REQUEST and not OPTION_QUOTE_REQUEST and not OVC_REQUEST:
            window = MainWindow(option_tickQ)
        elif not FUTURES_REQUEST and not OPTION_TICK_REQUEST and OPTION_QUOTE_REQUEST and not OVC_REQUEST:
            window = MainWindow(option_quoteQ)
        elif not FUTURES_REQUEST and not OPTION_TICK_REQUEST and not OPTION_QUOTE_REQUEST and OVC_REQUEST:
            window = MainWindow(ovcQ)
        elif FUTURES_REQUEST and OPTION_TICK_REQUEST and not OPTION_QUOTE_REQUEST and not OVC_REQUEST:
            window = MainWindow(futuresQ, option_tickQ)
        elif FUTURES_REQUEST and not OPTION_TICK_REQUEST and not OPTION_QUOTE_REQUEST and OVC_REQUEST:
            window = MainWindow(futuresQ, ovcQ)
        elif FUTURES_REQUEST and OPTION_TICK_REQUEST and OPTION_QUOTE_REQUEST and not OVC_REQUEST:
            window = MainWindow(futuresQ, option_tickQ, option_quoteQ)
        elif FUTURES_REQUEST and OPTION_TICK_REQUEST and not OPTION_QUOTE_REQUEST and OVC_REQUEST:
            window = MainWindow(futuresQ, option_tickQ, ovcQ)
        elif FUTURES_REQUEST and OPTION_TICK_REQUEST and OPTION_QUOTE_REQUEST and OVC_REQUEST:
            window = MainWindow(futuresQ, option_tickQ, option_quoteQ, ovcQ)
        else:
            Speak('지원하지 않는 선택지 입니다.')
    else:
        window = MainWindow()

    window.show()
    sys.exit(app.exec_())